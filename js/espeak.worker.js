

var Module;

if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'js/espeak.worker.data';
    var REMOTE_PACKAGE_BASE = 'espeak.worker.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'espeak-data', true, true);
Module['FS_createPath']('/espeak-data', 'voices', true, true);
Module['FS_createPath']('/espeak-data/voices', 'other', true, true);
Module['FS_createPath']('/espeak-data/voices', '!v', true, true);
Module['FS_createPath']('/espeak-data/voices', 'asia', true, true);
Module['FS_createPath']('/espeak-data/voices', 'europe', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      },
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_js/espeak.worker.data');

    };
    Module['addRunDependency']('datafile_js/espeak.worker.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 7438, "filename": "/espeak-data/vi_dict"}, {"audio": 0, "start": 7438, "crunched": 0, "end": 8662, "filename": "/espeak-data/intonations"}, {"audio": 0, "start": 8662, "crunched": 0, "end": 30483, "filename": "/espeak-data/de_dict"}, {"audio": 0, "start": 30483, "crunched": 0, "end": 238980, "filename": "/espeak-data/da_dict"}, {"audio": 0, "start": 238980, "crunched": 0, "end": 241037, "filename": "/espeak-data/jbo_dict"}, {"audio": 0, "start": 241037, "crunched": 0, "end": 327317, "filename": "/espeak-data/it_dict"}, {"audio": 0, "start": 327317, "crunched": 0, "end": 336323, "filename": "/espeak-data/hi_dict"}, {"audio": 0, "start": 336323, "crunched": 0, "end": 346097, "filename": "/espeak-data/bn_dict"}, {"audio": 0, "start": 346097, "crunched": 0, "end": 428469, "filename": "/espeak-data/af_dict"}, {"audio": 0, "start": 428469, "crunched": 0, "end": 432286, "filename": "/espeak-data/la_dict"}, {"audio": 0, "start": 432286, "crunched": 0, "end": 439851, "filename": "/espeak-data/cs_dict"}, {"audio": 0, "start": 439851, "crunched": 0, "end": 444044, "filename": "/espeak-data/eu_dict"}, {"audio": 0, "start": 444044, "crunched": 0, "end": 447444, "filename": "/espeak-data/hy_dict"}, {"audio": 0, "start": 447444, "crunched": 0, "end": 450643, "filename": "/espeak-data/sq_dict"}, {"audio": 0, "start": 450643, "crunched": 0, "end": 459560, "filename": "/espeak-data/ga_dict"}, {"audio": 0, "start": 459560, "crunched": 0, "end": 466256, "filename": "/espeak-data/an_dict"}, {"audio": 0, "start": 466256, "crunched": 0, "end": 469723, "filename": "/espeak-data/cy_dict"}, {"audio": 0, "start": 469723, "crunched": 0, "end": 496729, "filename": "/espeak-data/bg_dict"}, {"audio": 0, "start": 496729, "crunched": 0, "end": 518151, "filename": "/espeak-data/fr_dict"}, {"audio": 0, "start": 518151, "crunched": 0, "end": 521180, "filename": "/espeak-data/sw_dict"}, {"audio": 0, "start": 521180, "crunched": 0, "end": 648101, "filename": "/espeak-data/en_dict"}, {"audio": 0, "start": 648101, "crunched": 0, "end": 657777, "filename": "/espeak-data/sv_dict"}, {"audio": 0, "start": 657777, "crunched": 0, "end": 662722, "filename": "/espeak-data/mk_dict"}, {"audio": 0, "start": 662722, "crunched": 0, "end": 668046, "filename": "/espeak-data/gu_dict"}, {"audio": 0, "start": 668046, "crunched": 0, "end": 680294, "filename": "/espeak-data/ms_dict"}, {"audio": 0, "start": 680294, "crunched": 0, "end": 705256, "filename": "/espeak-data/phonindex"}, {"audio": 0, "start": 705256, "crunched": 0, "end": 711473, "filename": "/espeak-data/ru_dict"}, {"audio": 0, "start": 711473, "crunched": 0, "end": 750725, "filename": "/espeak-data/phontab"}, {"audio": 0, "start": 750725, "crunched": 0, "end": 1158173, "filename": "/espeak-data/phondata"}, {"audio": 0, "start": 1158173, "crunched": 0, "end": 1168990, "filename": "/espeak-data/ne_dict"}, {"audio": 0, "start": 1168990, "crunched": 0, "end": 1178151, "filename": "/espeak-data/sk_dict"}, {"audio": 0, "start": 1178151, "crunched": 0, "end": 1204678, "filename": "/espeak-data/pt_dict"}, {"audio": 0, "start": 1204678, "crunched": 0, "end": 1208234, "filename": "/espeak-data/te_dict"}, {"audio": 0, "start": 1208234, "crunched": 0, "end": 1250061, "filename": "/espeak-data/zh_dict"}, {"audio": 0, "start": 1250061, "crunched": 0, "end": 1256828, "filename": "/espeak-data/et_dict"}, {"audio": 0, "start": 1256828, "crunched": 0, "end": 1260987, "filename": "/espeak-data/ml_dict"}, {"audio": 0, "start": 1260987, "crunched": 0, "end": 1374327, "filename": "/espeak-data/hu_dict"}, {"audio": 0, "start": 1374327, "crunched": 0, "end": 1401524, "filename": "/espeak-data/nl_dict"}, {"audio": 0, "start": 1401524, "crunched": 0, "end": 1407814, "filename": "/espeak-data/es_dict"}, {"audio": 0, "start": 1407814, "crunched": 0, "end": 1413329, "filename": "/espeak-data/kn_dict"}, {"audio": 0, "start": 1413329, "crunched": 0, "end": 1418729, "filename": "/espeak-data/is_dict"}, {"audio": 0, "start": 1418729, "crunched": 0, "end": 1423406, "filename": "/espeak-data/eo_dict"}, {"audio": 0, "start": 1423406, "crunched": 0, "end": 1458330, "filename": "/espeak-data/pl_dict"}, {"audio": 0, "start": 1458330, "crunched": 0, "end": 1470623, "filename": "/espeak-data/lv_dict"}, {"audio": 0, "start": 1470623, "crunched": 0, "end": 1474052, "filename": "/espeak-data/grc_dict"}, {"audio": 0, "start": 1474052, "crunched": 0, "end": 1477134, "filename": "/espeak-data/id_dict"}, {"audio": 0, "start": 1477134, "crunched": 0, "end": 1478690, "filename": "/espeak-data/zhy_dict"}, {"audio": 0, "start": 1478690, "crunched": 0, "end": 1485036, "filename": "/espeak-data/pa_dict"}, {"audio": 0, "start": 1485036, "crunched": 0, "end": 1602506, "filename": "/espeak-data/ta_dict"}, {"audio": 0, "start": 1602506, "crunched": 0, "end": 1606659, "filename": "/espeak-data/ca_dict"}, {"audio": 0, "start": 1606659, "crunched": 0, "end": 1608927, "filename": "/espeak-data/ku_dict"}, {"audio": 0, "start": 1608927, "crunched": 0, "end": 1614098, "filename": "/espeak-data/lt_dict"}, {"audio": 0, "start": 1614098, "crunched": 0, "end": 1639303, "filename": "/espeak-data/ro_dict"}, {"audio": 0, "start": 1639303, "crunched": 0, "end": 1642441, "filename": "/espeak-data/ka_dict"}, {"audio": 0, "start": 1642441, "crunched": 0, "end": 1875462, "filename": "/espeak-data/fa_dict"}, {"audio": 0, "start": 1875462, "crunched": 0, "end": 1883897, "filename": "/espeak-data/el_dict"}, {"audio": 0, "start": 1883897, "crunched": 0, "end": 1888075, "filename": "/espeak-data/no_dict"}, {"audio": 0, "start": 1888075, "crunched": 0, "end": 1894537, "filename": "/espeak-data/ko_dict"}, {"audio": 0, "start": 1894537, "crunched": 0, "end": 1902258, "filename": "/espeak-data/hbs_dict"}, {"audio": 0, "start": 1902258, "crunched": 0, "end": 1907378, "filename": "/espeak-data/fi_dict"}, {"audio": 0, "start": 1907378, "crunched": 0, "end": 1913430, "filename": "/espeak-data/tr_dict"}, {"audio": 0, "start": 1913430, "crunched": 0, "end": 1913468, "filename": "/espeak-data/voices/de"}, {"audio": 0, "start": 1913468, "crunched": 0, "end": 1913732, "filename": "/espeak-data/voices/en-us"}, {"audio": 0, "start": 1913732, "crunched": 0, "end": 1913770, "filename": "/espeak-data/voices/default"}, {"audio": 0, "start": 1913770, "crunched": 0, "end": 1913880, "filename": "/espeak-data/voices/en"}, {"audio": 0, "start": 1913880, "crunched": 0, "end": 1914061, "filename": "/espeak-data/voices/es-la"}, {"audio": 0, "start": 1914061, "crunched": 0, "end": 1914167, "filename": "/espeak-data/voices/pt"}, {"audio": 0, "start": 1914167, "crunched": 0, "end": 1914249, "filename": "/espeak-data/voices/fr"}, {"audio": 0, "start": 1914249, "crunched": 0, "end": 1914302, "filename": "/espeak-data/voices/other/eo"}, {"audio": 0, "start": 1914302, "crunched": 0, "end": 1914507, "filename": "/espeak-data/voices/other/en-wm"}, {"audio": 0, "start": 1914507, "crunched": 0, "end": 1914574, "filename": "/espeak-data/voices/other/af"}, {"audio": 0, "start": 1914574, "crunched": 0, "end": 1914684, "filename": "/espeak-data/voices/other/grc"}, {"audio": 0, "start": 1914684, "crunched": 0, "end": 1914753, "filename": "/espeak-data/voices/other/jbo"}, {"audio": 0, "start": 1914753, "crunched": 0, "end": 1915069, "filename": "/espeak-data/voices/other/en-wi"}, {"audio": 0, "start": 1915069, "crunched": 0, "end": 1915263, "filename": "/espeak-data/voices/other/en-rp"}, {"audio": 0, "start": 1915263, "crunched": 0, "end": 1915513, "filename": "/espeak-data/voices/other/en-sc"}, {"audio": 0, "start": 1915513, "crunched": 0, "end": 1915811, "filename": "/espeak-data/voices/other/la"}, {"audio": 0, "start": 1915811, "crunched": 0, "end": 1916012, "filename": "/espeak-data/voices/other/en-n"}, {"audio": 0, "start": 1916012, "crunched": 0, "end": 1916160, "filename": "/espeak-data/voices/other/lfn"}, {"audio": 0, "start": 1916160, "crunched": 0, "end": 1916203, "filename": "/espeak-data/voices/other/sw"}, {"audio": 0, "start": 1916203, "crunched": 0, "end": 1916467, "filename": "/espeak-data/voices/!v/m2"}, {"audio": 0, "start": 1916467, "crunched": 0, "end": 1916721, "filename": "/espeak-data/voices/!v/m7"}, {"audio": 0, "start": 1916721, "crunched": 0, "end": 1916759, "filename": "/espeak-data/voices/!v/klatt2"}, {"audio": 0, "start": 1916759, "crunched": 0, "end": 1916945, "filename": "/espeak-data/voices/!v/whisper"}, {"audio": 0, "start": 1916945, "crunched": 0, "end": 1917245, "filename": "/espeak-data/voices/!v/m3"}, {"audio": 0, "start": 1917245, "crunched": 0, "end": 1917284, "filename": "/espeak-data/voices/!v/klatt3"}, {"audio": 0, "start": 1917284, "crunched": 0, "end": 1917619, "filename": "/espeak-data/voices/!v/m1"}, {"audio": 0, "start": 1917619, "crunched": 0, "end": 1918011, "filename": "/espeak-data/voices/!v/whisperf"}, {"audio": 0, "start": 1918011, "crunched": 0, "end": 1918368, "filename": "/espeak-data/voices/!v/f2"}, {"audio": 0, "start": 1918368, "crunched": 0, "end": 1918692, "filename": "/espeak-data/voices/!v/f1"}, {"audio": 0, "start": 1918692, "crunched": 0, "end": 1919067, "filename": "/espeak-data/voices/!v/f3"}, {"audio": 0, "start": 1919067, "crunched": 0, "end": 1919329, "filename": "/espeak-data/voices/!v/m5"}, {"audio": 0, "start": 1919329, "crunched": 0, "end": 1919368, "filename": "/espeak-data/voices/!v/klatt4"}, {"audio": 0, "start": 1919368, "crunched": 0, "end": 1919461, "filename": "/espeak-data/voices/!v/croak"}, {"audio": 0, "start": 1919461, "crunched": 0, "end": 1919751, "filename": "/espeak-data/voices/!v/m4"}, {"audio": 0, "start": 1919751, "crunched": 0, "end": 1920176, "filename": "/espeak-data/voices/!v/f5"}, {"audio": 0, "start": 1920176, "crunched": 0, "end": 1920364, "filename": "/espeak-data/voices/!v/m6"}, {"audio": 0, "start": 1920364, "crunched": 0, "end": 1920714, "filename": "/espeak-data/voices/!v/f4"}, {"audio": 0, "start": 1920714, "crunched": 0, "end": 1920752, "filename": "/espeak-data/voices/!v/klatt"}, {"audio": 0, "start": 1920752, "crunched": 0, "end": 1920777, "filename": "/espeak-data/voices/asia/pa"}, {"audio": 0, "start": 1920777, "crunched": 0, "end": 1920832, "filename": "/espeak-data/voices/asia/kn"}, {"audio": 0, "start": 1920832, "crunched": 0, "end": 1921034, "filename": "/espeak-data/voices/asia/vi-sgn"}, {"audio": 0, "start": 1921034, "crunched": 0, "end": 1921093, "filename": "/espeak-data/voices/asia/vi"}, {"audio": 0, "start": 1921093, "crunched": 0, "end": 1921152, "filename": "/espeak-data/voices/asia/te"}, {"audio": 0, "start": 1921152, "crunched": 0, "end": 1921190, "filename": "/espeak-data/voices/asia/tr"}, {"audio": 0, "start": 1921190, "crunched": 0, "end": 1921400, "filename": "/espeak-data/voices/asia/zh-yue"}, {"audio": 0, "start": 1921400, "crunched": 0, "end": 1921725, "filename": "/espeak-data/voices/asia/hy-west"}, {"audio": 0, "start": 1921725, "crunched": 0, "end": 1921751, "filename": "/espeak-data/voices/asia/ka"}, {"audio": 0, "start": 1921751, "crunched": 0, "end": 1921786, "filename": "/espeak-data/voices/asia/hi"}, {"audio": 0, "start": 1921786, "crunched": 0, "end": 1922397, "filename": "/espeak-data/voices/asia/zh"}, {"audio": 0, "start": 1922397, "crunched": 0, "end": 1922460, "filename": "/espeak-data/voices/asia/ko"}, {"audio": 0, "start": 1922460, "crunched": 0, "end": 1922686, "filename": "/espeak-data/voices/asia/fa-en-us"}, {"audio": 0, "start": 1922686, "crunched": 0, "end": 1922832, "filename": "/espeak-data/voices/asia/id"}, {"audio": 0, "start": 1922832, "crunched": 0, "end": 1922864, "filename": "/espeak-data/voices/asia/gu"}, {"audio": 0, "start": 1922864, "crunched": 0, "end": 1922916, "filename": "/espeak-data/voices/asia/ku"}, {"audio": 0, "start": 1922916, "crunched": 0, "end": 1922965, "filename": "/espeak-data/voices/asia/ne"}, {"audio": 0, "start": 1922965, "crunched": 0, "end": 1923034, "filename": "/espeak-data/voices/asia/ml"}, {"audio": 0, "start": 1923034, "crunched": 0, "end": 1923235, "filename": "/espeak-data/voices/asia/fa-pin"}, {"audio": 0, "start": 1923235, "crunched": 0, "end": 1923273, "filename": "/espeak-data/voices/asia/hy"}, {"audio": 0, "start": 1923273, "crunched": 0, "end": 1923475, "filename": "/espeak-data/voices/asia/vi-hue"}, {"audio": 0, "start": 1923475, "crunched": 0, "end": 1923512, "filename": "/espeak-data/voices/asia/bn"}, {"audio": 0, "start": 1923512, "crunched": 0, "end": 1923969, "filename": "/espeak-data/voices/asia/ms"}, {"audio": 0, "start": 1923969, "crunched": 0, "end": 1924266, "filename": "/espeak-data/voices/asia/fa"}, {"audio": 0, "start": 1924266, "crunched": 0, "end": 1924329, "filename": "/espeak-data/voices/asia/ta"}, {"audio": 0, "start": 1924329, "crunched": 0, "end": 1924369, "filename": "/espeak-data/voices/europe/is"}, {"audio": 0, "start": 1924369, "crunched": 0, "end": 1924419, "filename": "/espeak-data/voices/europe/pl"}, {"audio": 0, "start": 1924419, "crunched": 0, "end": 1924490, "filename": "/espeak-data/voices/europe/ru"}, {"audio": 0, "start": 1924490, "crunched": 0, "end": 1924605, "filename": "/espeak-data/voices/europe/sq"}, {"audio": 0, "start": 1924605, "crunched": 0, "end": 1924643, "filename": "/espeak-data/voices/europe/fi"}, {"audio": 0, "start": 1924643, "crunched": 0, "end": 1924716, "filename": "/espeak-data/voices/europe/hu"}, {"audio": 0, "start": 1924716, "crunched": 0, "end": 1924753, "filename": "/espeak-data/voices/europe/el"}, {"audio": 0, "start": 1924753, "crunched": 0, "end": 1924847, "filename": "/espeak-data/voices/europe/fr-be"}, {"audio": 0, "start": 1924847, "crunched": 0, "end": 1924913, "filename": "/espeak-data/voices/europe/es"}, {"audio": 0, "start": 1924913, "crunched": 0, "end": 1924955, "filename": "/espeak-data/voices/europe/lt"}, {"audio": 0, "start": 1924955, "crunched": 0, "end": 1924992, "filename": "/espeak-data/voices/europe/sk"}, {"audio": 0, "start": 1924992, "crunched": 0, "end": 1925019, "filename": "/espeak-data/voices/europe/et"}, {"audio": 0, "start": 1925019, "crunched": 0, "end": 1925076, "filename": "/espeak-data/voices/europe/lv"}, {"audio": 0, "start": 1925076, "crunched": 0, "end": 1925116, "filename": "/espeak-data/voices/europe/ro"}, {"audio": 0, "start": 1925116, "crunched": 0, "end": 1925181, "filename": "/espeak-data/voices/europe/no"}, {"audio": 0, "start": 1925181, "crunched": 0, "end": 1925238, "filename": "/espeak-data/voices/europe/da"}, {"audio": 0, "start": 1925238, "crunched": 0, "end": 1925268, "filename": "/espeak-data/voices/europe/eu"}, {"audio": 0, "start": 1925268, "crunched": 0, "end": 1925306, "filename": "/espeak-data/voices/europe/ca"}, {"audio": 0, "start": 1925306, "crunched": 0, "end": 1925563, "filename": "/espeak-data/voices/europe/bs"}, {"audio": 0, "start": 1925563, "crunched": 0, "end": 1925612, "filename": "/espeak-data/voices/europe/cy"}, {"audio": 0, "start": 1925612, "crunched": 0, "end": 1925686, "filename": "/espeak-data/voices/europe/it"}, {"audio": 0, "start": 1925686, "crunched": 0, "end": 1925725, "filename": "/espeak-data/voices/europe/an"}, {"audio": 0, "start": 1925725, "crunched": 0, "end": 1925766, "filename": "/espeak-data/voices/europe/mk"}, {"audio": 0, "start": 1925766, "crunched": 0, "end": 1926056, "filename": "/espeak-data/voices/europe/hr"}, {"audio": 0, "start": 1926056, "crunched": 0, "end": 1926166, "filename": "/espeak-data/voices/europe/bg"}, {"audio": 0, "start": 1926166, "crunched": 0, "end": 1926202, "filename": "/espeak-data/voices/europe/cs"}, {"audio": 0, "start": 1926202, "crunched": 0, "end": 1926298, "filename": "/espeak-data/voices/europe/pt-pt"}, {"audio": 0, "start": 1926298, "crunched": 0, "end": 1926336, "filename": "/espeak-data/voices/europe/sv"}, {"audio": 0, "start": 1926336, "crunched": 0, "end": 1926613, "filename": "/espeak-data/voices/europe/sr"}, {"audio": 0, "start": 1926613, "crunched": 0, "end": 1926678, "filename": "/espeak-data/voices/europe/ga"}, {"audio": 0, "start": 1926678, "crunched": 0, "end": 1926713, "filename": "/espeak-data/voices/europe/nl"}], "remote_package_size": 1926713, "package_uuid": "a4ac48ed-98bc-4151-9388-13e387cc8b96"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 122928;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,240,63,51,51,51,51,51,51,227,63,154,153,153,153,153,153,217,63,51,51,51,51,51,51,195,63,184,30,133,235,81,184,174,63,123,20,174,71,225,122,164,63,186,73,12,2,43,135,150,63,184,30,133,235,81,184,158,63,0,0,0,0,0,0,0,0,0,0,0,0,168,203,104,65,0,0,0,0,168,203,104,193,232,22,0,0,123,142,0,0,16,23,0,0,89,142,0,0,136,0,0,0,0,0,0,0,16,23,0,0,6,142,0,0,104,0,0,0,0,0,0,0,16,23,0,0,43,142,0,0,152,0,0,0,0,0,0,0,232,22,0,0,76,142,0,0,16,23,0,0,136,142,0,0,96,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,185,65,0,0,1,0,0,0,190,65,0,0,2,0,0,0,199,65,0,0,3,0,0,0,204,65,0,0,17,0,0,0,211,65,0,0,18,0,0,0,218,65,0,0,19,0,0,0,225,65,0,0,20,0,0,0,232,65,0,0,21,0,0,0,239,65,0,0,22,0,0,0,246,65,0,0,17,0,0,0,252,65,0,0,33,0,0,0,3,66,0,0,34,0,0,0,10,66,0,0,35,0,0,0,17,66,0,0,36,0,0,0,24,66,0,0,37,0,0,0,31,66,0,0,38,0,0,0,38,66,0,0,33,0,0,0,0,0,0,0,255,255,255,255,44,66,0,0,65,0,0,0,47,66,0,0,66,0,0,0,50,66,0,0,67,0,0,0,53,66,0,0,68,0,0,0,56,66,0,0,69,0,0,0,59,66,0,0,70,0,0,0,62,66,0,0,71,0,0,0,65,66,0,0,72,0,0,0,68,66,0,0,73,0,0,0,72,66,0,0,74,0,0,0,76,66,0,0,75,0,0,0,80,66,0,0,76,0,0,0,84,66,0,0,77,0,0,0,89,66,0,0,78,0,0,0,94,66,0,0,79,0,0,0,99,66,0,0,8,0,0,0,106,66,0,0,9,0,0,0,114,66,0,0,10,0,0,0,123,66,0,0,11,0,0,0,136,66,0,0,12,0,0,0,151,66,0,0,13,0,0,0,159,66,0,0,14,0,0,0,167,66,0,0,15,0,0,0,172,66,0,0,15,0,0,0,178,66,0,0,16,0,0,0,184,66,0,0,17,0,0,0,190,66,0,0,18,0,0,0,196,66,0,0,19,0,0,0,202,66,0,0,20,0,0,0,208,66,0,0,21,0,0,0,214,66,0,0,23,0,0,0,223,66,0,0,24,0,0,0,228,66,0,0,25,0,0,0,236,66,0,0,27,0,0,0,242,66,0,0,28,0,0,0,247,66,0,0,29,0,0,0,253,66,0,0,32,0,0,0,4,67,0,0,33,0,0,0,12,67,0,0,34,0,0,0,19,67,0,0,35,0,0,0,26,67,0,0,36,0,0,0,32,67,0,0,37,0,0,0,38,67,0,0,38,0,0,0,44,67,0,0,40,0,0,0,56,67,0,0,41,0,0,0,65,67,0,0,42,0,0,0,74,67,0,0,43,0,0,0,82,67,0,0,45,0,0,0,92,67,0,0,46,0,0,0,98,67,0,0,47,0,0,0,105,67,0,0,48,0,0,0,111,67,0,0,49,0,0,0,118,67,0,0,50,0,0,0,127,67,0,0,51,0,0,0,135,67,0,0,100,0,0,0,138,67,0,0,200,0,0,0,148,67,0,0,201,0,0,0,0,0,0,0,255,255,255,255,169,67,0,0,159,68,0,0,173,68,0,0,213,71,0,0,0,0,0,0,217,71,0,0,219,71,0,0,222,71,0,0,225,71,0,0,228,71,0,0,232,71,0,0,235,71,0,0,0,0,0,0,244,71,0,0,244,71,0,0,116,72,0,0,116,72,0,0,244,72,0,0,116,73,0,0,244,73,0,0,116,74,0,0,244,74,0,0,244,74,0,0,116,75,0,0,116,75,0,0,244,75,0,0,244,75,0,0,116,76,0,0,116,76,0,0,244,76,0,0,244,76,0,0,116,77,0,0,116,77,0,0,6,0,0,0,7,0,0,0,9,0,0,0,9,0,0,0,20,0,0,0,20,0,0,0,20,0,0,0,25,0,0,0,9,0,0,0,9,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,23,0,0,0,55,0,0,0,32,0,0,0,46,57,78,50,188,3,0,0,3,7,5,0,36,78,0,0,46,57,78,46,188,3,0,0,3,7,5,0,36,78,0,0,46,57,78,46,188,3,0,0,3,7,5,0,36,78,0,0,46,57,90,50,188,3,0,0,3,9,5,0,41,78,0,0,46,57,78,50,188,3,0,0,3,7,5,0,36,78,0,0,46,57,74,55,188,3,0,0,4,7,5,0,46,78,0,0,46,57,74,55,188,3,0,0,4,7,5,0,46,78,0,0,46,57,74,55,188,3,0,0,4,7,5,0,46,78,0,0,46,57,78,50,188,3,0,0,3,7,5,0,36,78,0,0,46,57,78,46,188,3,0,0,3,7,5,0,36,78,0,0,46,57,78,50,188,3,0,0,3,7,5,0,36,78,0,0,34,41,41,32,188,3,0,0,3,7,5,0,46,78,0,0,46,57,55,50,188,3,0,0,3,7,5,0,46,78,0,0,0,64,8,0,70,18,0,0,0,0,0,0,24,12,0,0,4,80,18,6,78,22,0,0,0,0,0,0,34,52,0,0,4,88,22,6,82,22,0,0,0,0,0,0,34,64,0,0,0,92,8,0,92,80,0,0,0,0,0,0,76,8,1,0,0,86,4,0,94,66,0,0,0,0,0,0,34,10,0,0,0,62,10,0,62,20,0,0,0,0,0,0,28,16,0,0,4,68,18,6,68,22,0,0,0,0,0,0,30,44,0,0,6,64,16,0,66,32,0,0,0,0,0,0,32,18,0,0,2,68,46,0,42,32,0,0,0,0,0,0,46,58,0,0,4,78,24,6,72,22,0,0,0,0,0,0,42,52,0,0,4,88,34,0,64,32,0,0,0,0,0,0,46,82,0,0,0,56,12,0,56,20,0,0,0,0,0,0,24,12,0,0,0,70,18,0,70,24,0,0,0,0,0,0,32,20,0,0,0,0,0,0,175,0,0,0,100,0,0,0,50,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,22,80,0,0,62,0,0,0,25,80,0,0,60,224,0,0,28,80,0,0,38,0,0,0,32,80,0,0,34,0,0,0,37,80,0,0,32,0,0,0,42,80,0,0,39,0,0,0,0,0,0,0,255,255,255,255,47,80,0,0,1,0,0,0,53,80,0,0,2,0,0,0,59,80,0,0,3,0,0,0,67,80,0,0,4,0,0,0,74,80,0,0,5,0,0,0,79,80,0,0,6,0,0,0,81,80,0,0,7,0,0,0,83,80,0,0,8,0,0,0,91,80,0,0,9,0,0,0,95,80,0,0,10,0,0,0,105,80,0,0,11,0,0,0,111,80,0,0,12,0,0,0,120,80,0,0,13,0,0,0,126,80,0,0,14,0,0,0,135,80,0,0,15,0,0,0,138,80,0,0,15,0,0,0,141,80,0,0,15,0,0,0,144,80,0,0,15,0,0,0,148,80,0,0,15,0,0,0,151,80,0,0,7,0,0,0,154,80,0,0,7,0,0,0,157,80,0,0,7,0,0,0,160,80,0,0,7,0,0,0,163,80,0,0,7,0,0,0,166,80,0,0,14,0,0,0,173,80,0,0,14,0,0,0,179,80,0,0,16,0,0,0,184,80,0,0,16,0,0,0,186,80,0,0,16,0,0,0,188,80,0,0,16,0,0,0,195,80,0,0,16,0,0,0,198,80,0,0,16,0,0,0,0,0,0,0,0,0,0,0,245,80,0,0,1,0,0,0,250,80,0,0,2,0,0,0,254,80,0,0,3,0,0,0,0,0,0,0,255,255,255,255,19,81,0,0,0,0,0,0,22,81,0,0,2,0,0,0,31,81,0,0,1,0,0,0,101,99,0,0,20,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,58,81,0,0,63,81,0,0,101,99,0,0,70,81,0,0,0,0,0,0,108,7,0,0,164,7,0,0,228,7,0,0,28,8,0,0,94,107,0,0,100,0,0,0,76,81,0,0,60,0,0,0,83,81,0,0,80,0,0,0,88,81,0,0,100,0,0,0,95,81,0,0,125,0,0,0,100,81,0,0,160,0,0,0,0,0,0,0,255,255,255,255,94,107,0,0,100,0,0,0,107,81,0,0,0,0,0,0,114,81,0,0,30,0,0,0,121,81,0,0,65,0,0,0,88,81,0,0,100,0,0,0,126,81,0,0,150,0,0,0,131,81,0,0,230,0,0,0,0,0,0,0,255,255,255,255,94,107,0,0,100,0,0,0,138,81,0,0,70,0,0,0,144,81,0,0,85,0,0,0,88,81,0,0,100,0,0,0,148,81,0,0,110,0,0,0,153,81,0,0,120,0,0,0,0,0,0,0,255,255,255,255,94,107,0,0,100,0,0,0,138,81,0,0,20,0,0,0,144,81,0,0,50,0,0,0,88,81,0,0,100,0,0,0,148,81,0,0,140,0,0,0,153,81,0,0,180,0,0,0,0,0,0,0,255,255,255,255,245,80,0,0,1,0,0,0,166,81,0,0,2,0,0,0,174,81,0,0,3,0,0,0,188,80,0,0,4,0,0,0,183,81,0,0,5,0,0,0,0,0,0,0,255,255,255,255,237,81,0,0,18,0,0,0,248,81,0,0,20,0,0,0,1,82,0,0,36,0,0,0,9,82,0,0,64,0,0,0,20,82,0,0,193,0,0,0,0,0,0,0,255,255,255,255,30,82,0,0,1,0,0,0,0,0,0,0,255,255,255,255,43,82,0,0,32,224,0,0,50,82,0,0,9,224,0,0,55,82,0,0,95,224,0,0,67,82,0,0,34,0,0,0,0,0,0,0,0,0,0,0,18,220,1,0,255,255,255,255,245,80,0,0,0,0,0,0,191,82,0,0,1,0,0,0,198,82,0,0,2,0,0,0,88,81,0,0,3,0,0,0,188,80,0,0,4,0,0,0,183,81,0,0,5,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,40,0,0,0,80,0,0,0,204,97,0,0,1,0,0,0,209,97,0,0,2,0,0,0,236,82,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,16,4,0,40,0,8,0,40,32,8,0,45,48,8,0,30,0,4,0,30,16,4,0,30,144,4,0,30,144,4,0,30,16,4,0,30,16,4,0,30,144,36,0,40,32,8,0,30,16,4,0,40,128,8,0,40,128,8,0,20,16,4,0,45,48,24,0,40,32,24,0,40,0,24,0,20,16,4,0,30,16,4,0,40,32,8,0,40,0,8,0,40,128,8,0,40,128,8,0,70,0,8,0,40,0,8,0,20,16,4,0,30,16,4,0,30,0,4,0,30,0,4,0,40,32,8,0,70,0,8,0,70,0,8,0,20,144,4,0,40,128,8,0,45,176,8,0,20,144,4,0,40,128,8,0,30,128,4,0,30,144,4,0,40,160,8,0,30,16,4,0,0,0,0,0,130,0,0,0,121,0,0,0,118,0,0,0,6,85,0,0,1,0,0,0,11,85,0,0,0,0,0,0,16,85,0,0,0,0,0,0,21,85,0,0,0,0,0,0,26,85,0,0,0,0,0,0,31,85,0,0,0,0,0,0,36,85,0,0,0,0,0,0,41,85,0,0,0,0,0,0,46,85,0,0,0,0,0,0,51,85,0,0,0,0,0,0,56,85,0,0,0,0,0,0,61,85,0,0,0,0,0,0,66,85,0,0,0,0,0,0,71,85,0,0,0,0,0,0,76,85,0,0,0,0,0,0,81,85,0,0,0,0,0,0,86,85,0,0,0,0,0,0,91,85,0,0,0,0,0,0,96,85,0,0,0,0,0,0,101,85,0,0,0,0,0,0,106,85,0,0,0,0,0,0,111,85,0,0,0,0,0,0,96,6,0,0,240,6,0,0,102,9,0,0,230,9,0,0,102,10,0,0,230,10,0,0,102,11,0,0,230,11,0,0,102,12,0,0,230,12,0,0,102,13,0,0,80,14,0,0,208,14,0,0,32,15,0,0,64,16,0,0,144,16,0,0,0,0,0,0,0,0,0,0,160,85,0,0,165,85,0,0,0,0,0,0,187,85,0,0,192,85,0,0,197,85,0,0,202,85,0,0,207,85,0,0,211,85,0,0,226,85,0,0,1,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,5,0,0,0,50,0,0,0,244,1,0,0,1,72,1,0,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,15,0,0,0,4,0,0,0,128,29,0,0,128,29,0,0,64,30,0,0,0,31,0,0,192,31,0,0,128,32,0,0,128,29,0,0,64,33,0,0,128,29,0,0,0,34,0,0,128,29,0,0,128,29,0,0,128,29,0,0,128,29,0,0,192,34,0,0,128,29,0,0,128,29,0,0,128,29,0,0,128,35,0,0,64,36,0,0,148,88,0,0,148,88,0,0,248,88,0,0,92,89,0,0,92,89,0,0,92,89,0,0,19,90,0,0,22,90,0,0,26,90,0,0,29,90,0,0,32,90,0,0,62,98,0,0,35,90,0,0,38,90,0,0,41,90,0,0,44,90,0,0,47,90,0,0,0,0,0,0,0,0,128,63,214,92,0,0,128,3,0,0,128,3,255,3,108,101,0,0,7,0,0,0,218,92,0,0,32,4,0,0,0,4,47,5,0,0,0,0,0,0,0,0,223,92,0,0,48,5,0,0,48,5,143,5,121,104,0,0,4,0,0,0,227,92,0,0,144,5,0,0,144,5,255,5,0,0,0,0,0,0,0,0,231,92,0,0,0,6,0,0,0,6,255,6,0,0,0,0,0,0,0,0,235,92,0,0,0,7,0,0,0,7,79,7,0,0,0,0,0,0,0,0,240,92,0,0,128,7,0,0,128,7,191,7,0,0,0,0,0,0,0,0,244,92,0,0,0,9,0,0,0,9,127,9,105,104,0,0,4,0,0,0,248,92,0,0,128,9,0,0,128,9,255,9,110,98,0,0,4,0,0,0,252,92,0,0,0,10,0,0,0,10,127,10,97,112,0,0,4,0,0,0,1,93,0,0,128,10,0,0,128,10,255,10,117,103,0,0,4,0,0,0,5,93,0,0,0,11,0,0,0,11,127,11,0,0,0,0,0,0,0,0,9,93,0,0,128,11,0,0,128,11,255,11,97,116,0,0,4,0,0,0,13,93,0,0,0,12,0,0,0,12,127,12,101,116,0,0,0,0,0,0,17,93,0,0,128,12,0,0,128,12,255,12,110,107,0,0,4,0,0,0,21,93,0,0,0,13,0,0,0,13,127,13,108,109,0,0,4,0,0,0,25,93,0,0,128,13,0,0,128,13,255,13,105,115,0,0,4,0,0,0,29,93,0,0,0,14,0,0,0,14,127,14,0,0,0,0,0,0,0,0,33,93,0,0,128,14,0,0,128,14,255,14,0,0,0,0,0,0,0,0,37,93,0,0,0,15,0,0,0,15,255,15,0,0,0,0,0,0,0,0,41,93,0,0,0,16,0,0,0,16,159,16,0,0,0,0,0,0,0,0,45,93,0,0,160,16,0,0,160,16,255,16,97,107,0,0,4,0,0,0,49,93,0,0,0,17,0,0,0,17,255,17,111,107,0,0,4,0,0,0,53,93,0,0,0,18,0,0,0,18,159,19,0,0,0,0,0,0,0,0,58,93,0,0,0,40,0,0,0,40,255,40,0,0,0,0,16,0,0,0,67,93,0,0,64,48,0,0,64,48,255,48,0,0,0,0,8,0,0,0,71,93,0,0,0,49,0,0,0,49,255,159,0,0,0,0,8,0,0,0,49,93,0,0,0,167,0,0,0,167,255,215,111,107,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,195,3,0,0,0,0,0,0,108,0,0,0,0,0,0,0,39,0,0,0,183,0,0,0,0,0,0,0,48,4,0,0,97,0,0,0,49,4,0,0,98,0,0,0,70,4,0,0,99,0,0,0,91,4,0,0,7,1,0,0,71,4,0,0,13,1,0,0,95,4,0,0,100,0,126,1,85,4,0,0,100,0,122,0,52,4,0,0,100,0,0,0,82,4,0,0,17,1,0,0,53,4,0,0,101,0,0,0,68,4,0,0,102,0,0,0,51,4,0,0,103,0,0,0,69,4,0,0,104,0,0,0,56,4,0,0,105,0,0,0,88,4,0,0,106,0,0,0,58,4,0,0,107,0,0,0,89,4,0,0,108,0,106,0,59,4,0,0,108,0,0,0,60,4,0,0,109,0,0,0,90,4,0,0,110,0,106,0,61,4,0,0,110,0,0,0,62,4,0,0,111,0,0,0,63,4,0,0,112,0,0,0,64,4,0,0,114,0,0,0,65,4,0,0,115,0,0,0,72,4,0,0,97,1,0,0,66,4,0,0,116,0,0,0,67,4,0,0,117,0,0,0,50,4,0,0,118,0,0,0,55,4,0,0,122,0,0,0,54,4,0,0,126,1,0,0,83,4,0,0,17,1,0,0,92,4,0,0,7,1,0,0,0,0,0,0,99,0,0,0,102,0,0,0,104,0,0,0,107,0,0,0,112,0,0,0,116,0,0,0,120,0,0,0,254,0,0,0,0,0,0,0,46,0,0,0,44,0,0,0,39,0,0,0,200,2,0,0,0,0,0,0,64,4,0,0,48,4,0,0,53,4,0,0,56,4,0,0,57,4,0,0,62,4,0,0,67,4,0,0,75,4,0,0,77,4,0,0,78,4,0,0,79,4,0,0,80,4,0,0,81,4,0,0,86,4,0,0,87,4,0,0,93,4,0,0,94,4,0,0,0,0,0,0,130,97,0,0,97,0,0,0,224,0,0,0,225,0,0,0,163,30,0,0,227,0,0,0,161,30,0,0,3,1,0,0,177,30,0,0,175,30,0,0,179,30,0,0,181,30,0,0,183,30,0,0,226,0,0,0,167,30,0,0,165,30,0,0,169,30,0,0,171,30,0,0,173,30,0,0,101,0,0,0,232,0,0,0,233,0,0,0,187,30,0,0,189,30,0,0,185,30,0,0,234,0,0,0,193,30,0,0,191,30,0,0,195,30,0,0,197,30,0,0,199,30,0,0,105,0,0,0,236,0,0,0,237,0,0,0,201,30,0,0,41,1,0,0,203,30,0,0,111,0,0,0,242,0,0,0,243,0,0,0,207,30,0,0,245,0,0,0,205,30,0,0,244,0,0,0,211,30,0,0,209,30,0,0,213,30,0,0,215,30,0,0,217,30,0,0,161,1,0,0,221,30,0,0,219,30,0,0,223,30,0,0,225,30,0,0,227,30,0,0,117,0,0,0,249,0,0,0,250,0,0,0,231,30,0,0,105,1,0,0,229,30,0,0,176,1,0,0,235,30,0,0,233,30,0,0,237,30,0,0,239,30,0,0,241,30,0,0,121,0,0,0,243,30,0,0,253,0,0,0,247,30,0,0,249,30,0,0,245,30,0,0,0,0,0,0,196,97,0,0,0,0,0,0,204,97,0,0,1,0,0,0,209,97,0,0,2,0,0,0,0,0,0,0,0,0,0,0,88,2,0,0,170,0,0,0,176,4,0,0,135,0,0,0,208,7,0,0,110,0,0,0,184,11,0,0,110,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,216,97,0,0,228,97,0,0,240,97,0,0,88,47,1,0,0,0,0,0,200,0,0,0,200,0,0,0,144,1,0,0,144,1,0,0,144,1,0,0,88,2,0,0,88,2,0,0,88,2,0,0,240,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,69,98,0,0,191,98,0,0,72,99,0,0,1,0,0,0,77,99,0,0,2,0,0,0,86,99,0,0,3,0,0,0,93,99,0,0,7,0,0,0,101,99,0,0,8,0,0,0,107,99,0,0,5,0,0,0,116,99,0,0,4,0,0,0,127,99,0,0,6,0,0,0,138,99,0,0,20,0,0,0,151,99,0,0,21,0,0,0,161,99,0,0,22,0,0,0,171,99,0,0,18,0,0,0,182,99,0,0,19,0,0,0,188,99,0,0,23,0,0,0,198,99,0,0,24,0,0,0,209,99,0,0,25,0,0,0,219,99,0,0,26,0,0,0,227,99,0,0,36,0,0,0,235,99,0,0,17,0,0,0,241,99,0,0,9,0,0,0,246,99,0,0,10,0,0,0,254,99,0,0,11,0,0,0,8,100,0,0,12,0,0,0,16,100,0,0,13,0,0,0,21,100,0,0,14,0,0,0,29,100,0,0,15,0,0,0,36,100,0,0,16,0,0,0,44,100,0,0,27,0,0,0,52,100,0,0,28,0,0,0,59,100,0,0,29,0,0,0,66,100,0,0,37,0,0,0,77,100,0,0,30,0,0,0,83,100,0,0,31,0,0,0,94,100,0,0,32,0,0,0,100,100,0,0,33,0,0,0,109,100,0,0,34,0,0,0,119,100,0,0,35,0,0,0,131,100,0,0,1,1,0,0,142,100,0,0,3,1,0,0,151,100,0,0,4,1,0,0,166,100,0,0,5,1,0,0,183,100,0,0,7,1,0,0,198,100,0,0,6,1,0,0,212,100,0,0,20,1,0,0,0,0,0,0,0,0,0,0,128,101,0,0,12,0,0,0,137,101,0,0,16,0,0,0,0,0,0,0,255,255,255,255,254,101,0,0,1,0,0,0,4,102,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,175,0,0,0,100,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,10,0,0,0,64,0,0,0,0,1,0,0,0,0,0,0,255,127,0,0,238,2,0,0,44,1,0,0,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,238,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,26,0,0,0,48,0,0,0,48,0,0,0,64,0,0,0,80,0,0,0,144,0,0,0,160,0,0,0,176,0,0,0,192,0,0,0,45,0,0,0,38,0,0,0,45,0,0,0,45,0,0,0,55,0,0,0,64,20,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,27,220,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,35,220,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,20,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,64,0,0,0,0,0,0,0,0,0,0,0,104,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,120,0,0,0,11,0,0,0,19,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,160,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,32,0,33,0,34,0,176,2,36,0,37,0,230,0,200,2,40,0,41,0,126,2,43,0,204,2,45,0,46,0,47,0,82,2,49,0,50,0,92,2,52,0,53,0,54,0,55,0,117,2,57,0,208,2,178,2,60,0,61,0,62,0,148,2,89,2,81,2,178,3,231,0,240,0,91,2,70,0,98,2,39,1,106,2,95,2,75,0,107,2,113,2,75,1,84,2,166,3,99,2,128,2,131,2,184,3,138,2,140,2,83,1,199,3,248,0,146,2,42,3,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,97,2,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,3,3,127,0,228,0,235,0,239,0,246,0,252,0,255,0,0,0,48,1,105,0,120,1,255,0,246,1,149,1,247,1,191,1,32,2,158,1,58,2,101,44,61,2,154,1,62,2,102,44,67,2,128,1,0,0,0,0,181,0,156,3,223,0,223,0,255,0,120,1,49,1,73,0,127,1,83,0,128,1,67,2,149,1,246,1,154,1,61,2,158,1,32,2,191,1,247,1,198,1,196,1,201,1,199,1,204,1,202,1,221,1,142,1,243,1,241,1,0,0,0,0,44,0,46,0,63,0,33,0,58,0,59,0,161,0,191,0,19,32,20,32,38,32,126,3,135,3,100,9,137,5,93,5,92,5,94,5,91,5,12,6,27,6,31,6,212,6,244,13,13,15,14,15,98,19,99,19,100,19,101,19,102,19,103,19,104,19,251,16,1,48,2,48,1,255,12,255,14,255,26,255,27,255,31,255,0,0,102,3,102,1,102,2,166,4,166,2,38,4,166,138,40,2,106,3,106,1,106,2,170,2,110,3,110,1,110,2,174,2,41,0,179,4,116,3,116,1,116,2,180,4,180,2,0,0,116,4,122,3,122,1,122,2,186,2,126,1,57,0,190,2,0,0,166,3,0,0,166,1,0,0,230,3,0,0,104,1,0,0,104,2,0,0,40,3,0,0,232,1,0,0,233,1,0,0,105,4,0,0,170,3,0,0,170,1,0,0,42,3,0,0,234,3,0,0,234,1,0,0,108,2,0,0,172,1,0,0,44,3,0,0,44,2,0,0,109,2,0,0,109,4,0,0,174,4,0,0,174,3,0,0,174,1,0,0,238,3,0,0,46,0,0,0,238,139,0,0,111,2,0,0,48,2,48,0,0,0,113,1,0,0,49,2,0,0,241,1,0,0,49,3,0,0,113,4,0,0,115,1,0,0,51,2,0,0,243,1,51,0,0,0,51,0,0,0,180,3,0,0,180,1,0,0,244,2,0,0,180,138,0,0,119,1,0,0,55,2,0,0,247,1,0,0,120,1,0,0,120,2,0,0,56,2,0,0,248,1,0,0,57,2,0,0,249,1,0,0,121,4,0,0,186,4,0,0,186,3,0,0,186,1,0,0,58,4,0,0,250,2,0,0,250,3,0,0,124,2,0,0,126,2,0,0,0,0,127,1,0,0,63,3,0,0,255,1,56,0,166,0,1,0,129,0,103,5,0,0,40,1,41,5,105,5,234,0,0,0,66,5,0,0,195,0,67,29,0,0,239,4,108,5,44,0,108,0,4,0,0,0,173,0,109,5,0,0,238,4,5,0,110,0,177,4,241,4,49,5,241,143,178,0,0,0,114,5,0,0,51,5,115,0,244,4,180,154,0,0,8,0,183,0,142,0,55,21,0,0,55,5,0,0,205,0,119,0,183,8,56,5,0,0,111,5,201,0,9,1,185,0,57,5,250,4,10,0,123,5,187,0,188,0,190,0,126,0,63,5,63,1,0,0,11,1,0,0,204,0,140,0,0,0,0,0,103,0,0,0,108,13,109,0,47,1,176,0,113,0,118,5,76,4,76,28,233,143,0,0,233,207,57,142,0,0,57,206,0,0,177,3,89,2,91,2,179,3,185,3,83,1,201,3,198,3,131,2,197,3,146,2,148,2,126,2,124,2,170,0,97,128,178,0,50,128,179,0,51,128,185,0,49,128,186,0,111,128,176,2,104,128,177,2,102,130,178,2,106,128,179,2,114,128,180,2,121,130,181,2,123,130,182,2,129,130,183,2,119,128,184,2,121,128,192,2,148,130,193,2,149,130,224,2,99,130,225,2,108,128,226,2,115,128,227,2,120,128,112,32,48,128,113,32,105,128,116,32,52,128,117,32,53,128,118,32,54,128,119,32,55,128,120,32,56,128,121,32,57,128,122,32,43,128,123,32,45,128,124,32,61,128,125,32,40,128,126,32,41,128,127,32,110,128,128,32,48,64,129,32,49,64,130,32,50,64,131,32,51,64,132,32,52,64,133,32,53,64,134,32,54,64,135,32,55,64,136,32,56,64,137,32,57,64,138,32,43,64,139,32,45,64,140,32,61,64,141,32,40,64,142,32,41,64,144,32,97,64,145,32,101,64,146,32,111,64,147,32,120,64,148,32,89,66,149,32,104,64,150,32,107,64,151,32,108,64,152,32,109,64,153,32,110,64,154,32,112,64,155,32,115,64,156,32,116,64,0,0,0,0,0,0,64,0,90,0,110,0,128,0,143,0,156,0,169,0,181,0,192,0,202,0,212,0,221,0,230,0,239,0,247,0,0,1,7,1,15,1,22,1,30,1,37,1,44,1,50,1,57,1,64,1,70,1,76,1,82,1,88,1,94,1,100,1,106,1,111,1,117,1,122,1,128,1,133,1,138,1,143,1,148,1,153,1,158,1,163,1,168,1,173,1,178,1,182,1,187,1,192,1,196,1,201,1,205,1,209,1,214,1,218,1,222,1,227,1,231,1,235,1,239,1,243,1,247,1,251,1,0,2,3,2,7,2,11,2,15,2,19,2,23,2,27,2,31,2,34,2,38,2,42,2,45,2,49,2,53,2,56,2,60,2,64,2,67,2,71,2,74,2,78,2,81,2,84,2,88,2,91,2,95,2,98,2,101,2,105,2,108,2,111,2,115,2,118,2,121,2,124,2,128,2,131,2,134,2,137,2,140,2,143,2,146,2,150,2,153,2,156,2,159,2,162,2,165,2,168,2,171,2,174,2,177,2,180,2,183,2,186,2,189,2,192,2,194,2,197,2,200,2,203,2,206,2,209,2,212,2,214,2,217,2,220,2,223,2,226,2,228,2,231,2,234,2,237,2,239,2,242,2,245,2,247,2,250,2,253,2,0,3,2,3,5,3,7,3,10,3,13,3,15,3,18,3,21,3,23,3,26,3,28,3,31,3,33,3,36,3,39,3,41,3,44,3,46,3,49,3,51,3,54,3,56,3,59,3,61,3,64,3,66,3,68,3,71,3,73,3,76,3,78,3,81,3,83,3,85,3,88,3,90,3,93,3,95,3,97,3,100,3,102,3,104,3,107,3,109,3,111,3,114,3,116,3,118,3,121,3,123,3,125,3,128,3,130,3,132,3,134,3,243,0,16,1,0,1,0,1,0,1,0,1,0,1,240,0,240,0,240,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,208,0,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0,160,0,4,1,216,2,65,1,164,0,61,1,90,1,167,0,168,0,96,1,94,1,100,1,121,1,173,0,125,1,123,1,176,0,5,1,219,2,66,1,180,0,62,1,91,1,199,2,184,0,97,1,95,1,101,1,122,1,221,2,126,1,124,1,84,1,193,0,194,0,2,1,196,0,57,1,6,1,199,0,12,1,201,0,24,1,203,0,26,1,205,0,206,0,14,1,16,1,67,1,71,1,211,0,212,0,80,1,214,0,215,0,88,1,110,1,218,0,112,1,220,0,221,0,98,1,223,0,85,1,225,0,226,0,3,1,228,0,58,1,7,1,231,0,13,1,233,0,25,1,235,0,27,1,237,0,238,0,15,1,17,1,68,1,72,1,243,0,244,0,81,1,246,0,247,0,89,1,111,1,250,0,113,1,252,0,253,0,99,1,217,2,160,0,38,1,216,2,163,0,164,0,0,0,36,1,167,0,168,0,48,1,94,1,30,1,52,1,173,0,0,0,123,1,176,0,39,1,178,0,179,0,180,0,181,0,37,1,183,0,184,0,49,1,95,1,31,1,53,1,189,0,0,0,124,1,192,0,193,0,194,0,0,0,196,0,10,1,8,1,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,0,0,209,0,210,0,211,0,212,0,32,1,214,0,215,0,28,1,217,0,218,0,219,0,220,0,108,1,92,1,223,0,224,0,225,0,226,0,0,0,228,0,11,1,9,1,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,0,0,241,0,242,0,243,0,244,0,33,1,246,0,247,0,29,1,249,0,250,0,251,0,252,0,109,1,93,1,217,2,160,0,4,1,56,1,86,1,164,0,40,1,59,1,167,0,168,0,96,1,18,1,34,1,102,1,173,0,125,1,175,0,176,0,5,1,219,2,87,1,180,0,41,1,60,1,199,2,184,0,97,1,19,1,35,1,103,1,74,1,126,1,75,1,0,1,193,0,194,0,195,0,196,0,197,0,198,0,46,1,12,1,201,0,24,1,203,0,22,1,205,0,206,0,42,1,16,1,69,1,76,1,54,1,212,0,213,0,214,0,215,0,216,0,114,1,218,0,219,0,220,0,104,1,106,1,223,0,1,1,225,0,226,0,227,0,228,0,229,0,230,0,47,1,13,1,233,0,25,1,235,0,23,1,237,0,238,0,43,1,17,1,70,1,77,1,55,1,244,0,245,0,246,0,247,0,248,0,115,1,250,0,251,0,252,0,105,1,107,1,217,2,160,0,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,4,10,4,11,4,12,4,173,0,14,4,15,4,16,4,17,4,18,4,19,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,22,33,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,92,4,167,0,94,4,95,4,160,0,24,32,25,32,163,0,172,32,175,32,166,0,167,0,168,0,169,0,122,3,171,0,172,0,173,0,0,0,21,32,176,0,177,0,178,0,179,0,132,3,133,3,134,3,183,0,136,3,137,3,138,3,187,0,140,3,189,0,142,3,143,3,144,3,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,0,0,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,0,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,30,1,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,48,1,94,1,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,31,1,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,49,1,95,1,255,0,160,0,2,30,3,30,163,0,10,1,11,1,10,30,167,0,128,30,169,0,130,30,11,30,242,30,173,0,174,0,120,1,30,30,31,30,32,1,33,1,64,30,65,30,182,0,86,30,129,30,87,30,131,30,96,30,243,30,132,30,133,30,97,30,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,116,1,209,0,210,0,211,0,212,0,213,0,214,0,106,30,216,0,217,0,218,0,219,0,220,0,221,0,118,1,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,117,1,241,0,242,0,243,0,244,0,245,0,246,0,107,30,248,0,249,0,250,0,251,0,252,0,253,0,119,1,255,0,80,37,81,37,82,37,81,4,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,1,4,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,169,0,78,4,48,4,49,4,70,4,52,4,53,4,68,4,51,4,69,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,79,4,64,4,65,4,66,4,67,4,54,4,50,4,76,4,75,4,55,4,72,4,77,4,73,4,71,4,74,4,46,4,16,4,17,4,38,4,20,4,21,4,36,4,19,4,37,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,47,4,32,4,33,4,34,4,35,4,22,4,18,4,44,4,43,4,23,4,40,4,45,4,41,4,39,4,42,4,32,0,1,9,2,9,3,9,5,9,6,9,7,9,8,9,9,9,10,9,11,9,14,9,15,9,16,9,13,9,18,9,19,9,20,9,17,9,21,9,22,9,23,9,24,9,25,9,26,9,27,9,28,9,29,9,30,9,31,9,32,9,33,9,34,9,35,9,36,9,37,9,38,9,39,9,40,9,41,9,42,9,43,9,44,9,45,9,46,9,47,9,95,9,48,9,49,9,50,9,51,9,52,9,53,9,54,9,55,9,56,9,57,9,32,0,62,9,63,9,64,9,65,9,66,9,67,9,70,9,71,9,72,9,69,9,74,9,75,9,76,9,73,9,77,9,60,9,100,9,32,0,32,0,32,0,32,0,32,0,32,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,32,0,32,0,32,0,32,0,32,0,112,10,113,10,0,0,40,0,41,0,91,0,93,0,123,0,125,0,60,0,62,0,34,0,39,0,96,0,171,0,187,0,10,48,11,48,60,224,0,0,95,0,0,0,173,0,1,0,12,32,1,0,13,32,1,0,0,0,0,0,182,0,140,0,220,0,220,0,220,0,240,0,4,1,24,1,170,0,140,0,220,0,220,0,0,0,0,0,250,0,14,1,190,0,170,0,190,0,200,0,0,0,0,0,190,0,240,0,12,1,14,1,19,1,1,3,15,3,14,6,17,6,3,9,1,11,15,11,1,12,9,12,1,14,6,14,9,14,14,14,15,14,28,14,3,15,17,15,18,15,15,16,17,16,1,17,6,17,9,17,15,17,19,18,32,18,255,127,180,0,180,0,210,0,210,0,0,0,0,0,230,0,240,0,170,0,220,0,180,0,180,0,0,0,0,0,250,0,14,1,160,0,140,0,200,0,200,0,0,0,0,0,220,0,230,0,150,0,130,0,200,0,200,0,0,0,0,0,14,1,14,1,200,0,200,0,210,0,210,0,0,0,0,0,230,0,230,0,182,0,140,0,220,0,220,0,0,0,0,0,248,0,19,1,155,0,180,0,210,0,210,0,0,0,0,0,14,1,44,1,150,0,140,0,180,0,180,0,0,0,0,0,200,0,200,0,156,0,170,0,170,0,156,0,0,0,0,0,163,0,200,0,200,0,200,0,200,0,200,0,0,0,0,0,210,0,230,0,173,0,1,0,64,6,1,0,12,32,45,0,13,32,1,0,0,0,0,0,150,0,180,0,200,0,200,0,0,0,0,0,210,0,250,0,190,0,190,0,210,0,210,0,0,0,0,0,230,0,250,0,230,0,230,0,230,0,230,0,0,0,0,0,230,0,230,0,160,0,150,0,200,0,200,0,0,0,0,0,250,0,4,1,180,0,160,0,200,0,200,0,0,0,0,0,220,0,230,0,185,0,195,0,195,0,190,0,0,0,0,0,210,0,220,0,250,0,200,0,250,0,250,0,0,0,0,0,250,0,250,0,160,0,200,0,180,0,180,0,0,0,0,0,220,0,240,0,180,0,160,0,200,0,200,0,0,0,0,0,240,0,250,0,165,0,100,0,170,0,150,0,0,0,0,0,215,0,47,1,145,0,145,0,170,0,160,0,0,0,0,0,74,1,94,1,190,0,180,0,230,0,230,0,0,0,0,0,250,0,250,0,180,0,180,0,190,0,180,0,0,0,0,0,230,0,240,0,180,0,130,0,210,0,210,0,0,0,0,0,210,0,210,0,180,0,160,0,200,0,200,0,0,0,0,0,220,0,230,0,160,0,135,0,210,0,210,0,0,0,0,0,4,1,24,1,160,0,140,0,200,0,200,0,0,0,0,0,220,0,230,0,200,0,200,0,200,0,200,0,0,0,0,0,200,0,200,0,160,0,190,0,175,0,175,0,0,0,0,0,200,0,210,0,170,0,115,0,210,0,240,0,0,0,0,0,4,1,24,1,170,0,170,0,180,0,180,0,0,0,0,0,240,0,4,1,150,0,140,0,220,0,220,0,0,0,0,0,4,1,24,1,190,0,190,0,210,0,210,0,0,0,0,0,210,0,210,0,150,0,150,0,180,0,180,0,0,0,0,0,44,1,44,1,160,0,135,0,220,0,220,0,0,0,0,0,250,0,24,1,160,0,170,0,200,0,200,0,0,0,0,0,64,1,84,1,230,0,230,0,240,0,240], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([4,1,4,1,180,0,160,0,240,0,240,0,0,0,0,0,4,1,4,1,190,0,180,0,200,0,230,0,0,0,0,0,240,0,250,0,150,0,150,0,180,0,180,0,210,0,230,0,230,0,240,0,230,0,150,0,230,0,230,0,230,0,0,0,240,0,250,0,0,0,231,255,206,255,181,255,156,255,131,255,106,255,81,255,55,255,30,255,5,255,236,254,211,254,186,254,161,254,136,254,111,254,85,254,60,254,35,254,10,254,241,253,216,253,191,253,166,253,141,253,116,253,91,253,66,253,41,253,16,253,247,252,222,252,197,252,172,252,147,252,122,252,97,252,72,252,47,252,22,252,253,251,228,251,203,251,178,251,153,251,128,251,103,251,79,251,54,251,29,251,4,251,235,250,210,250,186,250,161,250,136,250,111,250,87,250,62,250,37,250,13,250,244,249,219,249,195,249,170,249,145,249,121,249,96,249,71,249,47,249,22,249,254,248,229,248,205,248,180,248,156,248,131,248,107,248,83,248,58,248,34,248,10,248,241,247,217,247,193,247,168,247,144,247,120,247,96,247,71,247,47,247,23,247,255,246,231,246,207,246,183,246,159,246,135,246,111,246,87,246,63,246,39,246,15,246,247,245,223,245,199,245,176,245,152,245,128,245,104,245,81,245,57,245,33,245,10,245,242,244,219,244,195,244,172,244,148,244,125,244,101,244,78,244,54,244,31,244,8,244,240,243,217,243,194,243,171,243,148,243,124,243,101,243,78,243,55,243,32,243,9,243,242,242,219,242,196,242,174,242,151,242,128,242,105,242,82,242,60,242,37,242,14,242,248,241,225,241,203,241,180,241,158,241,135,241,113,241,91,241,68,241,46,241,24,241,1,241,235,240,213,240,191,240,169,240,147,240,125,240,103,240,81,240,59,240,37,240,16,240,250,239,228,239,206,239,185,239,163,239,141,239,120,239,98,239,77,239,56,239,34,239,13,239,248,238,226,238,205,238,184,238,163,238,142,238,121,238,100,238,79,238,58,238,37,238,16,238,251,237,231,237,210,237,189,237,169,237,148,237,128,237,107,237,87,237,66,237,46,237,26,237,5,237,241,236,221,236,201,236,181,236,161,236,141,236,121,236,101,236,81,236,61,236,42,236,22,236,2,236,239,235,219,235,200,235,180,235,161,235,141,235,122,235,103,235,84,235,65,235,45,235,26,235,7,235,244,234,226,234,207,234,188,234,169,234,150,234,132,234,113,234,95,234,76,234,58,234,39,234,21,234,3,234,240,233,222,233,204,233,186,233,168,233,150,233,132,233,114,233,97,233,79,233,61,233,44,233,26,233,8,233,247,232,230,232,212,232,195,232,178,232,160,232,143,232,126,232,109,232,92,232,75,232,59,232,42,232,25,232,8,232,248,231,231,231,215,231,198,231,182,231,165,231,149,231,133,231,117,231,101,231,85,231,69,231,53,231,37,231,21,231,5,231,246,230,230,230,215,230,199,230,184,230,168,230,153,230,138,230,123,230,107,230,92,230,77,230,62,230,48,230,33,230,18,230,3,230,245,229,230,229,216,229,201,229,187,229,173,229,158,229,144,229,130,229,116,229,102,229,88,229,74,229,60,229,47,229,33,229,19,229,6,229,248,228,235,228,222,228,208,228,195,228,182,228,169,228,156,228,143,228,130,228,117,228,104,228,92,228,79,228,67,228,54,228,42,228,29,228,17,228,5,228,249,227,237,227,225,227,213,227,201,227,189,227,177,227,165,227,154,227,142,227,131,227,119,227,108,227,97,227,86,227,75,227,63,227,52,227,42,227,31,227,20,227,9,227,255,226,244,226,234,226,223,226,213,226,202,226,192,226,182,226,172,226,162,226,152,226,142,226,132,226,123,226,113,226,103,226,94,226,84,226,75,226,66,226,57,226,47,226,38,226,29,226,20,226,12,226,3,226,250,225,241,225,233,225,224,225,216,225,208,225,199,225,191,225,183,225,175,225,167,225,159,225,151,225,143,225,136,225,128,225,120,225,113,225,106,225,98,225,91,225,84,225,77,225,70,225,63,225,56,225,49,225,42,225,36,225,29,225,22,225,16,225,10,225,3,225,253,224,247,224,241,224,235,224,229,224,223,224,217,224,212,224,206,224,201,224,195,224,190,224,184,224,179,224,174,224,169,224,164,224,159,224,154,224,149,224,145,224,140,224,135,224,131,224,126,224,122,224,118,224,114,224,110,224,106,224,102,224,98,224,94,224,90,224,87,224,83,224,79,224,76,224,73,224,69,224,66,224,63,224,60,224,57,224,54,224,51,224,49,224,46,224,43,224,41,224,39,224,36,224,34,224,32,224,30,224,28,224,26,224,24,224,22,224,20,224,18,224,17,224,15,224,14,224,13,224,11,224,10,224,9,224,8,224,7,224,6,224,5,224,5,224,4,224,3,224,3,224,2,224,2,224,2,224,2,224,2,224,1,224,2,224,2,224,2,224,2,224,2,224,3,224,3,224,4,224,5,224,5,224,6,224,7,224,8,224,9,224,10,224,11,224,13,224,14,224,15,224,17,224,18,224,20,224,22,224,24,224,26,224,28,224,30,224,32,224,34,224,36,224,39,224,41,224,43,224,46,224,49,224,51,224,54,224,57,224,60,224,63,224,66,224,69,224,73,224,76,224,79,224,83,224,87,224,90,224,94,224,98,224,102,224,106,224,110,224,114,224,118,224,122,224,126,224,131,224,135,224,140,224,145,224,149,224,154,224,159,224,164,224,169,224,174,224,179,224,184,224,190,224,195,224,201,224,206,224,212,224,217,224,223,224,229,224,235,224,241,224,247,224,253,224,3,225,10,225,16,225,22,225,29,225,36,225,42,225,49,225,56,225,63,225,70,225,77,225,84,225,91,225,98,225,106,225,113,225,120,225,128,225,136,225,143,225,151,225,159,225,167,225,175,225,183,225,191,225,199,225,208,225,216,225,224,225,233,225,241,225,250,225,3,226,12,226,20,226,29,226,38,226,47,226,57,226,66,226,75,226,84,226,94,226,103,226,113,226,123,226,132,226,142,226,152,226,162,226,172,226,182,226,192,226,202,226,213,226,223,226,234,226,244,226,255,226,9,227,20,227,31,227,42,227,52,227,63,227,75,227,86,227,97,227,108,227,119,227,131,227,142,227,154,227,165,227,177,227,189,227,201,227,213,227,225,227,237,227,249,227,5,228,17,228,29,228,42,228,54,228,67,228,79,228,92,228,104,228,117,228,130,228,143,228,156,228,169,228,182,228,195,228,208,228,222,228,235,228,248,228,6,229,19,229,33,229,47,229,60,229,74,229,88,229,102,229,116,229,130,229,144,229,158,229,173,229,187,229,201,229,216,229,230,229,245,229,3,230,18,230,33,230,48,230,62,230,77,230,92,230,107,230,123,230,138,230,153,230,168,230,184,230,199,230,215,230,230,230,246,230,5,231,21,231,37,231,53,231,69,231,85,231,101,231,117,231,133,231,149,231,165,231,182,231,198,231,215,231,231,231,248,231,8,232,25,232,42,232,59,232,75,232,92,232,109,232,126,232,143,232,160,232,178,232,195,232,212,232,230,232,247,232,8,233,26,233,44,233,61,233,79,233,97,233,114,233,132,233,150,233,168,233,186,233,204,233,222,233,240,233,3,234,21,234,39,234,58,234,76,234,95,234,113,234,132,234,150,234,169,234,188,234,207,234,226,234,244,234,7,235,26,235,45,235,65,235,84,235,103,235,122,235,141,235,161,235,180,235,200,235,219,235,239,235,2,236,22,236,42,236,61,236,81,236,101,236,121,236,141,236,161,236,181,236,201,236,221,236,241,236,5,237,26,237,46,237,66,237,87,237,107,237,128,237,148,237,169,237,189,237,210,237,231,237,251,237,16,238,37,238,58,238,79,238,100,238,121,238,142,238,163,238,184,238,205,238,226,238,248,238,13,239,34,239,56,239,77,239,98,239,120,239,141,239,163,239,185,239,206,239,228,239,250,239,16,240,37,240,59,240,81,240,103,240,125,240,147,240,169,240,191,240,213,240,235,240,1,241,24,241,46,241,68,241,91,241,113,241,135,241,158,241,180,241,203,241,225,241,248,241,14,242,37,242,60,242,82,242,105,242,128,242,151,242,174,242,196,242,219,242,242,242,9,243,32,243,55,243,78,243,101,243,124,243,148,243,171,243,194,243,217,243,240,243,8,244,31,244,54,244,78,244,101,244,125,244,148,244,172,244,195,244,219,244,242,244,10,245,33,245,57,245,81,245,104,245,128,245,152,245,176,245,199,245,223,245,247,245,15,246,39,246,63,246,87,246,111,246,135,246,159,246,183,246,207,246,231,246,255,246,23,247,47,247,71,247,96,247,120,247,144,247,168,247,193,247,217,247,241,247,10,248,34,248,58,248,83,248,107,248,131,248,156,248,180,248,205,248,229,248,254,248,22,249,47,249,71,249,96,249,121,249,145,249,170,249,195,249,219,249,244,249,13,250,37,250,62,250,87,250,111,250,136,250,161,250,186,250,210,250,235,250,4,251,29,251,54,251,79,251,103,251,128,251,153,251,178,251,203,251,228,251,253,251,22,252,47,252,72,252,97,252,122,252,147,252,172,252,197,252,222,252,247,252,16,253,41,253,66,253,91,253,116,253,141,253,166,253,191,253,216,253,241,253,10,254,35,254,60,254,85,254,111,254,136,254,161,254,186,254,211,254,236,254,5,255,30,255,55,255,81,255,106,255,131,255,156,255,181,255,206,255,231,255,0,0,25,0,50,0,75,0,100,0,125,0,150,0,175,0,201,0,226,0,251,0,20,1,45,1,70,1,95,1,120,1,145,1,171,1,196,1,221,1,246,1,15,2,40,2,65,2,90,2,115,2,140,2,165,2,190,2,215,2,240,2,9,3,34,3,59,3,84,3,109,3,134,3,159,3,184,3,209,3,234,3,3,4,28,4,53,4,78,4,103,4,128,4,153,4,177,4,202,4,227,4,252,4,21,5,46,5,70,5,95,5,120,5,145,5,169,5,194,5,219,5,243,5,12,6,37,6,61,6,86,6,111,6,135,6,160,6,185,6,209,6,234,6,2,7,27,7,51,7,76,7,100,7,125,7,149,7,173,7,198,7,222,7,246,7,15,8,39,8,63,8,88,8,112,8,136,8,160,8,185,8,209,8,233,8,1,9,25,9,49,9,73,9,97,9,121,9,145,9,169,9,193,9,217,9,241,9,9,10,33,10,57,10,80,10,104,10,128,10,152,10,175,10,199,10,223,10,246,10,14,11,37,11,61,11,84,11,108,11,131,11,155,11,178,11,202,11,225,11,248,11,16,12,39,12,62,12,85,12,108,12,132,12,155,12,178,12,201,12,224,12,247,12,14,13,37,13,60,13,82,13,105,13,128,13,151,13,174,13,196,13,219,13,242,13,8,14,31,14,53,14,76,14,98,14,121,14,143,14,165,14,188,14,210,14,232,14,255,14,21,15,43,15,65,15,87,15,109,15,131,15,153,15,175,15,197,15,219,15,240,15,6,16,28,16,50,16,71,16,93,16,115,16,136,16,158,16,179,16,200,16,222,16,243,16,8,17,30,17,51,17,72,17,93,17,114,17,135,17,156,17,177,17,198,17,219,17,240,17,5,18,25,18,46,18,67,18,87,18,108,18,128,18,149,18,169,18,190,18,210,18,230,18,251,18,15,19,35,19,55,19,75,19,95,19,115,19,135,19,155,19,175,19,195,19,214,19,234,19,254,19,17,20,37,20,56,20,76,20,95,20,115,20,134,20,153,20,172,20,191,20,211,20,230,20,249,20,12,21,30,21,49,21,68,21,87,21,106,21,124,21,143,21,161,21,180,21,198,21,217,21,235,21,253,21,16,22,34,22,52,22,70,22,88,22,106,22,124,22,142,22,159,22,177,22,195,22,212,22,230,22,248,22,9,23,26,23,44,23,61,23,78,23,96,23,113,23,130,23,147,23,164,23,181,23,197,23,214,23,231,23,248,23,8,24,25,24,41,24,58,24,74,24,91,24,107,24,123,24,139,24,155,24,171,24,187,24,203,24,219,24,235,24,251,24,10,25,26,25,41,25,57,25,72,25,88,25,103,25,118,25,133,25,149,25,164,25,179,25,194,25,208,25,223,25,238,25,253,25,11,26,26,26,40,26,55,26,69,26,83,26,98,26,112,26,126,26,140,26,154,26,168,26,182,26,196,26,209,26,223,26,237,26,250,26,8,27,21,27,34,27,48,27,61,27,74,27,87,27,100,27,113,27,126,27,139,27,152,27,164,27,177,27,189,27,202,27,214,27,227,27,239,27,251,27,7,28,19,28,31,28,43,28,55,28,67,28,79,28,91,28,102,28,114,28,125,28,137,28,148,28,159,28,170,28,181,28,193,28,204,28,214,28,225,28,236,28,247,28,1,29,12,29,22,29,33,29,43,29,54,29,64,29,74,29,84,29,94,29,104,29,114,29,124,29,133,29,143,29,153,29,162,29,172,29,181,29,190,29,199,29,209,29,218,29,227,29,236,29,244,29,253,29,6,30,15,30,23,30,32,30,40,30,48,30,57,30,65,30,73,30,81,30,89,30,97,30,105,30,113,30,120,30,128,30,136,30,143,30,150,30,158,30,165,30,172,30,179,30,186,30,193,30,200,30,207,30,214,30,220,30,227,30,234,30,240,30,246,30,253,30,3,31,9,31,15,31,21,31,27,31,33,31,39,31,44,31,50,31,55,31,61,31,66,31,72,31,77,31,82,31,87,31,92,31,97,31,102,31,107,31,111,31,116,31,121,31,125,31,130,31,134,31,138,31,142,31,146,31,150,31,154,31,158,31,162,31,166,31,169,31,173,31,177,31,180,31,183,31,187,31,190,31,193,31,196,31,199,31,202,31,205,31,207,31,210,31,213,31,215,31,217,31,220,31,222,31,224,31,226,31,228,31,230,31,232,31,234,31,236,31,238,31,239,31,241,31,242,31,243,31,245,31,246,31,247,31,248,31,249,31,250,31,251,31,251,31,252,31,253,31,253,31,254,31,254,31,254,31,254,31,254,31,255,31,254,31,254,31,254,31,254,31,254,31,253,31,253,31,252,31,251,31,251,31,250,31,249,31,248,31,247,31,246,31,245,31,243,31,242,31,241,31,239,31,238,31,236,31,234,31,232,31,230,31,228,31,226,31,224,31,222,31,220,31,217,31,215,31,213,31,210,31,207,31,205,31,202,31,199,31,196,31,193,31,190,31,187,31,183,31,180,31,177,31,173,31,169,31,166,31,162,31,158,31,154,31,150,31,146,31,142,31,138,31,134,31,130,31,125,31,121,31,116,31,111,31,107,31,102,31,97,31,92,31,87,31,82,31,77,31,72,31,66,31,61,31,55,31,50,31,44,31,39,31,33,31,27,31,21,31,15,31,9,31,3,31,253,30,246,30,240,30,234,30,227,30,220,30,214,30,207,30,200,30,193,30,186,30,179,30,172,30,165,30,158,30,150,30,143,30,136,30,128,30,120,30,113,30,105,30,97,30,89,30,81,30,73,30,65,30,57,30,48,30,40,30,32,30,23,30,15,30,6,30,253,29,244,29,236,29,227,29,218,29,209,29,199,29,190,29,181,29,172,29,162,29,153,29,143,29,133,29,124,29,114,29,104,29,94,29,84,29,74,29,64,29,54,29,43,29,33,29,22,29,12,29,1,29,247,28,236,28,225,28,214,28,204,28,193,28,181,28,170,28,159,28,148,28,137,28,125,28,114,28,102,28,91,28,79,28,67,28,55,28,43,28,31,28,19,28,7,28,251,27,239,27,227,27,214,27,202,27,189,27,177,27,164,27,152,27,139,27,126,27,113,27,100,27,87,27,74,27,61,27,48,27,34,27,21,27,8,27,250,26,237,26,223,26,209,26,196,26,182,26,168,26,154,26,140,26,126,26,112,26,98,26,83,26,69,26,55,26,40,26,26,26,11,26,253,25,238,25,223,25,208,25,194,25,179,25,164,25,149,25,133,25,118,25,103,25,88,25,72,25,57,25,41,25,26,25,10,25,251,24,235,24,219,24,203,24,187,24,171,24,155,24,139,24,123,24,107,24,91,24,74,24,58,24,41,24,25,24,8,24,248,23,231,23,214,23,197,23,181,23,164,23,147,23,130,23,113,23,96,23,78,23,61,23,44,23,26,23,9,23,248,22,230,22,212,22,195,22,177,22,159,22,142,22,124,22,106,22,88,22,70,22,52,22,34,22,16,22,253,21,235,21,217,21,198,21,180,21,161,21,143,21,124,21,106,21,87,21,68,21,49,21,30,21,12,21,249,20,230,20,211,20,191,20,172,20,153,20,134,20,115,20,95,20,76,20,56,20,37,20,17,20,254,19,234,19,214,19,195,19,175,19,155,19,135,19,115,19,95,19,75,19,55,19,35,19,15,19,251,18,230,18,210,18,190,18,169,18,149,18,128,18,108,18,87,18,67,18,46,18,25,18,5,18,240,17,219,17,198,17,177,17,156,17,135,17,114,17,93,17,72,17,51,17,30,17,8,17,243,16,222,16,200,16,179,16,158,16,136,16,115,16,93,16,71,16,50,16,28,16,6,16,240,15,219,15,197,15,175,15,153,15,131,15,109,15,87,15,65,15,43,15,21,15,255,14,232,14,210,14,188,14,165,14,143,14,121,14,98,14,76,14,53,14,31,14,8,14,242,13,219,13,196,13,174,13,151,13,128,13,105,13,82,13,60,13,37,13,14,13,247,12,224,12,201,12,178,12,155,12,132,12,108,12,85,12,62,12,39,12,16,12,248,11,225,11,202,11,178,11,155,11,131,11,108,11,84,11,61,11,37,11,14,11,246,10,223,10,199,10,175,10,152,10,128,10,104,10,80,10,57,10,33,10,9,10,241,9,217,9,193,9,169,9,145,9,121,9,97,9,73,9,49,9,25,9,1,9,233,8,209,8,185,8,160,8,136,8,112,8,88,8,63,8,39,8,15,8,246,7,222,7,198,7,173,7,149,7,125,7,100,7,76,7,51,7,27,7,2,7,234,6,209,6,185,6,160,6,135,6,111,6,86,6,61,6,37,6,12,6,243,5,219,5,194,5,169,5,145,5,120,5,95,5,70,5,46,5,21,5,252,4,227,4,202,4,177,4,153,4,128,4,103,4,78,4,53,4,28,4,3,4,234,3,209,3,184,3,159,3,134,3,109,3,84,3,59,3,34,3,9,3,240,2,215,2,190,2,165,2,140,2,115,2,90,2,65,2,40,2,15,2,246,1,221,1,196,1,171,1,145,1,120,1,95,1,70,1,45,1,20,1,251,0,226,0,201,0,175,0,150,0,125,0,100,0,75,0,50,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,14,0,16,0,18,0,20,0,22,0,25,0,28,0,32,0,35,0,40,0,45,0,51,0,57,0,64,0,71,0,80,0,90,0,101,0,114,0,128,0,142,0,159,0,179,0,202,0,227,0,0,1,28,1,62,1,103,1,149,1,199,1,0,2,56,2,126,2,207,2,113,3,143,3,0,4,113,4,252,4,158,5,86,6,31,7,0,8,225,8,248,9,59,11,172,12,61,14,0,16,195,17,240,19,119,22,88,25,123,28,0,32,133,35,223,39,238,44,176,50,246,56,0,64,174,71,164,80,133,91,102,102,51,115,255,127,202,254,112,254,18,2,100,1,224,0,89,0,23,0,246,255,198,255,240,255,205,1,87,2,24,2,189,2,2,3,93,2,241,1,205,1,48,2,148,1,110,0,224,0,131,0,104,0,159,255,155,0,22,1,102,255,115,251,170,253,225,2,125,0,176,253,41,0,11,0,9,255,246,255,65,0,92,0,80,0,208,254,71,0,167,0,255,255,122,0,233,0,161,0,213,255,22,1,223,1,229,1,151,1,10,1,138,2,134,0,80,0,236,0,68,0,4,1,13,1,179,0,53,0,140,0,19,1,37,1,40,1,104,0,1,1,152,0,55,1,182,0,7,1,245,0,125,0,58,1,140,0,44,0,203,0,230,0,21,255,226,254,23,0,107,0,92,0,165,255,38,0,208,1,187,1,176,0,98,0,240,252,111,246,157,248,235,251,192,249,74,250,152,250,19,251,75,252,38,253,23,10,212,9,146,9,80,9,15,9,206,8,143,8,79,8,19,8,213,7,154,7,98,7,40,7,243,6,190,6,139,6,90,6,43,6,253,5,211,5,169,5,129,5,92,5,56,5,22,5,247,4,215,4,187,4,160,4,134,4,110,4,87,4,65,4,45,4,25,4,7,4,245,3,228,3,212,3,197,3,182,3,168,3,153,3,141,3,127,3,113,3,101,3,87,3,75,3,62,3,50,3,36,3,24,3,11,3,254,2,242,2,228,2,216,2,203,2,190,2,177,2,164,2,151,2,139,2,125,2,114,2,100,2,89,2,76,2,64,2,52,2,40,2,28,2,18,2,5,2,251,1,240,1,229,1,219,1,208,1,198,1,187,1,178,1,168,1,158,1,148,1,138,1,129,1,119,1,110,1,99,1,91,1,80,1,72,1,61,1,52,1,43,1,32,1,24,1,13,1,4,1,250,0,240,0,231,0,220,0,212,0,200,0,192,0,181,0,172,0,161,0,152,0,142,0,133,0,123,0,113,0,105,0,94,0,86,0,76,0,67,0,57,0,49,0,39,0,30,0,22,0,11,0,4,0,251,255,242,255,233,255,224,255,215,255,206,255,196,255,187,255,178,255,169,255,160,255,149,255,141,255,130,255,122,255,112,255,102,255,92,255,82,255,73,255,63,255,53,255,43,255,34,255,23,255,14,255,4,255,250,254,241,254,231,254,221,254,211,254,202,254,192,254,182,254,173,254,163,254,155,254,144,254,135,254,125,254,115,254,106,254,95,254,86,254,76,254,66,254,56,254,45,254,35,254,25,254,13,254,3,254,247,253,236,253,225,253,213,253,201,253,189,253,177,253,165,253,152,253,140,253,127,253,115,253,102,253,89,253,76,253,63,253,51,253,36,253,25,253,10,253,255,252,241,252,229,252,216,252,204,252,190,252,179,252,164,252,152,252,139,252,126,252,113,252,98,252,85,252,69,252,56,252,38,252,25,252,6,252,246,251,226,251,208,251,186,251,165,251,142,251,118,251,92,251,65,251,36,251,6,251,229,250,196,250,159,250,121,250,83,250,40,250,254,249,208,249,161,249,112,249,60,249,9,249,209,248,154,248,96,248,38,248,232,247,171,247,108,247,44,247,235,246,170,246,104,246,38,246,227,245,176,4,118,4,64,4,14,4,223,3,180,3,139,3,101,3,65,3,31,3,0,3,226,2,198,2,171,2,146,2,122,2,100,2,78,2,58,2,39,2,21,2,3,2,243,1,227,1,212,1,198,1,184,1,171,1,159,1,147,1,135,1,124,1,114,1,104,1,94,1,85,1,76,1,67,1,59,1,51,1,44,1,36,1,29,1,22,1,16,1,9,1,3,1,253,0,247,0,242,0,237,0,231,0,226,0,221,0,217,0,212,0,208,0,204,0,199,0,195,0,192,0,188,0,184,0,180,0,177,0,174,0,170,0,167,0,164,0,161,0,158,0,155,0,153,0,150,0,147,0,145,0,142,0,140,0,137,0,135,0,133,0,131,0,128,0,126,0,124,0,122,0,120,0,119,0,117,0,115,0,113,0,111,0,110,0,108,0,106,0,105,0,103,0,102,0,100,0,99,0,97,0,96,0,95,0,93,0,92,0,91,0,90,0,88,0,87,0,86,0,85,0,84,0,83,0,82,0,80,0,79,0,78,0,77,0,76,0,75,0,75,0,74,0,73,0,72,0,71,0,70,0,69,0,68,0,68,0,67,0,66,0,65,0,64,0,64,0,63,0,62,0,61,0,61,0,60,0,59,0,59,0,58,0,57,0,57,0,56,0,56,0,55,0,55,0,54,0,54,0,53,0,53,0,52,0,52,0,51,0,51,0,50,0,50,0,49,0,49,0,48,0,48,0,47,0,47,0,46,0,46,0,45,0,45,0,44,0,44,0,43,0,43,0,42,0,42,0,41,0,41,0,41,0,41,0,40,0,40,0,39,0,39,0,38,0,38,0,38,0,38,0,37,0,37,0,36,0,36,0,36,0,36,0,35,0,35,0,35,0,35,0,34,0,34,0,33,0,33,0,33,0,33,0,32,0,32,0,32,0,32,0,31,0,31,0,31,0,31,0,30,0,30,0,30,0,30,0,29,0,29,0,29,0,29,0,28,0,28,0,28,0,28,0,27,0,27,0,24,1,176,2,40,4,246,10,188,12,116,14,100,25,88,27,64,31,24,1,89,0,160,0,70,0,160,0,200,0,200,0,244,1,244,1,244,1,89,0,0,0,59,0,59,0,59,0,59,0,59,0,59,0,0,0,0,0,0,0,59,0,59,0,89,0,149,0,200,0,200,0,244,1,0,0,0,0,0,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,10,0,85,84,70,45,56,0,101,110,95,85,83,46,85,84,70,45,56,0,73,78,73,84,32,109,111,100,101,32,37,100,32,111,112,116,105,111,110,115,32,48,120,37,120,10,0,10,83,89,78,84,72,32,112,111,115,110,32,37,100,32,37,100,32,37,100,32,102,108,97,103,115,32,48,120,37,120,10,37,115,10,0,83,69,84,80,65,82,65,77,32,37,100,32,37,100,32,37,100,10,0,37,115,47,101,115,112,101,97,107,45,100,97,116,97,0,69,83,80,69,65,75,95,68,65,84,65,95,80,65,84,72,0,72,79,77,69,0,47,101,115,112,101,97,107,45,100,97,116,97,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,101,115,112,101,97,107,45,100,97,116,97,10,0,87,114,111,110,103,32,118,101,114,115,105,111,110,32,111,102,32,101,115,112,101,97,107,45,100,97,116,97,32,48,120,37,120,32,40,101,120,112,101,99,116,115,32,48,120,37,120,41,32,97,116,32,37,115,10,0,117,110,112,114,0,110,111,112,114,101,102,105,120,0,108,105,115,116,0,119,95,97,108,116,49,0,119,95,97,108,116,50,0,119,95,97,108,116,51,0,119,95,97,108,116,52,0,119,95,97,108,116,53,0,119,95,97,108,116,54,0,119,95,97,108,116,0,112,95,97,108,116,49,0,112,95,97,108,116,50,0,112,95,97,108,116,51,0,112,95,97,108,116,52,0,112,95,97,108,116,53,0,112,95,97,108,116,54,0,112,95,97,108,116,0,36,49,0,36,50,0,36,51,0,36,52,0,36,53,0,36,54,0,36,55,0,36,117,0,36,117,49,0,36,117,50,0,36,117,51,0,36,117,43,0,36,117,49,43,0,36,117,50,43,0,36,117,51,43,0,36,112,97,117,115,101,0,36,115,116,114,101,110,100,0,36,115,116,114,101,110,100,50,0,36,117,110,115,116,114,101,115,115,101,110,100,0,36,97,99,99,101,110,116,95,98,101,102,111,114,101,0,36,97,98,98,114,101,118,0,36,100,111,117,98,108,101,0,36,97,108,116,0,36,97,108,116,49,0,36,97,108,116,50,0,36,97,108,116,51,0,36,97,108,116,52,0,36,97,108,116,53,0,36,97,108,116,54,0,36,97,108,116,55,0,36,99,111,109,98,105,110,101,0,36,100,111,116,0,36,104,97,115,100,111,116,0,36,109,97,120,51,0,36,98,114,107,0,36,116,101,120,116,0,36,118,101,114,98,102,0,36,118,101,114,98,115,102,0,36,110,111,117,110,102,0,36,112,97,115,116,102,0,36,118,101,114,98,0,36,110,111,117,110,0,36,112,97,115,116,0,36,118,101,114,98,101,120,116,101,110,100,0,36,99,97,112,105,116,97,108,0,36,97,108,108,99,97,112,115,0,36,97,99,99,101,110,116,0,36,115,101,110,116,101,110,99,101,0,36,111,110,108,121,0,36,111,110,108,121,115,0,36,115,116,101,109,0,36,97,116,101,110,100,0,36,97,116,115,116,97,114,116,0,36,110,97,116,105,118,101,0,36,63,0,36,116,101,120,116,109,111,100,101,0,36,112,104,111,110,101,109,101,109,111,100,101,0,32,40,0,37,99,37,100,0,101,105,112,118,100,102,113,32,116,98,97,32,0,65,66,67,72,70,71,89,32,32,32,32,32,32,32,32,32,32,38,37,43,35,83,68,90,65,76,33,32,64,63,74,78,75,86,63,84,88,63,87,37,53,100,58,9,0,63,37,100,32,0,37,115,37,99,37,115,95,100,105,99,116,0,67,97,110,39,116,32,114,101,97,100,32,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,58,32,39,37,115,39,10,0,69,109,112,116,121,32,95,100,105,99,116,32,102,105,108,101,58,32,39,37,115,10,0,66,97,100,32,100,97,116,97,58,32,39,37,115,39,32,40,37,120,32,108,101,110,103,116,104,61,37,120,41,10,0,66,97,100,32,114,117,108,101,115,32,100,97,116,97,32,105,110,32,39,37,115,95,100,105,99,116,39,32,97,116,32,48,120,37,120,10,0,70,117,108,108,32,100,105,99,116,105,111,110,97,114,121,32,105,115,32,110,111,116,32,105,110,115,116,97,108,108,101,100,32,102,111,114,32,39,37,115,39,10,0,42,32,0,61,61,44,44,39,42,32,32,0,40,37,115,41,0,61,61,44,44,39,39,0,97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,100,110,111,111,111,111,111,0,111,117,117,117,117,121,116,115,97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,100,110,111,111,111,111,111,0,111,117,117,117,117,121,116,121,97,97,97,97,97,97,99,99,99,99,99,99,99,99,100,100,100,100,101,101,101,101,101,101,101,101,101,101,103,103,103,103,103,103,103,103,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,106,106,107,107,107,108,108,108,108,108,108,108,108,108,108,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,119,119,121,121,121,122,122,122,122,122,122,115,98,98,98,98,0,0,111,99,99,100,100,100,100,100,101,101,101,102,102,103,103,104,105,105,107,107,108,108,109,110,110,111,111,111,111,111,112,112,121,0,0,115,115,116,116,116,116,117,117,117,118,121,121,122,122,122,122,122,122,122,0,0,0,119,116,116,116,107,100,100,100,108,108,108,110,110,110,97,97,105,105,111,111,117,117,117,117,117,117,117,117,117,117,101,97,97,97,97,97,97,103,103,103,103,107,107,111,111,111,111,122,122,106,100,100,100,103,103,119,119,110,110,97,97,97,97,111,111,97,97,97,97,101,101,101,101,105,105,105,105,111,111,111,111,114,114,114,114,117,117,117,117,115,115,116,116,121,121,104,104,110,100,111,111,122,122,97,97,101,101,111,111,111,111,111,111,111,111,121,121,108,110,116,106,100,113,97,99,99,108,116,115,122,0,0,98,117,118,101,101,106,106,113,113,114,114,121,121,97,97,97,98,111,99,100,100,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,112,114,111,110,111,117,110,99,97,98,108,101,63,32,39,37,115,39,10,0,84,114,97,110,115,108,97,116,101,32,39,37,115,39,10,0,70,108,97,103,115,58,32,32,37,115,32,32,37,115,10,0,70,111,117,110,100,58,32,39,37,115,32,37,115,10,0,70,111,117,110,100,58,32,39,37,115,0,39,32,91,37,115,93,32,32,37,115,10,0,82,101,112,108,97,99,101,58,32,37,115,32,32,37,115,10,0,11,0,37,51,100,9,37,115,32,91,37,115,93,10,0,3,2,4,5,6,7,26,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,5,6,7,7,8,9,10,0,0,1,2,3,3,3,4,5,6,7,7,7,8,9,10,0,0,1,1,2,3,3,4,5,6,7,7,8,9,10,11,105,111,110,0,99,0,114,115,0,105,114,0,117,114,0,97,116,104,0,110,115,0,117,0,97,100,100,32,101,10,0,255,253,250,248,246,244,242,240,238,236,234,232,230,228,226,224,222,220,218,216,214,212,210,208,206,204,202,200,198,196,194,192,190,188,186,184,182,180,178,176,174,172,170,168,166,164,162,160,158,156,154,152,150,148,146,144,142,140,138,136,134,132,130,128,126,124,122,120,118,116,114,112,110,108,106,104,102,100,98,96,94,92,90,88,86,84,82,80,78,76,74,72,70,68,66,64,62,60,58,56,54,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,253,255,255,244,234,224,214,204,195,186,177,168,159,151,143,135,127,120,113,106,99,92,86,80,74,68,63,57,52,47,43,38,34,30,26,23,19,16,13,11,8,6,4,2,1,0,0,0,0,0,0,0,1,2,3,4,5,7,8,10,12,14,16,19,21,23,26,29,31,34,37,40,44,46,48,50,52,54,57,59,61,64,66,69,71,74,76,79,81,84,87,90,93,95,98,101,104,107,110,113,116,120,123,126,129,133,136,139,143,146,150,153,157,160,164,168,172,175,179,183,187,191,195,199,203,207,211,215,219,224,207,204,201,198,195,192,189,185,180,176,171,167,162,156,151,146,140,134,129,123,117,111,105,99,93,87,80,74,68,62,56,51,45,39,34,28,23,18,13,8,4,2,2,1,0,0,0,0,0,1,1,2,3,4,5,7,8,10,12,13,15,18,20,22,25,27,30,33,36,39,42,45,48,52,54,56,58,60,63,65,67,70,72,75,77,80,82,85,88,90,93,96,99,102,105,108,111,114,117,120,123,126,129,133,136,139,143,146,150,153,157,160,164,168,172,175,179,183,187,191,195,199,203,207,211,215,219,224,255,249,244,238,233,228,223,218,213,208,203,198,193,189,184,179,175,170,166,161,157,153,149,144,140,136,132,128,125,121,117,113,110,106,103,99,96,93,89,86,83,80,77,74,71,68,65,62,60,57,55,52,50,47,45,43,40,38,36,34,32,30,28,26,25,23,21,20,18,17,15,14,13,12,10,9,8,7,6,5,5,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,21,23,24,26,28,30,32,208,206,205,204,202,200,199,197,195,193,192,189,187,184,181,179,176,173,170,167,163,160,157,153,150,146,143,139,135,132,128,124,120,116,112,109,105,101,97,93,89,85,81,77,74,70,66,62,59,55,52,49,47,45,42,40,38,36,34,32,30,28,26,25,23,21,20,18,17,15,14,13,12,10,9,8,7,6,5,5,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,21,23,24,26,28,30,32,152,153,153,154,156,157,159,161,164,167,169,172,176,179,182,186,190,193,197,201,205,209,212,216,220,223,227,230,234,237,240,242,245,247,249,251,252,253,254,254,255,255,255,255,255,255,254,253,251,250,248,246,243,241,238,236,233,230,228,224,221,218,215,211,208,204,200,196,192,188,184,180,176,172,167,163,159,154,150,145,141,136,132,127,123,118,114,109,105,101,96,92,88,84,80,76,72,68,64,60,57,53,50,47,43,40,38,35,32,29,26,23,21,18,15,13,10,8,7,5,3,2,1,0,0,0,0,0,254,255,255,255,255,255,254,253,252,250,248,246,244,241,238,235,232,229,225,222,218,214,210,205,201,196,191,186,182,176,171,166,161,156,150,145,139,134,128,123,117,111,106,100,95,89,84,79,73,68,63,58,53,48,43,38,34,29,25,21,17,13,10,7,4,3,1,0,0,0,0,0,0,0,0,1,1,2,4,5,7,9,11,13,16,18,21,24,27,30,34,37,41,45,49,53,58,62,67,72,76,81,87,91,94,98,101,104,107,110,113,116,118,120,123,124,126,128,129,130,131,131,132,132,131,131,130,129,114,114,113,113,112,111,109,108,106,104,102,100,97,95,92,90,87,84,81,78,75,72,69,66,63,59,56,53,50,47,44,41,38,35,32,29,27,24,22,20,18,16,14,12,11,10,9,8,7,7,7,7,7,6,5,5,5,5,5,5,5,5,5,6,7,7,8,9,10,12,13,15,16,18,20,22,24,27,29,32,35,38,41,44,47,51,55,59,63,67,71,76,81,86,91,96,101,106,111,116,121,127,132,137,143,149,155,161,167,173,179,186,192,199,206,213,220,227,234,241,245,247,250,252,253,254,255,255,254,254,253,253,252,251,251,250,250,249,248,248,247,247,246,246,245,244,244,243,243,242,242,241,240,240,239,238,238,237,236,235,234,234,233,232,231,230,229,228,227,226,225,224,222,221,220,219,217,216,214,213,211,210,208,206,204,203,201,199,197,195,192,190,188,185,183,181,178,175,173,170,167,164,161,158,154,151,148,144,141,137,133,129,125,121,117,113,109,104,100,97,94,91,87,84,81,77,74,70,67,64,60,57,53,50,46,42,39,35,31,28,24,20,17,13,11,9,7,5,4,3,2,1,0,0,0,0,0,0,0,0,1,1,1,2,2,3,3,4,4,5,6,6,7,8,8,9,10,11,12,12,13,14,15,16,17,18,19,20,22,23,24,25,27,28,29,31,32,34,35,37,38,40,41,43,45,47,48,50,52,54,56,58,60,62,64,66,68,71,73,75,78,80,82,85,87,90,93,95,98,101,103,106,109,112,115,118,121,124,127,130,134,137,140,144,147,150,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,228,231,233,236,238,240,242,244,246,248,250,251,253,127,127,127,128,129,131,132,135,137,140,143,146,150,153,157,161,165,170,174,178,183,187,192,197,201,205,210,214,218,222,226,230,234,237,240,243,245,248,250,251,252,253,254,254,253,252,251,249,247,244,240,236,231,226,220,213,206,198,189,180,169,158,146,136,130,125,119,114,108,102,96,90,84,78,73,66,60,55,50,45,40,36,31,27,24,20,17,14,12,9,7,6,5,4,4,4,4,5,6,8,10,13,16,20,24,29,35,41,47,55,62,71,80,90,100,112,124,131,133,136,138,140,142,143,145,146,147,147,0,1,2,3,0,4,0,1,2,3,0,4,5,6,2,3,0,4,5,7,1,3,0,4,8,9,10,3,0,0,8,8,10,3,0,0,11,11,11,11,0,0,12,12,12,12,0,0,0,40,24,8,0,10,52,32,20,10,6,38,24,14,4,230,32,20,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,254,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,255,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,253,255,1,255,1,255,1,255,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,253,1,255,1,255,1,255,255,255,210,1,255,1,255,206,1,255,205,205,1,255,254,79,202,203,1,255,205,207,255,211,209,1,255,255,254,211,213,255,214,1,255,1,255,1,255,218,1,255,218,254,254,1,255,218,1,255,217,217,1,255,1,255,219,1,255,254,254,1,255,254,255,254,254,254,254,2,255,255,2,255,255,2,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,2,255,255,1,255,253,253,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,253,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,254,254,254,254,254,253,1,255,253,253,254,254,1,255,253,69,71,1,255,1,255,1,255,1,255,1,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([33,118,0,255,31,15,7,37,115,37,99,37,99,0,103,116,0,108,116,0,97,109,112,0,113,117,111,116,0,110,98,115,112,0,97,112,111,115,0,115,112,101,97,107,0,118,111,105,99,101,0,112,114,111,115,111,100,121,0,115,97,121,45,97,115,0,109,97,114,107,0,115,0,112,0,112,104,111,110,101,109,101,0,115,117,98,0,116,116,115,58,115,116,121,108,101,0,97,117,100,105,111,0,101,109,112,104,97,115,105,115,0,98,114,101,97,107,0,109,101,116,97,100,97,116,97,0,98,114,0,108,105,0,100,100,0,105,109,103,0,116,100,0,104,49,0,104,50,0,104,51,0,104,52,0,104,114,0,115,99,114,105,112,116,0,115,116,121,108,101,0,102,111,110,116,0,98,0,105,0,115,116,114,111,110,103,0,101,109,0,99,111,100,101,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,102,105,101,108,100,0,109,111,100,101,0,112,117,110,99,116,117,97,116,105,111,110,0,110,111,110,101,0,97,108,108,0,115,111,109,101,0,99,97,112,105,116,97,108,95,108,101,116,116,101,114,115,0,110,111,0,115,112,101,108,108,105,110,103,0,105,99,111,110,0,0,83,65,80,82,0,67,0,0,0,0,0,70,0,0,37,99,37,100,37,99,0,114,97,116,101,0,118,111,108,117,109,101,0,114,97,110,103,101,0,120,45,115,108,111,119,0,115,108,111,119,0,109,101,100,105,117,109,0,102,97,115,116,0,120,45,102,97,115,116,0,115,105,108,101,110,116,0,120,45,115,111,102,116,0,115,111,102,116,0,108,111,117,100,0,120,45,108,111,117,100,0,120,45,108,111,119,0,108,111,119,0,104,105,103,104,0,120,45,104,105,103,104,0,108,101,118,101,108,0,114,101,100,117,99,101,100,0,109,111,100,101,114,97,116,101,0,120,45,115,116,114,111,110,103,0,50,50,40,70,90,100,100,100,70,110,135,150,100,100,75,100,120,150,105,110,116,101,114,112,114,101,116,45,97,115,0,102,111,114,109,97,116,0,100,101,116,97,105,108,0,99,104,97,114,97,99,116,101,114,115,0,116,116,115,58,99,104,97,114,0,116,116,115,58,107,101,121,0,116,116,115,58,100,105,103,105,116,115,0,116,101,108,101,112,104,111,110,101,0,103,108,121,112,104,115,0,37,99,37,100,89,0,115,112,97,99,101,32,0,116,97,98,32,0,117,110,100,101,114,115,99,111,114,101,32,0,100,111,117,98,108,101,45,113,117,111,116,101,32,0,97,108,105,97,115,0,37,99,37,100,77,0,115,114,99,0,37,115,47,37,115,0,37,115,37,99,115,111,117,110,100,105,99,111,110,115,37,99,37,115,0,47,116,109,112,47,101,115,112,101,97,107,88,88,88,88,88,88,0,115,111,120,32,34,37,115,34,32,45,114,32,37,100,32,45,99,49,32,45,116,32,119,97,118,32,37,115,10,0,37,99,37,100,73,0,37,99,37,100,85,0,115,116,114,101,110,103,116,104,0,120,45,119,101,97,107,0,119,101,97,107,0,37,99,37,100,66,0,116,105,109,101,0,120,109,108,58,98,97,115,101,0,120,109,108,58,108,97,110,103,0,97,103,101,0,110,101,117,116,114,97,108,0,32,32,32,0,105,32,0,91,2,37,115,93,93,0,1,37,100,73,32,0,95,46,112,0,91,2,95,94,95,37,115,32,37,115,32,95,94,95,37,115,93,93,0,91,2,37,115,93,93,32,0,91,2,40,88,49,41,40,88,49,41,40,88,49,41,93,93,0,32,37,115,0,1,43,49,48,83,0,32,1,45,49,48,83,0,32,37,115,32,37,100,32,37,115,0,255,255,255,255,255,253,249,245,242,238,235,232,228,225,222,218,216,213,210,207,204,201,198,196,193,191,188,186,183,181,179,176,174,172,169,168,165,163,161,159,158,155,153,152,150,148,146,145,143,141,139,137,136,135,133,131,130,129,127,126,124,123,122,120,119,118,117,115,114,113,112,111,110,109,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,89,88,87,86,85,84,83,82,82,81,80,80,79,78,77,76,76,75,75,74,73,72,71,71,70,69,69,68,67,67,66,66,65,64,64,63,62,62,61,61,60,59,59,58,58,57,57,56,56,55,54,54,53,53,52,52,52,51,50,50,49,49,48,48,47,47,46,46,46,45,45,44,44,44,43,43,42,41,40,40,40,39,39,39,38,38,38,37,37,37,36,36,35,35,35,35,34,34,34,33,33,33,32,32,31,31,31,30,30,30,29,29,29,29,28,28,27,27,27,27,26,26,26,26,25,25,25,24,24,24,24,23,23,23,23,22,22,22,21,21,21,21,20,20,20,20,19,19,19,18,18,17,17,17,16,16,16,16,16,16,15,15,15,15,14,14,14,13,13,13,12,12,12,12,11,11,11,11,10,10,10,9,9,9,8,8,8,120,121,120,119,119,118,118,117,116,116,115,114,113,112,112,111,111,110,109,108,107,106,106,104,103,103,102,102,102,101,101,99,98,98,97,96,96,95,94,93,91,90,91,90,89,88,86,85,86,85,85,84,82,81,80,79,77,78,78,76,77,75,75,74,73,71,72,70,69,69,69,67,65,64,63,63,63,61,61,59,59,59,58,56,57,58,56,54,53,52,52,53,52,52,50,48,47,47,45,46,45,22,22,22,22,22,22,22,21,21,21,21,20,20,19,19,18,17,16,15,15,15,15,15,15,15,101,115,112,101,97,107,58,32,66,97,100,32,105,110,116,111,110,97,116,105,111,110,32,100,97,116,97,10,0,95,108,105,103,0,95,115,109,99,0,95,116,117,114,0,95,114,101,118,0,95,99,114,108,0,95,97,99,117,0,95,98,114,118,0,95,104,97,99,0,95,99,101,100,0,95,99,105,114,0,95,100,105,97,0,95,97,99,50,0,95,100,111,116,0,95,103,114,118,0,95,109,99,110,0,95,111,103,111,0,95,114,110,103,0,95,115,116,107,0,95,116,108,100,0,95,98,97,114,0,95,114,102,120,0,95,104,111,107,0,37,115,37,99,37,115,37,99,37,115,37,115,0,37,115,37,99,37,99,37,115,0,37,99,37,115,37,99,37,115,37,99,0,95,35,37,100,32,0,95,99,97,112,0,95,115,117,98,0,95,115,117,112,0,95,63,65,0,95,63,63,0,108,39,101,116,64,0,37,120,0,39,101,58,106,0,98,39,105,58,0,115,39,105,58,0,100,39,105,58,0,39,105,58,0,39,101,102,0,9,0,37,99,37,115,37,115,37,115,0,105,120,99,109,118,108,100,0,95,114,111,109,97,110,0,32,32,37,100,32,37,115,32,32,32,32,0,95,35,37,115,0,95,120,35,37,115,0,95,48,0,95,100,112,116,0,95,37,100,77,37,100,111,0,95,37,100,77,37,100,101,0,95,37,100,77,37,100,120,0,95,37,100,77,37,100,0,95,48,111,102,0,49,77,0,48,77,65,0,48,77,66,0,48,77,0,95,37,115,37,100,111,0,95,37,115,37,100,101,0,95,37,115,37,100,120,0,95,37,115,37,100,0,95,48,77,37,100,0,95,48,77,50,0,95,37,100,77,49,0,95,48,77,49,0,95,46,0,95,37,100,110,0,37,0,95,48,67,111,0,95,48,67,48,0,95,48,67,0,95,37,100,102,120,0,95,37,100,102,0,95,37,100,37,99,120,0,95,37,100,37,99,0,95,37,100,101,0,95,37,100,111,0,95,37,100,97,0,95,37,100,0,95,37,100,88,37,99,0,95,37,100,88,102,0,95,37,100,88,0,95,111,114,100,50,48,0,95,111,114,100,0,95,48,97,110,100,0,37,115,37,115,37,115,37,115,0,37,115,37,99,37,115,37,99,0,95,37,100,67,111,0,95,37,100,67,48,0,95,37,100,67,0,37,115,37,115,37,99,37,115,37,115,0,37,115,37,115,37,115,37,99,37,115,0,95,48,90,37,100,0,95,37,99,100,0,95,100,112,116,50,0,11,0,37,115,47,109,98,114,111,108,97,47,37,115,0,47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,37,115,0,47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,37,115,47,37,115,0,47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,118,111,105,99,101,115,47,37,115,0,37,115,47,109,98,114,111,108,97,95,112,104,47,37,115,0,37,115,9,0,32,48,32,37,100,0,32,37,100,32,37,100,0,10,0,9,49,48,48,32,37,100,10,0,37,100,9,37,115,0,37,115,9,37,100,9,37,115,0,37,100,10,37,115,9,0,37,100,37,115,10,0,95,32,9,37,100,10,0,112,104,111,110,116,97,98,0,114,98,0,67,97,110,39,116,32,114,101,97,100,32,100,97,116,97,32,102,105,108,101,58,32,39,37,115,39,10,0,112,104,111,110,105,110,100,101,120,0,112,104,111,110,100,97,116,97,0,105,110,116,111,110,97,116,105,111,110,115,0,101,115,112,101,97,107,58,32,78,111,32,101,110,118,101,108,111,112,101,10,0,99,111,110,102,105,103,0,108,111,103,0,37,100,32,37,115,0,119,0,112,97,95,100,101,118,105,99,101,0,115,111,117,110,100,105,99,111,110,0,95,37,99,32,37,115,0,0,1,0,0,1,1,0,1,1,2,4,0,0,0,0,0,73,110,118,97,108,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,37,46,52,120,32,102,111,114,32,112,104,111,110,101,109,101,32,39,37,115,39,10,0,37,115,10,0,1,100,120,100,105,100,110,110,100,95,100,105,120,105,110,125,130,135,115,125,100,105,120,75,100,75,105,120,85,75,100,105,120,85,105,95,115,120,100,95,100,110,120,95,105,100,115,120,100,100,100,105,120,100,105,95,115,120,110,95,100,105,120,100,105,105,122,125,110,105,100,105,120,100,105,105,122,125,110,105,100,105,120,95,105,100,115,120,110,100,100,100,120,100,100,100,100,100,100,100,100,100,150,100,105,110,115,110,110,110,100,105,150,105,110,125,135,140,115,135,100,105,150,90,105,90,122,135,100,90,100,105,150,100,105,100,122,135,100,100,100,105,150,100,105,105,115,135,110,105,100,105,150,100,105,105,122,130,120,125,100,105,150,100,105,110,122,125,115,110,100,105,150,100,105,105,122,135,120,105,100,105,150,100,105,105,115,135,110,105,100,100,100,100,100,100,100,100,100,100,100,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,100,110,110,110,100,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,110,120,100,110,110,110,110,110,110,110,0,192,224,240,255,31,15,7,40,37,115,41,32,37,115,32,32,45,62,32,40,37,115,41,32,0,37,115,10,10,0,95,48,108,97,110,103,0,37,99,0,32,32,115,117,102,102,105,120,32,91,37,115,93,10,10,0,0,115,115,0,104,115,120,0,0,122,122,0,0,105,122,0,37,115,37,115,37,115,0,101,115,0,98,112,0,98,104,102,0,100,116,0,103,99,0,104,65,0,110,100,0,110,103,0,116,115,0,116,65,0,110,65,0,67,76,65,85,83,69,32,37,120,58,10,0,69,78,68,67,76,65,85,83,69,10,0,80,83,65,82,72,84,73,86,89,77,85,66,70,0,0,0,1,170,2,172,173,3,4,5,176,177,178,179,180,180,182,6,7,8,185,9,10,188,12,13,14,15,16,17,18,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,87,79,82,68,58,32,102,108,103,61,37,46,53,120,32,108,101,110,61,37,100,32,32,39,0,39,10,0,95,94,95,0,109,98,114,111,108,97,32,105,110,105,116,32,114,101,113,117,101,115,116,32,119,104,101,110,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,0,109,98,114,111,119,114,97,112,32,101,114,114,111,114,58,32,37,115,0,112,105,112,101,40,41,58,32,37,115,0,102,111,114,107,40,41,58,32,37,115,0,100,117,112,50,40,41,58,32,37,115,10,0,37,103,0,45,101,0,45,118,0,45,46,119,97,118,0,109,98,114,111,108,97,58,32,37,115,10,0,47,112,114,111,99,47,37,100,47,115,116,97,116,0,47,112,114,111,99,32,105,115,32,117,110,97,99,99,101,115,115,105,98,108,101,58,32,37,115,0,102,99,110,116,108,40,41,58,32,37,115,0,35,10,0,114,101,97,100,40,101,114,114,111,114,41,58,32,37,115,0,109,98,114,111,108,97,32,99,108,111,115,101,100,32,115,116,100,101,114,114,32,97,110,100,32,100,105,100,32,110,111,116,32,101,120,105,116,0,119,97,105,116,112,105,100,40,41,32,105,115,32,99,111,110,102,117,115,101,100,0,109,98,114,111,108,97,32,100,105,101,100,32,98,121,32,115,105,103,110,97,108,32,37,100,0,109,98,114,111,108,97,32,101,120,105,116,101,100,32,119,105,116,104,32,115,116,97,116,117,115,32,37,100,0,109,98,114,111,108,97,32,100,105,101,100,32,97,110,100,32,119,97,105,116,32,115,116,97,116,117,115,32,105,115,32,119,101,105,114,100,0,44,32,40,37,115,41,0,71,111,116,32,97,32,114,101,115,101,116,32,115,105,103,110,97,108,0,73,110,112,117,116,32,70,108,117,115,104,32,83,105,103,110,97,108,0,109,98,114,111,108,97,58,32,37,115,0,119,114,105,116,101,40,41,58,32,37,115,0,112,111,108,108,40,41,58,32,37,115,0,109,98,114,111,108,97,32,112,114,111,99,101,115,115,32,105,115,32,115,116,97,108,108,101,100,0,114,101,97,100,40,41,58,32,37,115,0,117,110,97,98,108,101,32,116,111,32,103,101,116,32,46,119,97,118,32,104,101,97,100,101,114,32,102,114,111,109,32,109,98,114,111,108,97,0,82,73,70,70,0,87,65,86,69,102,109,116,32,0,109,98,114,111,108,97,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,46,119,97,118,32,104,101,97,100,101,114,0,10,35,10,0,95,101,108,0,95,99,121,114,0,95,104,121,0,95,104,101,0,95,97,114,0,95,115,121,99,0,95,100,118,0,95,104,105,0,95,98,110,0,95,103,117,114,0,95,103,117,0,95,111,114,0,95,116,97,0,95,116,101,0,95,107,110,0,95,109,108,0,95,115,105,0,95,116,104,0,95,108,111,0,95,116,105,0,95,109,121,0,95,107,97,0,95,107,111,0,95,101,116,104,0,95,98,114,97,105,108,108,101,0,95,106,97,0,95,122,104,0,96,97,85,86,87,98,99,0,2,3,88,89,90,91,92,93,94,95,123,124,126,127,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,29,0,0,30,31,32,33,34,35,36,0,37,38,0,0,0,0,39,0,0,40,0,41,0,42,0,43,0,0,0,0,0,0,44,0,45,0,46,0,0,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,53,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,56,0,57,0,97,101,105,111,117,0,98,99,100,102,103,106,107,108,109,110,112,113,115,116,118,120,122,0,98,99,100,102,103,104,106,107,108,109,110,112,113,114,115,116,118,119,120,122,0,104,108,109,110,114,0,99,102,104,107,112,113,115,116,120,0,98,100,103,106,108,109,110,114,118,119,121,122,0,101,105,121,0,97,101,105,111,117,121,0,18,18,20,20,20,22,22,20,0,1,2,3,0,0,18,16,18,18,18,18,18,18,16,21,49,24,30,35,43,45,46,47,185,201,145,143,54,0,44,25,39,41,0,17,18,19,20,22,23,25,26,27,28,29,31,32,33,34,36,37,38,39,40,41,42,44,115,123,131,155,0,42,22,38,40,0,17,18,19,20,23,25,26,27,28,29,31,32,33,34,36,37,39,41,44,0,17,18,19,20,22,23,0,44,46,47,49,0,18,18,18,18,20,20,22,22,112,113,0,17,15,18,18,0,0,22,20,20,20,20,20,20,22,22,20,18,18,18,18,20,20,22,22,15,12,20,20,20,22,22,21,16,44,45,46,47,48,49,53,55,57,63,69,73,74,75,76,77,78,79,0,56,58,62,64,66,67,68,70,71,0,50,51,52,54,56,58,59,60,61,62,64,65,66,67,68,70,71,72,0,45,46,47,53,55,57,69,77,0,16,14,20,20,20,22,22,21,16,12,18,18,20,20,20,20,194,186,0,16,16,18,18,18,18,18,18,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,0,0,0,0,0,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,51,18,16,22,22,20,22,22,22,17,14,20,19,20,22,22,21,19,19,19,19,19,19,19,19,104,98,115,0,17,17,20,20,20,22,22,21,17,17,19,19,20,22,22,21,49,53,55,56,59,72,85,0,50,51,52,54,57,58,60,61,62,63,64,65,66,67,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,86,0,69,0,16,18,18,18,20,22,22,21,107,112,115,116,0,106,118,114,0,16,15,16,14,20,22,22,24,48,52,56,61,67,85,87,0,49,50,51,53,54,55,57,58,59,60,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,0,18,16,20,21,20,21,21,20,99,100,103,104,109,114,116,117,0,2,5,6,171,175,183,188,0,18,18,20,20,20,22,22,21,17,13,20,20,20,22,22,21,17,17,20,20,20,22,22,21,101,0,18,15,20,20,20,22,22,22,17,13,19,19,20,22,22,21,16,11,19,21,20,22,22,21,98,99,100,102,103,106,107,109,110,112,113,115,116,118,120,122,0,15,13,18,18,20,22,22,21,16,16,18,18,20,24,24,22,44,21,24,46,47,0,17,16,20,20,20,22,22,21,98,100,103,106,108,109,110,114,118,119,122,97,101,105,111,117,121,0,16,12,16,16,20,20,21,19,16,16,20,20,20,22,22,21,16,12,19,19,20,22,22,21,18,16,20,21,20,21,21,20,16,16,16,16,22,22,22,22,22,16,22,22,22,22,22,22,117,110,107,110,111,119,110,0,109,97,108,101,0,102,101,109,97,108,101,0,1,2,12,3,13,4,14,5,11,0,0,0,1,2,3,4,5,6,0,0,0,0,0,0,11,12,13,14,0,0,0,0,0,0,0,0,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0,130,128,120,116,100,100,128,128,128,140,128,128,160,171,171,128,128,128,37,115,37,99,118,111,105,99,101,115,37,99,0,37,115,37,115,0,109,98,0,37,115,32,0,97,110,32,98,103,32,98,115,32,99,97,32,99,115,32,99,121,32,100,97,32,100,101,32,101,108,32,101,110,32,101,110,45,117,115,32,101,115,32,101,116,32,101,117,32,102,105,32,102,114,32,102,114,45,98,101,32,103,97,32,104,114,32,104,117,32,105,115,32,105,116,32,108,116,32,108,118,32,109,107,32,110,108,32,110,111,32,112,108,32,112,116,45,112,116,32,114,111,32,114,117,32,115,107,32,115,113,32,115,114,32,115,118,32,0,101,117,114,111,112,101,0,97,122,32,98,110,32,102,97,32,102,97,45,112,105,110,32,103,117,32,104,105,32,104,121,32,104,121,45,119,101,115,116,32,105,100,32,107,97,32,107,110,32,107,117,32,109,108,32,109,115,32,110,101,32,112,97,32,116,97,32,116,101,32,116,114,32,118,105,32,118,105,45,104,117,101,32,118,105,45,115,103,110,32,122,104,32,122,104,45,121,117,101,32,0,97,115,105,97,0,111,116,104,101,114,0,37,115,37,115,37,99,37,115,0,37,115,116,101,115,116,37,99,37,115,0,114,0,101,110,0,43,37,115,0,47,47,0,110,97,109,101,0,108,97,110,103,117,97,103,101,0,103,101,110,100,101,114,0,102,111,114,109,97,110,116,0,112,105,116,99,104,0,112,104,111,110,101,109,101,115,0,116,114,97,110,115,108,97,116,111,114,0,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,115,115,76,101,110,103,116,104,0,115,116,114,101,115,115,65,109,112,0,115,116,114,101,115,115,65,100,100,0,105,110,116,111,110,97,116,105,111,110,0,116,117,110,101,115,0,100,105,99,116,114,117,108,101,115,0,115,116,114,101,115,115,114,117,108,101,0,115,116,114,101,115,115,111,112,116,0,99,104,97,114,115,101,116,0,114,101,112,108,97,99,101,0,119,111,114,100,115,0,101,99,104,111,0,102,108,117,116,116,101,114,0,114,111,117,103,104,110,101,115,115,0,99,108,97,114,105,116,121,0,116,111,110,101,0,118,111,105,99,105,110,103,0,98,114,101,97,116,104,0,98,114,101,97,116,104,119,0,110,117,109,98,101,114,115,0,111,112,116,105,111,110,0,109,98,114,111,108,97,0,99,111,110,115,111,110,97,110,116,115,0,107,108,97,116,116,0,102,97,115,116,95,116,101,115,116,50,0,115,112,101,101,100,0,100,105,99,116,95,109,105,110,0,97,108,112,104,97,98,101,116,50,0,100,105,99,116,100,105,97,108,101,99,116,0,108,95,100,105,101,114,101,115,105,115,0,108,95,112,114,101,102,105,120,0,108,95,114,101,103,114,101,115,115,105,118,101,95,118,0,108,95,117,110,112,114,111,110,111,117,110,99,97,98,108,101,0,108,95,115,111,110,111,114,97,110,116,95,109,105,110,0,108,95,108,101,110,103,116,104,95,109,111,100,115,0,97,112,111,115,116,114,111,112,104,101,0,37,115,32,37,100,0,118,97,114,105,97,110,116,0,45,0,37,115,0,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0,37,100,32,37,100,0,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0,37,115,32,37,115,32,37,115,32,37,115,32,37,115,32,37,115,0,78,85,76,76,0,85,110,107,110,111,119,110,32,116,117,110,101,32,39,37,115,39,10,0,66,97,100,32,111,112,116,105,111,110,32,110,117,109,98,101,114,32,37,100,10,0,37,100,32,37,115,32,37,115,0,37,100,32,37,100,32,37,100,32,37,100,0,37,100,0,37,115,32,37,100,32,37,100,0,114,101,100,117,99,101,95,116,0,98,114,97,99,107,101,116,0,37,100,32,37,100,32,37,100,0,66,97,100,32,118,111,105,99,101,32,111,112,116,105,111,110,58,32,37,115,32,37,115,10,0,37,115,32,37,115,32,37,100,0,109,98,114,111,108,97,32,118,111,105,99,101,32,110,111,116,32,102,111,117,110,100,10,0,37,115,32,37,115,0,108,97,116,105,110,0,97,108,112,104,97,98,101,116,32,110,97,109,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,10,0,101,110,45,117,115,0,101,115,45,108,97,0,100,105,99,116,100,105,97,108,101,99,116,32,110,97,109,101,32,39,37,115,39,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,10,0,66,97,100,32,118,111,105,99,101,32,97,116,116,114,105,98,117,116,101,58,32,37,115,10,0,85,110,107,110,111,119,110,32,112,104,111,110,101,109,101,32,116,97,98,108,101,58,32,39,37,115,39,10,0,33,118,37,99,0,37,115,109,37,100,0,37,115,102,37,100,0,37,115,37,99,118,111,105,99,101,115,0,37,115,37,99,37,115,0,118,97,114,105,97,110,116,115,0,37,115,47,118,111,105,99,101,115,47,37,115,0,109,98,47,0,116,101,115,116,47,0,37,99,37,115,0,37,115,43,37,115,0,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,91,92,93,94,96,97,98,100,101,103,104,105,107,108,110,111,113,115,116,118,119,121,123,124,126,128,130,132,133,135,137,139,141,143,145,147,149,151,153,155,158,160,162,164,167,169,171,174,176,179,181,184,186,189,191,194,197,199,202,205,208,211,214,217,220,223,226,229,232,236,239,242,246,249,252,254,255,255,254,254,254,254,254,253,253,252,251,251,250,249,248,247,246,245,244,242,241,239,238,236,234,233,231,229,227,225,223,220,218,216,213,211,209,207,205,203,201,199,197,195,193,191,189,187,185,183,180,178,176,173,171,169,166,164,161,159,156,154,151,148,146,143,140,138,135,132,129,126,123,120,118,115,112,108,105,102,99,96,95,93,91,90,88,86,85,83,82,80,79,77,76,74,73,72,70,69,68,67,66,64,63,62,61,60,59,58,57,56,55,55,54,53,52,52,51,50,50,49,48,48,47,47,46,46,46,45,45,45,44,44,44,44,44,44,44,43,43,43,43,44,43,42,42,41,40,40,39,38,38,37,36,36,35,35,34,33,33,32,32,31,30,30,29,29,28,28,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,18,17,17,16,16,15,15,15,14,14,13,13,13,12,12,11,11,11,10,10,10,9,9,9,8,8,8,7,7,7,7,6,6,6,5,5,5,5,4,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,8,11,14,18,22,27,32,37,43,49,55,62,69,76,83,90,98,105,113,121,128,136,144,152,159,166,174,181,188,194,201,207,213,218,224,228,233,237,240,244,246,249,251,252,253,253,253,253,252,251,249,246,244,240,237,233,228,224,218,213,207,201,194,188,181,174,166,159,152,144,136,128,121,113,105,98,90,83,76,69,62,55,49,43,37,32,27,22,18,14,11,8,5,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,254,254,254,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,251,250,250,249,249,248,248,247,247,246,245,245,244,243,243,242,241,239,237,235,233,231,229,227,225,223,221,218,216,213,211,208,205,203,200,197,194,191,187,184,181,178,174,171,167,163,160,156,152,148,144,140,136,132,127,123,119,114,110,105,100,96,94,91,88,86,83,81,78,76,74,71,69,66,64,62,60,57,55,53,51,49,47,44,42,40,38,36,34,32,30,29,27,25,23,21,19,18,16,14,12,11,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,10,16,22,128,155,181,203,220,232,237,236,230,220,206,191,176,163,152,144,140,139,140,143,146,148,149,146,140,131,120,105,89,73,60,49,42,41,45,54,68,86,105,125,143,159,170,177,178,173,164,150,135,120,105,92,83,79,79,85,94,107,122,136,150,162,171,176,177,174,168,160,152,145,139,136,137,141,148,157,168,178,187,192,193,189,180,165,146,124,99,74,50,30,14,5,2,5,15,30,48,68,89,109,127,140,150,156,159,159,157,155,153,153,156,161,169,179,191,202,213,220,224,222,216,204,187,166,143,119,96,75,58,46,40,41,47,58,72,89,106,122,134,144,148,149,145,137,128,117,107,98,92,90,92,97,105,116,128,138,148,154,158,157,152,144,134,124,113,104,98,96,99,107,120,136,155,175,194,210,223,230,231,226,215,198,178,156,132,111,91,75,64,57,55,56,61,67,74,80,84,86,85,82,77,72,66,63,62,65,73,86,103,124,147,171,195,217,234,246,252,251,244,231,213,192,170,148,128,113,100,93,90,92,97,104,112,119,125,127,127,123,116,107,97,87,78,72,70,72,78,89,102,117,132,147,159,167,171,170,164,153,139,123,106,91,78,70,67,69,77,90,107,127,146,166,184,197,207,211,210,205,196,185,173,161,150,142,137,135,135,138,141,145,146,145,140,132,120,104,85,65,46,28,14,5,1,5,15,31,52,77,104,129,154,176,193,205,211,211,208,200,191,181,171,164,159,156,157,160,165,170,174,177,176,171,163,150,135,118,99,81,66,54,47,45,49,58,72,89,107,126,142,156,166,170,169,163,152,138,123,108,93,82,74,72,74,80,90,103,117,130,0,0,0,0,0,70,242,41,0,47,0,47,0,69,242,41,0,47,0,46,0,69,242,40,0,46,0,45,0,52,242,40,0,45,45,44,0,52,242,40,0,43,43,43,0,52,242,40,0,42,42,42,0,52,242,40,0,41,41,41,0,52,242,40,0,23,10,9,24,19,24,24,6,7,8,3,0,100,101,102,97,117,108,116,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,88,88,88,88,88,88,0,67,46,85,84,70,45,56,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      Module.printErr('Calling stub instead of kill()');
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }function _execlp() {
  return _execl.apply(null, arguments)
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  var _llvm_fabs_f64=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }function _waitpid() {
  return _wait.apply(null, arguments)
  }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function __Exit(status) {
      __exit(status);
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

  function ___gxx_personality_v0() {
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall51(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // acct
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall42() {
  return ___syscall51.apply(null, arguments)
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 < count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "___cxa_throw": ___cxa_throw, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_llvm_pow_f64": _llvm_pow_f64, "___syscall168": ___syscall168, "___syscall63": ___syscall63, "___syscall42": ___syscall42, "___syscall6": ___syscall6, "___syscall40": ___syscall40, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "_fork": _fork, "___gxx_personality_v0": ___gxx_personality_v0, "_system": _system, "__Exit": __Exit, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "_clock_gettime": _clock_gettime, "___syscall10": ___syscall10, "_signal": _signal, "_wait": _wait, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_usleep": _usleep, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "_execl": _execl, "_nanosleep": _nanosleep, "___syscall195": ___syscall195, "_pthread_self": _pthread_self, "_kill": _kill, "_getenv": _getenv, "___syscall51": ___syscall51, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_get_now": _emscripten_get_now, "_execlp": _execlp, "___syscall220": ___syscall220, "___syscall3": ___syscall3, "___lock": ___lock, "_abort": _abort, "___syscall5": ___syscall5, "___clock_gettime": ___clock_gettime, "_time": _time, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall4": ___syscall4, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_waitpid": _waitpid, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var ___cxa_throw=env.___cxa_throw;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___syscall168=env.___syscall168;
  var ___syscall63=env.___syscall63;
  var ___syscall42=env.___syscall42;
  var ___syscall6=env.___syscall6;
  var ___syscall40=env.___syscall40;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _fork=env._fork;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _system=env._system;
  var __Exit=env.__Exit;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _clock_gettime=env._clock_gettime;
  var ___syscall10=env.___syscall10;
  var _signal=env._signal;
  var _wait=env._wait;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _usleep=env._usleep;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var _execl=env._execl;
  var _nanosleep=env._nanosleep;
  var ___syscall195=env.___syscall195;
  var _pthread_self=env._pthread_self;
  var _kill=env._kill;
  var _getenv=env._getenv;
  var ___syscall51=env.___syscall51;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_get_now=env._emscripten_get_now;
  var _execlp=env._execlp;
  var ___syscall220=env.___syscall220;
  var ___syscall3=env.___syscall3;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___syscall5=env.___syscall5;
  var ___clock_gettime=env.___clock_gettime;
  var _time=env._time;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___syscall4=env.___syscall4;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _waitpid=env._waitpid;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z13GetFileLengthPKc($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $statbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $statbuf = sp;
 $1 = $filename;
 $2 = $1;
 $3 = (_stat($2,$statbuf)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = ((($statbuf)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 61440;
   $8 = ($7|0)==(16384);
   if ($8) {
    $0 = -2;
    break;
   } else {
    $9 = ((($statbuf)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $0 = $10;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function __Z5Alloci($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 $p = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $5 = $p;
  STACKTOP = sp;return ($5|0);
 }
 $4 = HEAP32[1295]|0;
 (_fprintf($4,16568,$vararg_buffer)|0);
 $5 = $p;
 STACKTOP = sp;return ($5|0);
}
function __Z4FreePv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _free($3);
 }
 STACKTOP = sp;return;
}
function __Z11MarkerEventijiiPh($type,$char_position,$value,$value2,$out_ptr) {
 $type = $type|0;
 $char_position = $char_position|0;
 $value = $value|0;
 $value2 = $value2|0;
 $out_ptr = $out_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $ep = 0, $or$cond = 0, $p = 0, $time = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $char_position;
 $2 = $value;
 $3 = $value2;
 $4 = $out_ptr;
 $5 = HEAP32[10331]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[10332]|0;
 $8 = HEAP32[10333]|0;
 $9 = (($8) - 2)|0;
 $10 = ($7|0)>=($9|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[10332]|0;
 $12 = (($11) + 1)|0;
 HEAP32[10332] = $12;
 $13 = HEAP32[10331]|0;
 $14 = (($13) + (($11*36)|0)|0);
 $ep = $14;
 $15 = $0;
 $16 = $ep;
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[10339]|0;
 $18 = $ep;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = HEAP32[10340]|0;
 $21 = $ep;
 $22 = ((($21)) + 24|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = $23 & 16777215;
 $25 = $ep;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $24;
 $27 = $1;
 $28 = $27 >>> 24;
 $29 = $ep;
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = $28;
 $31 = HEAP32[10334]|0;
 $32 = HEAP32[18664]|0;
 $33 = (($31) + ($32))|0;
 $34 = $4;
 $35 = HEAP32[20119]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 2)&-1;
 $40 = (($33) + ($39))|0;
 $41 = (+($40|0));
 $42 = $41 * 1000.0;
 $43 = HEAP32[20097]|0;
 $44 = (+($43|0));
 $45 = $42 / $44;
 $time = $45;
 $46 = $time;
 $47 = (~~(($46)));
 $48 = $ep;
 $49 = ((($48)) + 16|0);
 HEAP32[$49>>2] = $47;
 $50 = HEAP32[10334]|0;
 $51 = HEAP32[18664]|0;
 $52 = (($50) + ($51))|0;
 $53 = $4;
 $54 = HEAP32[20119]|0;
 $55 = $53;
 $56 = $54;
 $57 = (($55) - ($56))|0;
 $58 = (($57|0) / 2)&-1;
 $59 = (($52) + ($58))|0;
 $60 = $ep;
 $61 = ((($60)) + 20|0);
 HEAP32[$61>>2] = $59;
 $62 = $0;
 $63 = ($62|0)==(3);
 $64 = $0;
 $65 = ($64|0)==(4);
 $or$cond = $63 | $65;
 if ($or$cond) {
  $66 = $2;
  $67 = HEAP32[10364]|0;
  $68 = (($67) + ($66)|0);
  $69 = $ep;
  $70 = ((($69)) + 28|0);
  HEAP32[$70>>2] = $68;
  STACKTOP = sp;return;
 }
 $71 = $0;
 $72 = ($71|0)==(7);
 if ($72) {
  $73 = $ep;
  $74 = ((($73)) + 28|0);
  $p = $74;
  $75 = $2;
  $76 = $p;
  HEAP32[$76>>2] = $75;
  $77 = $3;
  $78 = $p;
  $79 = ((($78)) + 4|0);
  HEAP32[$79>>2] = $77;
  STACKTOP = sp;return;
 } else {
  $80 = $2;
  $81 = $ep;
  $82 = ((($81)) + 28|0);
  HEAP32[$82>>2] = $80;
  STACKTOP = sp;return;
 }
}
function __Z17sync_espeak_SynthjPKvjj20espeak_POSITION_TYPEjjPv($unique_identifier,$text,$size,$position,$position_type,$end_position,$flags,$user_data) {
 $unique_identifier = $unique_identifier|0;
 $text = $text|0;
 $size = $size|0;
 $position = $position|0;
 $position_type = $position_type|0;
 $end_position = $end_position|0;
 $flags = $flags|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aStatus = 0, $i = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $unique_identifier;
 $1 = $text;
 $2 = $size;
 $3 = $position;
 $4 = $position_type;
 $5 = $end_position;
 $6 = $flags;
 $7 = $user_data;
 $8 = $6;
 __Z8InitTexti($8);
 $9 = $0;
 HEAP32[10339] = $9;
 $10 = $7;
 HEAP32[10340] = $10;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(15);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = ((41476) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $i;
  $17 = (42752 + ($16<<2)|0);
  HEAP32[$17>>2] = $15;
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 $20 = $4;
 switch ($20|0) {
 case 1:  {
  $21 = $3;
  HEAP32[19053] = $21;
  break;
 }
 case 2:  {
  $22 = $3;
  HEAP32[19052] = $22;
  break;
 }
 case 3:  {
  $23 = $3;
  HEAP32[19051] = $23;
  break;
 }
 default: {
 }
 }
 $24 = HEAP32[19053]|0;
 $25 = ($24|0)!=(0);
 $26 = HEAP32[19052]|0;
 $27 = ($26|0)!=(0);
 $or$cond = $25 | $27;
 $28 = HEAP32[19051]|0;
 $29 = ($28|0)!=(0);
 $or$cond3 = $or$cond | $29;
 if (!($or$cond3)) {
  $30 = $5;
  HEAP32[19055] = $30;
  $31 = $0;
  $32 = $1;
  $33 = $6;
  $34 = (__ZL10SynthesizejPKvi($31,$32,$33)|0);
  $aStatus = $34;
  $35 = $aStatus;
  STACKTOP = sp;return ($35|0);
 }
 HEAP32[19054] = 1;
 $30 = $5;
 HEAP32[19055] = $30;
 $31 = $0;
 $32 = $1;
 $33 = $6;
 $34 = (__ZL10SynthesizejPKvi($31,$32,$33)|0);
 $aStatus = $34;
 $35 = $aStatus;
 STACKTOP = sp;return ($35|0);
}
function __ZL10SynthesizejPKvi($unique_identifier,$text,$flags) {
 $unique_identifier = $unique_identifier|0;
 $text = $text|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $count_buffers = 0, $finished = 0, $length = 0;
 var $or$cond = 0, $period = 0, $remaining = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $period = sp + 8|0;
 $remaining = sp;
 $1 = $unique_identifier;
 $2 = $text;
 $3 = $flags;
 $finished = 0;
 $count_buffers = 0;
 $4 = HEAP32[10330]|0;
 $5 = ($4|0)==(0|0);
 $6 = HEAP32[10331]|0;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $0 = -1;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $8 = $3;
 $9 = $8 & 7;
 HEAP32[19124] = $9;
 $10 = $3;
 $11 = $10 & 16;
 HEAP32[19047] = $11;
 $12 = $3;
 $13 = $12 & 256;
 HEAP32[19048] = $13;
 $14 = $3;
 $15 = $14 & 4096;
 HEAP32[19043] = $15;
 HEAP32[10334] = 0;
 $16 = HEAP32[19035]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  (__Z14SetVoiceByNamePKc(27486)|0);
 }
 $18 = $2;
 (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,$18,0)|0);
 $19 = HEAP32[45]|0;
 $20 = ($19|0)==(3);
 if ($20) {
  while(1) {
   HEAP32[$period>>2] = 0;
   $21 = ((($period)) + 4|0);
   HEAP32[$21>>2] = 300000000;
   (_nanosleep(($period|0),($remaining|0))|0);
   $22 = (__Z12SynthOnTimerv()|0);
   $23 = ($22|0)!=(0);
   if ($23) {
    break;
   }
  }
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 while(1) {
  $24 = HEAP32[10330]|0;
  HEAP32[20118] = $24;
  $25 = HEAP32[20121]|0;
  $26 = HEAP32[10330]|0;
  $27 = (($26) + ($25)|0);
  HEAP32[20120] = $27;
  HEAP32[10332] = 0;
  (__Z11WavegenFilli(0)|0);
  $28 = HEAP32[20118]|0;
  $29 = HEAP32[10330]|0;
  $30 = $28;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = (($32|0) / 2)&-1;
  $length = $33;
  $34 = $length;
  $35 = HEAP32[10334]|0;
  $36 = (($35) + ($34))|0;
  HEAP32[10334] = $36;
  $37 = HEAP32[10332]|0;
  $38 = HEAP32[10331]|0;
  $39 = (($38) + (($37*36)|0)|0);
  HEAP32[$39>>2] = 0;
  $40 = HEAP32[10339]|0;
  $41 = HEAP32[10332]|0;
  $42 = HEAP32[10331]|0;
  $43 = (($42) + (($41*36)|0)|0);
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $40;
  $45 = HEAP32[10340]|0;
  $46 = HEAP32[10332]|0;
  $47 = HEAP32[10331]|0;
  $48 = (($47) + (($46*36)|0)|0);
  $49 = ((($48)) + 24|0);
  HEAP32[$49>>2] = $45;
  $50 = $count_buffers;
  $51 = (($50) + 1)|0;
  $count_buffers = $51;
  $52 = HEAP32[45]|0;
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = HEAP32[10336]|0;
   $55 = HEAP32[10330]|0;
   $56 = $length;
   $57 = HEAP32[10331]|0;
   $58 = (FUNCTION_TABLE_iiii[$54 & 63]($55,$56,$57)|0);
   $finished = $58;
  }
  $59 = $finished;
  $60 = ($59|0)!=(0);
  if ($60) {
   label = 11;
   break;
  }
  $61 = (__Z8GenerateP12PHONEME_LISTPii(50632,50628,1)|0);
  $62 = ($61|0)==(0);
  if (!($62)) {
   continue;
  }
  $63 = (__Z9WcmdqUsedv()|0);
  $64 = ($63|0)==(0);
  if (!($64)) {
   continue;
  }
  $65 = HEAP32[10331]|0;
  HEAP32[$65>>2] = 0;
  $66 = HEAP32[10339]|0;
  $67 = HEAP32[10331]|0;
  $68 = ((($67)) + 4|0);
  HEAP32[$68>>2] = $66;
  $69 = HEAP32[10340]|0;
  $70 = HEAP32[10331]|0;
  $71 = ((($70)) + 24|0);
  HEAP32[$71>>2] = $69;
  $72 = (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,0,1)|0);
  $73 = ($72|0)==(0);
  if ($73) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 11) {
  (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,0,2)|0);
 }
 else if ((label|0) == 15) {
  $74 = HEAP32[10336]|0;
  $75 = HEAP32[10331]|0;
  (FUNCTION_TABLE_iiii[$74 & 63](0,0,$75)|0);
 }
 $0 = 0;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function _espeak_SetSynthCallback($SynthCallback) {
 $SynthCallback = $SynthCallback|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SynthCallback;
 $1 = $0;
 HEAP32[10336] = $1;
 STACKTOP = sp;return;
}
function _espeak_Initialize($output_type,$buf_length,$path,$options) {
 $output_type = $output_type|0;
 $buf_length = $buf_length|0;
 $path = $path|0;
 $options = $options|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $param = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $output_type;
 $2 = $buf_length;
 $3 = $path;
 $4 = $options;
 $5 = (_setlocale(0,27767)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_setlocale(0,16591)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = (_setlocale(0,16597)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
   }
  }
 }
 $11 = $3;
 __ZL9init_pathPKc($11);
 $12 = $4;
 (__ZL10initialisei($12)|0);
 $13 = $1;
 __ZL13select_output19espeak_AUDIO_OUTPUT($13);
 $14 = HEAP32[11134]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[11134]|0;
  $17 = $1;
  $18 = $4;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $18;
  (_fprintf($16,16609,$vararg_buffer)|0);
 }
 $19 = $2;
 $20 = ($19|0)==(0);
 $21 = $1;
 $22 = ($21|0)==(0);
 $or$cond = $20 | $22;
 $23 = $1;
 $24 = ($23|0)==(3);
 $or$cond3 = $or$cond | $24;
 if ($or$cond3) {
  $2 = 200;
 }
 $25 = $2;
 $26 = HEAP32[20097]|0;
 $27 = Math_imul($25, $26)|0;
 $28 = (($27|0) / 500)&-1;
 HEAP32[20121] = $28;
 $29 = HEAP32[10330]|0;
 $30 = HEAP32[20121]|0;
 $31 = (_realloc($29,$30)|0);
 HEAP32[10330] = $31;
 $32 = HEAP32[10330]|0;
 HEAP32[20119] = $32;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $0 = -1;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $34 = $2;
 $35 = ($34*200)|0;
 $36 = (($35|0) / 1000)&-1;
 $37 = (($36) + 20)|0;
 HEAP32[10333] = $37;
 $38 = HEAP32[10331]|0;
 $39 = HEAP32[10333]|0;
 $40 = ($39*36)|0;
 $41 = (_realloc($38,$40)|0);
 HEAP32[10331] = $41;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $0 = -1;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 HEAP32[19040] = 0;
 $43 = $4;
 $44 = $43 & 3;
 HEAP32[19041] = $44;
 __Z10VoiceReseti(0);
 $param = 0;
 while(1) {
  $45 = $param;
  $46 = ($45|0)<(15);
  if (!($46)) {
   break;
  }
  $47 = $param;
  $48 = (1404 + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $param;
  $51 = (42752 + ($50<<2)|0);
  HEAP32[$51>>2] = $49;
  $52 = $param;
  $53 = ((41476) + ($52<<2)|0);
  HEAP32[$53>>2] = $49;
  $54 = $param;
  $55 = (($54) + 1)|0;
  $param = $55;
 }
 __Z12SetParameteriii(1,175,0);
 __Z12SetParameteriii(2,100,0);
 $56 = HEAP32[19044]|0;
 __Z12SetParameteriii(6,$56,0);
 $57 = HEAP32[19045]|0;
 __Z12SetParameteriii(5,$57,0);
 __Z12SetParameteriii(7,0,0);
 $58 = HEAP32[20097]|0;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __ZL9init_pathPKc($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $env = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $path;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  HEAP32[$vararg_buffer>>2] = $3;
  (_snprintf(118980,160,16691,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $4 = (_getenv((16706|0))|0);
 $env = $4;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $env;
  HEAP32[$vararg_buffer1>>2] = $6;
  (_snprintf(118980,160,16691,$vararg_buffer1)|0);
  $7 = (__Z13GetFileLengthPKc(118980)|0);
  $8 = ($7|0)==(-2);
  if ($8) {
   STACKTOP = sp;return;
  }
 }
 $9 = (_getenv((16723|0))|0);
 HEAP32[$vararg_buffer4>>2] = $9;
 (_snprintf(118980,160,16691,$vararg_buffer4)|0);
 $10 = (_access(118980,4)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 (_strcpy(118980,16728)|0);
 STACKTOP = sp;return;
}
function __ZL10initialisei($control) {
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $param = 0, $result = 0, $srate = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $srate = sp + 20|0;
 $0 = $control;
 HEAP32[$srate>>2] = 22050;
 HEAP32[10342] = 0;
 __Z10LoadConfigv();
 $1 = (__Z10LoadPhDataPi($srate)|0);
 $result = $1;
 $2 = ($1|0)!=(1);
 do {
  if ($2) {
   $3 = $result;
   $4 = ($3|0)==(-1);
   $5 = HEAP32[1295]|0;
   if (!($4)) {
    $9 = $result;
    $10 = HEAP32[728]|0;
    HEAP32[$vararg_buffer1>>2] = $9;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $10;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = 118980;
    (_fprintf($5,16769,$vararg_buffer1)|0);
    break;
   }
   (_fprintf($5,16741,$vararg_buffer)|0);
   $6 = $0;
   $7 = $6 & 32768;
   $8 = ($7|0)==(0);
   if ($8) {
    _exit(1);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[$srate>>2]|0;
 __Z11WavegenInitii($11,0);
 ;HEAP32[77632>>2]=0|0;HEAP32[77632+4>>2]=0|0;HEAP32[77632+8>>2]=0|0;HEAP32[77632+12>>2]=0|0;HEAP32[77632+16>>2]=0|0;HEAP32[77632+20>>2]=0|0;
 __Z13SetVoiceStackP12espeak_VOICEPKc(0,121874);
 __Z14SynthesizeInitv();
 __Z12InitNamedatav();
 $param = 0;
 while(1) {
  $12 = $param;
  $13 = ($12|0)<(15);
  if (!($13)) {
   break;
  }
  $14 = $param;
  $15 = (1404 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $param;
  $18 = ((41476) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $param;
  $20 = (($19) + 1)|0;
  $param = $20;
 }
 STACKTOP = sp;return 0;
}
function __ZL13select_output19espeak_AUDIO_OUTPUT($output_type) {
 $output_type = $output_type|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output_type;
 $1 = $0;
 HEAP32[45] = $1;
 HEAP32[10335] = 0;
 HEAP32[44] = 1;
 HEAP32[20081] = 1;
 HEAP32[10343] = 0;
 $2 = HEAP32[45]|0;
 switch ($2|0) {
 case 0:  {
  HEAP32[44] = 0;
  break;
 }
 case 1:  {
  HEAP32[44] = 0;
  break;
 }
 case 3:  {
  HEAP32[20081] = 0;
  (__Z16WavegenInitSoundv()|0);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _espeak_Synth($text,$size,$position,$position_type,$end_position,$flags,$unique_identifier,$user_data) {
 $text = $text|0;
 $size = $size|0;
 $position = $position|0;
 $position_type = $position_type|0;
 $end_position = $end_position|0;
 $flags = $flags|0;
 $unique_identifier = $unique_identifier|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a_error = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $text;
 $2 = $size;
 $3 = $position;
 $4 = $position_type;
 $5 = $end_position;
 $6 = $flags;
 $7 = $unique_identifier;
 $8 = $user_data;
 $9 = HEAP32[11134]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[11134]|0;
  $12 = $3;
  $13 = $5;
  $14 = $4;
  $15 = $6;
  $16 = $1;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $14;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $15;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $16;
  (_fprintf($11,16636,$vararg_buffer)|0);
  $17 = HEAP32[11134]|0;
  (_fflush($17)|0);
 }
 $a_error = -1;
 $18 = $7;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $7 = 41364;
 }
 $20 = $7;
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[44]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = $2;
  $25 = $3;
  $26 = $4;
  $27 = $5;
  $28 = $6;
  $29 = $8;
  $30 = (__Z17sync_espeak_SynthjPKvjj20espeak_POSITION_TYPEjjPv(0,$23,$24,$25,$26,$27,$28,$29)|0);
  $0 = $30;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $31 = $a_error;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _espeak_SetVoiceByName($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (__Z14SetVoiceByNamePKc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _espeak_SetVoiceByProperties($voice_selector) {
 $voice_selector = $voice_selector|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $voice_selector;
 $1 = $0;
 $2 = (__Z20SetVoiceByPropertiesP12espeak_VOICE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _espeak_SetParameter($parameter,$value,$relative) {
 $parameter = $parameter|0;
 $value = $value|0;
 $relative = $relative|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $parameter;
 $1 = $value;
 $2 = $relative;
 $3 = HEAP32[11134]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $9 = $0;
  $10 = $1;
  $11 = $2;
  __Z12SetParameteriii($9,$10,$11);
  STACKTOP = sp;return 0;
 }
 $5 = HEAP32[11134]|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 (_fprintf($5,16672,$vararg_buffer)|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 __Z12SetParameteriii($9,$10,$11);
 STACKTOP = sp;return 0;
}
function __Z8isspace2j($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = $2 & 255;
 $c2 = $3;
 $4 = ($3|0)==(0);
 $5 = $1;
 $6 = ($5>>>0)>(32);
 $or$cond = $4 | $6;
 if ($or$cond) {
  $0 = 0;
 } else {
  $0 = 1;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function __Z14LookupMnemNameP8MNEM_TABi($table,$value) {
 $table = $table|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $table;
 $2 = $value;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = ($8|0)==($9|0);
  $11 = $1;
  if ($10) {
   label = 4;
   break;
  }
  $13 = ((($11)) + 8|0);
  $1 = $13;
 }
 if ((label|0) == 4) {
  $12 = HEAP32[$11>>2]|0;
  $0 = $12;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 else if ((label|0) == 6) {
  $0 = 121874;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __Z22print_dictionary_flagsPjPci($flags,$buf,$buf_len) {
 $flags = $flags|0;
 $buf = $buf|0;
 $buf_len = $buf_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $len = 0, $name = 0, $stress = 0, $total = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $flags;
 $1 = $buf;
 $2 = $buf_len;
 $total = 0;
 $3 = $1;
 HEAP8[$3>>0] = 0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 15;
 $stress = $6;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = $stress;
  $10 = (($9) + 64)|0;
  $11 = (__Z14LookupMnemNameP8MNEM_TABi(328,$10)|0);
  HEAP32[$vararg_buffer>>2] = $11;
  (_sprintf($8,25839,$vararg_buffer)|0);
  $12 = $1;
  $13 = (_strlen($12)|0);
  $total = $13;
  $14 = $total;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $1 = $16;
 }
 $ix = 8;
 while(1) {
  $17 = $ix;
  $18 = ($17|0)<(64);
  if (!($18)) {
   break;
  }
  $19 = $ix;
  $20 = ($19|0)<(30);
  if ($20) {
   $21 = $0;
   $22 = HEAP32[$21>>2]|0;
   $23 = $ix;
   $24 = 1 << $23;
   $25 = $22 & $24;
   $26 = ($25|0)!=(0);
   if ($26) {
    label = 9;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $27 = $ix;
   $28 = ($27|0)>=(32);
   if ($28) {
    $29 = $0;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $ix;
    $33 = (($32) - 32)|0;
    $34 = 1 << $33;
    $35 = $31 & $34;
    $36 = ($35|0)!=(0);
    if ($36) {
     label = 9;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $37 = $ix;
   $38 = (__Z14LookupMnemNameP8MNEM_TABi(328,$37)|0);
   $name = $38;
   $39 = $name;
   $40 = (_strlen($39)|0);
   $41 = (($40) + 1)|0;
   $len = $41;
   $42 = $len;
   $43 = $total;
   $44 = (($43) + ($42))|0;
   $total = $44;
   $45 = $total;
   $46 = $2;
   $47 = ($45|0)>=($46|0);
   if (!($47)) {
    $48 = $1;
    $49 = $name;
    HEAP32[$vararg_buffer1>>2] = $49;
    (_sprintf($48,21304,$vararg_buffer1)|0);
    $50 = $len;
    $51 = $1;
    $52 = (($51) + ($50)|0);
    $1 = $52;
   }
  }
  $53 = $ix;
  $54 = (($53) + 1)|0;
  $ix = $54;
 }
 STACKTOP = sp;return;
}
function __Z10DecodeRulePKciPci($group_chars,$group_length,$rule,$control) {
 $group_chars = $group_chars|0;
 $group_length = $group_length|0;
 $rule = $rule|0;
 $control = $control|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $at_start = 0, $buf = 0, $buf_pre = 0, $c = 0, $condition_num = 0, $finished = 0, $flags = 0, $ix = 0, $linenum = 0, $match_type = 0, $name = 0, $or$cond = 0, $p = 0, $p_end = 0, $rb = 0;
 var $suffix = 0, $suffix_char = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 312|0;
 $buf_pre = sp + 112|0;
 $suffix = sp + 92|0;
 $0 = $group_chars;
 $1 = $group_length;
 $2 = $rule;
 $3 = $control;
 $finished = 0;
 $linenum = 0;
 $condition_num = 0;
 $at_start = 0;
 $match_type = 0;
 HEAP8[$buf_pre>>0] = 0;
 $ix = 0;
 while(1) {
  $4 = $ix;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  $7 = $ix;
  if (!($6)) {
   break;
  }
  $8 = $0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $ix;
  $12 = (($buf) + ($11)|0);
  HEAP8[$12>>0] = $10;
  $13 = $ix;
  $14 = (($13) + 1)|0;
  $ix = $14;
 }
 $15 = (($buf) + ($7)|0);
 HEAP8[$15>>0] = 0;
 $16 = (_strlen($buf)|0);
 $17 = (($buf) + ($16)|0);
 $p = $17;
 L5: while(1) {
  $18 = $finished;
  $19 = ($18|0)!=(0);
  $20 = $19 ^ 1;
  if (!($20)) {
   break;
  }
  $21 = $2;
  $22 = ((($21)) + 1|0);
  $2 = $22;
  $23 = HEAP8[$21>>0]|0;
  $rb = $23;
  $24 = $rb;
  $25 = $24&255;
  $26 = ($25|0)<=(9);
  $27 = $rb;
  $28 = $27&255;
  if ($26) {
   switch ($28|0) {
   case 3: case 0:  {
    $finished = 1;
    continue L5;
    break;
   }
   case 8:  {
    $at_start = 1;
    break;
   }
   case 1:  {
    break;
   }
   case 2:  {
    $match_type = 2;
    $30 = $p;
    HEAP8[$30>>0] = 0;
    (_strcat($buf,17313)|0);
    $31 = (_strlen($buf)|0);
    $32 = (($buf) + ($31)|0);
    $p = $32;
    continue L5;
    break;
   }
   case 9:  {
    $37 = $2;
    $38 = ((($37)) + 1|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = $40 & 255;
    $42 = (($41) - 1)|0;
    $value = $42;
    $43 = $2;
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = $45 & 255;
    $47 = (($46) - 1)|0;
    $48 = $value;
    $49 = ($48*255)|0;
    $50 = (($47) + ($49))|0;
    $linenum = $50;
    $51 = $2;
    $52 = ((($51)) + 2|0);
    $2 = $52;
    continue L5;
    break;
   }
   case 5:  {
    $33 = $2;
    $34 = ((($33)) + 1|0);
    $2 = $34;
    $35 = HEAP8[$33>>0]|0;
    $36 = $35 << 24 >> 24;
    $condition_num = $36;
    continue L5;
    break;
   }
   default: {
    continue L5;
   }
   }
   $match_type = 1;
   $29 = $p;
   HEAP8[$29>>0] = 0;
   $p = $buf_pre;
   continue;
  }
  $53 = ($28|0)==(28);
  do {
   if ($53) {
    $54 = $2;
    $55 = ((($54)) + 1|0);
    $2 = $55;
    $56 = HEAP8[$54>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = $57 & 255;
    $value = $58;
    $59 = $value;
    $60 = ($59|0)!=(1);
    if ($60) {
     label = 17;
    } else {
     $61 = $3;
     $62 = $61 & -2147483648;
     $63 = ($62|0)!=(0);
     if ($63) {
      label = 17;
     }
    }
    if ((label|0) == 17) {
     label = 0;
     $64 = $p;
     HEAP8[$64>>0] = 36;
     $65 = $value;
     $66 = (__Z14LookupMnemNameP8MNEM_TABi(184,$65)|0);
     $name = $66;
     $67 = $p;
     $68 = ((($67)) + 1|0);
     $69 = $name;
     (_strcpy($68,$69)|0);
     $70 = $name;
     $71 = (_strlen($70)|0);
     $72 = (($71) + 1)|0;
     $73 = $p;
     $74 = (($73) + ($72)|0);
     $p = $74;
    }
    $c = 32;
   } else {
    $75 = $rb;
    $76 = $75&255;
    $77 = ($76|0)==(14);
    if ($77) {
     $78 = $2;
     $79 = HEAP8[$78>>0]|0;
     $80 = $79 << 24 >> 24;
     $81 = $80 & 127;
     $82 = $81 << 8;
     $83 = $2;
     $84 = ((($83)) + 1|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = $86 & 127;
     $88 = (($82) + ($87))|0;
     $flags = $88;
     $suffix_char = 83;
     $89 = $flags;
     $90 = $89 & 4;
     $91 = ($90|0)!=(0);
     $$ = $91 ? 80 : 83;
     $suffix_char = $$;
     $92 = $suffix_char;
     $93 = $2;
     $94 = ((($93)) + 2|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95 << 24 >> 24;
     $97 = $96 & 127;
     HEAP32[$vararg_buffer>>2] = $92;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $97;
     (_sprintf($suffix,17316,$vararg_buffer)|0);
     $98 = $2;
     $99 = ((($98)) + 3|0);
     $2 = $99;
     $ix = 0;
     while(1) {
      $100 = $ix;
      $101 = ($100|0)<(9);
      if (!($101)) {
       break;
      }
      $102 = $flags;
      $103 = $102 & 1;
      $104 = ($103|0)!=(0);
      if ($104) {
       $105 = (_strlen($suffix)|0);
       $106 = (($suffix) + ($105)|0);
       $107 = $ix;
       $108 = HEAP32[198]|0;
       $109 = (($108) + ($107)|0);
       $110 = HEAP8[$109>>0]|0;
       $111 = $110 << 24 >> 24;
       HEAP32[$vararg_buffer3>>2] = $111;
       (_sprintf($106,23014,$vararg_buffer3)|0);
      }
      $112 = $flags;
      $113 = $112 >> 1;
      $flags = $113;
      $114 = $ix;
      $115 = (($114) + 1)|0;
      $ix = $115;
     }
     $116 = $p;
     (_strcpy($116,$suffix)|0);
     $117 = (_strlen($suffix)|0);
     $118 = $p;
     $119 = (($118) + ($117)|0);
     $p = $119;
     $c = 32;
     break;
    }
    $120 = $rb;
    $121 = $120&255;
    $122 = ($121|0)==(17);
    if ($122) {
     $123 = $2;
     $124 = ((($123)) + 1|0);
     $2 = $124;
     $125 = HEAP8[$123>>0]|0;
     $126 = $125 << 24 >> 24;
     $127 = (($126) - 65)|0;
     $128 = (17334 + ($127)|0);
     $129 = HEAP8[$128>>0]|0;
     $c = $129;
     break;
    }
    $130 = $rb;
    $131 = $130&255;
    $132 = ($131|0)==(18);
    if ($132) {
     $133 = $2;
     $134 = ((($133)) + 1|0);
     $2 = $134;
     $135 = HEAP8[$133>>0]|0;
     $136 = $135 << 24 >> 24;
     $137 = (($136) - 65)|0;
     $value = $137;
     $138 = $p;
     HEAP8[$138>>0] = 76;
     $139 = $value;
     $140 = (($139|0) / 10)&-1;
     $141 = (($140) + 48)|0;
     $142 = $141&255;
     $143 = $p;
     $144 = ((($143)) + 1|0);
     HEAP8[$144>>0] = $142;
     $145 = $value;
     $146 = (($145|0) % 10)&-1;
     $147 = (($146) + 48)|0;
     $148 = $147&255;
     $c = $148;
     $149 = $match_type;
     $150 = ($149|0)==(1);
     if ($150) {
      $151 = $c;
      $152 = $p;
      HEAP8[$152>>0] = $151;
      $c = 76;
     }
     $153 = $p;
     $154 = ((($153)) + 2|0);
     $p = $154;
     break;
    }
    $155 = $rb;
    $156 = $155&255;
    $157 = ($156|0)<=(31);
    $158 = $rb;
    $159 = $158&255;
    if ($157) {
     $160 = (17341 + ($159)|0);
     $161 = HEAP8[$160>>0]|0;
     $c = $161;
     break;
    }
    $162 = ($159|0)==(32);
    if ($162) {
     $c = 95;
     break;
    } else {
     $163 = $rb;
     $c = $163;
     break;
    }
   }
  } while(0);
  $164 = $c;
  $165 = $p;
  $166 = ((($165)) + 1|0);
  $p = $166;
  HEAP8[$165>>0] = $164;
 }
 $167 = $p;
 HEAP8[$167>>0] = 0;
 $p = 119140;
 $168 = $p;
 $169 = ((($168)) + 80|0);
 $170 = ((($169)) + -1|0);
 $p_end = $170;
 $171 = $linenum;
 $172 = ($171|0)>(0);
 if ($172) {
  $173 = $p;
  $174 = $linenum;
  HEAP32[$vararg_buffer6>>2] = $174;
  (_sprintf($173,17373,$vararg_buffer6)|0);
  $175 = $p;
  $176 = ((($175)) + 7|0);
  $p = $176;
 }
 $177 = $condition_num;
 $178 = ($177|0)>(0);
 if ($178) {
  $179 = $p;
  $180 = $condition_num;
  HEAP32[$vararg_buffer9>>2] = $180;
  (_sprintf($179,17379,$vararg_buffer9)|0);
  $181 = $p;
  $182 = (_strlen($181)|0);
  $183 = $p;
  $184 = (($183) + ($182)|0);
  $p = $184;
 }
 $185 = (_strlen($buf_pre)|0);
 $ix = $185;
 $186 = ($185|0)>(0);
 $187 = $at_start;
 $188 = ($187|0)!=(0);
 $or$cond = $186 | $188;
 if ($or$cond) {
  $189 = $at_start;
  $190 = ($189|0)!=(0);
  if ($190) {
   $191 = $p;
   $192 = ((($191)) + 1|0);
   $p = $192;
   HEAP8[$191>>0] = 95;
  }
  while(1) {
   $193 = $ix;
   $194 = (($193) + -1)|0;
   $ix = $194;
   $195 = ($194|0)>=(0);
   if (!($195)) {
    break;
   }
   $196 = $p;
   $197 = $p_end;
   $198 = ((($197)) + -3|0);
   $199 = ($196>>>0)<($198>>>0);
   if (!($199)) {
    break;
   }
   $200 = $ix;
   $201 = (($buf_pre) + ($200)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $p;
   $204 = ((($203)) + 1|0);
   $p = $204;
   HEAP8[$203>>0] = $202;
  }
  $205 = $p;
  $206 = ((($205)) + 1|0);
  $p = $206;
  HEAP8[$205>>0] = 41;
  $207 = $p;
  $208 = ((($207)) + 1|0);
  $p = $208;
  HEAP8[$207>>0] = 32;
 }
 $209 = $p;
 HEAP8[$209>>0] = 0;
 $210 = $p_end;
 $211 = $p;
 $212 = $210;
 $213 = $211;
 $214 = (($212) - ($213))|0;
 $215 = (($buf) + ($214)|0);
 HEAP8[$215>>0] = 0;
 $216 = $p;
 (_strcat($216,$buf)|0);
 $217 = (_strlen(119140)|0);
 $ix = $217;
 while(1) {
  $218 = $ix;
  $219 = ($218|0)<(8);
  $220 = $ix;
  if (!($219)) {
   break;
  }
  $221 = (($220) + 1)|0;
  $ix = $221;
  $222 = (119140 + ($220)|0);
  HEAP8[$222>>0] = 32;
 }
 $223 = (119140 + ($220)|0);
 HEAP8[$223>>0] = 0;
 STACKTOP = sp;return (119140|0);
}
function __Z8strncpy0PcPKci($to,$from,$size) {
 $to = $to|0;
 $from = $from|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $to;
 $1 = $from;
 $2 = $size;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 (_strncpy($3,$4,$5)|0);
 $6 = $2;
 $7 = (($6) - 1)|0;
 $8 = $0;
 $9 = (($8) + ($7)|0);
 HEAP8[$9>>0] = 0;
 STACKTOP = sp;return;
}
function __Z13Reverse4Bytesi($word) {
 $word = $word|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $word;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __Z10LookupMnemP8MNEM_TABPKc($table,$string) {
 $table = $table|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $table;
 $2 = $string;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $2;
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_strcmp($6,$8)|0);
  $10 = ($9|0)==(0);
  $11 = $1;
  if ($10) {
   label = 4;
   break;
  }
  $14 = ((($11)) + 8|0);
  $1 = $14;
 }
 if ((label|0) == 4) {
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $0 = $13;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $15 = $1;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __Z14LoadDictionaryP10TranslatorPKci($tr,$name,$no_error) {
 $tr = $tr|0;
 $name = $name|0;
 $no_error = $no_error|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $f = 0, $fname = 0, $hash = 0, $length = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $pw = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer = sp;
 $fname = sp + 92|0;
 $1 = $tr;
 $2 = $name;
 $3 = $no_error;
 $4 = $2;
 (_strcpy(119220,$4)|0);
 $5 = $1;
 $6 = ((($5)) + 340|0);
 $7 = $2;
 (_strcpy($6,$7)|0);
 $8 = $2;
 HEAP32[$vararg_buffer>>2] = 118980;
 $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = 47;
 $vararg_ptr7 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $8;
 (_sprintf($fname,17384,$vararg_buffer)|0);
 $9 = (__Z13GetFileLengthPKc($fname)|0);
 $size = $9;
 $10 = $1;
 $11 = ((($10)) + 808|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = ((($14)) + 808|0);
  $16 = HEAP32[$15>>2]|0;
  __Z4FreePv($16);
  $17 = $1;
  $18 = ((($17)) + 808|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = (_fopen($fname,22483)|0);
 $f = $19;
 $20 = $f;
 $21 = ($20|0)==(0|0);
 $22 = $size;
 $23 = ($22>>>0)<=(0);
 $or$cond = $21 | $23;
 if ($or$cond) {
  $24 = $3;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = HEAP32[1295]|0;
   HEAP32[$vararg_buffer8>>2] = $fname;
   (_fprintf($26,17396,$vararg_buffer8)|0);
  }
  $0 = 1;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $27 = $size;
 $28 = (__Z5Alloci($27)|0);
 $29 = $1;
 $30 = ((($29)) + 808|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = ((($31)) + 808|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $size;
 $35 = $f;
 $36 = (_fread($33,1,$34,$35)|0);
 $size = $36;
 $37 = $f;
 (_fclose($37)|0);
 $38 = $1;
 $39 = ((($38)) + 808|0);
 $40 = HEAP32[$39>>2]|0;
 $pw = $40;
 $41 = $pw;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (__Z13Reverse4Bytesi($43)|0);
 $length = $44;
 $45 = $size;
 $46 = ($45>>>0)<=(1032);
 if ($46) {
  $47 = HEAP32[1295]|0;
  HEAP32[$vararg_buffer11>>2] = $fname;
  (_fprintf($47,17430,$vararg_buffer11)|0);
  $0 = 2;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $48 = $pw;
 $49 = HEAP32[$48>>2]|0;
 $50 = (__Z13Reverse4Bytesi($49)|0);
 $51 = ($50|0)!=(1024);
 $52 = $length;
 $53 = ($52|0)<=(0);
 $or$cond3 = $51 | $53;
 $54 = $length;
 $55 = ($54|0)>(134217728);
 $or$cond5 = $or$cond3 | $55;
 if ($or$cond5) {
  $56 = HEAP32[1295]|0;
  $57 = $pw;
  $58 = HEAP32[$57>>2]|0;
  $59 = (__Z13Reverse4Bytesi($58)|0);
  $60 = $length;
  HEAP32[$vararg_buffer14>>2] = $fname;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $59;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = $60;
  (_fprintf($56,17453,$vararg_buffer14)|0);
  $0 = 2;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $61 = $length;
 $62 = $1;
 $63 = ((($62)) + 808|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($61)|0);
 $66 = $1;
 $67 = ((($66)) + 804|0);
 HEAP32[$67>>2] = $65;
 $68 = $1;
 __ZL10InitGroupsP10Translator($68);
 $69 = $1;
 $70 = ((($69)) + 808|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 8|0);
 $p = $72;
 $hash = 0;
 while(1) {
  $73 = $hash;
  $74 = ($73|0)<(1024);
  if (!($74)) {
   break;
  }
  $75 = $p;
  $76 = $hash;
  $77 = $1;
  $78 = ((($77)) + 812|0);
  $79 = (($78) + ($76<<2)|0);
  HEAP32[$79>>2] = $75;
  while(1) {
   $80 = $p;
   $81 = HEAP8[$80>>0]|0;
   $82 = $81 << 24 >> 24;
   $length = $82;
   $83 = ($82|0)!=(0);
   if (!($83)) {
    break;
   }
   $84 = $length;
   $85 = $p;
   $86 = (($85) + ($84)|0);
   $p = $86;
  }
  $87 = $p;
  $88 = ((($87)) + 1|0);
  $p = $88;
  $89 = $hash;
  $90 = (($89) + 1)|0;
  $hash = $90;
 }
 $91 = $1;
 $92 = ((($91)) + 444|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)>(0);
 if ($94) {
  $95 = $size;
  $96 = $1;
  $97 = ((($96)) + 444|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($95>>>0)<($98>>>0);
  if ($99) {
   $100 = HEAP32[1295]|0;
   $101 = $2;
   HEAP32[$vararg_buffer19>>2] = $101;
   (_fprintf($100,17521,$vararg_buffer19)|0);
  }
 }
 $0 = 0;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function __ZL10InitGroupsP10Translator($tr) {
 $tr = $tr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c2 = 0, $ix = 0, $len = 0, $or$cond = 0, $p = 0, $p_name = 0, $pw = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tr;
 $1 = $0;
 $2 = ((($1)) + 7784|0);
 HEAP32[$2>>2] = 0;
 $ix = 0;
 while(1) {
  $3 = $ix;
  $4 = ($3|0)<(256);
  if (!($4)) {
   break;
  }
  $5 = $ix;
  $6 = $0;
  $7 = ((($6)) + 5288|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = $ix;
  $10 = $0;
  $11 = ((($10)) + 7788|0);
  $12 = (($11) + ($9)|0);
  HEAP8[$12>>0] = 0;
  $13 = $ix;
  $14 = $0;
  $15 = ((($14)) + 8044|0);
  $16 = (($15) + ($13)|0);
  HEAP8[$16>>0] = -1;
  $17 = $ix;
  $18 = (($17) + 1)|0;
  $ix = $18;
 }
 $19 = $0;
 $20 = ((($19)) + 4908|0);
 _memset(($20|0),0,380)|0;
 $21 = $0;
 $22 = ((($21)) + 6312|0);
 _memset(($22|0),0,512)|0;
 $23 = $0;
 $24 = ((($23)) + 804|0);
 $25 = HEAP32[$24>>2]|0;
 $p = $25;
 while(1) {
  $26 = $p;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   label = 28;
   break;
  }
  $30 = $p;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)!=(6);
  if ($33) {
   break;
  }
  $42 = $p;
  $43 = ((($42)) + 1|0);
  $p = $43;
  $44 = $p;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = ($46|0)==(20);
  $48 = $p;
  if ($47) {
   $49 = $48;
   $50 = (($49) + 4)|0;
   $51 = $50 & -4;
   $52 = $51;
   $pw = $52;
   $53 = $pw;
   $54 = $0;
   $55 = ((($54)) + 284|0);
   HEAP32[$55>>2] = $53;
   while(1) {
    $56 = $pw;
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)!=(0);
    $59 = $pw;
    if (!($58)) {
     break;
    }
    $60 = ((($59)) + 8|0);
    $pw = $60;
   }
   $61 = ((($59)) + 4|0);
   $p = $61;
   continue;
  }
  $62 = HEAP8[$48>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(18);
  $65 = $p;
  do {
   if ($64) {
    $66 = ((($65)) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $69 = (($68) - 65)|0;
    $ix = $69;
    $70 = $p;
    $71 = ((($70)) + 2|0);
    $p = $71;
    $72 = $ix;
    $73 = ($72|0)>=(0);
    $74 = $ix;
    $75 = ($74|0)<(95);
    $or$cond = $73 & $75;
    if ($or$cond) {
     $76 = $p;
     $77 = $ix;
     $78 = $0;
     $79 = ((($78)) + 4908|0);
     $80 = (($79) + ($77<<2)|0);
     HEAP32[$80>>2] = $76;
    }
   } else {
    $81 = (_strlen($65)|0);
    $len = $81;
    $82 = $p;
    $p_name = $82;
    $83 = $p_name;
    $84 = HEAP8[$83>>0]|0;
    $c = $84;
    $85 = $p_name;
    $86 = ((($85)) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    $c2 = $87;
    $88 = $len;
    $89 = (($88) + 1)|0;
    $90 = $p;
    $91 = (($90) + ($89)|0);
    $p = $91;
    $92 = $len;
    $93 = ($92|0)==(1);
    if ($93) {
     $94 = $p;
     $95 = $c;
     $96 = $95&255;
     $97 = $0;
     $98 = ((($97)) + 5288|0);
     $99 = (($98) + ($96<<2)|0);
     HEAP32[$99>>2] = $94;
     break;
    }
    $100 = $len;
    $101 = ($100|0)==(0);
    if ($101) {
     $102 = $p;
     $103 = $0;
     $104 = ((($103)) + 5288|0);
     HEAP32[$104>>2] = $102;
     break;
    }
    $105 = $c;
    $106 = $105&255;
    $107 = ($106|0)==(1);
    if ($107) {
     $108 = $p;
     $109 = $c2;
     $110 = $109&255;
     $111 = (($110) - 1)|0;
     $112 = $0;
     $113 = ((($112)) + 6312|0);
     $114 = (($113) + ($111<<2)|0);
     HEAP32[$114>>2] = $108;
     break;
    }
    $115 = $c;
    $116 = $115&255;
    $117 = $0;
    $118 = ((($117)) + 8044|0);
    $119 = (($118) + ($116)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = ($121|0)==(255);
    if ($122) {
     $123 = $0;
     $124 = ((($123)) + 7784|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $125&255;
     $127 = $c;
     $128 = $127&255;
     $129 = $0;
     $130 = ((($129)) + 8044|0);
     $131 = (($130) + ($128)|0);
     HEAP8[$131>>0] = $126;
    }
    $132 = $c;
    $133 = $132&255;
    $134 = $0;
    $135 = ((($134)) + 7788|0);
    $136 = (($135) + ($133)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = (($137) + 1)<<24>>24;
    HEAP8[$136>>0] = $138;
    $139 = $p;
    $140 = $0;
    $141 = ((($140)) + 7784|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $0;
    $144 = ((($143)) + 6824|0);
    $145 = (($144) + ($142<<2)|0);
    HEAP32[$145>>2] = $139;
    $146 = $c;
    $147 = $146&255;
    $148 = $c2;
    $149 = $148&255;
    $150 = $149 << 8;
    $151 = (($147) + ($150))|0;
    $152 = $0;
    $153 = ((($152)) + 7784|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($154) + 1)|0;
    HEAP32[$153>>2] = $155;
    $156 = $0;
    $157 = ((($156)) + 7304|0);
    $158 = (($157) + ($154<<2)|0);
    HEAP32[$158>>2] = $151;
   }
  } while(0);
  while(1) {
   $159 = $p;
   $160 = HEAP8[$159>>0]|0;
   $161 = $160 << 24 >> 24;
   $162 = ($161|0)!=(7);
   $163 = $p;
   if (!($162)) {
    break;
   }
   $164 = (_strlen($163)|0);
   $165 = (($164) + 1)|0;
   $166 = $p;
   $167 = (($166) + ($165)|0);
   $p = $167;
  }
  $168 = ((($163)) + 1|0);
  $p = $168;
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[1295]|0;
 $35 = $p;
 $36 = $0;
 $37 = ((($36)) + 804|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $35;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 HEAP32[$vararg_buffer>>2] = 119220;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $41;
 (_fprintf($34,17484,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __Z14HashDictionaryPKc($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c = 0, $chars = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $chars = 0;
 $hash = 0;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 1|0);
  $0 = $2;
  $3 = HEAP8[$1>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = $4 & 255;
  $c = $5;
  $6 = ($5|0)!=(0);
  $7 = $hash;
  if (!($6)) {
   break;
  }
  $8 = $7<<3;
  $9 = $c;
  $10 = (($8) + ($9))|0;
  $hash = $10;
  $11 = $hash;
  $12 = $11 & 1023;
  $13 = $hash;
  $14 = $13 >> 8;
  $15 = $12 ^ $14;
  $hash = $15;
  $16 = $chars;
  $17 = (($16) + 1)|0;
  $chars = $17;
 }
 $18 = $chars;
 $19 = (($7) + ($18))|0;
 $20 = $19 & 1023;
 STACKTOP = sp;return ($20|0);
}
function __Z14EncodePhonemesPKcPcPi($p,$outptr,$bad_phoneme) {
 $p = $p|0;
 $outptr = $outptr|0;
 $bad_phoneme = $bad_phoneme|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c = 0, $cond = 0, $consumed = 0, $count = 0, $ix = 0, $max = 0, $max_ph = 0, $mnemonic_word = 0, $or$cond = 0, $p_lang = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $outptr;
 $3 = $bad_phoneme;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $3;
  HEAP32[$6>>2] = 0;
 }
 while(1) {
  $7 = $1;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isspace($9)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $1;
  $13 = ((($12)) + 1|0);
  $1 = $13;
 }
 while(1) {
  $14 = $1;
  $15 = HEAP8[$14>>0]|0;
  $c = $15;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   label = 39;
   break;
  }
  $18 = $c;
  $19 = $18&255;
  $20 = (_isspace($19)|0);
  $21 = ($20|0)!=(0);
  $22 = $21 ^ 1;
  if (!($22)) {
   label = 39;
   break;
  }
  $consumed = 0;
  $23 = $c;
  $24 = $23&255;
  $cond = ($24|0)==(124);
  if ($cond) {
   $25 = $1;
   $26 = ((($25)) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $c = $27;
   $28 = $27&255;
   $29 = ($28|0)==(124);
   if (!($29)) {
    $30 = $1;
    $31 = ((($30)) + 1|0);
    $1 = $31;
    continue;
   }
  }
  $max = -1;
  $max_ph = 0;
  $ix = 1;
  while(1) {
   $32 = $ix;
   $33 = HEAP32[11136]|0;
   $34 = ($32|0)<($33|0);
   if (!($34)) {
    break;
   }
   $35 = $ix;
   $36 = (44552 + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   do {
    if (!($38)) {
     $39 = $ix;
     $40 = (44552 + ($39<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 11|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = ($44|0)==(15);
     if (!($45)) {
      $count = 0;
      $46 = $ix;
      $47 = (44552 + ($46<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = HEAP32[$48>>2]|0;
      $mnemonic_word = $49;
      while(1) {
       $50 = $count;
       $51 = $1;
       $52 = (($51) + ($50)|0);
       $53 = HEAP8[$52>>0]|0;
       $c = $53;
       $54 = $53&255;
       $55 = ($54|0)>(32);
       $56 = $count;
       $57 = ($56|0)<(4);
       $or$cond = $55 & $57;
       if ($or$cond) {
        $58 = $c;
        $59 = $58&255;
        $60 = $mnemonic_word;
        $61 = $count;
        $62 = $61<<3;
        $63 = $60 >>> $62;
        $64 = $63 & 255;
        $65 = ($59|0)==($64|0);
        $141 = $65;
       } else {
        $141 = 0;
       }
       $66 = $count;
       if (!($141)) {
        break;
       }
       $67 = (($66) + 1)|0;
       $count = $67;
      }
      $68 = $max;
      $69 = ($66|0)>($68|0);
      if ($69) {
       $70 = $count;
       $71 = ($70|0)==(4);
       if (!($71)) {
        $72 = $mnemonic_word;
        $73 = $count;
        $74 = $73<<3;
        $75 = $72 >>> $74;
        $76 = $75 & 255;
        $77 = ($76|0)==(0);
        if (!($77)) {
         break;
        }
       }
       $78 = $count;
       $max = $78;
       $79 = $ix;
       $80 = (44552 + ($79<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($81)) + 10|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = $83&255;
       $max_ph = $84;
      }
     }
    }
   } while(0);
   $85 = $ix;
   $86 = (($85) + 1)|0;
   $ix = $86;
  }
  $87 = $max_ph;
  $88 = ($87|0)==(0);
  if ($88) {
   label = 25;
   break;
  }
  $97 = $max;
  $98 = ($97|0)<=(0);
  if ($98) {
   $max = 1;
  }
  $99 = $consumed;
  $100 = $max;
  $101 = (($99) + ($100))|0;
  $102 = $1;
  $103 = (($102) + ($101)|0);
  $1 = $103;
  $104 = $max_ph;
  $105 = $104&255;
  $106 = $2;
  $107 = ((($106)) + 1|0);
  $2 = $107;
  HEAP8[$106>>0] = $105;
  $108 = $max_ph;
  $109 = ($108|0)==(21);
  if (!($109)) {
   continue;
  }
  $110 = $2;
  $p_lang = $110;
  while(1) {
   $111 = $1;
   $112 = HEAP8[$111>>0]|0;
   $c = $112;
   $113 = $112&255;
   $114 = (_isspace($113)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    break;
   }
   $116 = $c;
   $117 = $116&255;
   $118 = ($117|0)!=(0);
   if (!($118)) {
    break;
   }
   $119 = $1;
   $120 = ((($119)) + 1|0);
   $1 = $120;
   $121 = $c;
   $122 = $121&255;
   $123 = (_tolower($122)|0);
   $124 = $123&255;
   $125 = $2;
   $126 = ((($125)) + 1|0);
   $2 = $126;
   HEAP8[$125>>0] = $124;
  }
  $127 = $2;
  HEAP8[$127>>0] = 0;
  $128 = $c;
  $129 = $128&255;
  $130 = ($129|0)==(0);
  if ($130) {
   $131 = $p_lang;
   $132 = (_strcmp($131,25406)|0);
   $133 = ($132|0)==(0);
   if ($133) {
    label = 37;
    break;
   } else {
    continue;
   }
  } else {
   $136 = $2;
   $137 = ((($136)) + 1|0);
   $2 = $137;
   HEAP8[$136>>0] = 124;
   continue;
  }
 }
 if ((label|0) == 25) {
  $89 = $3;
  $90 = ($89|0)!=(0|0);
  if ($90) {
   $91 = $3;
   $92 = $1;
   (__Z7utf8_inPiPKc($91,$92)|0);
  }
  $93 = $2;
  $94 = ((($93)) + 1|0);
  $2 = $94;
  HEAP8[$93>>0] = 0;
  $95 = $1;
  $96 = ((($95)) + 1|0);
  $0 = $96;
  $140 = $0;
  STACKTOP = sp;return ($140|0);
 }
 else if ((label|0) == 37) {
  $134 = $p_lang;
  HEAP8[$134>>0] = 0;
  $135 = $1;
  $0 = $135;
  $140 = $0;
  STACKTOP = sp;return ($140|0);
 }
 else if ((label|0) == 39) {
  $138 = $2;
  HEAP8[$138>>0] = 0;
  $139 = $1;
  $0 = $139;
  $140 = $0;
  STACKTOP = sp;return ($140|0);
 }
 return (0)|0;
}
function __Z14DecodePhonemesPKcPc($inptr,$outptr) {
 $inptr = $inptr|0;
 $outptr = $outptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $c = 0, $mnem = 0, $ph = 0, $phcode = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $inptr;
 $1 = $outptr;
 $2 = $1;
 (_sprintf($2,17564,$vararg_buffer)|0);
 L1: while(1) {
  $3 = $0;
  $4 = ((($3)) + 1|0);
  $0 = $4;
  $5 = HEAP8[$3>>0]|0;
  $phcode = $5;
  $6 = $5&255;
  $7 = ($6|0)>(0);
  if (!($7)) {
   break;
  }
  $8 = $phcode;
  $9 = $8&255;
  $10 = ($9|0)==(255);
  if ($10) {
   continue;
  }
  $11 = $phcode;
  $12 = $11&255;
  $13 = (44552 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $ph = $14;
  $15 = ($14|0)==(0|0);
  if ($15) {
   continue;
  }
  $16 = $ph;
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(1);
  if ($20) {
   $21 = $ph;
   $22 = ((($21)) + 14|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)<=(4);
   if ($25) {
    $26 = $ph;
    $27 = ((($26)) + 8|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = $ph;
     $32 = ((($31)) + 14|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = ($34|0)>(1);
     if (!($35)) {
      continue;
     }
     $36 = $ph;
     $37 = ((($36)) + 14|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = HEAP32[199]|0;
     $41 = (($40) + ($39)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $1;
     $44 = ((($43)) + 1|0);
     $1 = $44;
     HEAP8[$43>>0] = $42;
     continue;
    }
   }
  }
  $45 = $ph;
  $46 = HEAP32[$45>>2]|0;
  $mnem = $46;
  while(1) {
   $47 = $mnem;
   $48 = $47 & 255;
   $49 = $48&255;
   $c = $49;
   $50 = $49&255;
   $51 = ($50|0)!=(0);
   if (!($51)) {
    break;
   }
   $52 = $c;
   $53 = $1;
   $54 = ((($53)) + 1|0);
   $1 = $54;
   HEAP8[$53>>0] = $52;
   $55 = $mnem;
   $56 = $55 >>> 8;
   $mnem = $56;
  }
  $57 = $phcode;
  $58 = $57&255;
  $59 = ($58|0)==(21);
  if (!($59)) {
   continue;
  }
  while(1) {
   $60 = $0;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = (_isalpha($62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    continue L1;
   }
   $65 = $0;
   $66 = ((($65)) + 1|0);
   $0 = $66;
   $67 = HEAP8[$65>>0]|0;
   $68 = $1;
   $69 = ((($68)) + 1|0);
   $1 = $69;
   HEAP8[$68>>0] = $67;
  }
 }
 $70 = $1;
 HEAP8[$70>>0] = 0;
 STACKTOP = sp;return;
}
function __Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($phon_out,$ph,$plist,$use_ipa,$flags) {
 $phon_out = $phon_out|0;
 $ph = $ph|0;
 $plist = $plist|0;
 $use_ipa = $use_ipa|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $first = 0, $ix = 0, $len = 0, $mnem = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0;
 var $phdata = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $phdata = sp + 8|0;
 $1 = $phon_out;
 $2 = $ph;
 $3 = $plist;
 $4 = $use_ipa;
 $5 = $flags;
 $ix = 0;
 $6 = $2;
 $7 = ((($6)) + 10|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(15);
 if ($10) {
  $11 = $1;
  HEAP8[$11>>0] = 0;
  $12 = $1;
  $0 = $12;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 $13 = $2;
 $14 = ((($13)) + 10|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)==(21);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 7|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (45592 + (($21*48)|0)|0);
  $p = $22;
  $23 = $1;
  $24 = $p;
  HEAP32[$vararg_buffer>>2] = $24;
  (_sprintf($23,17576,$vararg_buffer)|0);
  $25 = $1;
  $26 = $1;
  $27 = (_strlen($26)|0);
  $28 = (($25) + ($27)|0);
  $0 = $28;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 $29 = $4;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = ((($phdata)) + 132|0);
  HEAP8[$31>>0] = 0;
  $32 = $3;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $34 = $2;
   $35 = ((($34)) + 10|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   __Z17InterpretPhoneme2iP12PHONEME_DATA($37,$phdata);
  } else {
   $38 = $3;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$38,$phdata,0);
  }
  $39 = ((($phdata)) + 132|0);
  $p = $39;
  $40 = $p;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)==(32);
  if ($43) {
   $44 = $1;
   HEAP8[$44>>0] = 0;
   $45 = $1;
   $0 = $45;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $46 = $p;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $p;
   $51 = HEAP8[$50>>0]|0;
   $52 = $51 << 24 >> 24;
   $53 = $52 & 255;
   $54 = ($53|0)<(32);
   if ($54) {
    $55 = $5;
    $56 = ($55|0)!=(0|0);
    if ($56) {
     $57 = $p;
     $58 = HEAP8[$57>>0]|0;
     $59 = $58 << 24 >> 24;
     $60 = $5;
     HEAP32[$60>>2] = $59;
    }
    $61 = $p;
    $62 = ((($61)) + 1|0);
    $p = $62;
   }
  }
  $63 = $p;
  $64 = (_strlen($63)|0);
  $len = $64;
  $65 = $len;
  $66 = ($65|0)>(0);
  if ($66) {
   $67 = $1;
   $68 = $p;
   (_strcpy($67,$68)|0);
   $69 = $len;
   $70 = $1;
   $71 = (($70) + ($69)|0);
   $1 = $71;
   $72 = $1;
   HEAP8[$72>>0] = 0;
   $73 = $1;
   $0 = $73;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
 }
 $first = 1;
 $74 = $2;
 $75 = HEAP32[$74>>2]|0;
 $mnem = $75;
 L29: while(1) {
  $76 = $mnem;
  $77 = $76 & 255;
  $c = $77;
  $78 = ($77|0)!=(0);
  if (!($78)) {
   break;
  }
  $79 = $c;
  $80 = ($79|0)==(47);
  $81 = HEAP32[19049]|0;
  $82 = ($81|0)==(0);
  $or$cond = $80 & $82;
  if ($or$cond) {
   break;
  }
  $83 = $4;
  $84 = ($83|0)!=(0);
  do {
   if ($84) {
    $85 = $first;
    $86 = ($85|0)!=(0);
    $87 = $c;
    $88 = ($87|0)==(95);
    $or$cond3 = $86 & $88;
    if ($or$cond3) {
     break L29;
    }
    $89 = $c;
    $90 = ($89|0)==(35);
    if ($90) {
     $91 = $2;
     $92 = ((($91)) + 11|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = ($94|0)==(2);
     if ($95) {
      break L29;
     }
    }
    $96 = $first;
    $97 = ($96|0)!=(0);
    if (!($97)) {
     $98 = $c;
     $99 = (__Z9IsDigit09j($98)|0);
     $100 = ($99|0)!=(0);
     if ($100) {
      break;
     }
    }
    $101 = $c;
    $102 = ($101|0)>=(32);
    $103 = $c;
    $104 = ($103|0)<(128);
    $or$cond5 = $102 & $104;
    if ($or$cond5) {
     $105 = $c;
     $106 = (($105) - 32)|0;
     $107 = (5956 + ($106<<1)|0);
     $108 = HEAP16[$107>>1]|0;
     $109 = $108&65535;
     $c = $109;
    }
    $110 = $c;
    $111 = $ix;
    $112 = $1;
    $113 = (($112) + ($111)|0);
    $114 = (__Z8utf8_outjPc($110,$113)|0);
    $115 = $ix;
    $116 = (($115) + ($114))|0;
    $ix = $116;
    label = 31;
   } else {
    $117 = $c;
    $118 = $117&255;
    $119 = $ix;
    $120 = (($119) + 1)|0;
    $ix = $120;
    $121 = $1;
    $122 = (($121) + ($119)|0);
    HEAP8[$122>>0] = $118;
    label = 31;
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   $first = 0;
  }
  $123 = $mnem;
  $124 = $123 >> 8;
  $mnem = $124;
 }
 $125 = $ix;
 $126 = $1;
 $127 = (($126) + ($125)|0);
 $1 = $127;
 $128 = $1;
 HEAP8[$128>>0] = 0;
 $129 = $1;
 $0 = $129;
 $130 = $0;
 STACKTOP = sp;return ($130|0);
}
function __Z26GetTranslatedPhonemeStringi($phoneme_mode) {
 $phoneme_mode = $phoneme_mode|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c = 0, $count = 0, $flags = 0, $ix = 0, $len = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $phon_buf = 0, $phon_buf2 = 0, $phon_out_ix = 0, $plist = 0, $separate_phonemes = 0, $stress = 0, $use_ipa = 0, $use_tie = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 32|0;
 $flags = sp + 16|0;
 $phon_buf = sp + 90|0;
 $phon_buf2 = sp + 60|0;
 $1 = $phoneme_mode;
 $phon_out_ix = 0;
 $2 = HEAP32[10345]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[10346] = 500;
  $4 = HEAP32[10345]|0;
  $5 = HEAP32[10346]|0;
  $6 = (_realloc($4,$5)|0);
  HEAP32[10345] = $6;
  $7 = ($6|0)==(0|0);
  if ($7) {
   HEAP32[10346] = 0;
   $0 = 121874;
   $191 = $0;
   STACKTOP = sp;return ($191|0);
  }
 }
 $8 = $1;
 $9 = $8 & 2;
 $use_ipa = $9;
 $10 = $1;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 $13 = $1;
 $14 = $13 >> 8;
 if ($12) {
  $use_tie = $14;
  $separate_phonemes = 0;
 } else {
  $separate_phonemes = $14;
  $use_tie = 0;
 }
 $ix = 1;
 while(1) {
  $15 = $ix;
  $16 = HEAP32[12657]|0;
  $17 = (($16) - 2)|0;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   label = 44;
   break;
  }
  $buf = $phon_buf;
  $19 = $ix;
  $20 = (50632 + (($19*24)|0)|0);
  $plist = $20;
  $21 = $plist;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $plist;
  $25 = $use_ipa;
  (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($phon_buf2,$23,$24,$25,$flags)|0);
  $26 = $plist;
  $27 = ((($26)) + 21|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)!=(0);
  if ($29) {
   $30 = $buf;
   $31 = ((($30)) + 1|0);
   $buf = $31;
   HEAP8[$30>>0] = 32;
  }
  $32 = $plist;
  $33 = ((($32)) + 21|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(0);
  $36 = $separate_phonemes;
  $37 = ($36|0)==(32);
  $or$cond = $35 | $37;
  if ($or$cond) {
   $38 = $separate_phonemes;
   $39 = ($38|0)!=(0);
   $40 = $ix;
   $41 = ($40|0)>(1);
   $or$cond3 = $39 & $41;
   if ($or$cond3) {
    (__Z7utf8_inPiPKc($c,$phon_buf2)|0);
    $42 = HEAP32[$c>>2]|0;
    $43 = ($42|0)<(688);
    $44 = HEAP32[$c>>2]|0;
    $45 = ($44|0)>(879);
    $or$cond5 = $43 | $45;
    if ($or$cond5) {
     $46 = $separate_phonemes;
     $47 = $buf;
     $48 = (__Z8utf8_outjPc($46,$47)|0);
     $49 = $buf;
     $50 = (($49) + ($48)|0);
     $buf = $50;
    }
   }
  }
  $51 = $plist;
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = $53 & 4;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $plist;
   $57 = ((($56)) + 3|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $stress = $59;
   $60 = ($59|0)>(1);
   if ($60) {
    HEAP32[$c>>2] = 0;
    $61 = $stress;
    $62 = ($61|0)>(5);
    if ($62) {
     $stress = 5;
    }
    $63 = $use_ipa;
    $64 = ($63|0)!=(0);
    if ($64) {
     HEAP32[$c>>2] = 716;
     $65 = $stress;
     $66 = ($65|0)>(3);
     $$ = $66 ? 712 : 716;
     HEAP32[$c>>2] = $$;
    } else {
     $67 = $stress;
     $68 = HEAP32[200]|0;
     $69 = (($68) + ($67)|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70 << 24 >> 24;
     HEAP32[$c>>2] = $71;
    }
    $72 = HEAP32[$c>>2]|0;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = HEAP32[$c>>2]|0;
     $75 = $buf;
     $76 = (__Z8utf8_outjPc($74,$75)|0);
     $77 = $buf;
     $78 = (($77) + ($76)|0);
     $buf = $78;
    }
   }
  }
  HEAP32[$flags>>2] = 0;
  $count = 0;
  $p = $phon_buf2;
  while(1) {
   $79 = $p;
   $80 = HEAP8[$79>>0]|0;
   $81 = $80 << 24 >> 24;
   $82 = ($81|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $p;
   $84 = (__Z7utf8_inPiPKc($c,$83)|0);
   $85 = $p;
   $86 = (($85) + ($84)|0);
   $p = $86;
   $87 = $use_tie;
   $88 = ($87|0)!=(0);
   $89 = $count;
   $90 = ($89|0)>(0);
   $or$cond9 = $88 & $90;
   if ($or$cond9) {
    $91 = HEAP32[$flags>>2]|0;
    $92 = $count;
    $93 = (($92) - 1)|0;
    $94 = 1 << $93;
    $95 = $91 & $94;
    $96 = ($95|0)!=(0);
    if (!($96)) {
     $97 = HEAP32[$c>>2]|0;
     $98 = ($97|0)<(688);
     $99 = HEAP32[$c>>2]|0;
     $100 = ($99|0)>(879);
     $or$cond7 = $98 | $100;
     if ($or$cond7) {
      $101 = HEAP32[$c>>2]|0;
      $102 = (__Z9iswalpha2i($101)|0);
      $103 = ($102|0)!=(0);
      if ($103) {
       $104 = $use_tie;
       $105 = $buf;
       $106 = (__Z8utf8_outjPc($104,$105)|0);
       $107 = $buf;
       $108 = (($107) + ($106)|0);
       $buf = $108;
      }
     }
    }
   }
   $109 = HEAP32[$c>>2]|0;
   $110 = $buf;
   $111 = (__Z8utf8_outjPc($109,$110)|0);
   $112 = $buf;
   $113 = (($112) + ($111)|0);
   $buf = $113;
   $114 = $count;
   $115 = (($114) + 1)|0;
   $count = $115;
  }
  $116 = $plist;
  $117 = ((($116)) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 10|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = ($121|0)!=(21);
  if ($122) {
   $123 = $plist;
   $124 = HEAP16[$123>>1]|0;
   $125 = $124&65535;
   $126 = $125 & 8;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $buf;
    $129 = HEAP32[(44600)>>2]|0;
    $130 = $use_ipa;
    $131 = (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($128,$129,0,$130,0)|0);
    $buf = $131;
   }
   $132 = $plist;
   $133 = HEAP16[$132>>1]|0;
   $134 = $133&65535;
   $135 = $134 & 4;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $plist;
    $138 = ((($137)) + 17|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139&255;
    $141 = ($140|0)!=(2);
    if ($141) {
     $142 = $buf;
     $143 = HEAP32[(44632)>>2]|0;
     $144 = $use_ipa;
     $145 = (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($142,$143,0,$144,0)|0);
     $buf = $145;
    }
   }
   $146 = $plist;
   $147 = ((($146)) + 7|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = ($149|0)>(0);
   if ($150) {
    $151 = $buf;
    $152 = $plist;
    $153 = ((($152)) + 7|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = $154&255;
    $156 = (44552 + ($155<<2)|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $use_ipa;
    $159 = (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($151,$157,0,$158,0)|0);
    $buf = $159;
   }
  }
  $160 = $buf;
  $161 = $160;
  $162 = $phon_buf;
  $163 = (($161) - ($162))|0;
  $len = $163;
  $164 = $phon_out_ix;
  $165 = $len;
  $166 = (($164) + ($165))|0;
  $167 = HEAP32[10346]|0;
  $168 = ($166>>>0)>=($167>>>0);
  if ($168) {
   $169 = $phon_out_ix;
   $170 = $len;
   $171 = (($169) + ($170))|0;
   $172 = (($171) + 500)|0;
   HEAP32[10346] = $172;
   $173 = HEAP32[10345]|0;
   $174 = HEAP32[10346]|0;
   $175 = (_realloc($173,$174)|0);
   HEAP32[10345] = $175;
   $176 = ($175|0)==(0|0);
   if ($176) {
    label = 42;
    break;
   }
  }
  $177 = $len;
  $178 = (($phon_buf) + ($177)|0);
  HEAP8[$178>>0] = 0;
  $179 = $phon_out_ix;
  $180 = HEAP32[10345]|0;
  $181 = (($180) + ($179)|0);
  (_strcpy($181,$phon_buf)|0);
  $182 = $len;
  $183 = $phon_out_ix;
  $184 = (($183) + ($182))|0;
  $phon_out_ix = $184;
  $185 = $ix;
  $186 = (($185) + 1)|0;
  $ix = $186;
 }
 if ((label|0) == 42) {
  HEAP32[10346] = 0;
  $0 = 121874;
  $191 = $0;
  STACKTOP = sp;return ($191|0);
 }
 else if ((label|0) == 44) {
  $187 = $phon_out_ix;
  $188 = HEAP32[10345]|0;
  $189 = (($188) + ($187)|0);
  HEAP8[$189>>0] = 0;
  $190 = HEAP32[10345]|0;
  $0 = $190;
  $191 = $0;
  STACKTOP = sp;return ($191|0);
 }
 return (0)|0;
}
function __Z7IsVowelP10Translatori($tr,$letter) {
 $tr = $tr|0;
 $letter = $letter|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $letter;
 $2 = $0;
 $3 = $1;
 $4 = (__ZL8IsLetterP10Translatorii($2,$3,7)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZL8IsLetterP10Translatorii($tr,$letter,$group) {
 $tr = $tr|0;
 $letter = $letter|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $letter2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tr;
 $2 = $letter;
 $3 = $group;
 $4 = $3;
 $5 = $1;
 $6 = ((($5)) + 724|0);
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $3;
 if ($9) {
  $11 = $1;
  $12 = ((($11)) + 724|0);
  $13 = (($12) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = (_wcschr($14,$15)|0);
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $0 = 1;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  } else {
   $0 = 0;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  }
 }
 $18 = ($10|0)>(7);
 if ($18) {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $19 = $1;
 $20 = ((($19)) + 720|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(0);
 $23 = $2;
 do {
  if ($22) {
   $24 = $1;
   $25 = ((($24)) + 720|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($23) - ($26))|0;
   $letter2 = $27;
   $28 = ($27|0)>(0);
   $29 = $letter2;
   $30 = ($29|0)<(256);
   $or$cond = $28 & $30;
   if ($or$cond) {
    $31 = $letter2;
    $2 = $31;
    break;
   }
   $0 = 0;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  } else {
   $32 = ($23|0)>=(192);
   $33 = $2;
   $34 = ($33|0)<(606);
   $or$cond3 = $32 & $34;
   if ($or$cond3) {
    $35 = $2;
    $36 = (($35) - 192)|0;
    $37 = (17588 + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = $1;
    $41 = ((($40)) + 464|0);
    $42 = (($41) + ($39)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $3;
    $46 = 1 << $45;
    $47 = $44 & $46;
    $0 = $47;
    $61 = $0;
    STACKTOP = sp;return ($61|0);
   }
  }
 } while(0);
 $48 = $2;
 $49 = ($48|0)>=(0);
 $50 = $2;
 $51 = ($50|0)<(256);
 $or$cond5 = $49 & $51;
 if ($or$cond5) {
  $52 = $2;
  $53 = $1;
  $54 = ((($53)) + 464|0);
  $55 = (($54) + ($52)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $3;
  $59 = 1 << $58;
  $60 = $57 & $59;
  $0 = $60;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 } else {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function __Z14UnpronouncableP10TranslatorPci($tr,$word,$posn) {
 $tr = $tr|0;
 $word = $word|0;
 $posn = $posn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $alphabet = 0, $c = 0;
 var $c1 = 0, $count = 0, $index = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vowel_posn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 20|0;
 $1 = $tr;
 $2 = $word;
 $3 = $posn;
 $c1 = 0;
 $vowel_posn = 9;
 $4 = $2;
 (__Z7utf8_inPiPKc($c,$4)|0);
 $5 = $1;
 $6 = ((($5)) + 720|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 $9 = HEAP32[$c>>2]|0;
 $10 = ($9|0)<(577);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $11 = HEAP32[$c>>2]|0;
 $12 = (__Z16AlphabetFromChari($11)|0);
 $alphabet = $12;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $alphabet;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 720|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)!=($19|0);
  if ($20) {
   $0 = 0;
   $97 = $0;
   STACKTOP = sp;return ($97|0);
  }
 }
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(1);
 if ($25) {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $26 = $2;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 << 24 >> 24;
 HEAP32[$c>>2] = $28;
 $29 = ($28|0)==(32);
 $30 = HEAP32[$c>>2]|0;
 $31 = ($30|0)==(0);
 $or$cond3 = $29 | $31;
 $32 = HEAP32[$c>>2]|0;
 $33 = ($32|0)==(39);
 $or$cond5 = $or$cond3 | $33;
 if ($or$cond5) {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $index = 0;
 $count = 0;
 while(1) {
  $34 = $index;
  $35 = $2;
  $36 = (($35) + ($34)|0);
  $37 = (__Z7utf8_inPiPKc($c,$36)|0);
  $38 = $index;
  $39 = (($38) + ($37))|0;
  $index = $39;
  $40 = HEAP32[$c>>2]|0;
  $41 = ($40|0)==(0);
  $42 = HEAP32[$c>>2]|0;
  $43 = ($42|0)==(32);
  $or$cond7 = $41 | $43;
  if ($or$cond7) {
   break;
  }
  $44 = HEAP32[$c>>2]|0;
  $45 = ($44|0)==(39);
  if ($45) {
   $46 = $count;
   $47 = ($46|0)>(1);
   $48 = $3;
   $49 = ($48|0)>(0);
   $or$cond9 = $47 | $49;
   if ($or$cond9) {
    break;
   }
  }
  $50 = $count;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = HEAP32[$c>>2]|0;
   $c1 = $52;
  }
  $53 = HEAP32[$c>>2]|0;
  $54 = ($53|0)==(39);
  if ($54) {
   $55 = $1;
   $56 = ((($55)) + 24|0);
   $57 = ((($56)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(3);
   if (!($59)) {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $60 = $count;
   $61 = (($60) + 1)|0;
   $count = $61;
  }
  $62 = $1;
  $63 = HEAP32[$c>>2]|0;
  $64 = (__Z7IsVowelP10Translatori($62,$63)|0);
  $65 = ($64|0)!=(0);
  if ($65) {
   label = 20;
   break;
  }
  $67 = HEAP32[$c>>2]|0;
  $68 = ($67|0)!=(39);
  if (!($68)) {
   continue;
  }
  $69 = HEAP32[$c>>2]|0;
  $70 = (__Z9iswalpha2i($69)|0);
  $71 = ($70|0)!=(0);
  if (!($71)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 20) {
  $66 = $count;
  $vowel_posn = $66;
 }
 else if ((label|0) == 23) {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $72 = $vowel_posn;
 $73 = ($72|0)>(2);
 if ($73) {
  $74 = $1;
  $75 = ((($74)) + 24|0);
  $76 = ((($75)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)==(2);
  if ($78) {
   $79 = $1;
   $80 = $2;
   $81 = (__ZL15Unpronouncable2P10TranslatorPc($79,$80)|0);
   $0 = $81;
   $97 = $0;
   STACKTOP = sp;return ($97|0);
  }
 }
 $82 = $c1;
 $83 = $1;
 $84 = ((($83)) + 24|0);
 $85 = ((($84)) + 20|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($82|0)==($86|0);
 if ($87) {
  $88 = $vowel_posn;
  $89 = (($88) + -1)|0;
  $vowel_posn = $89;
 }
 $90 = $vowel_posn;
 $91 = $1;
 $92 = ((($91)) + 268|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93 << 24 >> 24;
 $95 = (($94) + 1)|0;
 $96 = ($90|0)>($95|0);
 if ($96) {
  $0 = 1;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 } else {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function __ZL15Unpronouncable2P10TranslatorPc($tr,$word) {
 $tr = $tr|0;
 $word = $word|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $end_flags = 0, $ph_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ph_buf = sp + 24|0;
 $1 = $tr;
 $2 = $word;
 HEAP8[$ph_buf>>0] = 0;
 $3 = $2;
 $4 = ((($3)) + -1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $c = $6;
 $7 = $2;
 $8 = ((($7)) + -1|0);
 HEAP8[$8>>0] = 32;
 $9 = $1;
 $10 = $2;
 $11 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($9,$10,$ph_buf,200,0,-2147483648,0)|0);
 $end_flags = $11;
 $12 = $c;
 $13 = $12&255;
 $14 = $2;
 $15 = ((($14)) + -1|0);
 HEAP8[$15>>0] = $13;
 $16 = $end_flags;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = $end_flags;
  $19 = $18 & 32768;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $0 = 0;
   $21 = $0;
   STACKTOP = sp;return ($21|0);
  }
 }
 $0 = 1;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($tr,$p_start,$phonemes,$ph_size,$end_phonemes,$word_flags,$dict_flags) {
 $tr = $tr|0;
 $p_start = $p_start|0;
 $phonemes = $phonemes|0;
 $ph_size = $ph_size|0;
 $end_phonemes = $end_phonemes|0;
 $word_flags = $word_flags|0;
 $dict_flags = $dict_flags|0;
 var $$old = 0, $$old14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alphabet = 0, $any_alpha = 0, $buf = 0;
 var $c = 0, $c12 = 0, $c2 = 0, $dict_flags0 = 0, $digit_count = 0, $found = 0, $g = 0, $g1 = 0, $ix = 0, $ix1 = 0, $letter = 0, $match1 = 0, $match2 = 0, $n = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond18 = 0, $or$cond21 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $p2 = 0, $ph_buf = 0, $string = 0, $vararg_buffer = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $wc = 0, $wc_bytes = 0, $word_copy = 0, $wordbuf = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 40|0;
 $vararg_buffer33 = sp + 32|0;
 $vararg_buffer29 = sp + 24|0;
 $vararg_buffer25 = sp + 16|0;
 $vararg_buffer22 = sp + 8|0;
 $vararg_buffer = sp;
 $wc = sp + 132|0;
 $p2 = sp + 124|0;
 $letter = sp + 104|0;
 $p = sp + 88|0;
 $match1 = sp + 64|0;
 $match2 = sp + 48|0;
 $ph_buf = sp + 504|0;
 $word_copy = sp + 344|0;
 $wordbuf = sp + 224|0;
 $string = sp + 216|0;
 $buf = sp + 176|0;
 $1 = $tr;
 $2 = $p_start;
 $3 = $phonemes;
 $4 = $ph_size;
 $5 = $end_phonemes;
 $6 = $word_flags;
 $7 = $dict_flags;
 HEAP32[$wc>>2] = 0;
 $any_alpha = 0;
 $digit_count = 0;
 $dict_flags0 = 0;
 $8 = $1;
 $9 = ((($8)) + 804|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $12 = $7;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $7;
  $15 = HEAP32[$14>>2]|0;
  $dict_flags0 = $15;
 }
 $ix = 0;
 $$old = $ix;
 $$old14 = ($$old|0)<(159);
 if ($$old14) {
  while(1) {
   $16 = $ix;
   $17 = $2;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $c = $19;
   $20 = $c;
   $21 = $ix;
   $22 = (($21) + 1)|0;
   $ix = $22;
   $23 = (($word_copy) + ($21)|0);
   HEAP8[$23>>0] = $20;
   $24 = $c;
   $25 = $24&255;
   $26 = ($25|0)!=(0);
   $27 = $ix;
   $28 = ($27|0)<(159);
   $or$cond15 = $26 & $28;
   if (!($or$cond15)) {
    break;
   }
  }
 }
 $29 = $ix;
 $30 = (($word_copy) + ($29)|0);
 HEAP8[$30>>0] = 0;
 $31 = HEAP32[19040]|0;
 $32 = $31 & 8;
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $34 = $6;
   $35 = $34 & 268435456;
   $36 = ($35|0)==(0);
   if ($36) {
    $ix1 = 0;
    while(1) {
     $37 = $ix1;
     $38 = $2;
     $39 = (($38) + ($37)|0);
     $40 = HEAP8[$39>>0]|0;
     $c = $40;
     $41 = $40&255;
     $42 = ($41|0)!=(32);
     if (!($42)) {
      break;
     }
     $43 = $c;
     $44 = $43&255;
     $45 = ($44|0)!=(0);
     $46 = $ix1;
     $47 = ($46>>>0)<(119);
     $or$cond18 = $45 & $47;
     if (!($or$cond18)) {
      break;
     }
     $48 = $c;
     $49 = $ix1;
     $50 = (($wordbuf) + ($49)|0);
     HEAP8[$50>>0] = $48;
     $51 = $ix1;
     $52 = (($51) + 1)|0;
     $ix1 = $52;
    }
    $53 = $ix1;
    $54 = (($wordbuf) + ($53)|0);
    HEAP8[$54>>0] = 0;
    $55 = $6;
    $56 = $55 & -2147483648;
    $57 = ($56|0)!=(0);
    $58 = HEAP32[19037]|0;
    if ($57) {
     HEAP32[$vararg_buffer>>2] = $wordbuf;
     (_fprintf($58,18194,$vararg_buffer)|0);
     break;
    } else {
     HEAP32[$vararg_buffer22>>2] = $wordbuf;
     (_fprintf($58,18216,$vararg_buffer22)|0);
     break;
    }
   }
  }
 } while(0);
 $59 = $2;
 HEAP32[$p>>2] = $59;
 $60 = $1;
 $61 = ((($60)) + 8328|0);
 HEAP32[$61>>2] = 0;
 $62 = $1;
 $63 = ((($62)) + 8332|0);
 HEAP32[$63>>2] = 0;
 $64 = $5;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $5;
  HEAP8[$66>>0] = 0;
 }
 L26: while(1) {
  $67 = HEAP32[$p>>2]|0;
  $68 = HEAP8[$67>>0]|0;
  $c = $68;
  $69 = $68&255;
  $70 = ($69|0)!=(32);
  if (!($70)) {
   break;
  }
  $71 = $c;
  $72 = $71&255;
  $73 = ($72|0)!=(0);
  if (!($73)) {
   break;
  }
  $74 = HEAP32[$p>>2]|0;
  $75 = (__Z7utf8_inPiPKc($wc,$74)|0);
  $wc_bytes = $75;
  $76 = HEAP32[$wc>>2]|0;
  $77 = (__Z7IsAlphaj($76)|0);
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $any_alpha;
   $80 = (($79) + 1)|0;
   $any_alpha = $80;
  }
  $81 = $c;
  $82 = $81&255;
  $83 = $1;
  $84 = ((($83)) + 7788|0);
  $85 = (($84) + ($82)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $n = $87;
  $88 = HEAP32[$wc>>2]|0;
  $89 = (__Z7IsDigitj($88)|0);
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $1;
   $92 = ((($91)) + 270|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93 << 24 >> 24;
   $95 = ($94|0)!=(0);
   $96 = $any_alpha;
   $97 = ($96|0)!=(0);
   $or$cond = $95 & $97;
   if (!($or$cond)) {
    HEAP8[$string>>0] = 95;
    $98 = ((($string)) + 1|0);
    $99 = HEAP32[$p>>2]|0;
    $100 = $wc_bytes;
    _memcpy(($98|0),($99|0),($100|0))|0;
    $101 = $wc_bytes;
    $102 = (1 + ($101))|0;
    $103 = (($string) + ($102)|0);
    HEAP8[$103>>0] = 0;
    $104 = $1;
    (__Z6LookupP10TranslatorPKcPc($104,$string,$buf)|0);
    $105 = $digit_count;
    $106 = (($105) + 1)|0;
    $digit_count = $106;
    $107 = ($106>>>0)>=(2);
    if ($107) {
     (_strcat($buf,18303)|0);
     $digit_count = 0;
    }
    $108 = $1;
    $109 = $3;
    $110 = $4;
    __Z14AppendPhonemesP10TranslatorPciPKc($108,$109,$110,$buf);
    $111 = $wc_bytes;
    $112 = HEAP32[$p>>2]|0;
    $113 = (($112) + ($111)|0);
    HEAP32[$p>>2] = $113;
    continue;
   }
  }
  $digit_count = 0;
  $found = 0;
  $114 = HEAP32[$wc>>2]|0;
  $115 = $1;
  $116 = ((($115)) + 720|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($114) - ($117))|0;
  $ix = $118;
  $119 = ($118|0)>=(0);
  $120 = $ix;
  $121 = ($120|0)<(128);
  $or$cond5 = $119 & $121;
  if ($or$cond5) {
   $122 = $ix;
   $123 = $1;
   $124 = ((($123)) + 6312|0);
   $125 = (($124) + ($122<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)!=(0|0);
   if ($127) {
    $128 = $1;
    $129 = $2;
    $130 = $wc_bytes;
    $131 = $ix;
    $132 = $1;
    $133 = ((($132)) + 6312|0);
    $134 = (($133) + ($131<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $6;
    $137 = $dict_flags0;
    __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($128,$p,$129,$130,$135,$match1,$136,$137);
    $found = 1;
   }
  }
  $138 = $found;
  $139 = ($138|0)==(0);
  $140 = $n;
  $141 = ($140|0)>(0);
  $or$cond7 = $139 & $141;
  L44: do {
   if ($or$cond7) {
    $142 = HEAP32[$p>>2]|0;
    $143 = ((($142)) + 1|0);
    $144 = HEAP8[$143>>0]|0;
    $c2 = $144;
    $145 = $c;
    $146 = $145&255;
    $147 = $c2;
    $148 = $147&255;
    $149 = $148 << 8;
    $150 = (($146) + ($149))|0;
    $c12 = $150;
    $151 = $c;
    $152 = $151&255;
    $153 = $1;
    $154 = ((($153)) + 8044|0);
    $155 = (($154) + ($152)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $g1 = $157;
    $158 = $g1;
    $g = $158;
    while(1) {
     $159 = $g;
     $160 = $g1;
     $161 = $n;
     $162 = (($160) + ($161))|0;
     $163 = ($159|0)<($162|0);
     if (!($163)) {
      break L44;
     }
     $164 = $g;
     $165 = $1;
     $166 = ((($165)) + 7304|0);
     $167 = (($166) + ($164<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $c12;
     $170 = ($168|0)==($169|0);
     if ($170) {
      $found = 1;
      $171 = HEAP32[$p>>2]|0;
      HEAP32[$p2>>2] = $171;
      $172 = $1;
      $173 = $2;
      $174 = $g;
      $175 = $1;
      $176 = ((($175)) + 6824|0);
      $177 = (($176) + ($174<<2)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $6;
      $180 = $dict_flags0;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($172,$p2,$173,2,$178,$match2,$179,$180);
      $181 = HEAP32[$match2>>2]|0;
      $182 = ($181|0)>(0);
      if ($182) {
       $183 = HEAP32[$match2>>2]|0;
       $184 = (($183) + 35)|0;
       HEAP32[$match2>>2] = $184;
      }
      $185 = $1;
      $186 = $2;
      $187 = $c;
      $188 = $187&255;
      $189 = $1;
      $190 = ((($189)) + 5288|0);
      $191 = (($190) + ($188<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = $6;
      $194 = $dict_flags0;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($185,$p,$186,1,$192,$match1,$193,$194);
      $195 = HEAP32[$match2>>2]|0;
      $196 = HEAP32[$match1>>2]|0;
      $197 = ($195|0)>=($196|0);
      if ($197) {
       ;HEAP32[$match1>>2]=HEAP32[$match2>>2]|0;HEAP32[$match1+4>>2]=HEAP32[$match2+4>>2]|0;HEAP32[$match1+8>>2]=HEAP32[$match2+8>>2]|0;HEAP32[$match1+12>>2]=HEAP32[$match2+12>>2]|0;
       $198 = HEAP32[$p2>>2]|0;
       HEAP32[$p>>2] = $198;
      }
     }
     $199 = $g;
     $200 = (($199) + 1)|0;
     $g = $200;
    }
   }
  } while(0);
  $201 = $found;
  $202 = ($201|0)!=(0);
  do {
   if (!($202)) {
    $203 = $c;
    $204 = $203&255;
    $205 = $1;
    $206 = ((($205)) + 5288|0);
    $207 = (($206) + ($204<<2)|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)!=(0|0);
    $210 = $1;
    $211 = $2;
    do {
     if ($209) {
      $212 = $c;
      $213 = $212&255;
      $214 = $1;
      $215 = ((($214)) + 5288|0);
      $216 = (($215) + ($213<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = $6;
      $219 = $dict_flags0;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($210,$p,$211,1,$217,$match1,$218,$219);
     } else {
      $220 = $1;
      $221 = ((($220)) + 5288|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = $6;
      $224 = $dict_flags0;
      __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($210,$p,$211,0,$222,$match1,$223,$224);
      $225 = HEAP32[$match1>>2]|0;
      $226 = ($225|0)==(0);
      if ($226) {
       $227 = HEAP32[19046]|0;
       $228 = $227 & 16;
       $229 = ($228|0)==(0);
       if ($229) {
        $230 = HEAP32[$p>>2]|0;
        $231 = ((($230)) + -1|0);
        $232 = (__Z7utf8_inPiPKc($letter,$231)|0);
        $233 = (($232) - 1)|0;
        $n = $233;
        $234 = $1;
        $235 = ((($234)) + 720|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = ($236|0)>(0);
        $238 = HEAP32[$letter>>2]|0;
        $239 = ($238|0)<=(577);
        $or$cond21 = $237 & $239;
        if ($or$cond21) {
         $240 = HEAP32[$letter>>2]|0;
         $241 = (__Z9iswalpha2i($240)|0);
         $242 = ($241|0)!=(0);
         if ($242) {
          label = 46;
          break L26;
         }
        }
        $246 = HEAP32[$letter>>2]|0;
        $247 = ($246|0)==(57384);
        do {
         if ($247) {
          $248 = HEAP32[19061]|0;
          $249 = $1;
          $250 = ((($249)) + 108|0);
          $251 = ((($250)) + 64|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = ($248|0)<($252|0);
          if (!($253)) {
           break;
          }
          $254 = $1;
          $255 = ((($254)) + 108|0);
          $256 = ((($255)) + 64|0);
          $257 = HEAP32[$256>>2]|0;
          HEAP32[19061] = $257;
         }
        } while(0);
        $258 = HEAP32[$letter>>2]|0;
        $259 = (__Z9IsBracketi($258)|0);
        $260 = ($259|0)!=(0);
        do {
         if ($260) {
          $261 = HEAP32[19061]|0;
          $262 = $1;
          $263 = ((($262)) + 24|0);
          $264 = ((($263)) + 64|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = ($261|0)<($265|0);
          if (!($266)) {
           break;
          }
          $267 = $1;
          $268 = ((($267)) + 24|0);
          $269 = ((($268)) + 64|0);
          $270 = HEAP32[$269>>2]|0;
          HEAP32[19061] = $270;
         }
        } while(0);
        $271 = HEAP32[$letter>>2]|0;
        $272 = ($271|0)>=(192);
        $273 = HEAP32[$letter>>2]|0;
        $274 = ($273|0)<(606);
        $or$cond9 = $272 & $274;
        do {
         if ($or$cond9) {
          $275 = HEAP32[$letter>>2]|0;
          $276 = (($275) - 192)|0;
          $277 = (17588 + ($276)|0);
          $278 = HEAP8[$277>>0]|0;
          $279 = $278&255;
          $ix = $279;
          $280 = ($279|0)!=(0);
          if (!($280)) {
           break;
          }
          $281 = HEAP32[$p>>2]|0;
          $282 = ((($281)) + -2|0);
          $283 = HEAP8[$282>>0]|0;
          $284 = $283 << 24 >> 24;
          $285 = ($284|0)!=(32);
          if (!($285)) {
           $286 = $n;
           $287 = HEAP32[$p>>2]|0;
           $288 = (($287) + ($286)|0);
           $289 = HEAP8[$288>>0]|0;
           $290 = $289 << 24 >> 24;
           $291 = ($290|0)!=(32);
           if (!($291)) {
            break;
           }
          }
          $292 = HEAP32[$p>>2]|0;
          $293 = ((($292)) + -1|0);
          HEAP32[$p2>>2] = $293;
          $294 = $ix;
          $295 = $294&255;
          $296 = HEAP32[$p>>2]|0;
          $297 = ((($296)) + -1|0);
          HEAP8[$297>>0] = $295;
          while(1) {
           $298 = $n;
           $299 = HEAP32[$p>>2]|0;
           $300 = (($299) + ($298)|0);
           $301 = HEAP8[$300>>0]|0;
           $302 = HEAP32[$p>>2]|0;
           HEAP8[$302>>0] = $301;
           $303 = $301 << 24 >> 24;
           $304 = ($303|0)!=(32);
           if (!($304)) {
            break;
           }
           $305 = HEAP32[$p>>2]|0;
           $306 = ((($305)) + 1|0);
           HEAP32[$p>>2] = $306;
          }
          while(1) {
           $307 = $n;
           $308 = (($307) + -1)|0;
           $n = $308;
           $309 = ($307|0)>(0);
           if (!($309)) {
            break;
           }
           $310 = HEAP32[$p>>2]|0;
           $311 = ((($310)) + 1|0);
           HEAP32[$p>>2] = $311;
           HEAP8[$310>>0] = 32;
          }
          $312 = $1;
          $313 = ((($312)) + 24|0);
          $314 = ((($313)) + 4|0);
          $315 = HEAP32[$314>>2]|0;
          $316 = ($315|0)!=(0);
          do {
           if ($316) {
            $317 = HEAP32[$letter>>2]|0;
            $318 = (__Z11lookupwcharPKti(6148,$317)|0);
            $319 = ($318|0)>(0);
            if (!($319)) {
             break;
            }
            $320 = HEAP32[$p2>>2]|0;
            HEAP32[$p>>2] = $320;
            continue L26;
           }
          } while(0);
          $321 = $3;
          HEAP8[$321>>0] = 0;
          $322 = $2;
          HEAP32[$p>>2] = $322;
          $323 = $1;
          $324 = ((($323)) + 8328|0);
          HEAP32[$324>>2] = 0;
          $325 = $1;
          $326 = ((($325)) + 8332|0);
          HEAP32[$326>>2] = 0;
          continue L26;
         }
        } while(0);
        $327 = HEAP32[$letter>>2]|0;
        $328 = (__Z16AlphabetFromChari($327)|0);
        $alphabet = $328;
        $329 = ($328|0)!=(0|0);
        if (!($329)) {
         break;
        }
        $330 = $alphabet;
        $331 = ((($330)) + 4|0);
        $332 = HEAP32[$331>>2]|0;
        $333 = $1;
        $334 = ((($333)) + 720|0);
        $335 = HEAP32[$334>>2]|0;
        $336 = ($332|0)!=($335|0);
        if (!($336)) {
         break;
        }
        $337 = $1;
        $338 = ((($337)) + 300|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $alphabet;
        $341 = ((($340)) + 4|0);
        $342 = HEAP32[$341>>2]|0;
        $343 = ($339|0)==($342|0);
        if ($343) {
         label = 69;
         break L26;
        }
        $349 = $alphabet;
        $350 = ((($349)) + 16|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $351 & 4;
        $353 = ($352|0)!=(0);
        if ($353) {
         label = 71;
         break L26;
        }
       }
      }
     }
    } while(0);
    $359 = HEAP32[$match1>>2]|0;
    $360 = ($359|0)==(0);
    if (!($360)) {
     $392 = $1;
     $393 = ((($392)) + 400|0);
     HEAP32[$393>>2] = 0;
     break;
    }
    $361 = HEAP32[$wc>>2]|0;
    $362 = ($361|0)>=(768);
    $363 = HEAP32[$wc>>2]|0;
    $364 = ($363|0)<=(879);
    $or$cond11 = $362 & $364;
    do {
     if (!($or$cond11)) {
      $365 = HEAP32[$wc>>2]|0;
      $366 = (__Z7IsAlphaj($365)|0);
      $367 = ($366|0)!=(0);
      if ($367) {
       $368 = $any_alpha;
       $369 = ($368|0)>(1);
       if ($369) {
        label = 77;
        break L26;
       }
       $370 = $wc_bytes;
       $371 = (($370) - 1)|0;
       $372 = HEAP32[$p>>2]|0;
       $373 = (($372) + ($371)|0);
       $374 = HEAP8[$373>>0]|0;
       $375 = $374 << 24 >> 24;
       $376 = ($375|0)>(32);
       if ($376) {
        label = 77;
        break L26;
       } else {
        break;
       }
      } else {
       $383 = $1;
       $384 = HEAP32[$wc>>2]|0;
       __Z12LookupLetterP10TranslatorjiPci($383,$384,-1,$ph_buf,0);
       $385 = HEAP8[$ph_buf>>0]|0;
       $386 = ($385<<24>>24)!=(0);
       if (!($386)) {
        break;
       }
       $387 = ((($match1)) + 4|0);
       HEAP32[$387>>2] = $ph_buf;
       HEAP32[$match1>>2] = 1;
       break;
      }
     }
    } while(0);
    $388 = $wc_bytes;
    $389 = (($388) - 1)|0;
    $390 = HEAP32[$p>>2]|0;
    $391 = (($390) + ($389)|0);
    HEAP32[$p>>2] = $391;
   }
  } while(0);
  $394 = ((($match1)) + 4|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = ($395|0)==(0|0);
  if ($396) {
   $397 = ((($match1)) + 4|0);
   HEAP32[$397>>2] = 121874;
  }
  $398 = HEAP32[$match1>>2]|0;
  $399 = ($398|0)>(0);
  if (!($399)) {
   continue;
  }
  $400 = $6;
  $401 = $400 & -2147483648;
  $402 = ($401|0)!=(0);
  if ($402) {
   label = 87;
   break;
  }
  $406 = ((($match1)) + 4|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = HEAP8[$407>>0]|0;
  $409 = $408 << 24 >> 24;
  $410 = ($409|0)==(21);
  if ($410) {
   $411 = $6;
   $412 = $411 & 4096;
   $413 = ($412|0)==(0);
   if ($413) {
    label = 90;
    break;
   }
  }
  $417 = HEAP32[19040]|0;
  $418 = $417 & 8;
  $419 = ($418|0)!=(0);
  if ($419) {
   $420 = $6;
   $421 = $420 & 268435456;
   $422 = ($421|0)==(0);
   if ($422) {
    $423 = HEAP32[19037]|0;
    (_fprintf($423,22429,$vararg_buffer37)|0);
   }
  }
  $424 = ((($match1)) + 8|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = $425 & -32769;
  HEAP32[$424>>2] = $426;
  $427 = ((($match1)) + 8|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = ($428|0)!=(0);
  $430 = $5;
  $431 = ($430|0)!=(0|0);
  $or$cond13 = $429 & $431;
  if ($or$cond13) {
   $432 = ((($match1)) + 8|0);
   $433 = HEAP32[$432>>2]|0;
   $434 = $433 & 1024;
   $435 = ($434|0)!=(0);
   if (!($435)) {
    label = 97;
    break;
   }
   $436 = $6;
   $437 = $436 & 536870912;
   $438 = ($437|0)!=(0);
   if (!($438)) {
    label = 97;
    break;
   }
  }
  $462 = ((($match1)) + 12|0);
  $463 = HEAP32[$462>>2]|0;
  $464 = ($463|0)!=(0|0);
  if ($464) {
   $465 = ((($match1)) + 12|0);
   $466 = HEAP32[$465>>2]|0;
   HEAP8[$466>>0] = 69;
  }
  $467 = $1;
  $468 = $3;
  $469 = $4;
  $470 = ((($match1)) + 4|0);
  $471 = HEAP32[$470>>2]|0;
  __Z14AppendPhonemesP10TranslatorPciPKc($467,$468,$469,$471);
 }
 if ((label|0) == 46) {
  $243 = $3;
  $244 = $1;
  $245 = ((($244)) + 288|0);
  HEAP32[$vararg_buffer25>>2] = 21;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $245;
  (_sprintf($243,26281,$vararg_buffer25)|0);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 else if ((label|0) == 69) {
  $344 = $3;
  $345 = $1;
  $346 = ((($345)) + 304|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = (__Z13WordToString2j($347)|0);
  HEAP32[$vararg_buffer29>>2] = 21;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = $348;
  (_sprintf($344,26281,$vararg_buffer29)|0);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 else if ((label|0) == 71) {
  $354 = $3;
  $355 = $alphabet;
  $356 = ((($355)) + 12|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = (__Z13WordToString2j($357)|0);
  HEAP32[$vararg_buffer33>>2] = 21;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = $358;
  (_sprintf($354,26281,$vararg_buffer33)|0);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 else if ((label|0) == 77) {
  $377 = $3;
  HEAP8[$377>>0] = 0;
  $378 = $7;
  $379 = ($378|0)!=(0|0);
  if ($379) {
   $380 = $7;
   $381 = HEAP32[$380>>2]|0;
   $382 = $381 | 4096;
   HEAP32[$380>>2] = $382;
  }
 }
 else if ((label|0) == 87) {
  $403 = ((($match1)) + 8|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = $404 | 1;
  $0 = $405;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 else if ((label|0) == 90) {
  $414 = $3;
  $415 = ((($match1)) + 4|0);
  $416 = HEAP32[$415>>2]|0;
  (_strcpy($414,$416)|0);
  $0 = 0;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 else if ((label|0) == 97) {
  $439 = ((($match1)) + 8|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = $440 & 1024;
  $442 = ($441|0)!=(0);
  if ($442) {
   $443 = ((($match1)) + 8|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = $444 & 127;
   $446 = ($445|0)==(0);
   if ($446) {
    $447 = HEAP32[$p>>2]|0;
    $448 = $2;
    $449 = $447;
    $450 = $448;
    $451 = (($449) - ($450))|0;
    $452 = ((($match1)) + 8|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = $453 | $451;
    HEAP32[$452>>2] = $454;
   }
  }
  $455 = $5;
  $456 = ((($match1)) + 4|0);
  $457 = HEAP32[$456>>2]|0;
  (_strcpy($455,$457)|0);
  $458 = $2;
  $459 = (_strlen($word_copy)|0);
  _memcpy(($458|0),($word_copy|0),($459|0))|0;
  $460 = ((($match1)) + 8|0);
  $461 = HEAP32[$460>>2]|0;
  $0 = $461;
  $474 = $0;
  STACKTOP = sp;return ($474|0);
 }
 $472 = $2;
 $473 = (_strlen($word_copy)|0);
 _memcpy(($472|0),($word_copy|0),($473|0))|0;
 $0 = 0;
 $474 = $0;
 STACKTOP = sp;return ($474|0);
}
function __Z6LookupP10TranslatorPKcPc($tr,$word,$ph_out) {
 $tr = $tr|0;
 $word = $word|0;
 $ph_out = $ph_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $flags0 = 0, $say_as = 0, $text = 0, $word1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $flags = sp + 8|0;
 $word1 = sp;
 $text = sp + 32|0;
 $0 = $tr;
 $1 = $word;
 $2 = $ph_out;
 $3 = $1;
 HEAP32[$word1>>2] = $3;
 HEAP32[$flags>>2] = 0;
 $4 = ((($flags)) + 4|0);
 HEAP32[$4>>2] = 1073741824;
 $5 = $0;
 $6 = $2;
 $7 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($5,$word1,$6,$flags,2,0)|0);
 $flags0 = $7;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$flags>>2]|0;
  $flags0 = $9;
 }
 $10 = HEAP32[$flags>>2]|0;
 $11 = $10 & 536870912;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $21 = $flags0;
  STACKTOP = sp;return ($21|0);
 }
 $13 = HEAP32[19046]|0;
 $say_as = $13;
 HEAP32[19046] = 0;
 HEAP8[$text>>0] = 0;
 $14 = ((($text)) + 1|0);
 $15 = HEAP32[$word1>>2]|0;
 __Z8strncpy0PcPKci($14,$15,80);
 $16 = $0;
 $17 = ((($text)) + 1|0);
 $18 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($16,$17,0,0,0)|0);
 $flags0 = $18;
 $19 = $2;
 (_strcpy($19,120044)|0);
 $20 = $say_as;
 HEAP32[19046] = $20;
 $21 = $flags0;
 STACKTOP = sp;return ($21|0);
}
function __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($tr,$wordptr,$ph_out,$flags,$end_flags,$wtab) {
 $tr = $tr|0;
 $wordptr = $wordptr|0;
 $ph_out = $ph_out|0;
 $flags = $flags|0;
 $end_flags = $end_flags|0;
 $wtab = $wtab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $found = 0, $len = 0, $length = 0;
 var $letter = 0, $nbytes = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, $word = 0, $word1 = 0, $word2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $word = sp + 72|0;
 $letter = sp + 16|0;
 $1 = $tr;
 $2 = $wordptr;
 $3 = $ph_out;
 $4 = $flags;
 $5 = $end_flags;
 $6 = $wtab;
 $length = 0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $word1 = $8;
 $word2 = $8;
 while(1) {
  $9 = $word2;
  $10 = (__Z11utf8_nbytesPKc($9)|0);
  $nbytes = $10;
  $11 = $word2;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(32);
  if ($15) {
   $16 = $nbytes;
   $17 = (($16) + 1)|0;
   $18 = $word2;
   $19 = (($18) + ($17)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(46);
   $235 = $22;
  } else {
   $235 = 0;
  }
  $23 = $length;
  if (!($235)) {
   break;
  }
  $24 = (($word) + ($23)|0);
  $25 = $word2;
  $26 = $nbytes;
  _memcpy(($24|0),($25|0),($26|0))|0;
  $27 = $nbytes;
  $28 = $length;
  $29 = (($28) + ($27))|0;
  $length = $29;
  $30 = $length;
  $31 = (($30) + 1)|0;
  $length = $31;
  $32 = (($word) + ($30)|0);
  HEAP8[$32>>0] = 46;
  $33 = $nbytes;
  $34 = (($33) + 3)|0;
  $35 = $word2;
  $36 = (($35) + ($34)|0);
  $word2 = $36;
 }
 $37 = ($23|0)>(0);
 if ($37) {
  $nbytes = 0;
  while(1) {
   $38 = $nbytes;
   $39 = $word2;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $c = $41;
   $42 = $41&255;
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
   $44 = $c;
   $45 = $44&255;
   $46 = ($45|0)!=(32);
   if (!($46)) {
    break;
   }
   $47 = $nbytes;
   $48 = (($47) + 1)|0;
   $nbytes = $48;
  }
  $49 = $length;
  $50 = (($word) + ($49)|0);
  $51 = $word2;
  $52 = $nbytes;
  _memcpy(($50|0),($51|0),($52|0))|0;
  $53 = $length;
  $54 = $nbytes;
  $55 = (($53) + ($54))|0;
  $56 = (($word) + ($55)|0);
  HEAP8[$56>>0] = 0;
  $57 = $1;
  $58 = $word2;
  $59 = $3;
  $60 = $4;
  $61 = $5;
  $62 = $6;
  $63 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($57,$word,$58,$59,$60,$61,$62)|0);
  $found = $63;
  $64 = $found;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   $66 = $4;
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 128;
   HEAP32[$66>>2] = $68;
   $69 = $length;
   HEAP32[10344] = $69;
   $0 = 1;
   $234 = $0;
   STACKTOP = sp;return ($234|0);
  }
 }
 $length = 0;
 while(1) {
  $70 = $length;
  $71 = ($70|0)<(159);
  if (!($71)) {
   break;
  }
  $72 = $word1;
  $73 = ((($72)) + 1|0);
  $word1 = $73;
  $74 = HEAP8[$72>>0]|0;
  $c = $74;
  $75 = $74&255;
  $76 = ($75|0)==(0);
  if ($76) {
   break;
  }
  $77 = $c;
  $78 = $77&255;
  $79 = ($78|0)==(32);
  if ($79) {
   break;
  }
  $80 = $c;
  $81 = $80&255;
  $82 = ($81|0)==(46);
  $83 = $length;
  $84 = ($83|0)>(0);
  $or$cond = $82 & $84;
  if ($or$cond) {
   $85 = $length;
   $86 = (($85) - 1)|0;
   $87 = (($word) + ($86)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88 << 24 >> 24;
   $90 = (__Z9IsDigit09j($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    break;
   }
  }
  $92 = $c;
  $93 = $length;
  $94 = (($word) + ($93)|0);
  HEAP8[$94>>0] = $92;
  $95 = $length;
  $96 = (($95) + 1)|0;
  $length = $96;
 }
 $97 = $length;
 $98 = (($word) + ($97)|0);
 HEAP8[$98>>0] = 0;
 $99 = $1;
 $100 = $word1;
 $101 = $3;
 $102 = $4;
 $103 = $5;
 $104 = $6;
 $105 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($99,$word,$100,$101,$102,$103,$104)|0);
 $found = $105;
 $106 = $4;
 $107 = HEAP32[$106>>2]|0;
 $108 = $107 & 134217728;
 $109 = ($108|0)!=(0);
 do {
  if ($109) {
   $110 = $3;
   $111 = $1;
   $112 = ((($111)) + 380|0);
   $113 = (_strcmp($110,$112)|0);
   $114 = ($113|0)==(0);
   $115 = $1;
   if (!($114)) {
    $124 = ((($115)) + 380|0);
    $125 = $3;
    __Z8strncpy0PcPKci($124,$125,20);
    $126 = $1;
    $127 = ((($126)) + 400|0);
    HEAP32[$127>>2] = 1;
    break;
   }
   $116 = ((($115)) + 400|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + 1)|0;
   HEAP32[$116>>2] = $118;
   $119 = $1;
   $120 = ((($119)) + 400|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)>(3);
   if ($122) {
    $123 = $3;
    HEAP8[$123>>0] = 0;
   }
  } else {
   $128 = $1;
   $129 = ((($128)) + 400|0);
   HEAP32[$129>>2] = 0;
  }
 } while(0);
 $130 = $found;
 $131 = ($130|0)==(0|0);
 if ($131) {
  $132 = $4;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $134 & 2048;
  $136 = ($135|0)!=(0);
  if ($136) {
   $word2 = $word;
   $137 = $word2;
   $138 = HEAP8[$137>>0]|0;
   $139 = $138 << 24 >> 24;
   $140 = ($139|0)==(95);
   if ($140) {
    $141 = $word2;
    $142 = ((($141)) + 1|0);
    $word2 = $142;
   }
   $143 = $word2;
   $144 = (__Z7utf8_inPiPKc($letter,$143)|0);
   $len = $144;
   $145 = $1;
   $146 = HEAP32[$letter>>2]|0;
   $147 = $3;
   __Z20LookupAccentedLetterP10TranslatorjPc($145,$146,$147);
   $148 = $word2;
   $149 = $len;
   $150 = (($148) + ($149)|0);
   $found = $150;
  }
 }
 $151 = $found;
 $152 = ($151|0)==(0|0);
 do {
  if ($152) {
   $153 = $3;
   HEAP8[$153>>0] = 0;
   $154 = $5;
   $155 = $154 & 16;
   $156 = ($155|0)!=(0);
   if ($156) {
    $157 = $length;
    $158 = (($157) - 1)|0;
    $159 = (($word) + ($158)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160 << 24 >> 24;
    $162 = ($161|0)==(101);
    if ($162) {
     $163 = $length;
     $164 = (($163) - 1)|0;
     $165 = (($word) + ($164)|0);
     HEAP8[$165>>0] = 0;
     $166 = $1;
     $167 = $word1;
     $168 = $3;
     $169 = $4;
     $170 = $5;
     $171 = $6;
     $172 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($166,$word,$167,$168,$169,$170,$171)|0);
     $found = $172;
     break;
    }
   }
   $173 = $5;
   $174 = $173 & 4096;
   $175 = ($174|0)!=(0);
   if ($175) {
    $176 = $length;
    $177 = (($176) - 1)|0;
    $178 = (($word) + ($177)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = $179 << 24 >> 24;
    $181 = $length;
    $182 = (($181) - 2)|0;
    $183 = (($word) + ($182)|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($180|0)==($185|0);
    if ($186) {
     $187 = $length;
     $188 = (($187) - 1)|0;
     $189 = (($word) + ($188)|0);
     HEAP8[$189>>0] = 0;
     $190 = $1;
     $191 = $word1;
     $192 = $3;
     $193 = $4;
     $194 = $5;
     $195 = $6;
     $196 = (__ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($190,$word,$191,$192,$193,$194,$195)|0);
     $found = $196;
    }
   }
  }
 } while(0);
 $197 = $found;
 $198 = ($197|0)!=(0|0);
 if (!($198)) {
  $233 = $3;
  HEAP8[$233>>0] = 0;
  $0 = 0;
  $234 = $0;
  STACKTOP = sp;return ($234|0);
 }
 $199 = $1;
 $200 = ((($199)) + 272|0);
 $201 = HEAP8[$200>>0]|0;
 $202 = ($201<<24>>24)!=(0);
 if ($202) {
  $203 = $4;
  $204 = HEAP32[$203>>2]|0;
  $205 = $204 ^ 536870912;
  HEAP32[$203>>2] = $205;
 }
 $206 = $4;
 $207 = HEAP32[$206>>2]|0;
 $208 = $207 & 536870912;
 $209 = ($208|0)!=(0);
 if (!($209)) {
  $0 = 1;
  $234 = $0;
  STACKTOP = sp;return ($234|0);
 }
 $210 = $5;
 $211 = $210 & 2;
 $212 = ($211|0)!=(0);
 if ($212) {
  HEAP8[119260] = 0;
  HEAP8[(119261)>>0] = 32;
  $213 = $3;
  HEAP32[$vararg_buffer>>2] = $213;
  (_sprintf((119262),25153,$vararg_buffer)|0);
  $214 = $2;
  $215 = HEAP32[$214>>2]|0;
  $word1 = $215;
  $216 = $2;
  HEAP32[$216>>2] = (119262);
  $217 = HEAP32[19040]|0;
  $218 = $217 & 8;
  $219 = ($218|0)!=(0);
  if ($219) {
   $220 = $found;
   $221 = $word1;
   $222 = $220;
   $223 = $221;
   $224 = (($222) - ($223))|0;
   $len = $224;
   $225 = $word1;
   $226 = $len;
   _memcpy(($word|0),($225|0),($226|0))|0;
   $227 = $len;
   $228 = (($word) + ($227)|0);
   HEAP8[$228>>0] = 0;
   $229 = HEAP32[19037]|0;
   $230 = $2;
   $231 = HEAP32[$230>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $word;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $231;
   (_fprintf($229,18286,$vararg_buffer2)|0);
  }
 }
 $232 = $3;
 HEAP8[$232>>0] = 0;
 $0 = 0;
 $234 = $0;
 STACKTOP = sp;return ($234|0);
}
function __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($tr,$word,$word2,$phonetic,$flags,$end_flags,$wtab) {
 $tr = $tr|0;
 $word = $word|0;
 $word2 = $word2|0;
 $phonetic = $phonetic|0;
 $flags = $flags|0;
 $end_flags = $end_flags|0;
 $wtab = $wtab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $condition_failed = 0, $dict_flags_buf = 0, $dictionary_flags = 0, $dictionary_flags2 = 0, $flag = 0, $hash = 0, $ix = 0, $lookup_symbol = 0, $n_chars = 0, $next = 0, $no_phonemes = 0, $or$cond = 0, $or$cond3 = 0, $p = 0;
 var $ph_decoded = 0, $phoneme_len = 0, $skipwords = 0, $textmode = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $wflags = 0, $wlen = 0, $word1 = 0, $word_buf = 0, $word_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer = sp;
 $c = sp + 52|0;
 $word_buf = sp + 416|0;
 $dict_flags_buf = sp + 336|0;
 $ph_decoded = sp + 136|0;
 $1 = $tr;
 $2 = $word;
 $3 = $word2;
 $4 = $phonetic;
 $5 = $flags;
 $6 = $end_flags;
 $7 = $wtab;
 $condition_failed = 0;
 $wflags = 0;
 $8 = $7;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $7;
  $11 = HEAP32[$10>>2]|0;
  $wflags = $11;
 }
 $12 = $5;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1073741824;
 $lookup_symbol = $15;
 $16 = $2;
 $word1 = $16;
 $17 = $1;
 $18 = ((($17)) + 332|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(0);
 if ($20) {
  $21 = $2;
  __Z8strncpy0PcPKci($word_buf,$21,160);
  $22 = $1;
  $23 = (__Z17TransposeAlphabetP10TranslatorPc($22,$word_buf)|0);
  $wlen = $23;
  $2 = $word_buf;
 } else {
  $24 = $2;
  $25 = (_strlen($24)|0);
  $wlen = $25;
 }
 $26 = $2;
 $27 = (__Z14HashDictionaryPKc($26)|0);
 $hash = $27;
 $28 = $hash;
 $29 = $1;
 $30 = ((($29)) + 812|0);
 $31 = (($30) + ($28<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $p = $32;
 $33 = $p;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $35 = $5;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $5;
   HEAP32[$37>>2] = 0;
  }
  $0 = 0;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 L14: while(1) {
  $38 = $p;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   label = 104;
   break;
  }
  $42 = $p;
  $43 = $p;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = (($42) + ($45)|0);
  $next = $46;
  $47 = $p;
  $48 = ((($47)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = $50 & 127;
  $52 = $wlen;
  $53 = ($51|0)!=($52|0);
  if (!($53)) {
   $54 = $2;
   $55 = $p;
   $56 = ((($55)) + 2|0);
   $57 = $wlen;
   $58 = $57 & 63;
   $59 = (_memcmp($54,$56,$58)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $62 = $3;
    $word_end = $62;
    $dictionary_flags = 0;
    $dictionary_flags2 = 0;
    $63 = $p;
    $64 = ((($63)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = $66 & 128;
    $no_phonemes = $67;
    $68 = $p;
    $69 = ((($68)) + 1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = $71 & 63;
    $73 = (($72) + 2)|0;
    $74 = $p;
    $75 = (($74) + ($73)|0);
    $p = $75;
    $76 = $no_phonemes;
    $77 = ($76|0)!=(0);
    $78 = $4;
    if ($77) {
     HEAP8[$78>>0] = 0;
     $phoneme_len = 0;
    } else {
     $79 = $p;
     (_strcpy($78,$79)|0);
     $80 = $p;
     $81 = (_strlen($80)|0);
     $phoneme_len = $81;
     $82 = $phoneme_len;
     $83 = (($82) + 1)|0;
     $84 = $p;
     $85 = (($84) + ($83)|0);
     $p = $85;
    }
    while(1) {
     $86 = $p;
     $87 = $next;
     $88 = ($86>>>0)<($87>>>0);
     if (!($88)) {
      break;
     }
     $89 = $p;
     $90 = ((($89)) + 1|0);
     $p = $90;
     $91 = HEAP8[$89>>0]|0;
     $flag = $91;
     $92 = $flag;
     $93 = $92&255;
     $94 = ($93|0)>=(100);
     $95 = $flag;
     $96 = $95&255;
     if ($94) {
      $97 = ($96|0)>=(132);
      $98 = $1;
      $99 = ((($98)) + 440|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $flag;
      $102 = $101&255;
      if ($97) {
       $103 = (($102) - 132)|0;
       $104 = 1 << $103;
       $105 = $100 & $104;
       $106 = ($105|0)!=(0);
       if (!($106)) {
        continue;
       }
       $condition_failed = 1;
       continue;
      } else {
       $107 = (($102) - 100)|0;
       $108 = 1 << $107;
       $109 = $100 & $108;
       $110 = ($109|0)==(0);
       if (!($110)) {
        continue;
       }
       $condition_failed = 1;
       continue;
      }
     }
     $111 = ($96|0)>(80);
     if (!($111)) {
      $148 = $flag;
      $149 = $148&255;
      $150 = ($149|0)>(64);
      if ($150) {
       $151 = $dictionary_flags;
       $152 = $151 & -16;
       $153 = $flag;
       $154 = $153&255;
       $155 = $154 & 15;
       $156 = $152 | $155;
       $dictionary_flags = $156;
       $157 = $flag;
       $158 = $157&255;
       $159 = $158 & 12;
       $160 = ($159|0)==(12);
       if (!($160)) {
        continue;
       }
       $161 = $dictionary_flags;
       $162 = $161 | 512;
       $dictionary_flags = $162;
       continue;
      }
      $163 = $flag;
      $164 = $163&255;
      $165 = ($164|0)>=(32);
      $166 = $flag;
      $167 = $166&255;
      if ($165) {
       $168 = (($167) - 32)|0;
       $169 = 1 << $168;
       $170 = $dictionary_flags2;
       $171 = $170 | $169;
       $dictionary_flags2 = $171;
       continue;
      } else {
       $172 = 1 << $167;
       $173 = $dictionary_flags;
       $174 = $173 | $172;
       $dictionary_flags = $174;
       continue;
      }
     }
     $112 = $next;
     $113 = $p;
     $114 = $112;
     $115 = $113;
     $116 = (($114) - ($115))|0;
     $n_chars = $116;
     $117 = $flag;
     $118 = $117&255;
     $119 = (($118) - 80)|0;
     $skipwords = $119;
     $120 = $7;
     $121 = ($120|0)!=(0|0);
     L44: do {
      if ($121) {
       $ix = 0;
       while(1) {
        $122 = $ix;
        $123 = $skipwords;
        $124 = ($122|0)<=($123|0);
        if (!($124)) {
         break L44;
        }
        $125 = $ix;
        $126 = $7;
        $127 = (($126) + (($125*12)|0)|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = $128 & 3072;
        $130 = ($129|0)!=(0);
        if ($130) {
         $condition_failed = 1;
        }
        $131 = $ix;
        $132 = (($131) + 1)|0;
        $ix = $132;
       }
      }
     } while(0);
     $133 = $3;
     $134 = $p;
     $135 = $n_chars;
     $136 = (_memcmp($133,$134,$135)|0);
     $137 = ($136|0)!=(0);
     if ($137) {
      $condition_failed = 1;
     }
     $138 = $condition_failed;
     $139 = ($138|0)!=(0);
     if ($139) {
      label = 34;
      break;
     }
     $141 = $dictionary_flags;
     $142 = $141 | 128;
     $dictionary_flags = $142;
     $143 = $skipwords;
     HEAP32[10344] = $143;
     $144 = $next;
     $p = $144;
     $145 = $3;
     $146 = $n_chars;
     $147 = (($145) + ($146)|0);
     $word_end = $147;
    }
    if ((label|0) == 34) {
     label = 0;
     $140 = $next;
     $p = $140;
    }
    $175 = $condition_failed;
    $176 = ($175|0)!=(0);
    if ($176) {
     $condition_failed = 0;
     continue;
    }
    $177 = $6;
    $178 = $177 & 4;
    $179 = ($178|0)==(0);
    if ($179) {
     $180 = $dictionary_flags2;
     $181 = $180 & 65536;
     $182 = ($181|0)!=(0);
     if ($182) {
      continue;
     }
    }
    $183 = $6;
    $184 = $183 & 1024;
    $185 = ($184|0)!=(0);
    if ($185) {
     $186 = $dictionary_flags2;
     $187 = $186 & 49152;
     $188 = ($187|0)!=(0);
     if ($188) {
      continue;
     }
    }
    $189 = $6;
    $190 = $189 & 4;
    $191 = ($190|0)!=(0);
    if ($191) {
     $192 = $dictionary_flags2;
     $193 = $192 & 16384;
     $194 = ($193|0)!=(0);
     if ($194) {
      continue;
     }
     $195 = $dictionary_flags2;
     $196 = $195 & 32768;
     $197 = ($196|0)!=(0);
     if ($197) {
      $198 = $6;
      $199 = $198 & 8;
      $200 = ($199|0)==(0);
      if ($200) {
       continue;
      }
     }
    }
    $201 = $dictionary_flags2;
    $202 = $201 & 4096;
    $203 = ($202|0)!=(0);
    if ($203) {
     $204 = $wflags;
     $205 = $204 & 16384;
     $206 = ($205|0)!=(0);
     if (!($206)) {
      continue;
     }
    }
    $207 = $dictionary_flags2;
    $208 = $207 & 512;
    $209 = ($208|0)!=(0);
    if ($209) {
     $210 = $wflags;
     $211 = $210 & 2;
     $212 = ($211|0)!=(0);
     if (!($212)) {
      continue;
     }
    }
    $213 = $dictionary_flags2;
    $214 = $213 & 1024;
    $215 = ($214|0)!=(0);
    if ($215) {
     $216 = $wflags;
     $217 = $216 & 1;
     $218 = ($217|0)!=(0);
     if (!($218)) {
      continue;
     }
    }
    $219 = $dictionary_flags;
    $220 = $219 & 33554432;
    $221 = ($220|0)!=(0);
    if ($221) {
     $222 = $wflags;
     $223 = $222 & 65536;
     $224 = ($223|0)!=(0);
     if (!($224)) {
      continue;
     }
    }
    $225 = $dictionary_flags2;
    $226 = $225 & 131072;
    $227 = ($226|0)!=(0);
    if ($227) {
     $228 = $word_end;
     $229 = HEAP32[19035]|0;
     $230 = ((($229)) + 8324|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($228>>>0)<($231>>>0);
     $233 = $lookup_symbol;
     $234 = ($233|0)==(0);
     $or$cond = $232 & $234;
     if ($or$cond) {
      continue;
     }
    }
    $235 = $dictionary_flags2;
    $236 = $235 & 262144;
    $237 = ($236|0)!=(0);
    if ($237) {
     $238 = $7;
     $239 = HEAP32[$238>>2]|0;
     $240 = $239 & 512;
     $241 = ($240|0)!=(0);
     if (!($241)) {
      continue;
     }
    }
    $242 = $dictionary_flags2;
    $243 = $242 & 8192;
    $244 = ($243|0)!=(0);
    if ($244) {
     $245 = HEAP32[19035]|0;
     $246 = ((($245)) + 8360|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $247 & 524288;
     $249 = ($248|0)!=(0);
     if (!($249)) {
      continue;
     }
    }
    $250 = $dictionary_flags2;
    $251 = $250 & 16;
    $252 = ($251|0)!=(0);
    do {
     if ($252) {
      $253 = $1;
      $254 = ((($253)) + 8304|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = ($255|0)!=(0);
      if (!($256)) {
       $257 = $1;
       $258 = ((($257)) + 8312|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($259|0)!=(0);
       if (!($260)) {
        continue L14;
       }
       $261 = $6;
       $262 = $261 & 8;
       $263 = ($262|0)!=(0);
       if (!($263)) {
        continue L14;
       }
      }
      $264 = $1;
      $265 = ((($264)) + 324|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = ($266|0)==(25966);
      if (!($267)) {
       break;
      }
      $268 = $1;
      $269 = ((($268)) + 8352|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = $270 & 2097152;
      $272 = ($271|0)!=(0);
      if (!($272)) {
       break;
      }
      $273 = $6;
      $274 = $273 & 8;
      $275 = ($274|0)!=(0);
      if ($275) {
       continue L14;
      }
     }
    } while(0);
    $276 = $dictionary_flags2;
    $277 = $276 & 64;
    $278 = ($277|0)!=(0);
    if ($278) {
     $279 = $1;
     $280 = ((($279)) + 8308|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = ($281|0)!=(0);
     if (!($282)) {
      continue;
     }
    }
    $283 = $dictionary_flags2;
    $284 = $283 & 32;
    $285 = ($284|0)!=(0);
    if ($285) {
     $286 = $1;
     $287 = ((($286)) + 8316|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = ($288|0)!=(0);
     if (!($289)) {
      continue;
     }
     $290 = $6;
     $291 = $290 & 2048;
     $292 = ($291|0)!=(0);
     if ($292) {
      continue;
     }
    }
    $293 = $dictionary_flags2;
    $294 = $293 & 524288;
    $295 = ($294|0)!=(0);
    if ($295) {
     $296 = $1;
     $297 = HEAP32[19035]|0;
     $298 = ($296|0)!=($297|0);
     if ($298) {
      continue;
     }
    }
    $299 = $dictionary_flags;
    $300 = $299 & 65536;
    $301 = ($300|0)!=(0);
    if (!($301)) {
     break;
    }
    $302 = $1;
    $303 = ((($302)) + 324|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = ($304|0)==(26741);
    if (!($305)) {
     break;
    }
    $306 = $1;
    $307 = ((($306)) + 8352|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = $308 & 32768;
    $310 = ($309|0)!=(0);
    if ($310) {
     break;
    } else {
     continue;
    }
   }
  }
  $61 = $next;
  $p = $61;
 }
 if ((label|0) == 104) {
  $0 = 0;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 $311 = $5;
 $312 = ($311|0)!=(0|0);
 if ($312) {
  $313 = $dictionary_flags;
  $314 = $313 | 1073741824;
  $315 = $5;
  HEAP32[$315>>2] = $314;
  $316 = $dictionary_flags2;
  $317 = $5;
  $318 = ((($317)) + 4|0);
  HEAP32[$318>>2] = $316;
 }
 $319 = $phoneme_len;
 $320 = ($319|0)==(0);
 if ($320) {
  $321 = HEAP32[19040]|0;
  $322 = $321 & 8;
  $323 = ($322|0)!=(0);
  if ($323) {
   $324 = $5;
   __Z22print_dictionary_flagsPjPci($324,$dict_flags_buf,80);
   $325 = HEAP32[19037]|0;
   $326 = $word1;
   HEAP32[$vararg_buffer>>2] = $326;
   $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $dict_flags_buf;
   (_fprintf($325,18232,$vararg_buffer)|0);
  }
  $0 = 0;
  $384 = $0;
  STACKTOP = sp;return ($384|0);
 }
 $327 = $5;
 $328 = ($327|0)!=(0|0);
 if ($328) {
  $329 = $5;
  $330 = HEAP32[$329>>2]|0;
  $331 = $330 | -2147483648;
  HEAP32[$329>>2] = $331;
 }
 $332 = HEAP32[19040]|0;
 $333 = $332 & 8;
 $334 = ($333|0)!=(0);
 if ($334) {
  $335 = $4;
  __Z14DecodePhonemesPKcPc($335,$ph_decoded);
  $336 = $dictionary_flags;
  $337 = $336 & 536870912;
  $338 = ($337|0)==(0);
  if ($338) {
   $textmode = 0;
  } else {
   $textmode = 1;
  }
  $339 = $textmode;
  $340 = HEAP32[19035]|0;
  $341 = ((($340)) + 272|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = $342 << 24 >> 24;
  $344 = ($339|0)==($343|0);
  if ($344) {
   $345 = $dictionary_flags;
   $346 = $345 & 128;
   $347 = ($346|0)!=(0);
   $348 = $7;
   $349 = ($348|0)!=(0|0);
   $or$cond3 = $347 & $349;
   if ($or$cond3) {
    $350 = $3;
    $351 = $word_end;
    $352 = $3;
    $353 = $351;
    $354 = $352;
    $355 = (($353) - ($354))|0;
    _memcpy(($word_buf|0),($350|0),($355|0))|0;
    $356 = $word_end;
    $357 = $3;
    $358 = $356;
    $359 = $357;
    $360 = (($358) - ($359))|0;
    $361 = (($360) - 1)|0;
    $362 = (($word_buf) + ($361)|0);
    HEAP8[$362>>0] = 0;
    $363 = HEAP32[19037]|0;
    $364 = $word1;
    HEAP32[$vararg_buffer5>>2] = $364;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $word_buf;
    (_fprintf($363,18248,$vararg_buffer5)|0);
   } else {
    $365 = HEAP32[19037]|0;
    $366 = $word1;
    HEAP32[$vararg_buffer9>>2] = $366;
    (_fprintf($365,18263,$vararg_buffer9)|0);
   }
   $367 = $5;
   __Z22print_dictionary_flagsPjPci($367,$dict_flags_buf,80);
   $368 = HEAP32[19037]|0;
   HEAP32[$vararg_buffer12>>2] = $ph_decoded;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $dict_flags_buf;
   (_fprintf($368,18274,$vararg_buffer12)|0);
  }
 }
 $369 = $2;
 $370 = (__Z7utf8_inPiPKc($c,$369)|0);
 $ix = $370;
 $371 = $ix;
 $372 = $2;
 $373 = (($372) + ($371)|0);
 $374 = HEAP8[$373>>0]|0;
 $375 = $374 << 24 >> 24;
 $376 = ($375|0)==(0);
 if ($376) {
  $377 = HEAP32[$c>>2]|0;
  $378 = (__Z7IsAlphaj($377)|0);
  $379 = ($378|0)!=(0);
  if (!($379)) {
   $380 = $5;
   $381 = HEAP32[$380>>2]|0;
   $382 = $381 | 134217728;
   HEAP32[$380>>2] = $382;
  }
 }
 $383 = $word_end;
 $0 = $383;
 $384 = $0;
 STACKTOP = sp;return ($384|0);
}
function __Z17TransposeAlphabetP10TranslatorPc($tr,$text) {
 $tr = $tr|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $acc = 0, $all_alpha = 0, $bits = 0, $buf = 0, $bufix = 0, $c = 0, $c2 = 0, $ix = 0, $map = 0, $max = 0, $min = 0, $offset = 0, $p = 0, $p2 = 0, $pairs_list = 0, $pairs_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 56|0;
 $buf = sp + 72|0;
 $1 = $tr;
 $2 = $text;
 $3 = $2;
 $p = $3;
 $all_alpha = 1;
 $4 = $1;
 $5 = ((($4)) + 332|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 $offset = $7;
 $8 = $1;
 $9 = ((($8)) + 332|0);
 $10 = HEAP32[$9>>2]|0;
 $min = $10;
 $11 = $1;
 $12 = ((($11)) + 328|0);
 $13 = HEAP32[$12>>2]|0;
 $max = $13;
 $14 = $1;
 $15 = ((($14)) + 336|0);
 $16 = HEAP32[$15>>2]|0;
 $map = $16;
 $17 = $max;
 $18 = $min;
 $19 = (($17) - ($18))|0;
 $20 = (($19) + 2)|0;
 $pairs_start = $20;
 $bufix = 0;
 L1: while(1) {
  $21 = $p;
  $22 = (__Z7utf8_inPiPKc($c,$21)|0);
  $23 = $p;
  $24 = (($23) + ($22)|0);
  $p = $24;
  $25 = HEAP32[$c>>2]|0;
  $26 = ($25|0)!=(0);
  do {
   if ($26) {
    $27 = HEAP32[$c>>2]|0;
    $28 = $min;
    $29 = ($27|0)>=($28|0);
    if (!($29)) {
     label = 10;
     break L1;
    }
    $30 = HEAP32[$c>>2]|0;
    $31 = $max;
    $32 = ($30|0)<=($31|0);
    if (!($32)) {
     label = 10;
     break L1;
    }
    $33 = $map;
    $34 = ($33|0)==(0|0);
    $35 = HEAP32[$c>>2]|0;
    if ($34) {
     $36 = $offset;
     $37 = (($35) - ($36))|0;
     $38 = $37&255;
     $39 = $bufix;
     $40 = (($39) + 1)|0;
     $bufix = $40;
     $41 = (($buf) + ($39)|0);
     HEAP8[$41>>0] = $38;
     break;
    }
    $42 = $min;
    $43 = (($35) - ($42))|0;
    $44 = $map;
    $45 = (($44) + ($43)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)>(0);
    if (!($48)) {
     label = 9;
     break L1;
    }
    $49 = HEAP32[$c>>2]|0;
    $50 = $min;
    $51 = (($49) - ($50))|0;
    $52 = $map;
    $53 = (($52) + ($51)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $bufix;
    $56 = (($55) + 1)|0;
    $bufix = $56;
    $57 = (($buf) + ($55)|0);
    HEAP8[$57>>0] = $54;
   }
  } while(0);
  $58 = HEAP32[$c>>2]|0;
  $59 = ($58|0)!=(0);
  $60 = $bufix;
  $61 = ($60|0)<(160);
  $62 = $59 ? $61 : 0;
  if (!($62)) {
   break;
  }
 }
 if ((label|0) == 9) {
  $all_alpha = 0;
 }
 else if ((label|0) == 10) {
  $all_alpha = 0;
 }
 $63 = $bufix;
 $64 = (($buf) + ($63)|0);
 HEAP8[$64>>0] = 0;
 $65 = $all_alpha;
 $66 = ($65|0)!=(0);
 if (!($66)) {
  $137 = $2;
  $138 = (_strlen($137)|0);
  $0 = $138;
  $139 = $0;
  STACKTOP = sp;return ($139|0);
 }
 $acc = 0;
 $bits = 0;
 $p = $buf;
 $p2 = $buf;
 while(1) {
  $67 = $p;
  $68 = ((($67)) + 1|0);
  $p = $68;
  $69 = HEAP8[$67>>0]|0;
  $70 = $69 << 24 >> 24;
  HEAP32[$c>>2] = $70;
  $71 = ($70|0)!=(0);
  if (!($71)) {
   break;
  }
  $72 = $1;
  $73 = ((($72)) + 8300|0);
  $74 = HEAP32[$73>>2]|0;
  $pairs_list = $74;
  $75 = ($74|0)!=(0|0);
  L23: do {
   if ($75) {
    $76 = HEAP32[$c>>2]|0;
    $77 = $p;
    $78 = HEAP8[$77>>0]|0;
    $79 = $78 << 24 >> 24;
    $80 = $79 << 8;
    $81 = (($76) + ($80))|0;
    $c2 = $81;
    $ix = 0;
    while(1) {
     $82 = $c2;
     $83 = $ix;
     $84 = $pairs_list;
     $85 = (($84) + ($83<<1)|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = $86 << 16 >> 16;
     $88 = ($82|0)>=($87|0);
     if (!($88)) {
      break L23;
     }
     $89 = $c2;
     $90 = $ix;
     $91 = $pairs_list;
     $92 = (($91) + ($90<<1)|0);
     $93 = HEAP16[$92>>1]|0;
     $94 = $93 << 16 >> 16;
     $95 = ($89|0)==($94|0);
     $96 = $ix;
     if ($95) {
      break;
     }
     $101 = (($96) + 1)|0;
     $ix = $101;
    }
    $97 = $pairs_start;
    $98 = (($96) + ($97))|0;
    HEAP32[$c>>2] = $98;
    $99 = $p;
    $100 = ((($99)) + 1|0);
    $p = $100;
   }
  } while(0);
  $102 = $acc;
  $103 = $102 << 6;
  $104 = HEAP32[$c>>2]|0;
  $105 = $104 & 63;
  $106 = (($103) + ($105))|0;
  $acc = $106;
  $107 = $bits;
  $108 = (($107) + 6)|0;
  $bits = $108;
  $109 = $bits;
  $110 = ($109|0)>=(8);
  if (!($110)) {
   continue;
  }
  $111 = $bits;
  $112 = (($111) - 8)|0;
  $bits = $112;
  $113 = $acc;
  $114 = $bits;
  $115 = $113 >> $114;
  $116 = $115&255;
  $117 = $p2;
  $118 = ((($117)) + 1|0);
  $p2 = $118;
  HEAP8[$117>>0] = $116;
 }
 $119 = $bits;
 $120 = ($119|0)>(0);
 if ($120) {
  $121 = $acc;
  $122 = $bits;
  $123 = (8 - ($122))|0;
  $124 = $121 << $123;
  $125 = $124&255;
  $126 = $p2;
  $127 = ((($126)) + 1|0);
  $p2 = $127;
  HEAP8[$126>>0] = $125;
 }
 $128 = $p2;
 HEAP8[$128>>0] = 0;
 $129 = $p2;
 $130 = $129;
 $131 = $buf;
 $132 = (($130) - ($131))|0;
 $ix = $132;
 $133 = $2;
 $134 = $ix;
 _memcpy(($133|0),($buf|0),($134|0))|0;
 $135 = $ix;
 $136 = $135 | 64;
 $0 = $136;
 $139 = $0;
 STACKTOP = sp;return ($139|0);
}
function __Z14AppendPhonemesP10TranslatorPciPKc($tr,$string,$size,$ph) {
 $tr = $tr|0;
 $string = $string|0;
 $size = $size|0;
 $ph = $ph|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $length = 0, $or$cond = 0, $p = 0, $unstress_mark = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $string;
 $2 = $size;
 $3 = $ph;
 $4 = $3;
 $5 = (_strlen($4)|0);
 $6 = $1;
 $7 = (_strlen($6)|0);
 $8 = (($5) + ($7))|0;
 $length = $8;
 $9 = $length;
 $10 = $2;
 $11 = ($9|0)>=($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $unstress_mark = 0;
 $12 = $3;
 $p = $12;
 while(1) {
  $13 = $p;
  $14 = ((($13)) + 1|0);
  $p = $14;
  $15 = HEAP8[$13>>0]|0;
  $c = $15;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $c;
  $19 = $18&255;
  $20 = HEAP32[11136]|0;
  $21 = ($19|0)>=($20|0);
  if ($21) {
   continue;
  }
  $22 = $c;
  $23 = $22&255;
  $24 = (44552 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 11|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)==(1);
  $30 = $c;
  $31 = $30&255;
  $32 = (44552 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  if ($29) {
   $34 = ((($33)) + 14|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)<(4);
   if (!($37)) {
    continue;
   }
   $unstress_mark = 1;
   continue;
  }
  $38 = ((($33)) + 11|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)==(2);
  if (!($41)) {
   continue;
  }
  $42 = $c;
  $43 = $42&255;
  $44 = (44552 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 & 2;
  $49 = ($48|0)==(0);
  $50 = $unstress_mark;
  $51 = ($50|0)==(0);
  $or$cond = $49 & $51;
  if ($or$cond) {
   $52 = $0;
   $53 = ((($52)) + 8332|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + 1)|0;
   HEAP32[$53>>2] = $55;
  }
  $unstress_mark = 0;
  $56 = $0;
  $57 = ((($56)) + 8328|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$57>>2] = $59;
 }
 $60 = $1;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $1;
 $63 = $3;
 (_strcat($62,$63)|0);
 STACKTOP = sp;return;
}
function __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($tr,$word,$word_start,$group_length,$rule,$match_out,$word_flags,$dict_flags) {
 $tr = $tr|0;
 $word = $word|0;
 $word_start = $word_start|0;
 $group_length = $group_length|0;
 $rule = $rule|0;
 $match_out = $match_out|0;
 $word_flags = $word_flags|0;
 $dict_flags = $dict_flags|0;
 var $$ = 0, $$1 = 0, $$3 = 0, $$4 = 0, $$7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add_points = 0, $check_atstart = 0, $command = 0, $common_phonemes = 0, $condition_num = 0, $consumed = 0, $decoded_phonemes = 0, $distance_left = 0;
 var $distance_right = 0, $end_type = 0, $failed = 0, $flags = 0, $group_chars = 0, $ix = 0, $last_letter = 0, $letter = 0, $letter_group = 0, $letter_w = 0, $letter_xbytes = 0, $lg_pts = 0, $match = 0, $match_type = 0, $n_bytes = 0, $or$cond = 0, $or$cond6 = 0, $p = 0, $p1 = 0, $p2 = 0;
 var $p24 = 0, $p3 = 0, $p5 = 0, $post_ptr = 0, $pre_ptr = 0, $pts = 0, $rb = 0, $rule_start = 0, $rule_w = 0, $syllable_count = 0, $total_consumed = 0, $unpron_ignore = 0, $vararg_buffer = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $vowel = 0, $vowel_count = 0, $word_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $letter_w = sp + 164|0;
 $flags = sp + 80|0;
 $match = sp + 64|0;
 $word_buf = sp + 280|0;
 $rule_w = sp + 24|0;
 $decoded_phonemes = sp + 200|0;
 $0 = $tr;
 $1 = $word;
 $2 = $word_start;
 $3 = $group_length;
 $4 = $rule;
 $5 = $match_out;
 $6 = $word_flags;
 $7 = $dict_flags;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $group_chars = $9;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $5;
  HEAP32[$12>>2] = 0;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 1|0);
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 }
 $total_consumed = 0;
 $common_phonemes = 0;
 $match_type = 0;
 HEAP32[10347] = 0;
 HEAP32[(41392)>>2] = 121874;
 HEAP32[(41396)>>2] = 0;
 HEAP32[(41400)>>2] = 0;
 L5: while(1) {
  $16 = $4;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(7);
  if (!($19)) {
   break;
  }
  $20 = $6;
  $21 = $20 & -2147483648;
  $unpron_ignore = $21;
  $match_type = 0;
  $consumed = 0;
  $letter = 0;
  $distance_right = -6;
  $distance_left = -2;
  $check_atstart = 0;
  HEAP32[$match>>2] = 1;
  $22 = ((($match)) + 8|0);
  HEAP32[$22>>2] = 0;
  $23 = ((($match)) + 12|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $pre_ptr = $25;
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = $3;
  $29 = (($27) + ($28)|0);
  $post_ptr = $29;
  $30 = $4;
  $rule_start = $30;
  $failed = 0;
  L8: while(1) {
   $31 = $failed;
   $32 = ($31|0)!=(0);
   $33 = $32 ^ 1;
   if (!($33)) {
    break;
   }
   $34 = $4;
   $35 = ((($34)) + 1|0);
   $4 = $35;
   $36 = HEAP8[$34>>0]|0;
   $rb = $36;
   $37 = $rb;
   $38 = $37&255;
   $39 = ($38|0)<=(9);
   if ($39) {
    $40 = $rb;
    $41 = $40&255;
    switch ($41|0) {
    case 0:  {
     $42 = $common_phonemes;
     $43 = ($42|0)!=(0|0);
     L15: do {
      if ($43) {
       $44 = $common_phonemes;
       $45 = ((($match)) + 4|0);
       HEAP32[$45>>2] = $44;
       while(1) {
        $46 = ((($match)) + 4|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ((($47)) + 1|0);
        HEAP32[$46>>2] = $48;
        $49 = HEAP8[$47>>0]|0;
        $rb = $49;
        $50 = $49&255;
        $51 = ($50|0)!=(0);
        if (!($51)) {
         break L15;
        }
        $52 = $rb;
        $53 = $52&255;
        $54 = ($53|0)!=(3);
        if (!($54)) {
         break L15;
        }
        $55 = $rb;
        $56 = $55&255;
        $57 = ($56|0)==(5);
        if ($57) {
         $58 = ((($match)) + 4|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = ((($59)) + 1|0);
         HEAP32[$58>>2] = $60;
        }
        $61 = $rb;
        $62 = $61&255;
        $63 = ($62|0)==(9);
        if (!($63)) {
         continue;
        }
        $64 = ((($match)) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ((($65)) + 2|0);
        HEAP32[$64>>2] = $66;
       }
      } else {
       $67 = ((($match)) + 4|0);
       HEAP32[$67>>2] = 121874;
      }
     } while(0);
     $68 = $4;
     $69 = ((($68)) + -1|0);
     $4 = $69;
     $failed = 2;
     continue L8;
     break;
    }
    case 8:  {
     $check_atstart = 1;
     $unpron_ignore = 0;
     $match_type = 1;
     continue L8;
     break;
    }
    case 1:  {
     $match_type = 1;
     $70 = $6;
     $71 = $70 & -2147483648;
     $72 = ($71|0)!=(0);
     if (!($72)) {
      continue L8;
     }
     $failed = 1;
     continue L8;
     break;
    }
    case 2:  {
     $match_type = 2;
     continue L8;
     break;
    }
    case 3:  {
     $73 = $4;
     $74 = ((($match)) + 4|0);
     HEAP32[$74>>2] = $73;
     $failed = 2;
     continue L8;
     break;
    }
    case 4:  {
     $75 = $4;
     $common_phonemes = $75;
     continue L8;
     break;
    }
    case 5:  {
     $76 = $4;
     $77 = ((($76)) + 1|0);
     $4 = $77;
     $78 = HEAP8[$76>>0]|0;
     $condition_num = $78;
     $79 = $condition_num;
     $80 = $79&255;
     $81 = ($80|0)>=(32);
     $82 = $0;
     $83 = ((($82)) + 440|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $condition_num;
     $86 = $85&255;
     if ($81) {
      $87 = (($86) - 32)|0;
      $88 = 1 << $87;
      $89 = $84 & $88;
      $90 = ($89|0)!=(0);
      if ($90) {
       $failed = 1;
      }
     } else {
      $91 = 1 << $86;
      $92 = $84 & $91;
      $93 = ($92|0)==(0);
      if ($93) {
       $failed = 1;
      }
     }
     $94 = $failed;
     $95 = ($94|0)!=(0);
     if ($95) {
      continue L8;
     }
     $96 = HEAP32[$match>>2]|0;
     $97 = (($96) + 1)|0;
     HEAP32[$match>>2] = $97;
     continue L8;
     break;
    }
    case 9:  {
     $98 = $4;
     $99 = ((($98)) + 2|0);
     $4 = $99;
     continue L8;
     break;
    }
    default: {
     continue L8;
    }
    }
   }
   $add_points = 0;
   $100 = $match_type;
   L43: do {
    switch ($100|0) {
    case 0:  {
     $101 = $letter;
     $last_letter = $101;
     $102 = $post_ptr;
     $103 = ((($102)) + 1|0);
     $post_ptr = $103;
     $104 = HEAP8[$102>>0]|0;
     $letter = $104;
     $105 = $letter;
     $106 = $105&255;
     $107 = $rb;
     $108 = $107&255;
     $109 = ($106|0)==($108|0);
     do {
      if (!($109)) {
       $110 = $letter;
       $111 = $110&255;
       $112 = ($111|0)==(69);
       if ($112) {
        $113 = $rb;
        $114 = $113&255;
        $115 = ($114|0)==(101);
        if ($115) {
         break;
        }
       }
       $failed = 1;
       break L43;
      }
     } while(0);
     $116 = $letter;
     $117 = $116&255;
     $118 = $117 & 192;
     $119 = ($118|0)!=(128);
     if ($119) {
      $add_points = 21;
     }
     $120 = $consumed;
     $121 = (($120) + 1)|0;
     $consumed = $121;
     break;
    }
    case 2:  {
     $122 = $distance_right;
     $123 = (($122) + 6)|0;
     $distance_right = $123;
     $124 = $distance_right;
     $125 = ($124|0)>(18);
     $$ = $125 ? 19 : $123;
     $distance_right = $$;
     $126 = $letter;
     $last_letter = $126;
     $127 = $post_ptr;
     $128 = (__Z7utf8_inPiPKc($letter_w,$127)|0);
     $129 = (($128) - 1)|0;
     $letter_xbytes = $129;
     $130 = $post_ptr;
     $131 = ((($130)) + 1|0);
     $post_ptr = $131;
     $132 = HEAP8[$130>>0]|0;
     $letter = $132;
     $133 = $rb;
     $134 = $133&255;
     do {
      switch ($134|0) {
      case 17:  {
       $135 = $4;
       $136 = ((($135)) + 1|0);
       $4 = $136;
       $137 = HEAP8[$135>>0]|0;
       $138 = $137 << 24 >> 24;
       $139 = (($138) - 65)|0;
       $letter_group = $139;
       $140 = $0;
       $141 = HEAP32[$letter_w>>2]|0;
       $142 = $letter_group;
       $143 = (__ZL8IsLetterP10Translatorii($140,$141,$142)|0);
       $144 = ($143|0)!=(0);
       if ($144) {
        $lg_pts = 20;
        $145 = $letter_group;
        $146 = ($145|0)==(2);
        $$1 = $146 ? 19 : 20;
        $lg_pts = $$1;
        $147 = $lg_pts;
        $148 = $distance_right;
        $149 = (($147) - ($148))|0;
        $add_points = $149;
        $150 = $letter_xbytes;
        $151 = $post_ptr;
        $152 = (($151) + ($150)|0);
        $post_ptr = $152;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 18:  {
       $153 = $4;
       $154 = ((($153)) + 1|0);
       $4 = $154;
       $155 = HEAP8[$153>>0]|0;
       $156 = $155 << 24 >> 24;
       $157 = (($156) - 65)|0;
       $letter_group = $157;
       $158 = $0;
       $159 = $post_ptr;
       $160 = ((($159)) + -1|0);
       $161 = $letter_group;
       $162 = (__ZL13IsLetterGroupP10TranslatorPcii($158,$160,$161,0)|0);
       $n_bytes = $162;
       $163 = ($162|0)>(0);
       if ($163) {
        $164 = $distance_right;
        $165 = (20 - ($164))|0;
        $add_points = $165;
        $166 = $n_bytes;
        $167 = (($166) - 1)|0;
        $168 = $post_ptr;
        $169 = (($168) + ($167)|0);
        $post_ptr = $169;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 25:  {
       $170 = $0;
       $171 = HEAP32[$letter_w>>2]|0;
       $172 = (__ZL8IsLetterP10Translatorii($170,$171,0)|0);
       $173 = ($172|0)!=(0);
       do {
        if (!($173)) {
         $174 = HEAP32[$letter_w>>2]|0;
         $175 = ($174|0)==(32);
         if ($175) {
          $176 = $6;
          $177 = $176 & 134217728;
          $178 = ($177|0)!=(0);
          if ($178) {
           break;
          }
         }
         $179 = $distance_right;
         $180 = (20 - ($179))|0;
         $add_points = $180;
         $181 = $letter_xbytes;
         $182 = $post_ptr;
         $183 = (($182) + ($181)|0);
         $post_ptr = $183;
         break L43;
        }
       } while(0);
       $failed = 1;
       break L43;
       break;
      }
      case 15:  {
       $184 = HEAP32[$letter_w>>2]|0;
       $185 = (__Z7IsDigitj($184)|0);
       $186 = ($185|0)!=(0);
       if ($186) {
        $187 = $distance_right;
        $188 = (20 - ($187))|0;
        $add_points = $188;
        $189 = $letter_xbytes;
        $190 = $post_ptr;
        $191 = (($190) + ($189)|0);
        $post_ptr = $191;
        break L43;
       }
       $192 = $0;
       $193 = ((($192)) + 270|0);
       $194 = HEAP8[$193>>0]|0;
       $195 = ($194<<24>>24)!=(0);
       if ($195) {
        $196 = $distance_right;
        $197 = (20 - ($196))|0;
        $add_points = $197;
        $198 = $post_ptr;
        $199 = ((($198)) + -1|0);
        $post_ptr = $199;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 16:  {
       $200 = HEAP32[$letter_w>>2]|0;
       $201 = (__Z9iswalpha2i($200)|0);
       $202 = ($201|0)!=(0);
       if ($202) {
        $failed = 1;
        break L43;
       } else {
        $203 = $distance_right;
        $204 = (21 - ($203))|0;
        $add_points = $204;
        $205 = $letter_xbytes;
        $206 = $post_ptr;
        $207 = (($206) + ($205)|0);
        $post_ptr = $207;
        break L43;
       }
       break;
      }
      case 11:  {
       $208 = $letter;
       $209 = $208&255;
       $210 = $last_letter;
       $211 = $210&255;
       $212 = ($209|0)==($211|0);
       if ($212) {
        $213 = $distance_right;
        $214 = (21 - ($213))|0;
        $add_points = $214;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 28:  {
       $215 = $4;
       $216 = ((($215)) + 1|0);
       $4 = $216;
       $217 = HEAP8[$215>>0]|0;
       $218 = $217 << 24 >> 24;
       $command = $218;
       $219 = $command;
       $220 = ($219|0)==(1);
       if ($220) {
        $221 = ((($match)) + 8|0);
        HEAP32[$221>>2] = 32768;
        break L43;
       }
       $222 = $command;
       $223 = ($222|0)==(2);
       if ($223) {
        $224 = $6;
        $225 = $224 & 8388608;
        $226 = ($225|0)!=(0);
        if ($226) {
         $failed = 1;
         break L43;
        } else {
         $add_points = 1;
         break L43;
        }
       }
       $227 = $command;
       $228 = $227 & 240;
       $229 = ($228|0)==(16);
       if ($229) {
        $230 = $7;
        $231 = $command;
        $232 = $231 & 15;
        $233 = (14 + ($232))|0;
        $234 = 1 << $233;
        $235 = $230 & $234;
        $236 = ($235|0)!=(0);
        if ($236) {
         $add_points = 23;
         break L43;
        } else {
         $failed = 1;
         break L43;
        }
       }
       $237 = $command;
       $238 = $237 & 240;
       $239 = ($238|0)==(32);
       $240 = $command;
       $241 = ($240|0)==(3);
       $or$cond = $239 | $241;
       if (!($or$cond)) {
        break L43;
       }
       $242 = $1;
       $243 = HEAP32[$242>>2]|0;
       $244 = $2;
       $245 = $243;
       $246 = $244;
       $247 = (($245) - ($246))|0;
       $248 = $consumed;
       $249 = (($247) + ($248))|0;
       $250 = $3;
       $251 = (($249) + ($250))|0;
       $252 = (($251) + 1)|0;
       $ix = $252;
       $253 = $2;
       $254 = ((($253)) + -1|0);
       $255 = $ix;
       _memcpy(($word_buf|0),($254|0),($255|0))|0;
       $256 = $ix;
       $257 = (($word_buf) + ($256)|0);
       HEAP8[$257>>0] = 32;
       $258 = $ix;
       $259 = (($258) + 1)|0;
       $260 = (($word_buf) + ($259)|0);
       HEAP8[$260>>0] = 0;
       $261 = $0;
       $262 = ((($word_buf)) + 1|0);
       (__Z11LookupFlagsP10TranslatorPKcPPj($261,$262,$flags)|0);
       $263 = $command;
       $264 = ($263|0)==(3);
       if ($264) {
        $265 = HEAP32[$flags>>2]|0;
        $266 = HEAP32[$265>>2]|0;
        $267 = $266 & -2147483648;
        $268 = ($267|0)!=(0);
        if ($268) {
         $269 = HEAP32[$flags>>2]|0;
         $270 = ((($269)) + 4|0);
         $271 = HEAP32[$270>>2]|0;
         $272 = $271 & 16384;
         $273 = ($272|0)!=(0);
         if (!($273)) {
          $add_points = 23;
          break L43;
         }
        }
       }
       $274 = HEAP32[$flags>>2]|0;
       $275 = HEAP32[$274>>2]|0;
       $276 = $command;
       $277 = $276 & 15;
       $278 = (14 + ($277))|0;
       $279 = 1 << $278;
       $280 = $275 & $279;
       $281 = ($280|0)!=(0);
       if ($281) {
        $add_points = 23;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 45:  {
       $282 = $letter;
       $283 = $282&255;
       $284 = ($283|0)==(45);
       do {
        if (!($284)) {
         $285 = $letter;
         $286 = $285&255;
         $287 = ($286|0)==(32);
         if ($287) {
          $288 = $6;
          $289 = $288 & 16384;
          $290 = ($289|0)!=(0);
          if ($290) {
           break;
          }
         }
         $failed = 1;
         break L43;
        }
       } while(0);
       $291 = $distance_right;
       $292 = (22 - ($291))|0;
       $add_points = $292;
       break L43;
       break;
      }
      case 21:  {
       $293 = $post_ptr;
       $294 = $letter_xbytes;
       $295 = (($293) + ($294)|0);
       $p1 = $295;
       $vowel_count = 0;
       $syllable_count = 1;
       while(1) {
        $296 = $4;
        $297 = HEAP8[$296>>0]|0;
        $298 = $297 << 24 >> 24;
        $299 = ($298|0)==(21);
        if (!($299)) {
         break;
        }
        $300 = $4;
        $301 = ((($300)) + 1|0);
        $4 = $301;
        $302 = $syllable_count;
        $303 = (($302) + 1)|0;
        $syllable_count = $303;
       }
       $vowel = 0;
       while(1) {
        $304 = HEAP32[$letter_w>>2]|0;
        $305 = ($304|0)!=(32);
        if (!($305)) {
         break;
        }
        $306 = $vowel;
        $307 = ($306|0)==(0);
        if ($307) {
         $308 = $0;
         $309 = HEAP32[$letter_w>>2]|0;
         $310 = (__ZL8IsLetterP10Translatorii($308,$309,7)|0);
         $311 = ($310|0)!=(0);
         if ($311) {
          $312 = $vowel_count;
          $313 = (($312) + 1)|0;
          $vowel_count = $313;
         }
        }
        $314 = $0;
        $315 = HEAP32[$letter_w>>2]|0;
        $316 = (__ZL8IsLetterP10Translatorii($314,$315,7)|0);
        $vowel = $316;
        $317 = $p1;
        $318 = (__Z7utf8_inPiPKc($letter_w,$317)|0);
        $319 = $p1;
        $320 = (($319) + ($318)|0);
        $p1 = $320;
       }
       $321 = $syllable_count;
       $322 = $vowel_count;
       $323 = ($321|0)<=($322|0);
       if ($323) {
        $324 = $syllable_count;
        $325 = (18 + ($324))|0;
        $326 = $distance_right;
        $327 = (($325) - ($326))|0;
        $add_points = $327;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 29:  {
       $328 = $post_ptr;
       $329 = $letter_xbytes;
       $330 = (($328) + ($329)|0);
       $p2 = $330;
       while(1) {
        $331 = HEAP32[$letter_w>>2]|0;
        $332 = ($331|0)!=(32);
        if (!($332)) {
         break;
        }
        $333 = $0;
        $334 = HEAP32[$letter_w>>2]|0;
        $335 = (__ZL8IsLetterP10Translatorii($333,$334,7)|0);
        $336 = ($335|0)!=(0);
        if ($336) {
         label = 102;
         break;
        }
        $337 = $p2;
        $338 = (__Z7utf8_inPiPKc($letter_w,$337)|0);
        $339 = $p2;
        $340 = (($339) + ($338)|0);
        $p2 = $340;
       }
       if ((label|0) == 102) {
        label = 0;
        $failed = 1;
       }
       $341 = $failed;
       $342 = ($341|0)!=(0);
       if ($342) {
        break L43;
       }
       $343 = $distance_right;
       $344 = (19 - ($343))|0;
       $add_points = $344;
       break L43;
       break;
      }
      case 23:  {
       $345 = $post_ptr;
       $346 = $letter_xbytes;
       $347 = (($345) + ($346)|0);
       $p3 = $347;
       $348 = $p3;
       $p24 = $348;
       $349 = $4;
       (__Z7utf8_inPiPKc($rule_w,$349)|0);
       while(1) {
        $350 = HEAP32[$letter_w>>2]|0;
        $351 = HEAP32[$rule_w>>2]|0;
        $352 = ($350|0)!=($351|0);
        $353 = HEAP32[$letter_w>>2]|0;
        $354 = ($353|0)!=(32);
        $355 = $352 ? $354 : 0;
        if (!($355)) {
         break;
        }
        $356 = $p3;
        $p24 = $356;
        $357 = $p3;
        $358 = (__Z7utf8_inPiPKc($letter_w,$357)|0);
        $359 = $p3;
        $360 = (($359) + ($358)|0);
        $p3 = $360;
       }
       $361 = HEAP32[$letter_w>>2]|0;
       $362 = HEAP32[$rule_w>>2]|0;
       $363 = ($361|0)==($362|0);
       if (!($363)) {
        break L43;
       }
       $364 = $p24;
       $post_ptr = $364;
       break L43;
       break;
      }
      case 12:  {
       $add_points = 20;
       break L43;
       break;
      }
      case 13:  {
       $365 = $1;
       $366 = HEAP32[$365>>2]|0;
       $367 = $3;
       $368 = (($366) + ($367)|0);
       $p = $368;
       while(1) {
        $369 = $p;
        $370 = $post_ptr;
        $371 = ($369>>>0)<($370>>>0);
        if (!($371)) {
         break L43;
        }
        $372 = $p;
        $373 = HEAP8[$372>>0]|0;
        $374 = $373 << 24 >> 24;
        $375 = ($374|0)==(101);
        $376 = $p;
        if ($375) {
         break;
        }
        $378 = ((($376)) + 1|0);
        $p = $378;
       }
       $377 = ((($match)) + 12|0);
       HEAP32[$377>>2] = $376;
       break L43;
       break;
      }
      case 14:  {
       $379 = $4;
       $380 = HEAP8[$379>>0]|0;
       $381 = $380 << 24 >> 24;
       $382 = $381 << 16;
       $383 = $4;
       $384 = ((($383)) + 1|0);
       $385 = HEAP8[$384>>0]|0;
       $386 = $385 << 24 >> 24;
       $387 = $386 & 127;
       $388 = $387 << 8;
       $389 = (($382) + ($388))|0;
       $390 = $4;
       $391 = ((($390)) + 2|0);
       $392 = HEAP8[$391>>0]|0;
       $393 = $392 << 24 >> 24;
       $394 = $393 & 127;
       $395 = (($389) + ($394))|0;
       $end_type = $395;
       $396 = $0;
       $397 = ((($396)) + 8328|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = ($398|0)==(0);
       if ($399) {
        $400 = $end_type;
        $401 = $400 & 1024;
        $402 = ($401|0)!=(0);
        if (!($402)) {
         $403 = $0;
         $404 = ((($403)) + 24|0);
         $405 = ((($404)) + 76|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = $406 & 1;
         $408 = ($407|0)!=(0);
         if ($408) {
          $failed = 1;
          break L43;
         }
        }
       }
       $409 = $end_type;
       $410 = ((($match)) + 8|0);
       HEAP32[$410>>2] = $409;
       $411 = $4;
       $412 = ((($411)) + 3|0);
       $4 = $412;
       break L43;
       break;
      }
      case 24:  {
       $413 = $6;
       $414 = $413 & 8192;
       $415 = ($414|0)!=(0);
       if ($415) {
        $failed = 1;
        break L43;
       } else {
        $add_points = 1;
        break L43;
       }
       break;
      }
      default: {
       $416 = $letter;
       $417 = $416&255;
       $418 = $rb;
       $419 = $418&255;
       $420 = ($417|0)==($419|0);
       if (!($420)) {
        $failed = 1;
        break L43;
       }
       $421 = $letter;
       $422 = $421&255;
       $423 = $422 & 192;
       $424 = ($423|0)!=(128);
       if (!($424)) {
        break L43;
       }
       $425 = $distance_right;
       $426 = (21 - ($425))|0;
       $add_points = $426;
       break L43;
      }
      }
     } while(0);
     break;
    }
    case 1:  {
     $427 = $distance_left;
     $428 = (($427) + 2)|0;
     $distance_left = $428;
     $429 = $distance_left;
     $430 = ($429|0)>(18);
     $$3 = $430 ? 19 : $428;
     $distance_left = $$3;
     $431 = $pre_ptr;
     $432 = HEAP8[$431>>0]|0;
     $last_letter = $432;
     $433 = $pre_ptr;
     $434 = ((($433)) + -1|0);
     $pre_ptr = $434;
     $435 = $pre_ptr;
     $436 = (__Z8utf8_in2PiPKci($letter_w,$435,1)|0);
     $437 = (($436) - 1)|0;
     $letter_xbytes = $437;
     $438 = $pre_ptr;
     $439 = HEAP8[$438>>0]|0;
     $letter = $439;
     $440 = $rb;
     $441 = $440&255;
     do {
      switch ($441|0) {
      case 17:  {
       $442 = $4;
       $443 = ((($442)) + 1|0);
       $4 = $443;
       $444 = HEAP8[$442>>0]|0;
       $445 = $444 << 24 >> 24;
       $446 = (($445) - 65)|0;
       $letter_group = $446;
       $447 = $0;
       $448 = HEAP32[$letter_w>>2]|0;
       $449 = $letter_group;
       $450 = (__ZL8IsLetterP10Translatorii($447,$448,$449)|0);
       $451 = ($450|0)!=(0);
       if ($451) {
        $lg_pts = 20;
        $452 = $letter_group;
        $453 = ($452|0)==(2);
        $$4 = $453 ? 19 : 20;
        $lg_pts = $$4;
        $454 = $lg_pts;
        $455 = $distance_left;
        $456 = (($454) - ($455))|0;
        $add_points = $456;
        $457 = $letter_xbytes;
        $458 = $pre_ptr;
        $459 = (0 - ($457))|0;
        $460 = (($458) + ($459)|0);
        $pre_ptr = $460;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 18:  {
       $461 = $4;
       $462 = ((($461)) + 1|0);
       $4 = $462;
       $463 = HEAP8[$461>>0]|0;
       $464 = $463 << 24 >> 24;
       $465 = (($464) - 65)|0;
       $letter_group = $465;
       $466 = $0;
       $467 = $pre_ptr;
       $468 = $letter_group;
       $469 = (__ZL13IsLetterGroupP10TranslatorPcii($466,$467,$468,1)|0);
       $n_bytes = $469;
       $470 = ($469|0)>(0);
       if ($470) {
        $471 = $distance_right;
        $472 = (20 - ($471))|0;
        $add_points = $472;
        $473 = $n_bytes;
        $474 = (($473) - 1)|0;
        $475 = $pre_ptr;
        $476 = (0 - ($474))|0;
        $477 = (($475) + ($476)|0);
        $pre_ptr = $477;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 25:  {
       $478 = $0;
       $479 = HEAP32[$letter_w>>2]|0;
       $480 = (__ZL8IsLetterP10Translatorii($478,$479,0)|0);
       $481 = ($480|0)!=(0);
       if ($481) {
        $failed = 1;
        break L43;
       } else {
        $482 = $distance_left;
        $483 = (20 - ($482))|0;
        $add_points = $483;
        $484 = $letter_xbytes;
        $485 = $pre_ptr;
        $486 = (0 - ($484))|0;
        $487 = (($485) + ($486)|0);
        $pre_ptr = $487;
        break L43;
       }
       break;
      }
      case 11:  {
       $488 = $letter;
       $489 = $488&255;
       $490 = $last_letter;
       $491 = $490&255;
       $492 = ($489|0)==($491|0);
       if ($492) {
        $493 = $distance_left;
        $494 = (21 - ($493))|0;
        $add_points = $494;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 15:  {
       $495 = HEAP32[$letter_w>>2]|0;
       $496 = (__Z7IsDigitj($495)|0);
       $497 = ($496|0)!=(0);
       if ($497) {
        $498 = $distance_left;
        $499 = (21 - ($498))|0;
        $add_points = $499;
        $500 = $letter_xbytes;
        $501 = $pre_ptr;
        $502 = (0 - ($500))|0;
        $503 = (($501) + ($502)|0);
        $pre_ptr = $503;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 16:  {
       $504 = HEAP32[$letter_w>>2]|0;
       $505 = (__Z9iswalpha2i($504)|0);
       $506 = ($505|0)!=(0);
       if ($506) {
        $failed = 1;
        break L43;
       } else {
        $507 = $distance_right;
        $508 = (21 - ($507))|0;
        $add_points = $508;
        $509 = $letter_xbytes;
        $510 = $pre_ptr;
        $511 = (0 - ($509))|0;
        $512 = (($510) + ($511)|0);
        $pre_ptr = $512;
        break L43;
       }
       break;
      }
      case 28:  {
       $513 = $4;
       $514 = ((($513)) + 1|0);
       $4 = $514;
       $515 = HEAP8[$513>>0]|0;
       $516 = $515 << 24 >> 24;
       $command = $516;
       $517 = $command;
       $518 = ($517|0)==(3);
       if (!($518)) {
        $519 = $command;
        $520 = $519 & 240;
        $521 = ($520|0)==(32);
        if (!($521)) {
         break L43;
        }
       }
       $522 = $1;
       $523 = HEAP32[$522>>2]|0;
       $524 = $2;
       $525 = $523;
       $526 = $524;
       $527 = (($525) - ($526))|0;
       $528 = (($527) + 1)|0;
       $ix = $528;
       $529 = $2;
       $530 = ((($529)) + -1|0);
       $531 = $ix;
       _memcpy(($word_buf|0),($530|0),($531|0))|0;
       $532 = $ix;
       $533 = (($word_buf) + ($532)|0);
       HEAP8[$533>>0] = 32;
       $534 = $ix;
       $535 = (($534) + 1)|0;
       $536 = (($word_buf) + ($535)|0);
       HEAP8[$536>>0] = 0;
       $537 = $0;
       $538 = ((($word_buf)) + 1|0);
       (__Z11LookupFlagsP10TranslatorPKcPPj($537,$538,$flags)|0);
       $539 = $command;
       $540 = ($539|0)==(3);
       if ($540) {
        $541 = HEAP32[$flags>>2]|0;
        $542 = HEAP32[$541>>2]|0;
        $543 = $542 & -2147483648;
        $544 = ($543|0)!=(0);
        if ($544) {
         $545 = HEAP32[$flags>>2]|0;
         $546 = ((($545)) + 4|0);
         $547 = HEAP32[$546>>2]|0;
         $548 = $547 & 16384;
         $549 = ($548|0)!=(0);
         if (!($549)) {
          $add_points = 23;
          break L43;
         }
        }
       }
       $550 = HEAP32[$flags>>2]|0;
       $551 = HEAP32[$550>>2]|0;
       $552 = $command;
       $553 = $552 & 15;
       $554 = (14 + ($553))|0;
       $555 = 1 << $554;
       $556 = $551 & $555;
       $557 = ($556|0)!=(0);
       if ($557) {
        $add_points = 23;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 21:  {
       $syllable_count = 1;
       while(1) {
        $558 = $4;
        $559 = HEAP8[$558>>0]|0;
        $560 = $559 << 24 >> 24;
        $561 = ($560|0)==(21);
        if (!($561)) {
         break;
        }
        $562 = $4;
        $563 = ((($562)) + 1|0);
        $4 = $563;
        $564 = $syllable_count;
        $565 = (($564) + 1)|0;
        $syllable_count = $565;
       }
       $566 = $syllable_count;
       $567 = $0;
       $568 = ((($567)) + 8328|0);
       $569 = HEAP32[$568>>2]|0;
       $570 = ($566|0)<=($569|0);
       if ($570) {
        $571 = $syllable_count;
        $572 = (18 + ($571))|0;
        $573 = $distance_left;
        $574 = (($572) - ($573))|0;
        $add_points = $574;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 10:  {
       $575 = $0;
       $576 = ((($575)) + 8332|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = ($577|0)>(0);
       if ($578) {
        $add_points = 19;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 29:  {
       $579 = $pre_ptr;
       $580 = $letter_xbytes;
       $581 = (0 - ($580))|0;
       $582 = (($579) + ($581)|0);
       $583 = ((($582)) + -1|0);
       $p5 = $583;
       while(1) {
        $584 = HEAP32[$letter_w>>2]|0;
        $585 = ($584|0)!=(32);
        if (!($585)) {
         break;
        }
        $586 = $0;
        $587 = HEAP32[$letter_w>>2]|0;
        $588 = (__ZL8IsLetterP10Translatorii($586,$587,7)|0);
        $589 = ($588|0)!=(0);
        if ($589) {
         label = 169;
         break;
        }
        $590 = $p5;
        $591 = (__Z8utf8_in2PiPKci($letter_w,$590,1)|0);
        $592 = $p5;
        $593 = (0 - ($591))|0;
        $594 = (($592) + ($593)|0);
        $p5 = $594;
       }
       if ((label|0) == 169) {
        label = 0;
        $failed = 1;
       }
       $595 = $failed;
       $596 = ($595|0)!=(0);
       if ($596) {
        break L43;
       }
       $add_points = 3;
       break L43;
       break;
      }
      case 26:  {
       $597 = $0;
       $598 = ((($597)) + 8304|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = ($599|0)!=(0);
       if ($600) {
        $add_points = 1;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 19:  {
       $601 = $6;
       $602 = $601 & 2;
       $603 = ($602|0)!=(0);
       if ($603) {
        $add_points = 1;
        break L43;
       } else {
        $failed = 1;
        break L43;
       }
       break;
      }
      case 46:  {
       $604 = $pre_ptr;
       $p = $604;
       while(1) {
        $605 = $p;
        $606 = HEAP8[$605>>0]|0;
        $607 = $606 << 24 >> 24;
        $608 = ($607|0)!=(32);
        if (!($608)) {
         break;
        }
        $609 = $p;
        $610 = HEAP8[$609>>0]|0;
        $611 = $610 << 24 >> 24;
        $612 = ($611|0)==(46);
        if ($612) {
         label = 182;
         break;
        }
        $613 = $p;
        $614 = ((($613)) + -1|0);
        $p = $614;
       }
       if ((label|0) == 182) {
        label = 0;
        $add_points = 50;
       }
       $615 = $p;
       $616 = HEAP8[$615>>0]|0;
       $617 = $616 << 24 >> 24;
       $618 = ($617|0)==(32);
       if (!($618)) {
        break L43;
       }
       $failed = 1;
       break L43;
       break;
      }
      case 45:  {
       $619 = $letter;
       $620 = $619&255;
       $621 = ($620|0)==(45);
       do {
        if (!($621)) {
         $622 = $letter;
         $623 = $622&255;
         $624 = ($623|0)==(32);
         if ($624) {
          $625 = $6;
          $626 = $625 & 128;
          $627 = ($626|0)!=(0);
          if ($627) {
           break;
          }
         }
         $failed = 1;
         break L43;
        }
       } while(0);
       $628 = $distance_right;
       $629 = (22 - ($628))|0;
       $add_points = $629;
       break L43;
       break;
      }
      default: {
       $630 = $letter;
       $631 = $630&255;
       $632 = $rb;
       $633 = $632&255;
       $634 = ($631|0)==($633|0);
       if (!($634)) {
        $failed = 1;
        break L43;
       }
       $635 = $letter;
       $636 = $635&255;
       $637 = ($636|0)==(32);
       if ($637) {
        $add_points = 4;
        break L43;
       }
       $638 = $letter;
       $639 = $638&255;
       $640 = $639 & 192;
       $641 = ($640|0)!=(128);
       if (!($641)) {
        break L43;
       }
       $642 = $distance_left;
       $643 = (21 - ($642))|0;
       $add_points = $643;
       break L43;
      }
      }
     } while(0);
     break;
    }
    default: {
    }
    }
   } while(0);
   $644 = $failed;
   $645 = ($644|0)==(0);
   if (!($645)) {
    continue;
   }
   $646 = $add_points;
   $647 = HEAP32[$match>>2]|0;
   $648 = (($647) + ($646))|0;
   HEAP32[$match>>2] = $648;
  }
  $649 = $failed;
  $650 = ($649|0)==(2);
  $651 = $unpron_ignore;
  $652 = ($651|0)==(0);
  $or$cond6 = $650 & $652;
  do {
   if ($or$cond6) {
    $653 = $check_atstart;
    $654 = ($653|0)==(0);
    if (!($654)) {
     $655 = $pre_ptr;
     $656 = ((($655)) + -1|0);
     $657 = HEAP8[$656>>0]|0;
     $658 = $657 << 24 >> 24;
     $659 = ($658|0)==(32);
     if (!($659)) {
      break;
     }
    }
    $660 = $check_atstart;
    $661 = ($660|0)!=(0);
    if ($661) {
     $662 = HEAP32[$match>>2]|0;
     $663 = (($662) + 4)|0;
     HEAP32[$match>>2] = $663;
    }
    $664 = HEAP32[$match>>2]|0;
    $665 = HEAP32[10347]|0;
    $666 = ($664|0)>=($665|0);
    if ($666) {
     ;HEAP32[41388>>2]=HEAP32[$match>>2]|0;HEAP32[41388+4>>2]=HEAP32[$match+4>>2]|0;HEAP32[41388+8>>2]=HEAP32[$match+8>>2]|0;HEAP32[41388+12>>2]=HEAP32[$match+12>>2]|0;
     $667 = $consumed;
     $total_consumed = $667;
    }
    $668 = HEAP32[19040]|0;
    $669 = $668 & 8;
    $670 = ($669|0)!=(0);
    if ($670) {
     $671 = HEAP32[$match>>2]|0;
     $672 = ($671|0)>(0);
     if ($672) {
      $673 = $6;
      $674 = $673 & 268435456;
      $675 = ($674|0)==(0);
      if ($675) {
       $676 = HEAP32[$match>>2]|0;
       $pts = $676;
       $677 = $3;
       $678 = ($677|0)>(1);
       if ($678) {
        $679 = $pts;
        $680 = (($679) + 35)|0;
        $pts = $680;
       }
       $681 = ((($match)) + 4|0);
       $682 = HEAP32[$681>>2]|0;
       __Z14DecodePhonemesPKcPc($682,$decoded_phonemes);
       $683 = HEAP32[19037]|0;
       $684 = $pts;
       $685 = $group_chars;
       $686 = $3;
       $687 = $rule_start;
       $688 = $6;
       $689 = (__Z10DecodeRulePKciPci($685,$686,$687,$688)|0);
       HEAP32[$vararg_buffer>>2] = $684;
       $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr8>>2] = $689;
       $vararg_ptr9 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr9>>2] = $decoded_phonemes;
       (_fprintf($683,18305,$vararg_buffer)|0);
      }
     }
    }
   }
  } while(0);
  while(1) {
   $690 = $4;
   $691 = ((($690)) + 1|0);
   $4 = $691;
   $692 = HEAP8[$690>>0]|0;
   $693 = $692 << 24 >> 24;
   $694 = ($693|0)!=(0);
   if (!($694)) {
    continue L5;
   }
  }
 }
 $695 = $3;
 $696 = $total_consumed;
 $697 = (($696) + ($695))|0;
 $total_consumed = $697;
 $698 = $total_consumed;
 $699 = ($698|0)==(0);
 $$7 = $699 ? 1 : $697;
 $total_consumed = $$7;
 $700 = $total_consumed;
 $701 = $1;
 $702 = HEAP32[$701>>2]|0;
 $703 = (($702) + ($700)|0);
 HEAP32[$701>>2] = $703;
 $704 = HEAP32[10347]|0;
 $705 = ($704|0)==(0);
 if ($705) {
  HEAP32[(41392)>>2] = 121874;
 }
 $706 = $5;
 ;HEAP32[$706>>2]=HEAP32[41388>>2]|0;HEAP32[$706+4>>2]=HEAP32[41388+4>>2]|0;HEAP32[$706+8>>2]=HEAP32[41388+8>>2]|0;HEAP32[$706+12>>2]=HEAP32[41388+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZL13IsLetterGroupP10TranslatorPcii($tr,$word,$group,$pre) {
 $tr = $tr|0;
 $word = $word|0;
 $group = $group|0;
 $pre = $pre|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0;
 var $p = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tr;
 $2 = $word;
 $3 = $group;
 $4 = $pre;
 $len = 0;
 $5 = $3;
 $6 = $1;
 $7 = ((($6)) + 4908|0);
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $p = $9;
 $10 = $p;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 L4: while(1) {
  $12 = $p;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)!=(7);
  if (!($15)) {
   label = 15;
   break;
  }
  $16 = $4;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $p;
   $19 = (_strlen($18)|0);
   $len = $19;
   $20 = $2;
   $21 = $len;
   $22 = (0 - ($21))|0;
   $23 = (($20) + ($22)|0);
   $24 = ((($23)) + 1|0);
   $w = $24;
  } else {
   $25 = $2;
   $w = $25;
  }
  while(1) {
   $26 = $p;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = $w;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($28|0)==($31|0);
   if (!($32)) {
    break;
   }
   $33 = $w;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)!=(0);
   if (!($36)) {
    break;
   }
   $37 = $w;
   $38 = ((($37)) + 1|0);
   $w = $38;
   $39 = $p;
   $40 = ((($39)) + 1|0);
   $p = $40;
  }
  $41 = $p;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = ($43|0)==(0);
  if ($44) {
   break;
  }
  while(1) {
   $53 = $p;
   $54 = ((($53)) + 1|0);
   $p = $54;
   $55 = HEAP8[$53>>0]|0;
   $56 = $55 << 24 >> 24;
   $57 = ($56|0)!=(0);
   if (!($57)) {
    continue L4;
   }
  }
 }
 if ((label|0) == 15) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $45 = $4;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $len;
  $0 = $47;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 } else {
  $48 = $w;
  $49 = $2;
  $50 = $48;
  $51 = $49;
  $52 = (($50) - ($51))|0;
  $0 = $52;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __Z11LookupFlagsP10TranslatorPKcPPj($tr,$word,$flags_out) {
 $tr = $tr|0;
 $word = $word|0;
 $flags_out = $flags_out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, $word1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $word1 = sp;
 $0 = $tr;
 $1 = $word;
 $2 = $flags_out;
 $3 = $1;
 HEAP32[$word1>>2] = $3;
 HEAP32[(41408)>>2] = 0;
 HEAP32[10351] = 0;
 $4 = $0;
 (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($4,$word1,$buf,41404,0,0)|0);
 $5 = $2;
 HEAP32[$5>>2] = 41404;
 $6 = HEAP32[10351]|0;
 STACKTOP = sp;return ($6|0);
}
function __Z16ChangeWordStressP10TranslatorPci($tr,$word,$new_stress) {
 $tr = $tr|0;
 $word = $word|0;
 $new_stress = $new_stress|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $ix = 0, $max_stress = 0, $p = 0, $phonetic = 0, $stressed_syllable = 0, $vowel_count = 0, $vowel_stress = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vowel_count = sp + 4|0;
 $stressed_syllable = sp;
 $phonetic = sp + 136|0;
 $vowel_stress = sp + 32|0;
 $0 = $tr;
 $1 = $word;
 $2 = $new_stress;
 HEAP32[$stressed_syllable>>2] = 0;
 $3 = $1;
 (_strcpy($phonetic,$3)|0);
 $4 = $0;
 $5 = (__ZL14GetVowelStressP10TranslatorPhPaPiS3_i($4,$phonetic,$vowel_stress,$vowel_count,$stressed_syllable,0)|0);
 $max_stress = $5;
 $6 = $2;
 $7 = ($6|0)>=(4);
 $ix = 1;
 L1: do {
  if ($7) {
   while(1) {
    $8 = $ix;
    $9 = HEAP32[$vowel_count>>2]|0;
    $10 = ($8|0)<($9|0);
    if (!($10)) {
     break L1;
    }
    $11 = $ix;
    $12 = (($vowel_stress) + ($11)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = $max_stress;
    $16 = ($14|0)>=($15|0);
    if ($16) {
     break;
    }
    $21 = $ix;
    $22 = (($21) + 1)|0;
    $ix = $22;
   }
   $17 = $2;
   $18 = $17&255;
   $19 = $ix;
   $20 = (($vowel_stress) + ($19)|0);
   HEAP8[$20>>0] = $18;
  } else {
   while(1) {
    $23 = $ix;
    $24 = HEAP32[$vowel_count>>2]|0;
    $25 = ($23|0)<($24|0);
    if (!($25)) {
     break L1;
    }
    $26 = $ix;
    $27 = (($vowel_stress) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = $2;
    $31 = ($29|0)>($30|0);
    if ($31) {
     $32 = $2;
     $33 = $32&255;
     $34 = $ix;
     $35 = (($vowel_stress) + ($34)|0);
     HEAP8[$35>>0] = $33;
    }
    $36 = $ix;
    $37 = (($36) + 1)|0;
    $ix = $37;
   }
  }
 } while(0);
 $ix = 1;
 $p = $phonetic;
 while(1) {
  $38 = $p;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   break;
  }
  $42 = $p;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (44552 + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 11|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = ($49|0)==(2);
  if ($50) {
   $51 = $p;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (44552 + ($53<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 1048576;
   $59 = ($58|0)!=(0);
   if (!($59)) {
    $60 = $ix;
    $61 = (($vowel_stress) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = ($63|0)==(0);
    if ($64) {
     label = 16;
    } else {
     $65 = $ix;
     $66 = (($vowel_stress) + ($65)|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67 << 24 >> 24;
     $69 = ($68|0)>(1);
     if ($69) {
      label = 16;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $70 = $ix;
     $71 = (($vowel_stress) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = (18318 + ($73)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $1;
     $77 = ((($76)) + 1|0);
     $1 = $77;
     HEAP8[$76>>0] = $75;
    }
    $78 = $ix;
    $79 = (($78) + 1)|0;
    $ix = $79;
   }
  }
  $80 = $p;
  $81 = ((($80)) + 1|0);
  $p = $81;
  $82 = HEAP8[$80>>0]|0;
  $83 = $1;
  $84 = ((($83)) + 1|0);
  $1 = $84;
  HEAP8[$83>>0] = $82;
 }
 $85 = $1;
 HEAP8[$85>>0] = 0;
 STACKTOP = sp;return;
}
function __ZL14GetVowelStressP10TranslatorPhPaPiS3_i($tr,$phonemes,$vowel_stress,$vowel_count,$stressed_syllable,$control) {
 $tr = $tr|0;
 $phonemes = $phonemes|0;
 $vowel_stress = $vowel_stress|0;
 $vowel_count = $vowel_count|0;
 $stressed_syllable = $stressed_syllable|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $ix = 0, $j = 0, $max_stress = 0, $ph = 0, $ph_out = 0, $phcode = 0, $primary_posn = 0, $stress = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $phonemes;
 $2 = $vowel_stress;
 $3 = $vowel_count;
 $4 = $stressed_syllable;
 $5 = $control;
 $6 = $1;
 $ph_out = $6;
 $count = 1;
 $max_stress = -1;
 $stress = -1;
 $primary_posn = 0;
 $7 = $2;
 HEAP8[$7>>0] = 1;
 L1: while(1) {
  $8 = $1;
  $9 = ((($8)) + 1|0);
  $1 = $9;
  $10 = HEAP8[$8>>0]|0;
  $phcode = $10;
  $11 = $10&255;
  $12 = ($11|0)!=(0);
  $13 = $count;
  $14 = ($13|0)<(99);
  $15 = $12 ? $14 : 0;
  if (!($15)) {
   break;
  }
  $16 = $phcode;
  $17 = $16&255;
  $18 = (44552 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $ph = $19;
  $20 = ($19|0)==(0|0);
  if ($20) {
   continue;
  }
  $21 = $ph;
  $22 = ((($21)) + 11|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(1);
  if ($25) {
   $26 = $ph;
   $27 = ((($26)) + 8|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = $phcode;
    $32 = $31&255;
    $33 = ($32|0)==(8);
    if (!($33)) {
     $81 = $ph;
     $82 = ((($81)) + 14|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = ($84|0)<(4);
     if (!($85)) {
      $86 = $4;
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87|0)==(0);
      if (!($88)) {
       continue;
      }
     }
     $89 = $ph;
     $90 = ((($89)) + 14|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $stress = $92;
     $93 = $stress;
     $94 = $max_stress;
     $95 = ($93|0)>($94|0);
     if (!($95)) {
      continue;
     }
     $96 = $stress;
     $max_stress = $96;
     continue;
    }
    $34 = $count;
    $35 = (($34) - 1)|0;
    $j = $35;
    while(1) {
     $36 = $j;
     $37 = ($36|0)>(0);
     if (!($37)) {
      continue L1;
     }
     $38 = $4;
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0);
     if (!($40)) {
      continue L1;
     }
     $41 = $j;
     $42 = $2;
     $43 = (($42) + ($41)|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = ($45|0)<(4);
     if (!($46)) {
      continue L1;
     }
     $47 = $j;
     $48 = $2;
     $49 = (($48) + ($47)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 << 24 >> 24;
     $52 = ($51|0)!=(0);
     if ($52) {
      $53 = $j;
      $54 = $2;
      $55 = (($54) + ($53)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56 << 24 >> 24;
      $58 = ($57|0)!=(1);
      if ($58) {
       break;
      }
     }
     $79 = $j;
     $80 = (($79) + -1)|0;
     $j = $80;
    }
    $59 = $j;
    $60 = $2;
    $61 = (($60) + ($59)|0);
    HEAP8[$61>>0] = 4;
    $62 = $max_stress;
    $63 = ($62|0)<(4);
    if ($63) {
     $max_stress = 4;
     $64 = $j;
     $primary_posn = $64;
    }
    $ix = 1;
    while(1) {
     $65 = $ix;
     $66 = $j;
     $67 = ($65|0)<($66|0);
     if (!($67)) {
      continue L1;
     }
     $68 = $ix;
     $69 = $2;
     $70 = (($69) + ($68)|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71 << 24 >> 24;
     $73 = ($72|0)==(4);
     if ($73) {
      $74 = $ix;
      $75 = $2;
      $76 = (($75) + ($74)|0);
      HEAP8[$76>>0] = 3;
     }
     $77 = $ix;
     $78 = (($77) + 1)|0;
     $ix = $78;
    }
   }
  }
  $97 = $ph;
  $98 = ((($97)) + 11|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = ($100|0)==(2);
  if ($101) {
   $102 = $ph;
   $103 = ((($102)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $104 & 1048576;
   $106 = ($105|0)!=(0);
   if ($106) {
    label = 35;
   } else {
    $107 = $stress;
    $108 = $107&255;
    $109 = $count;
    $110 = $2;
    $111 = (($110) + ($109)|0);
    HEAP8[$111>>0] = $108;
    $112 = $stress;
    $113 = ($112|0)>=(4);
    if ($113) {
     $114 = $stress;
     $115 = $max_stress;
     $116 = ($114|0)>=($115|0);
     if ($116) {
      $117 = $count;
      $primary_posn = $117;
      $118 = $stress;
      $max_stress = $118;
     }
    }
    $119 = $stress;
    $120 = ($119|0)<(0);
    if ($120) {
     $121 = $5;
     $122 = $121 & 1;
     $123 = ($122|0)!=(0);
     if ($123) {
      $124 = $ph;
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $126 & 2;
      $128 = ($127|0)!=(0);
      if ($128) {
       $129 = $count;
       $130 = $2;
       $131 = (($130) + ($129)|0);
       HEAP8[$131>>0] = 1;
      }
     }
    }
    $132 = $count;
    $133 = (($132) + 1)|0;
    $count = $133;
    $stress = -1;
   }
  } else {
   label = 35;
  }
  if ((label|0) == 35) {
   label = 0;
   $134 = $phcode;
   $135 = $134&255;
   $136 = ($135|0)==(20);
   if ($136) {
    $137 = $stress;
    $138 = $137&255;
    $139 = $count;
    $140 = $2;
    $141 = (($140) + ($139)|0);
    HEAP8[$141>>0] = $138;
    $142 = $stress;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = $5;
     $145 = $144 & 1;
     $146 = ($145|0)!=(0);
     if ($146) {
      $147 = $count;
      $148 = (($147) + 1)|0;
      $count = $148;
      $149 = $2;
      $150 = (($149) + ($147)|0);
      HEAP8[$150>>0] = 1;
     }
    }
   }
  }
  $151 = $phcode;
  $152 = $ph_out;
  $153 = ((($152)) + 1|0);
  $ph_out = $153;
  HEAP8[$152>>0] = $151;
 }
 $154 = $count;
 $155 = $2;
 $156 = (($155) + ($154)|0);
 HEAP8[$156>>0] = 1;
 $157 = $ph_out;
 HEAP8[$157>>0] = 0;
 $158 = $4;
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159|0)>(0);
 if ($160) {
  $161 = $4;
  $162 = HEAP32[$161>>2]|0;
  $163 = $count;
  $164 = ($162|0)>=($163|0);
  if ($164) {
   $165 = $count;
   $166 = (($165) - 1)|0;
   $167 = $4;
   HEAP32[$167>>2] = $166;
  }
  $168 = $4;
  $169 = HEAP32[$168>>2]|0;
  $170 = $2;
  $171 = (($170) + ($169)|0);
  HEAP8[$171>>0] = 4;
  $max_stress = 4;
  $172 = $4;
  $173 = HEAP32[$172>>2]|0;
  $primary_posn = $173;
 }
 $174 = $max_stress;
 $175 = ($174|0)==(5);
 if (!($175)) {
  $205 = $primary_posn;
  $206 = $4;
  HEAP32[$206>>2] = $205;
  $207 = $count;
  $208 = $3;
  HEAP32[$208>>2] = $207;
  $209 = $max_stress;
  STACKTOP = sp;return ($209|0);
 }
 $ix = 1;
 while(1) {
  $176 = $ix;
  $177 = $count;
  $178 = ($176|0)<($177|0);
  if (!($178)) {
   break;
  }
  $179 = $ix;
  $180 = $2;
  $181 = (($180) + ($179)|0);
  $182 = HEAP8[$181>>0]|0;
  $183 = $182 << 24 >> 24;
  $184 = ($183|0)==(4);
  do {
   if ($184) {
    $185 = $0;
    $186 = ((($185)) + 12|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $187 & 131072;
    $189 = ($188|0)!=(0);
    $190 = $ix;
    $191 = $2;
    $192 = (($191) + ($190)|0);
    if ($189) {
     HEAP8[$192>>0] = 1;
     break;
    } else {
     HEAP8[$192>>0] = 3;
     break;
    }
   }
  } while(0);
  $193 = $ix;
  $194 = $2;
  $195 = (($194) + ($193)|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = $196 << 24 >> 24;
  $198 = ($197|0)==(5);
  if ($198) {
   $199 = $ix;
   $200 = $2;
   $201 = (($200) + ($199)|0);
   HEAP8[$201>>0] = 4;
   $202 = $ix;
   $primary_posn = $202;
  }
  $203 = $ix;
  $204 = (($203) + 1)|0;
  $ix = $204;
 }
 $max_stress = 4;
 $205 = $primary_posn;
 $206 = $4;
 HEAP32[$206>>2] = $205;
 $207 = $count;
 $208 = $3;
 HEAP32[$208>>2] = $207;
 $209 = $max_stress;
 STACKTOP = sp;return ($209|0);
}
function __Z13SetWordStressP10TranslatorPcPjii($tr,$output,$dictionary_flags,$tonic,$control) {
 $tr = $tr|0;
 $output = $output|0;
 $dictionary_flags = $dictionary_flags|0;
 $tonic = $tonic|0;
 $control = $control|0;
 var $$ = 0, $$33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dflags = 0, $done = 0, $final_ph = 0, $final_ph2 = 0, $first_primary = 0, $ix = 0, $lengthened = 0, $long_vowel = 0, $max_output = 0, $max_stress = 0, $max_stress_input = 0, $max_stress_posn = 0, $max_weight = 0, $mnem = 0, $opt_length = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond28 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $ph = 0, $phcode = 0, $phonetic = 0, $post_tonic = 0, $shorten = 0, $stress = 0;
 var $stressed_syllable = 0, $stressflags = 0, $syllable_weight = 0, $unstressed_word = 0, $v = 0, $v_stress = 0, $vowel_count = 0, $vowel_length = 0, $vowel_stress = 0, $weight = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vowel_count = sp + 88|0;
 $stressed_syllable = sp + 72|0;
 $vowel_stress = sp + 536|0;
 $syllable_weight = sp + 436|0;
 $vowel_length = sp + 336|0;
 $phonetic = sp + 136|0;
 $0 = $tr;
 $1 = $output;
 $2 = $dictionary_flags;
 $3 = $tonic;
 $4 = $control;
 $unstressed_word = 0;
 $dflags = 0;
 $5 = $0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $stressflags = $7;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $dflags = $11;
 }
 $ix = 0;
 while(1) {
  $12 = $ix;
  $13 = ($12|0)<(200);
  if (!($13)) {
   break;
  }
  $14 = $ix;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $ix;
  $19 = (($phonetic) + ($18)|0);
  HEAP8[$19>>0] = $17;
  $20 = $ix;
  $21 = (($phonetic) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = HEAP32[11136]|0;
  $25 = ($23|0)>=($24|0);
  if ($25) {
   $26 = $ix;
   $27 = (($phonetic) + ($26)|0);
   HEAP8[$27>>0] = 13;
  }
  $28 = $ix;
  $29 = (($phonetic) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(0);
  if ($32) {
   break;
  }
  $33 = $ix;
  $34 = (($33) + 1)|0;
  $ix = $34;
 }
 $35 = $ix;
 $36 = ($35|0)==(0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = $ix;
 $38 = (($37) - 1)|0;
 $39 = (($phonetic) + ($38)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $final_ph = $41;
 $42 = $ix;
 $43 = (($42) - 2)|0;
 $44 = (($phonetic) + ($43)|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $final_ph2 = $46;
 $47 = $1;
 $48 = ((($47)) + 197|0);
 $max_output = $48;
 $49 = $dflags;
 $50 = $49 & 7;
 HEAP32[$stressed_syllable>>2] = $50;
 $51 = $dflags;
 $52 = $51 & 8;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $dflags;
  $55 = $54 & 3;
  HEAP32[$stressed_syllable>>2] = $55;
  $unstressed_word = 1;
 }
 $56 = $0;
 $57 = (__ZL14GetVowelStressP10TranslatorPhPaPiS3_i($56,$phonetic,$vowel_stress,$vowel_count,$stressed_syllable,1)|0);
 $max_stress_input = $57;
 $max_stress = $57;
 $58 = $max_stress;
 $59 = ($58|0)<(0);
 $60 = $2;
 $61 = ($60|0)!=(0|0);
 $or$cond = $59 & $61;
 $$33 = $or$cond ? 0 : $57;
 $max_stress = $$33;
 $ix = 1;
 $p = $phonetic;
 while(1) {
  $62 = $p;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($64|0)!=(0);
  if (!($65)) {
   break;
  }
  $66 = $p;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = (44552 + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 11|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = ($73|0)==(2);
  if ($74) {
   $75 = $p;
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = (44552 + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 & 1048576;
   $83 = ($82|0)!=(0);
   if (!($83)) {
    $weight = 0;
    $lengthened = 0;
    $84 = $p;
    $85 = ((($84)) + 1|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = (44552 + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($89)) + 10|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = ($92|0)==(12);
    if ($93) {
     $lengthened = 1;
    }
    $94 = $lengthened;
    $95 = ($94|0)!=(0);
    if ($95) {
     label = 20;
    } else {
     $96 = $p;
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = (44552 + ($98<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ((($100)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102 & 2097152;
     $104 = ($103|0)!=(0);
     if ($104) {
      label = 20;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $105 = $weight;
     $106 = (($105) + 1)|0;
     $weight = $106;
    }
    $107 = $weight;
    $108 = $107&255;
    $109 = $ix;
    $110 = (($vowel_length) + ($109)|0);
    HEAP8[$110>>0] = $108;
    $111 = $lengthened;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = $p;
     $114 = ((($113)) + 1|0);
     $p = $114;
    }
    $115 = $p;
    $116 = ((($115)) + 1|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = (44552 + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ((($120)) + 11|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = (18325 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = ($125<<24>>24)!=(0);
    do {
     if ($126) {
      $127 = $p;
      $128 = ((($127)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129&255;
      $131 = (44552 + ($130<<2)|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ((($132)) + 11|0);
      $134 = HEAP8[$133>>0]|0;
      $135 = $134&255;
      $136 = ($135|0)!=(2);
      if (!($136)) {
       $137 = $p;
       $138 = ((($137)) + 1|0);
       $139 = HEAP8[$138>>0]|0;
       $140 = $139&255;
       $141 = (44552 + ($140<<2)|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ((($142)) + 4|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = $144 & 2097152;
       $146 = ($145|0)!=(0);
       if (!($146)) {
        break;
       }
      }
      $147 = $weight;
      $148 = (($147) + 1)|0;
      $weight = $148;
     }
    } while(0);
    $149 = $weight;
    $150 = $149&255;
    $151 = $ix;
    $152 = (($syllable_weight) + ($151)|0);
    HEAP8[$152>>0] = $150;
    $153 = $ix;
    $154 = (($153) + 1)|0;
    $ix = $154;
   }
  }
  $155 = $p;
  $156 = ((($155)) + 1|0);
  $p = $156;
 }
 $157 = $0;
 $158 = ((($157)) + 8|0);
 $159 = HEAP32[$158>>2]|0;
 L43: do {
  switch ($159|0) {
  case 8:  {
   $160 = ((($syllable_weight)) + 1|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = ($162|0)>(0);
   if (!($163)) {
    $164 = ((($syllable_weight)) + 2|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165 << 24 >> 24;
    $167 = ($166|0)==(0);
    if (!($167)) {
     label = 32;
    }
   }
   break;
  }
  case 1:  {
   label = 32;
   break;
  }
  case 10:  {
   $176 = HEAP32[$stressed_syllable>>2]|0;
   $177 = ($176|0)==(0);
   $178 = HEAP32[$vowel_count>>2]|0;
   $179 = ($178|0)<(4);
   $or$cond35 = $177 & $179;
   if ($or$cond35) {
    $180 = HEAP32[$vowel_count>>2]|0;
    $181 = (($180) - 1)|0;
    $182 = (($vowel_stress) + ($181)|0);
    HEAP8[$182>>0] = 4;
    $max_stress = 4;
   } else {
    label = 38;
   }
   break;
  }
  case 2:  {
   label = 38;
   break;
  }
  case 3:  {
   $313 = HEAP32[$stressed_syllable>>2]|0;
   $314 = ($313|0)==(0);
   if ($314) {
    $315 = HEAP32[$vowel_count>>2]|0;
    $316 = (($315) - 1)|0;
    HEAP32[$stressed_syllable>>2] = $316;
    while(1) {
     $317 = HEAP32[$stressed_syllable>>2]|0;
     $318 = ($317|0)>(0);
     if (!($318)) {
      break;
     }
     $319 = HEAP32[$stressed_syllable>>2]|0;
     $320 = (($vowel_stress) + ($319)|0);
     $321 = HEAP8[$320>>0]|0;
     $322 = $321 << 24 >> 24;
     $323 = ($322|0)<(0);
     $324 = HEAP32[$stressed_syllable>>2]|0;
     if ($323) {
      label = 72;
      break;
     }
     $326 = (($324) + -1)|0;
     HEAP32[$stressed_syllable>>2] = $326;
    }
    if ((label|0) == 72) {
     $325 = (($vowel_stress) + ($324)|0);
     HEAP8[$325>>0] = 4;
    }
    $max_stress = 4;
   }
   break;
  }
  case 4:  {
   $327 = HEAP32[$stressed_syllable>>2]|0;
   $328 = ($327|0)==(0);
   if ($328) {
    $329 = HEAP32[$vowel_count>>2]|0;
    $330 = (($329) - 3)|0;
    HEAP32[$stressed_syllable>>2] = $330;
    $331 = HEAP32[$stressed_syllable>>2]|0;
    $332 = ($331|0)<(1);
    $$ = $332 ? 1 : $330;
    HEAP32[$stressed_syllable>>2] = $$;
    $333 = $max_stress;
    $334 = ($333|0)==(0);
    if ($334) {
     $335 = HEAP32[$stressed_syllable>>2]|0;
     $336 = (($vowel_stress) + ($335)|0);
     HEAP8[$336>>0] = 4;
    }
    $max_stress = 4;
   }
   break;
  }
  case 5:  {
   $337 = HEAP32[$stressed_syllable>>2]|0;
   $338 = ($337|0)==(0);
   if ($338) {
    $339 = HEAP32[$vowel_count>>2]|0;
    $340 = (($339) - 3)|0;
    HEAP32[$stressed_syllable>>2] = $340;
    $341 = HEAP32[$vowel_count>>2]|0;
    $342 = ($341|0)<(16);
    do {
     if ($342) {
      $343 = $final_ph;
      $344 = (44552 + ($343<<2)|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ((($345)) + 11|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = $347&255;
      $349 = ($348|0)==(2);
      if ($349) {
       $350 = HEAP32[$vowel_count>>2]|0;
       $351 = (18341 + ($350)|0);
       $352 = HEAP8[$351>>0]|0;
       $353 = $352 << 24 >> 24;
       HEAP32[$stressed_syllable>>2] = $353;
       break;
      }
      $354 = $final_ph;
      $355 = (44552 + ($354<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ((($356)) + 11|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = $358&255;
      $360 = ($359|0)==(4);
      $361 = HEAP32[$vowel_count>>2]|0;
      if ($360) {
       $362 = (18357 + ($361)|0);
       $363 = HEAP8[$362>>0]|0;
       $364 = $363 << 24 >> 24;
       HEAP32[$stressed_syllable>>2] = $364;
       break;
      } else {
       $365 = (18373 + ($361)|0);
       $366 = HEAP8[$365>>0]|0;
       $367 = $366 << 24 >> 24;
       HEAP32[$stressed_syllable>>2] = $367;
       break;
      }
     }
    } while(0);
    $368 = HEAP32[$stressed_syllable>>2]|0;
    $369 = (($vowel_stress) + ($368)|0);
    HEAP8[$369>>0] = 4;
    $max_stress = 4;
   }
   break;
  }
  case 6:  {
   $370 = HEAP32[$stressed_syllable>>2]|0;
   $371 = ($370|0)==(0);
   if ($371) {
    $max_weight = -1;
    $ix = 1;
    while(1) {
     $372 = $ix;
     $373 = HEAP32[$vowel_count>>2]|0;
     $374 = (($373) - 1)|0;
     $375 = ($372|0)<($374|0);
     if (!($375)) {
      break;
     }
     $376 = $ix;
     $377 = (($vowel_stress) + ($376)|0);
     $378 = HEAP8[$377>>0]|0;
     $379 = $378 << 24 >> 24;
     $380 = ($379|0)<(0);
     if ($380) {
      $381 = $ix;
      $382 = (($syllable_weight) + ($381)|0);
      $383 = HEAP8[$382>>0]|0;
      $384 = $383 << 24 >> 24;
      $wt = $384;
      $385 = $max_weight;
      $386 = ($384|0)>=($385|0);
      if ($386) {
       $387 = $wt;
       $max_weight = $387;
       $388 = $ix;
       HEAP32[$stressed_syllable>>2] = $388;
      }
     }
     $389 = $ix;
     $390 = (($389) + 1)|0;
     $ix = $390;
    }
    $391 = HEAP32[$vowel_count>>2]|0;
    $392 = (($391) - 1)|0;
    $393 = (($syllable_weight) + ($392)|0);
    $394 = HEAP8[$393>>0]|0;
    $395 = $394 << 24 >> 24;
    $396 = ($395|0)==(2);
    $397 = $max_weight;
    $398 = ($397|0)<(2);
    $or$cond9 = $396 & $398;
    if ($or$cond9) {
     $399 = HEAP32[$vowel_count>>2]|0;
     $400 = (($399) - 1)|0;
     HEAP32[$stressed_syllable>>2] = $400;
    } else {
     $401 = $max_weight;
     $402 = ($401|0)<=(0);
     if ($402) {
      HEAP32[$stressed_syllable>>2] = 1;
     }
    }
    $403 = HEAP32[$stressed_syllable>>2]|0;
    $404 = (($vowel_stress) + ($403)|0);
    HEAP8[$404>>0] = 4;
    $max_stress = 4;
   }
   break;
  }
  case 7:  {
   $405 = HEAP32[$stressed_syllable>>2]|0;
   $406 = ($405|0)==(0);
   if ($406) {
    $407 = HEAP32[$vowel_count>>2]|0;
    $408 = (($407) - 1)|0;
    HEAP32[$stressed_syllable>>2] = $408;
    $ix = 1;
    while(1) {
     $409 = $ix;
     $410 = HEAP32[$vowel_count>>2]|0;
     $411 = ($409|0)<($410|0);
     if (!($411)) {
      break;
     }
     $412 = $ix;
     $413 = (($vowel_stress) + ($412)|0);
     $414 = HEAP8[$413>>0]|0;
     $415 = $414 << 24 >> 24;
     $416 = ($415|0)==(1);
     $417 = $ix;
     if ($416) {
      label = 103;
      break;
     }
     $419 = (($417) + 1)|0;
     $ix = $419;
    }
    if ((label|0) == 103) {
     $418 = (($417) - 1)|0;
     HEAP32[$stressed_syllable>>2] = $418;
    }
    $420 = HEAP32[$stressed_syllable>>2]|0;
    $421 = (($vowel_stress) + ($420)|0);
    HEAP8[$421>>0] = 4;
    $max_stress = 4;
   }
   break;
  }
  case 9:  {
   $ix = 1;
   while(1) {
    $422 = $ix;
    $423 = HEAP32[$vowel_count>>2]|0;
    $424 = ($422|0)<($423|0);
    if (!($424)) {
     break L43;
    }
    $425 = $ix;
    $426 = (($vowel_stress) + ($425)|0);
    $427 = HEAP8[$426>>0]|0;
    $428 = $427 << 24 >> 24;
    $429 = ($428|0)<(0);
    if ($429) {
     $430 = $ix;
     $431 = (($vowel_stress) + ($430)|0);
     HEAP8[$431>>0] = 4;
    }
    $432 = $ix;
    $433 = (($432) + 1)|0;
    $ix = $433;
   }
   break;
  }
  case 12:  {
   $long_vowel = 0;
   $ix = 1;
   while(1) {
    $434 = $ix;
    $435 = HEAP32[$vowel_count>>2]|0;
    $436 = ($434|0)<($435|0);
    if (!($436)) {
     break;
    }
    $437 = $ix;
    $438 = (($vowel_stress) + ($437)|0);
    $439 = HEAP8[$438>>0]|0;
    $440 = $439 << 24 >> 24;
    $441 = ($440|0)==(4);
    if ($441) {
     $442 = $ix;
     $443 = (($vowel_stress) + ($442)|0);
     HEAP8[$443>>0] = 3;
    }
    $444 = $ix;
    $445 = (($vowel_length) + ($444)|0);
    $446 = HEAP8[$445>>0]|0;
    $447 = $446 << 24 >> 24;
    $448 = ($447|0)>(0);
    if ($448) {
     $449 = $ix;
     $long_vowel = $449;
     $450 = $ix;
     $451 = (($vowel_stress) + ($450)|0);
     HEAP8[$451>>0] = 3;
    }
    $452 = $ix;
    $453 = (($452) + 1)|0;
    $ix = $453;
   }
   $454 = HEAP32[$stressed_syllable>>2]|0;
   $455 = ($454|0)==(0);
   do {
    if ($455) {
     $456 = $long_vowel;
     $457 = ($456|0)>(0);
     if ($457) {
      $458 = $long_vowel;
      HEAP32[$stressed_syllable>>2] = $458;
      break;
     }
     $459 = HEAP32[$vowel_count>>2]|0;
     $460 = ($459|0)>(5);
     $461 = HEAP32[$vowel_count>>2]|0;
     if ($460) {
      $462 = (($461) - 3)|0;
      HEAP32[$stressed_syllable>>2] = $462;
      break;
     } else {
      $463 = (($461) - 1)|0;
      HEAP32[$stressed_syllable>>2] = $463;
      break;
     }
    }
   } while(0);
   $464 = HEAP32[$stressed_syllable>>2]|0;
   $465 = (($vowel_stress) + ($464)|0);
   HEAP8[$465>>0] = 4;
   $max_stress = 4;
   break;
  }
  case 13:  {
   $466 = HEAP32[$stressed_syllable>>2]|0;
   $467 = ($466|0)==(0);
   if ($467) {
    HEAP32[$stressed_syllable>>2] = 1;
    $468 = ((($vowel_length)) + 1|0);
    $469 = HEAP8[$468>>0]|0;
    $470 = $469 << 24 >> 24;
    $471 = ($470|0)==(0);
    $472 = HEAP32[$vowel_count>>2]|0;
    $473 = ($472|0)>(2);
    $or$cond11 = $471 & $473;
    if ($or$cond11) {
     $474 = ((($vowel_length)) + 2|0);
     $475 = HEAP8[$474>>0]|0;
     $476 = $475 << 24 >> 24;
     $477 = ($476|0)>(0);
     if ($477) {
      HEAP32[$stressed_syllable>>2] = 2;
     }
    }
    $478 = HEAP32[$stressed_syllable>>2]|0;
    $479 = (($vowel_stress) + ($478)|0);
    HEAP8[$479>>0] = 4;
    $max_stress = 4;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 do {
  if ((label|0) == 32) {
   $168 = HEAP32[$stressed_syllable>>2]|0;
   $169 = ($168|0)==(0);
   $170 = HEAP32[$vowel_count>>2]|0;
   $171 = ($170|0)>(2);
   $or$cond3 = $169 & $171;
   if ($or$cond3) {
    HEAP32[$stressed_syllable>>2] = 2;
    $172 = $max_stress;
    $173 = ($172|0)==(0);
    if ($173) {
     $174 = HEAP32[$stressed_syllable>>2]|0;
     $175 = (($vowel_stress) + ($174)|0);
     HEAP8[$175>>0] = 4;
    }
    $max_stress = 4;
   }
  }
  else if ((label|0) == 38) {
   $183 = HEAP32[$stressed_syllable>>2]|0;
   $184 = ($183|0)==(0);
   if ($184) {
    $max_stress = 4;
    $185 = HEAP32[$vowel_count>>2]|0;
    $186 = ($185|0)>(2);
    do {
     if ($186) {
      $187 = HEAP32[$vowel_count>>2]|0;
      $188 = (($187) - 2)|0;
      HEAP32[$stressed_syllable>>2] = $188;
      $189 = $stressflags;
      $190 = $189 & 512;
      $191 = ($190|0)!=(0);
      do {
       if ($191) {
        $192 = $final_ph;
        $193 = (44552 + ($192<<2)|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ((($194)) + 11|0);
        $196 = HEAP8[$195>>0]|0;
        $197 = $196&255;
        $198 = ($197|0)!=(2);
        if ($198) {
         $199 = $final_ph;
         $200 = (44552 + ($199<<2)|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = HEAP32[$201>>2]|0;
         $mnem = $202;
         $203 = $0;
         $204 = ((($203)) + 324|0);
         $205 = HEAP32[$204>>2]|0;
         $206 = ($205|0)==(24942);
         if ($206) {
          $207 = $mnem;
          $208 = ($207|0)!=(115);
          $209 = $mnem;
          $210 = ($209|0)!=(110);
          $or$cond5 = $208 & $210;
          if (!($or$cond5)) {
           $211 = $final_ph2;
           $212 = (44552 + ($211<<2)|0);
           $213 = HEAP32[$212>>2]|0;
           $214 = ((($213)) + 11|0);
           $215 = HEAP8[$214>>0]|0;
           $216 = $215&255;
           $217 = ($216|0)!=(2);
           if (!($217)) {
            break;
           }
          }
          $218 = HEAP32[$vowel_count>>2]|0;
          $219 = (($218) - 1)|0;
          HEAP32[$stressed_syllable>>2] = $219;
          break;
         }
         $220 = $0;
         $221 = ((($220)) + 324|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = ($222|0)==(26977);
         $224 = $mnem;
         if ($223) {
          $225 = ($224|0)!=(115);
          if (!($225)) {
           $226 = $final_ph2;
           $227 = (44552 + ($226<<2)|0);
           $228 = HEAP32[$227>>2]|0;
           $229 = ((($228)) + 11|0);
           $230 = HEAP8[$229>>0]|0;
           $231 = $230&255;
           $232 = ($231|0)!=(2);
           if (!($232)) {
            break;
           }
          }
          $233 = HEAP32[$vowel_count>>2]|0;
          $234 = (($233) - 1)|0;
          HEAP32[$stressed_syllable>>2] = $234;
          break;
         }
         $235 = ($224|0)==(115);
         if ($235) {
          $236 = $final_ph2;
          $237 = (44552 + ($236<<2)|0);
          $238 = HEAP32[$237>>2]|0;
          $239 = ((($238)) + 11|0);
          $240 = HEAP8[$239>>0]|0;
          $241 = $240&255;
          $242 = ($241|0)==(8);
          if ($242) {
           break;
          }
         }
         $243 = $final_ph;
         $244 = (44552 + ($243<<2)|0);
         $245 = HEAP32[$244>>2]|0;
         $246 = ((($245)) + 11|0);
         $247 = HEAP8[$246>>0]|0;
         $248 = $247&255;
         $249 = ($248|0)!=(8);
         $250 = $mnem;
         $251 = ($250|0)!=(115);
         $or$cond7 = $249 & $251;
         if (!($or$cond7)) {
          $252 = $final_ph2;
          $253 = (44552 + ($252<<2)|0);
          $254 = HEAP32[$253>>2]|0;
          $255 = ((($254)) + 11|0);
          $256 = HEAP8[$255>>0]|0;
          $257 = $256&255;
          $258 = ($257|0)!=(2);
          if (!($258)) {
           break;
          }
         }
         $259 = HEAP32[$vowel_count>>2]|0;
         $260 = (($259) - 1)|0;
         HEAP32[$stressed_syllable>>2] = $260;
        }
       }
      } while(0);
      $261 = $stressflags;
      $262 = $261 & 524288;
      $263 = ($262|0)!=(0);
      if ($263) {
       $264 = HEAP32[$vowel_count>>2]|0;
       $265 = (($264) - 1)|0;
       $266 = (($vowel_length) + ($265)|0);
       $267 = HEAP8[$266>>0]|0;
       $268 = $267 << 24 >> 24;
       $269 = HEAP32[$vowel_count>>2]|0;
       $270 = (($269) - 2)|0;
       $271 = (($vowel_length) + ($270)|0);
       $272 = HEAP8[$271>>0]|0;
       $273 = $272 << 24 >> 24;
       $274 = ($268|0)>($273|0);
       if ($274) {
        $275 = HEAP32[$vowel_count>>2]|0;
        $276 = (($275) - 1)|0;
        HEAP32[$stressed_syllable>>2] = $276;
       }
      }
      $277 = HEAP32[$stressed_syllable>>2]|0;
      $278 = (($vowel_stress) + ($277)|0);
      $279 = HEAP8[$278>>0]|0;
      $280 = $279 << 24 >> 24;
      $281 = ($280|0)==(0);
      if (!($281)) {
       $282 = HEAP32[$stressed_syllable>>2]|0;
       $283 = (($vowel_stress) + ($282)|0);
       $284 = HEAP8[$283>>0]|0;
       $285 = $284 << 24 >> 24;
       $286 = ($285|0)==(1);
       if (!($286)) {
        break;
       }
      }
      $287 = HEAP32[$stressed_syllable>>2]|0;
      $288 = ($287|0)>(1);
      $289 = HEAP32[$stressed_syllable>>2]|0;
      if ($288) {
       $290 = (($289) + -1)|0;
       HEAP32[$stressed_syllable>>2] = $290;
       break;
      } else {
       $291 = (($289) + 1)|0;
       HEAP32[$stressed_syllable>>2] = $291;
       break;
      }
     } else {
      HEAP32[$stressed_syllable>>2] = 1;
     }
    } while(0);
    $292 = HEAP32[$stressed_syllable>>2]|0;
    $293 = (($vowel_stress) + ($292)|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294 << 24 >> 24;
    $296 = ($295|0)<(0);
    if ($296) {
     $297 = HEAP32[$stressed_syllable>>2]|0;
     $298 = (($297) - 1)|0;
     $299 = (($vowel_stress) + ($298)|0);
     $300 = HEAP8[$299>>0]|0;
     $301 = $300 << 24 >> 24;
     $302 = ($301|0)<(4);
     if (!($302)) {
      $303 = HEAP32[$stressed_syllable>>2]|0;
      $304 = (($303) + 1)|0;
      $305 = (($vowel_stress) + ($304)|0);
      $306 = HEAP8[$305>>0]|0;
      $307 = $306 << 24 >> 24;
      $308 = ($307|0)<(4);
      if (!($308)) {
       break;
      }
     }
     $309 = $max_stress;
     $310 = $309&255;
     $311 = HEAP32[$stressed_syllable>>2]|0;
     $312 = (($vowel_stress) + ($311)|0);
     HEAP8[$312>>0] = $310;
    }
   }
  }
 } while(0);
 $480 = $stressflags;
 $481 = $480 & 256;
 $482 = ($481|0)!=(0);
 if ($482) {
  $483 = $4;
  $484 = $483 & 2;
  $485 = ($484|0)==(0);
  $486 = HEAP32[$vowel_count>>2]|0;
  $487 = ($486|0)>(2);
  $or$cond13 = $485 & $487;
  $488 = $max_stress_input;
  $489 = ($488|0)<(3);
  $or$cond15 = $or$cond13 & $489;
  if ($or$cond15) {
   $490 = HEAP32[$vowel_count>>2]|0;
   $491 = (($490) - 1)|0;
   $492 = (($vowel_stress) + ($491)|0);
   $493 = HEAP8[$492>>0]|0;
   $494 = $493 << 24 >> 24;
   $495 = ($494|0)==(4);
   if ($495) {
    $496 = $final_ph;
    $497 = (44552 + ($496<<2)|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = ((($498)) + 11|0);
    $500 = HEAP8[$499>>0]|0;
    $501 = $500&255;
    $502 = ($501|0)==(2);
    if ($502) {
     $503 = HEAP32[$vowel_count>>2]|0;
     $504 = (($503) - 1)|0;
     $505 = (($vowel_stress) + ($504)|0);
     HEAP8[$505>>0] = 1;
     $506 = HEAP32[$vowel_count>>2]|0;
     $507 = (($506) - 2)|0;
     $508 = (($vowel_stress) + ($507)|0);
     HEAP8[$508>>0] = 4;
    }
   }
  }
 }
 $509 = $max_stress;
 $510 = ($509|0)<(4);
 if ($510) {
  $stress = 4;
 } else {
  $stress = 3;
 }
 $511 = $unstressed_word;
 $512 = ($511|0)==(0);
 if ($512) {
  $513 = $stressflags;
  $514 = $513 & 4096;
  $515 = ($514|0)!=(0);
  $516 = HEAP32[$vowel_count>>2]|0;
  $517 = ($516|0)==(3);
  $or$cond17 = $515 & $517;
  if ($or$cond17) {
   $518 = ((($vowel_stress)) + 1|0);
   $519 = HEAP8[$518>>0]|0;
   $520 = $519 << 24 >> 24;
   $521 = ($520|0)==(4);
   if ($521) {
    $522 = ((($vowel_stress)) + 2|0);
    HEAP8[$522>>0] = 3;
   }
   $523 = ((($vowel_stress)) + 2|0);
   $524 = HEAP8[$523>>0]|0;
   $525 = $524 << 24 >> 24;
   $526 = ($525|0)==(4);
   if ($526) {
    $527 = ((($vowel_stress)) + 1|0);
    HEAP8[$527>>0] = 3;
   }
  }
  $528 = $stressflags;
  $529 = $528 & 8192;
  $530 = ($529|0)!=(0);
  if ($530) {
   $531 = ((($vowel_stress)) + 1|0);
   $532 = HEAP8[$531>>0]|0;
   $533 = $532 << 24 >> 24;
   $534 = ($533|0)<(0);
   $535 = HEAP32[$vowel_count>>2]|0;
   $536 = ($535|0)>(3);
   $or$cond37 = $534 & $536;
   if ($or$cond37) {
    $537 = ((($vowel_stress)) + 2|0);
    $538 = HEAP8[$537>>0]|0;
    $539 = $538 << 24 >> 24;
    $540 = ($539|0)>=(4);
    if ($540) {
     $541 = ((($vowel_stress)) + 1|0);
     HEAP8[$541>>0] = 3;
    }
   }
  }
 }
 $done = 0;
 $first_primary = 0;
 $v = 1;
 while(1) {
  $542 = $v;
  $543 = HEAP32[$vowel_count>>2]|0;
  $544 = ($542|0)<($543|0);
  if (!($544)) {
   break;
  }
  $545 = $v;
  $546 = (($vowel_stress) + ($545)|0);
  $547 = HEAP8[$546>>0]|0;
  $548 = $547 << 24 >> 24;
  $549 = ($548|0)<(0);
  do {
   if ($549) {
    $550 = $stressflags;
    $551 = $550 & 16;
    $552 = ($551|0)!=(0);
    $553 = $stress;
    $554 = ($553|0)<(4);
    $or$cond19 = $552 & $554;
    if ($or$cond19) {
     $555 = $v;
     $556 = HEAP32[$vowel_count>>2]|0;
     $557 = (($556) - 1)|0;
     $558 = ($555|0)==($557|0);
     if ($558) {
      label = 166;
      break;
     }
    }
    $559 = $stressflags;
    $560 = $559 & 32768;
    $561 = ($560|0)!=(0);
    $562 = $done;
    $563 = ($562|0)==(0);
    $or$cond21 = $561 & $563;
    if ($or$cond21) {
     $564 = $stress;
     $565 = $564&255;
     $566 = $v;
     $567 = (($vowel_stress) + ($566)|0);
     HEAP8[$567>>0] = $565;
     $done = 1;
     $stress = 3;
     label = 166;
     break;
    }
    $568 = $v;
    $569 = (($568) - 1)|0;
    $570 = (($vowel_stress) + ($569)|0);
    $571 = HEAP8[$570>>0]|0;
    $572 = $571 << 24 >> 24;
    $573 = ($572|0)<=(1);
    if ($573) {
     $574 = $v;
     $575 = (($574) + 1)|0;
     $576 = (($vowel_stress) + ($575)|0);
     $577 = HEAP8[$576>>0]|0;
     $578 = $577 << 24 >> 24;
     $579 = ($578|0)<=(1);
     if (!($579)) {
      $580 = $stress;
      $581 = ($580|0)==(4);
      if (!($581)) {
       label = 166;
       break;
      }
      $582 = $v;
      $583 = (($582) + 1)|0;
      $584 = (($vowel_stress) + ($583)|0);
      $585 = HEAP8[$584>>0]|0;
      $586 = $585 << 24 >> 24;
      $587 = ($586|0)<=(2);
      if (!($587)) {
       label = 166;
       break;
      }
     }
     $588 = $stress;
     $589 = ($588|0)==(3);
     if ($589) {
      $590 = $stressflags;
      $591 = $590 & 32;
      $592 = ($591|0)!=(0);
      if ($592) {
       break;
      }
     }
     $593 = $v;
     $594 = ($593|0)>(1);
     if ($594) {
      $595 = $stressflags;
      $596 = $595 & 64;
      $597 = ($596|0)!=(0);
      if ($597) {
       $598 = $v;
       $599 = (($syllable_weight) + ($598)|0);
       $600 = HEAP8[$599>>0]|0;
       $601 = $600 << 24 >> 24;
       $602 = ($601|0)==(0);
       if ($602) {
        $603 = $v;
        $604 = (($603) + 1)|0;
        $605 = (($syllable_weight) + ($604)|0);
        $606 = HEAP8[$605>>0]|0;
        $607 = $606 << 24 >> 24;
        $608 = ($607|0)>(0);
        if ($608) {
         break;
        }
       }
      }
     }
     $609 = $stress;
     $610 = $609&255;
     $611 = $v;
     $612 = (($vowel_stress) + ($611)|0);
     HEAP8[$612>>0] = $610;
     $done = 1;
     $stress = 3;
     label = 166;
    } else {
     label = 166;
    }
   } else {
    label = 166;
   }
  } while(0);
  do {
   if ((label|0) == 166) {
    label = 0;
    $613 = $v;
    $614 = (($vowel_stress) + ($613)|0);
    $615 = HEAP8[$614>>0]|0;
    $616 = $615 << 24 >> 24;
    $617 = ($616|0)>=(4);
    if ($617) {
     $618 = $first_primary;
     $619 = ($618|0)==(0);
     if ($619) {
      $620 = $v;
      $first_primary = $620;
      break;
     }
     $621 = $stressflags;
     $622 = $621 & 128;
     $623 = ($622|0)!=(0);
     if ($623) {
      $624 = $v;
      $625 = (($vowel_stress) + ($624)|0);
      HEAP8[$625>>0] = 3;
     }
    }
   }
  } while(0);
  $626 = $v;
  $627 = (($626) + 1)|0;
  $v = $627;
 }
 $628 = $unstressed_word;
 $629 = ($628|0)!=(0);
 $630 = $3;
 $631 = ($630|0)<(0);
 $or$cond23 = $629 & $631;
 do {
  if ($or$cond23) {
   $632 = HEAP32[$vowel_count>>2]|0;
   $633 = ($632|0)<=(2);
   $634 = $0;
   if ($633) {
    $635 = ((($634)) + 16|0);
    $636 = HEAP32[$635>>2]|0;
    $3 = $636;
    break;
   } else {
    $637 = ((($634)) + 20|0);
    $638 = HEAP32[$637>>2]|0;
    $3 = $638;
    break;
   }
  }
 } while(0);
 $max_stress = 0;
 $max_stress_posn = 0;
 $v = 1;
 while(1) {
  $639 = $v;
  $640 = HEAP32[$vowel_count>>2]|0;
  $641 = ($639|0)<($640|0);
  if (!($641)) {
   break;
  }
  $642 = $v;
  $643 = (($vowel_stress) + ($642)|0);
  $644 = HEAP8[$643>>0]|0;
  $645 = $644 << 24 >> 24;
  $646 = $max_stress;
  $647 = ($645|0)>=($646|0);
  if ($647) {
   $648 = $v;
   $649 = (($vowel_stress) + ($648)|0);
   $650 = HEAP8[$649>>0]|0;
   $651 = $650 << 24 >> 24;
   $max_stress = $651;
   $652 = $v;
   $max_stress_posn = $652;
  }
  $653 = $v;
  $654 = (($653) + 1)|0;
  $v = $654;
 }
 $655 = $3;
 $656 = ($655|0)>=(0);
 if ($656) {
  $657 = $3;
  $658 = $max_stress;
  $659 = ($657|0)>($658|0);
  $660 = $max_stress;
  $661 = ($660|0)<=(4);
  $or$cond25 = $659 | $661;
  if ($or$cond25) {
   $662 = $3;
   $663 = $662&255;
   $664 = $max_stress_posn;
   $665 = (($vowel_stress) + ($664)|0);
   HEAP8[$665>>0] = $663;
  }
  $666 = $3;
  $max_stress = $666;
 }
 $p = $phonetic;
 $v = 1;
 $667 = $4;
 $668 = $667 & 1;
 $669 = ($668|0)!=(0);
 do {
  if (!($669)) {
   $670 = $p;
   $671 = HEAP8[$670>>0]|0;
   $672 = $671&255;
   $673 = (44552 + ($672<<2)|0);
   $674 = HEAP32[$673>>2]|0;
   $ph = $674;
   $675 = ($674|0)!=(0|0);
   if ($675) {
    while(1) {
     $676 = $ph;
     $677 = ((($676)) + 11|0);
     $678 = HEAP8[$677>>0]|0;
     $679 = $678&255;
     $680 = ($679|0)==(1);
     if (!($680)) {
      $681 = $p;
      $682 = HEAP8[$681>>0]|0;
      $683 = $682&255;
      $684 = ($683|0)==(15);
      if (!($684)) {
       break;
      }
     }
     $685 = $p;
     $686 = ((($685)) + 1|0);
     $p = $686;
     $687 = $p;
     $688 = HEAP8[$687>>0]|0;
     $689 = $688&255;
     $690 = (44552 + ($689<<2)|0);
     $691 = HEAP32[$690>>2]|0;
     $ph = $691;
    }
    $692 = $0;
    $693 = ((($692)) + 4|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = $694 & 48;
    $696 = ($695|0)!=(0);
    if ($696) {
     $697 = $ph;
     $698 = ((($697)) + 11|0);
     $699 = HEAP8[$698>>0]|0;
     $700 = $699&255;
     $701 = ($700|0)==(2);
     if ($701) {
      $702 = $0;
      $703 = ((($702)) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = $704 & 32;
      $706 = ($705|0)!=(0);
      if ($706) {
       $707 = ((($vowel_stress)) + 1|0);
       $708 = HEAP8[$707>>0]|0;
       $709 = $708 << 24 >> 24;
       $710 = ($709|0)>=(4);
       if ($710) {
        $711 = $1;
        $712 = ((($711)) + 1|0);
        $1 = $712;
        HEAP8[$711>>0] = 11;
        break;
       }
      }
      $713 = $1;
      $714 = ((($713)) + 1|0);
      $1 = $714;
      HEAP8[$713>>0] = 23;
     }
    }
   }
  }
 } while(0);
 $p = $phonetic;
 $post_tonic = 0;
 while(1) {
  $715 = $p;
  $716 = ((($715)) + 1|0);
  $p = $716;
  $717 = HEAP8[$715>>0]|0;
  $phcode = $717;
  $718 = $717&255;
  $719 = ($718|0)!=(0);
  if (!($719)) {
   break;
  }
  $720 = $1;
  $721 = $max_output;
  $722 = ($720>>>0)<($721>>>0);
  if (!($722)) {
   break;
  }
  $723 = $phcode;
  $724 = $723&255;
  $725 = (44552 + ($724<<2)|0);
  $726 = HEAP32[$725>>2]|0;
  $ph = $726;
  $727 = ($726|0)==(0|0);
  if ($727) {
   continue;
  }
  $728 = $ph;
  $729 = ((($728)) + 11|0);
  $730 = HEAP8[$729>>0]|0;
  $731 = $730&255;
  $732 = ($731|0)==(0);
  do {
   if ($732) {
    $733 = $0;
    $734 = ((($733)) + 8320|0);
    HEAP32[$734>>2] = 0;
   } else {
    $735 = $ph;
    $736 = ((($735)) + 11|0);
    $737 = HEAP8[$736>>0]|0;
    $738 = $737&255;
    $739 = ($738|0)==(2);
    if ($739) {
     $740 = $ph;
     $741 = ((($740)) + 4|0);
     $742 = HEAP32[$741>>2]|0;
     $743 = $742 & 1048576;
     $744 = ($743|0)!=(0);
     if ($744) {
      label = 204;
     }
    } else {
     label = 204;
    }
    if ((label|0) == 204) {
     label = 0;
     $745 = $p;
     $746 = HEAP8[$745>>0]|0;
     $747 = $746&255;
     $748 = ($747|0)==(20);
     if (!($748)) {
      break;
     }
    }
    $749 = $v;
    $750 = (($vowel_stress) + ($749)|0);
    $751 = HEAP8[$750>>0]|0;
    $752 = $751 << 24 >> 24;
    $v_stress = $752;
    $753 = $v_stress;
    $754 = $0;
    $755 = ((($754)) + 8320|0);
    HEAP32[$755>>2] = $753;
    $756 = $v;
    $757 = (($756) - 1)|0;
    $758 = (($vowel_stress) + ($757)|0);
    $759 = HEAP8[$758>>0]|0;
    $760 = $759 << 24 >> 24;
    $761 = $max_stress;
    $762 = ($760|0)>=($761|0);
    if ($762) {
     $post_tonic = 1;
    }
    $763 = $v_stress;
    $764 = ($763|0)<=(1);
    L285: do {
     if ($764) {
      $765 = $v;
      $766 = ($765|0)>(1);
      $767 = $max_stress;
      $768 = ($767|0)>=(2);
      $or$cond28 = $766 & $768;
      do {
       if ($or$cond28) {
        $769 = $stressflags;
        $770 = $769 & 4;
        $771 = ($770|0)!=(0);
        if (!($771)) {
         break;
        }
        $772 = $v;
        $773 = HEAP32[$vowel_count>>2]|0;
        $774 = (($773) - 1)|0;
        $775 = ($772|0)==($774|0);
        if (!($775)) {
         break;
        }
        $v_stress = 0;
        break L285;
       }
      } while(0);
      $776 = $stressflags;
      $777 = $776 & 2;
      $778 = ($777|0)!=(0);
      $779 = $v;
      $780 = ($779|0)==(1);
      $or$cond30 = $778 | $780;
      do {
       if (!($or$cond30)) {
        $781 = $v;
        $782 = HEAP32[$vowel_count>>2]|0;
        $783 = (($782) - 1)|0;
        $784 = ($781|0)==($783|0);
        if ($784) {
         break;
        }
        $785 = $v;
        $786 = HEAP32[$vowel_count>>2]|0;
        $787 = (($786) - 2)|0;
        $788 = ($785|0)==($787|0);
        do {
         if ($788) {
          $789 = HEAP32[$vowel_count>>2]|0;
          $790 = (($789) - 1)|0;
          $791 = (($vowel_stress) + ($790)|0);
          $792 = HEAP8[$791>>0]|0;
          $793 = $792 << 24 >> 24;
          $794 = ($793|0)<=(1);
          if (!($794)) {
           break;
          }
          $v_stress = 1;
          break L285;
         }
        } while(0);
        $795 = $v;
        $796 = (($795) - 1)|0;
        $797 = (($vowel_stress) + ($796)|0);
        $798 = HEAP8[$797>>0]|0;
        $799 = $798 << 24 >> 24;
        $800 = ($799|0)<(0);
        if (!($800)) {
         $801 = $stressflags;
         $802 = $801 & 65536;
         $803 = ($802|0)==(0);
         if (!($803)) {
          break L285;
         }
        }
        $v_stress = 0;
        $804 = $v_stress;
        $805 = $804&255;
        $806 = $v;
        $807 = (($vowel_stress) + ($806)|0);
        HEAP8[$807>>0] = $805;
        break L285;
       }
      } while(0);
      $v_stress = 1;
     }
    } while(0);
    $808 = $v_stress;
    $809 = ($808|0)==(0);
    $810 = $v_stress;
    $811 = ($810|0)>(1);
    $or$cond32 = $809 | $811;
    if ($or$cond32) {
     $812 = $v_stress;
     $813 = (18318 + ($812)|0);
     $814 = HEAP8[$813>>0]|0;
     $815 = $1;
     $816 = ((($815)) + 1|0);
     $1 = $816;
     HEAP8[$815>>0] = $814;
    }
    $817 = $v;
    $818 = (($vowel_stress) + ($817)|0);
    $819 = HEAP8[$818>>0]|0;
    $820 = $819 << 24 >> 24;
    $821 = $max_stress;
    $822 = ($820|0)>($821|0);
    if ($822) {
     $823 = $v;
     $824 = (($vowel_stress) + ($823)|0);
     $825 = HEAP8[$824>>0]|0;
     $826 = $825 << 24 >> 24;
     $max_stress = $826;
    }
    $827 = $p;
    $828 = HEAP8[$827>>0]|0;
    $829 = $828&255;
    $830 = ($829|0)==(12);
    do {
     if ($830) {
      $831 = $0;
      $832 = ((($831)) + 24|0);
      $833 = ((($832)) + 8|0);
      $834 = HEAP32[$833>>2]|0;
      $opt_length = $834;
      $835 = $834 & 1;
      $836 = ($835|0)!=(0);
      if (!($836)) {
       break;
      }
      $shorten = 0;
      $837 = $opt_length;
      $838 = $837 & 16;
      $839 = ($838|0)!=(0);
      do {
       if ($839) {
        $840 = $v;
        $841 = $max_stress_posn;
        $842 = ($840|0)!=($841|0);
        if (!($842)) {
         break;
        }
        $shorten = 1;
       } else {
        $843 = $v_stress;
        $844 = ($843|0)<(4);
        if (!($844)) {
         break;
        }
        $shorten = 1;
       }
      } while(0);
      $845 = $shorten;
      $846 = ($845|0)!=(0);
      if (!($846)) {
       break;
      }
      $847 = $p;
      $848 = ((($847)) + 1|0);
      $p = $848;
     }
    } while(0);
    $849 = $v_stress;
    $850 = ($849|0)>=(4);
    do {
     if ($850) {
      $851 = $0;
      $852 = ((($851)) + 24|0);
      $853 = ((($852)) + 8|0);
      $854 = HEAP32[$853>>2]|0;
      $855 = ($854|0)==(2);
      if (!($855)) {
       break;
      }
      $856 = $v;
      $857 = HEAP32[$vowel_count>>2]|0;
      $858 = (($857) - 2)|0;
      $859 = ($856|0)==($858|0);
      if (!($859)) {
       break;
      }
      $860 = $v;
      $861 = (($syllable_weight) + ($860)|0);
      $862 = HEAP8[$861>>0]|0;
      $863 = $862 << 24 >> 24;
      $864 = ($863|0)==(0);
      if (!($864)) {
       break;
      }
      $865 = $phcode;
      $866 = $1;
      $867 = ((($866)) + 1|0);
      $1 = $867;
      HEAP8[$866>>0] = $865;
      $phcode = 12;
     }
    } while(0);
    $868 = $v;
    $869 = (($868) + 1)|0;
    $v = $869;
   }
  } while(0);
  $870 = $phcode;
  $871 = $870&255;
  $872 = ($871|0)!=(1);
  if (!($872)) {
   continue;
  }
  $873 = $phcode;
  $874 = $1;
  $875 = ((($874)) + 1|0);
  $1 = $875;
  HEAP8[$874>>0] = $873;
 }
 $876 = $1;
 $877 = ((($876)) + 1|0);
 $1 = $877;
 HEAP8[$876>>0] = 0;
 STACKTOP = sp;return;
}
function __Z22ApplySpecialAttribute2P10TranslatorPci($tr,$phonemes,$dict_flags) {
 $tr = $tr|0;
 $phonemes = $phonemes|0;
 $dict_flags = $dict_flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $len = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $phonemes;
 $2 = $dict_flags;
 $3 = $1;
 $4 = (_strlen($3)|0);
 $len = $4;
 $5 = $0;
 $6 = ((($5)) + 24|0);
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $ix = 0;
 while(1) {
  $11 = $ix;
  $12 = $len;
  $13 = (($12) - 1)|0;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   label = 15;
   break;
  }
  $15 = $ix;
  $16 = $1;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(6);
  $21 = $ix;
  $22 = (($21) + 1)|0;
  if ($20) {
   break;
  }
  $ix = $22;
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = (($23) + ($22)|0);
 $p = $24;
 $25 = $2;
 $26 = $25 & 65536;
 $27 = ($26|0)!=(0);
 $28 = $p;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29 << 24 >> 24;
 if ($27) {
  $31 = (__Z11PhonemeCodej(69)|0);
  $32 = ($30|0)==($31|0);
  if ($32) {
   $33 = (__Z11PhonemeCodej(101)|0);
   $34 = $33&255;
   $35 = $p;
   HEAP8[$35>>0] = $34;
  }
  $36 = $p;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = (__Z11PhonemeCodej(79)|0);
  $40 = ($38|0)==($39|0);
  if (!($40)) {
   STACKTOP = sp;return;
  }
  $41 = (__Z11PhonemeCodej(111)|0);
  $42 = $41&255;
  $43 = $p;
  HEAP8[$43>>0] = $42;
  STACKTOP = sp;return;
 } else {
  $44 = (__Z11PhonemeCodej(101)|0);
  $45 = ($30|0)==($44|0);
  if ($45) {
   $46 = (__Z11PhonemeCodej(69)|0);
   $47 = $46&255;
   $48 = $p;
   HEAP8[$48>>0] = $47;
  }
  $49 = $p;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (__Z11PhonemeCodej(111)|0);
  $53 = ($51|0)==($52|0);
  if (!($53)) {
   STACKTOP = sp;return;
  }
  $54 = (__Z11PhonemeCodej(79)|0);
  $55 = $54&255;
  $56 = $p;
  HEAP8[$56>>0] = $55;
  STACKTOP = sp;return;
 }
}
function __Z12RemoveEndingP10TranslatorPciS1_($tr,$word,$end_type,$word_copy) {
 $tr = $tr|0;
 $word = $word|0;
 $end_type = $end_type|0;
 $word_copy = $word_copy|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end_flags = 0, $ending = 0, $i = 0;
 var $len = 0, $len_ending = 0, $p = 0, $vararg_buffer = 0, $word_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ending = sp + 44|0;
 $0 = $tr;
 $1 = $word;
 $2 = $end_type;
 $3 = $word_copy;
 $4 = $1;
 $word_end = $4;
 while(1) {
  $5 = $word_end;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(32);
  $9 = $word_end;
  if (!($8)) {
   break;
  }
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(69);
  if ($12) {
   $13 = $word_end;
   HEAP8[$13>>0] = 101;
  }
  $14 = $word_end;
  $15 = ((($14)) + 1|0);
  $word_end = $15;
 }
 $16 = $1;
 $17 = $9;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $i = $19;
 $20 = $3;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $3;
  $23 = $1;
  $24 = $i;
  _memcpy(($22|0),($23|0),($24|0))|0;
  $25 = $i;
  $26 = $3;
  $27 = (($26) + ($25)|0);
  HEAP8[$27>>0] = 0;
 }
 $28 = $2;
 $29 = $28 & 63;
 $i = $29;
 $len_ending = $29;
 while(1) {
  $30 = $i;
  $31 = ($30|0)>(0);
  if (!($31)) {
   break;
  }
  $32 = $word_end;
  $33 = ((($32)) + -1|0);
  $word_end = $33;
  while(1) {
   $34 = $word_end;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = $36 & 192;
   $38 = ($37|0)==(128);
   if (!($38)) {
    break;
   }
   $39 = $word_end;
   $40 = ((($39)) + -1|0);
   $word_end = $40;
   $41 = $len_ending;
   $42 = (($41) + 1)|0;
   $len_ending = $42;
  }
  $43 = $i;
  $44 = (($43) + -1)|0;
  $i = $44;
 }
 $i = 0;
 while(1) {
  $45 = $i;
  $46 = $len_ending;
  $47 = ($45|0)<($46|0);
  $48 = $i;
  $49 = ($48|0)<(49);
  $50 = $47 ? $49 : 0;
  $51 = $i;
  if (!($50)) {
   break;
  }
  $52 = $word_end;
  $53 = (($52) + ($51)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $i;
  $56 = (($ending) + ($55)|0);
  HEAP8[$56>>0] = $54;
  $57 = $i;
  $58 = $word_end;
  $59 = (($58) + ($57)|0);
  HEAP8[$59>>0] = 32;
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 $62 = (($ending) + ($51)|0);
 HEAP8[$62>>0] = 0;
 $63 = $word_end;
 $64 = ((($63)) + -1|0);
 $word_end = $64;
 $65 = $2;
 $66 = $65 & 65520;
 $67 = $66 | 4;
 $end_flags = $67;
 $68 = $2;
 $69 = $68 & 512;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = $word_end;
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = ($73|0)==(105);
  if ($74) {
   $75 = $word_end;
   HEAP8[$75>>0] = 121;
  }
 }
 $76 = $2;
 $77 = $76 & 256;
 $78 = ($77|0)!=(0);
 if ($78) {
  $79 = $0;
  $80 = ((($79)) + 324|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(28268);
  L29: do {
   if ($82) {
    $83 = $word_end;
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    $86 = $85 & 128;
    $87 = ($86|0)==(0);
    if ($87) {
     $88 = $word_end;
     $89 = ((($88)) + -1|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90 << 24 >> 24;
     $92 = $91 & 128;
     $93 = ($92|0)==(0);
     if ($93) {
      $94 = $0;
      $95 = $word_end;
      $96 = ((($95)) + -1|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = $97 << 24 >> 24;
      $99 = (__Z7IsVowelP10Translatori($94,$98)|0);
      $100 = ($99|0)!=(0);
      if ($100) {
       $101 = $0;
       $102 = $word_end;
       $103 = HEAP8[$102>>0]|0;
       $104 = $103 << 24 >> 24;
       $105 = (__ZL8IsLetterP10Translatorii($101,$104,2)|0);
       $106 = ($105|0)!=(0);
       if ($106) {
        $107 = $0;
        $108 = $word_end;
        $109 = ((($108)) + -2|0);
        $110 = HEAP8[$109>>0]|0;
        $111 = $110 << 24 >> 24;
        $112 = (__Z7IsVowelP10Translatori($107,$111)|0);
        $113 = ($112|0)!=(0);
        if (!($113)) {
         $114 = $word_end;
         $115 = HEAP8[$114>>0]|0;
         $116 = $word_end;
         $117 = ((($116)) + 1|0);
         HEAP8[$117>>0] = $115;
         $118 = $word_end;
         $119 = ((($118)) + -1|0);
         $120 = HEAP8[$119>>0]|0;
         $121 = $word_end;
         HEAP8[$121>>0] = $120;
         $122 = $word_end;
         $123 = ((($122)) + 2|0);
         HEAP8[$123>>0] = 32;
        }
       }
      }
     }
    }
   } else {
    $124 = $0;
    $125 = ((($124)) + 324|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(25966);
    $128 = $0;
    if (!($127)) {
     $179 = ((($128)) + 316|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($180|0)!=(0);
     if (!($181)) {
      break;
     }
     $182 = $end_flags;
     $183 = $182 | 16;
     $end_flags = $183;
     break;
    }
    $129 = $word_end;
    $130 = ((($129)) + -1|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131 << 24 >> 24;
    $133 = (__ZL8IsLetterP10Translatorii($128,$132,7)|0);
    $134 = ($133|0)!=(0);
    if ($134) {
     $135 = $0;
     $136 = $word_end;
     $137 = HEAP8[$136>>0]|0;
     $138 = $137 << 24 >> 24;
     $139 = (__ZL8IsLetterP10Translatorii($135,$138,1)|0);
     $140 = ($139|0)!=(0);
     if ($140) {
      $i = 0;
      while(1) {
       $141 = $i;
       $142 = (804 + ($141<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $p = $143;
       $144 = ($143|0)!=(0|0);
       if (!($144)) {
        break;
       }
       $145 = $p;
       $146 = (_strlen($145)|0);
       $len = $146;
       $147 = $p;
       $148 = $len;
       $149 = (1 - ($148))|0;
       $150 = $word_end;
       $151 = (($150) + ($149)|0);
       $152 = $len;
       $153 = (_memcmp($147,$151,$152)|0);
       $154 = ($153|0)==(0);
       if ($154) {
        break;
       }
       $155 = $i;
       $156 = (($155) + 1)|0;
       $i = $156;
      }
      $157 = $p;
      $158 = ($157|0)==(0|0);
      if (!($158)) {
       break;
      }
      $159 = $end_flags;
      $160 = $159 | 16;
      $end_flags = $160;
      break;
     }
    }
    $i = 0;
    while(1) {
     $161 = $i;
     $162 = (812 + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $p = $163;
     $164 = ($163|0)!=(0|0);
     if (!($164)) {
      break L29;
     }
     $165 = $p;
     $166 = (_strlen($165)|0);
     $len = $166;
     $167 = $p;
     $168 = $len;
     $169 = (1 - ($168))|0;
     $170 = $word_end;
     $171 = (($170) + ($169)|0);
     $172 = $len;
     $173 = (_memcmp($167,$171,$172)|0);
     $174 = ($173|0)==(0);
     if ($174) {
      break;
     }
     $177 = $i;
     $178 = (($177) + 1)|0;
     $i = $178;
    }
    $175 = $end_flags;
    $176 = $175 | 16;
    $end_flags = $176;
   }
  } while(0);
  $184 = $end_flags;
  $185 = $184 & 16;
  $186 = ($185|0)!=(0);
  if ($186) {
   $187 = $0;
   $188 = ((($187)) + 316|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $word_end;
   $191 = ((($190)) + 1|0);
   (__Z8utf8_outjPc($189,$191)|0);
   $192 = HEAP32[19040]|0;
   $193 = $192 & 8;
   $194 = ($193|0)!=(0);
   if ($194) {
    $195 = HEAP32[19037]|0;
    (_fprintf($195,18413,$vararg_buffer)|0);
   }
  }
 }
 $196 = $2;
 $197 = $196 & 2048;
 $198 = ($197|0)!=(0);
 if ($198) {
  $199 = $0;
  $200 = ((($199)) + 8304|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)==(0);
  if ($202) {
   $203 = $0;
   $204 = ((($203)) + 8304|0);
   HEAP32[$204>>2] = 1;
  }
 }
 $205 = (_strcmp($ending,20559)|0);
 $206 = ($205|0)==(0);
 if ($206) {
  label = 52;
 } else {
  $207 = (_strcmp($ending,23056)|0);
  $208 = ($207|0)==(0);
  if ($208) {
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $209 = $end_flags;
  $210 = $209 | 8;
  $end_flags = $210;
 }
 $211 = HEAP8[$ending>>0]|0;
 $212 = $211 << 24 >> 24;
 $213 = ($212|0)==(39);
 if (!($213)) {
  $216 = $end_flags;
  STACKTOP = sp;return ($216|0);
 }
 $214 = $end_flags;
 $215 = $214 & -5;
 $end_flags = $215;
 $216 = $end_flags;
 STACKTOP = sp;return ($216|0);
}
function __Z11CalcPitchesP10Translatori($tr,$clause_type) {
 $tr = $tr|0;
 $clause_type = $clause_type|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count = 0, $count_primary = 0, $group_tone = 0, $group_tone_comma = 0, $group_tone_emph = 0, $ix = 0, $n_primary = 0, $n_st = 0, $option = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $p = 0, $ph = 0, $ph_end = 0, $ph_start = 0, $st_clause_end = 0;
 var $st_ix = 0, $st_start = 0, $syl = 0, $syllable_tab2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $syllable_tab2 = sp + 80|0;
 $0 = $tr;
 $1 = $clause_type;
 $ph_start = 0;
 $2 = HEAP32[12657]|0;
 $ph_end = $2;
 HEAP32[10355] = $syllable_tab2;
 $n_st = 0;
 $n_primary = 0;
 $ix = 0;
 while(1) {
  $3 = $ix;
  $4 = HEAP32[12657]|0;
  $5 = (($4) - 1)|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $ix;
  $8 = (50632 + (($7*24)|0)|0);
  $p = $8;
  $9 = $p;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $11 & 4;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $n_st;
   $15 = HEAP32[10355]|0;
   $16 = (($15) + (($14*6)|0)|0);
   $17 = ((($16)) + 2|0);
   HEAP8[$17>>0] = 0;
   $18 = $n_st;
   $19 = HEAP32[10355]|0;
   $20 = (($19) + (($18*6)|0)|0);
   $21 = ((($20)) + 1|0);
   HEAP8[$21>>0] = 0;
   $22 = $ix;
   $23 = (($22) + 1)|0;
   $24 = (50632 + (($23*24)|0)|0);
   $25 = ((($24)) + 17|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $n_st;
   $28 = HEAP32[10355]|0;
   $29 = (($28) + (($27*6)|0)|0);
   $30 = ((($29)) + 3|0);
   HEAP8[$30>>0] = $26;
   $31 = $p;
   $32 = ((($31)) + 3|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $n_st;
   $35 = (($34) + 1)|0;
   $n_st = $35;
   $36 = HEAP32[10355]|0;
   $37 = (($36) + (($34*6)|0)|0);
   HEAP8[$37>>0] = $33;
   $38 = $p;
   $39 = ((($38)) + 3|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)>=(4);
   if ($42) {
    $43 = $n_primary;
    $44 = (($43) + 1)|0;
    $n_primary = $44;
   }
  } else {
   $45 = $p;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 10|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==(27);
   $52 = $n_st;
   $53 = ($52|0)>(0);
   $or$cond = $51 & $53;
   if ($or$cond) {
    $54 = $n_st;
    $55 = (($54) - 1)|0;
    $56 = HEAP32[10355]|0;
    $57 = (($56) + (($55*6)|0)|0);
    $58 = ((($57)) + 2|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = $60 | 4;
    $62 = $61&255;
    HEAP8[$58>>0] = $62;
   }
  }
  $63 = $ix;
  $64 = (($63) + 1)|0;
  $ix = $64;
 }
 $65 = $n_st;
 $66 = HEAP32[10355]|0;
 $67 = (($66) + (($65*6)|0)|0);
 HEAP8[$67>>0] = 0;
 $68 = $n_st;
 $69 = ($68|0)==(0);
 if ($69) {
  STACKTOP = sp;return;
 }
 $70 = $0;
 $71 = ((($70)) + 244|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(1);
 $74 = $0;
 if ($73) {
  $75 = $1;
  __ZL16CalcPitches_ToneP10Translatori($74,$75);
  STACKTOP = sp;return;
 }
 $76 = ((($74)) + 248|0);
 $77 = HEAP32[$76>>2]|0;
 $option = $77;
 $78 = $option;
 $79 = ($78|0)>=(8);
 $$ = $79 ? 1 : $77;
 $option = $$;
 $80 = $option;
 $81 = ($80|0)==(0);
 $82 = $1;
 if ($81) {
  $83 = $0;
  $84 = ((($83)) + 252|0);
  $85 = (($84) + ($82)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $group_tone = $87;
  $88 = $0;
  $89 = ((($88)) + 252|0);
  $90 = ((($89)) + 5|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $group_tone_emph = $92;
  $93 = $0;
  $94 = ((($93)) + 252|0);
  $95 = ((($94)) + 1|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $group_tone_comma = $97;
 } else {
  $98 = $option;
  $99 = $0;
  $100 = ((($99)) + 756|0);
  $101 = (($100) + (($98*6)|0)|0);
  $102 = (($101) + ($82)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $group_tone = $104;
  $105 = $option;
  $106 = $0;
  $107 = ((($106)) + 756|0);
  $108 = (($107) + (($105*6)|0)|0);
  $109 = ((($108)) + 5|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $group_tone_emph = $111;
  $112 = $option;
  $113 = $0;
  $114 = ((($113)) + 756|0);
  $115 = (($114) + (($112*6)|0)|0);
  $116 = ((($115)) + 1|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $group_tone_comma = $118;
 }
 $119 = $1;
 $120 = ($119|0)==(4);
 if ($120) {
  HEAP32[10356] = 1;
 } else {
  HEAP32[10356] = 0;
 }
 $st_start = 0;
 $count_primary = 0;
 $st_ix = 0;
 while(1) {
  $121 = $st_ix;
  $122 = $n_st;
  $123 = ($121|0)<($122|0);
  if (!($123)) {
   break;
  }
  $124 = $st_ix;
  $125 = HEAP32[10355]|0;
  $126 = (($125) + (($124*6)|0)|0);
  $syl = $126;
  $127 = $syl;
  $128 = HEAP8[$127>>0]|0;
  $129 = $128 << 24 >> 24;
  $130 = ($129|0)>=(4);
  if ($130) {
   $131 = $count_primary;
   $132 = (($131) + 1)|0;
   $count_primary = $132;
  }
  $133 = $syl;
  $134 = HEAP8[$133>>0]|0;
  $135 = $134 << 24 >> 24;
  $136 = ($135|0)==(6);
  L32: do {
   if ($136) {
    $137 = $st_ix;
    $138 = (($137) - 1)|0;
    $ix = $138;
    while(1) {
     $139 = $ix;
     $140 = $st_start;
     $141 = ($139|0)>=($140|0);
     if (!($141)) {
      break;
     }
     $142 = $ix;
     $143 = $st_ix;
     $144 = (($143) - 3)|0;
     $145 = ($142|0)>=($144|0);
     if (!($145)) {
      break;
     }
     $146 = $ix;
     $147 = HEAP32[10355]|0;
     $148 = (($147) + (($146*6)|0)|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149 << 24 >> 24;
     $151 = ($150|0)==(6);
     if ($151) {
      break;
     }
     $152 = $ix;
     $153 = HEAP32[10355]|0;
     $154 = (($153) + (($152*6)|0)|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155 << 24 >> 24;
     $157 = ($156|0)==(4);
     $158 = $ix;
     if ($157) {
      label = 28;
      break;
     }
     $161 = (($158) + -1)|0;
     $ix = $161;
    }
    if ((label|0) == 28) {
     label = 0;
     $159 = HEAP32[10355]|0;
     $160 = (($159) + (($158*6)|0)|0);
     HEAP8[$160>>0] = 3;
    }
    $162 = $st_ix;
    $163 = (($162) + 1)|0;
    $ix = $163;
    while(1) {
     $164 = $ix;
     $165 = $n_st;
     $166 = ($164|0)<($165|0);
     if (!($166)) {
      break L32;
     }
     $167 = $ix;
     $168 = HEAP32[10355]|0;
     $169 = (($168) + (($167*6)|0)|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = $170 << 24 >> 24;
     $172 = ($171|0)==(4);
     if ($172) {
      break L32;
     }
     $173 = $ix;
     $174 = HEAP32[10355]|0;
     $175 = (($174) + (($173*6)|0)|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176 << 24 >> 24;
     $178 = ($177|0)==(6);
     if ($178) {
      break;
     }
     $184 = $ix;
     $185 = (($184) + 1)|0;
     $ix = $185;
    }
    $179 = $st_ix;
    $180 = HEAP32[10355]|0;
    $181 = (($180) + (($179*6)|0)|0);
    $182 = ((($181)) + 2|0);
    HEAP8[$182>>0] = 2;
    $183 = $syl;
    HEAP8[$183>>0] = 5;
   }
  } while(0);
  $186 = $syl;
  $187 = HEAP8[$186>>0]|0;
  $188 = $187 << 24 >> 24;
  $189 = ($188|0)==(6);
  if ($189) {
   $190 = $st_ix;
   $191 = HEAP32[10355]|0;
   $192 = (($191) + (($190*6)|0)|0);
   $193 = ((($192)) + 2|0);
   HEAP8[$193>>0] = 2;
   $count = 0;
   $194 = $n_primary;
   $195 = $count_primary;
   $196 = (($194) - ($195))|0;
   $197 = ($196|0)>(1);
   $$2 = $197 ? 1 : 0;
   $count = $$2;
   $198 = $st_ix;
   $199 = (($198) + 1)|0;
   $ix = $199;
   while(1) {
    $200 = $ix;
    $201 = $n_st;
    $202 = ($200|0)<($201|0);
    if (!($202)) {
     break;
    }
    $203 = $ix;
    $204 = HEAP32[10355]|0;
    $205 = (($204) + (($203*6)|0)|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206 << 24 >> 24;
    $208 = ($207|0)>(4);
    if ($208) {
     break;
    }
    $209 = $ix;
    $210 = HEAP32[10355]|0;
    $211 = (($210) + (($209*6)|0)|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212 << 24 >> 24;
    $214 = ($213|0)==(4);
    if ($214) {
     $215 = $count;
     $216 = (($215) + 1)|0;
     $count = $216;
     $217 = $count;
     $218 = ($217|0)>(1);
     if ($218) {
      break;
     }
    }
    $219 = $ix;
    $220 = (($219) + 1)|0;
    $ix = $220;
   }
   $221 = $st_start;
   $222 = $ix;
   $223 = $n_st;
   __ZL18count_pitch_vowelsiii($221,$222,$223);
   $224 = $ix;
   $225 = $n_st;
   $226 = ($224|0)<($225|0);
   $227 = $1;
   $228 = ($227|0)==(0);
   $or$cond4 = $226 | $228;
   $229 = $option;
   $230 = $st_start;
   $231 = $ix;
   $232 = $group_tone;
   (__ZL12calc_pitchesiiii($229,$230,$231,$232)|0);
   do {
    if ($or$cond4) {
     $233 = $1;
     $234 = ($233|0)==(1);
     $235 = $1;
     $236 = ($235|0)==(2);
     $or$cond6 = $234 | $236;
     $237 = $0;
     $238 = ((($237)) + 252|0);
     if ($or$cond6) {
      $239 = ((($238)) + 1|0);
      $240 = HEAP8[$239>>0]|0;
      $241 = $240&255;
      $group_tone = $241;
      break;
     } else {
      $242 = HEAP8[$238>>0]|0;
      $243 = $242&255;
      $group_tone = $243;
      break;
     }
    }
   } while(0);
   $244 = $ix;
   $st_start = $244;
  }
  $245 = $st_start;
  $246 = $st_ix;
  $247 = ($245|0)<($246|0);
  if ($247) {
   $248 = $syl;
   $249 = ((($248)) + 2|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = $250 << 24 >> 24;
   $252 = $251 & 4;
   $253 = ($252|0)!=(0);
   if ($253) {
    $254 = $st_ix;
    $255 = (($254) + 1)|0;
    $st_clause_end = $255;
    $256 = $st_start;
    $257 = $st_clause_end;
    $258 = $st_clause_end;
    __ZL18count_pitch_vowelsiii($256,$257,$258);
    $259 = $option;
    $260 = $st_start;
    $261 = $st_clause_end;
    $262 = $group_tone_comma;
    (__ZL12calc_pitchesiiii($259,$260,$261,$262)|0);
    $263 = $st_clause_end;
    $st_start = $263;
   }
  }
  $264 = $st_ix;
  $265 = (($264) + 1)|0;
  $st_ix = $265;
 }
 $266 = $st_start;
 $267 = $st_ix;
 $268 = ($266|0)<($267|0);
 if ($268) {
  $269 = $st_start;
  $270 = $st_ix;
  $271 = $n_st;
  __ZL18count_pitch_vowelsiii($269,$270,$271);
  $272 = $option;
  $273 = $st_start;
  $274 = $st_ix;
  $275 = $group_tone;
  (__ZL12calc_pitchesiiii($272,$273,$274,$275)|0);
 }
 $st_ix = 0;
 $276 = $ph_start;
 $ix = $276;
 while(1) {
  $277 = $ix;
  $278 = $ph_end;
  $279 = ($277|0)<($278|0);
  if (!($279)) {
   break;
  }
  $280 = $ix;
  $281 = (50632 + (($280*24)|0)|0);
  $p = $281;
  $282 = $st_ix;
  $283 = HEAP32[10355]|0;
  $284 = (($283) + (($282*6)|0)|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = $p;
  $287 = ((($286)) + 3|0);
  HEAP8[$287>>0] = $285;
  $288 = $p;
  $289 = HEAP16[$288>>1]|0;
  $290 = $289&65535;
  $291 = $290 & 4;
  $292 = ($291|0)!=(0);
  if ($292) {
   $293 = $st_ix;
   $294 = HEAP32[10355]|0;
   $295 = (($294) + (($293*6)|0)|0);
   $syl = $295;
   $296 = $syl;
   $297 = ((($296)) + 4|0);
   $298 = HEAP8[$297>>0]|0;
   $299 = $p;
   $300 = ((($299)) + 22|0);
   HEAP8[$300>>0] = $298;
   $301 = $syl;
   $302 = ((($301)) + 5|0);
   $303 = HEAP8[$302>>0]|0;
   $304 = $p;
   $305 = ((($304)) + 23|0);
   HEAP8[$305>>0] = $303;
   $306 = $p;
   $307 = ((($306)) + 16|0);
   HEAP8[$307>>0] = 0;
   $308 = $syl;
   $309 = ((($308)) + 2|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = $310 << 24 >> 24;
   $312 = $311 & 1;
   $313 = ($312|0)!=(0);
   $314 = $p;
   if ($313) {
    $315 = ((($314)) + 16|0);
    HEAP8[$315>>0] = 2;
   } else {
    $316 = ((($314)) + 3|0);
    $317 = HEAP8[$316>>0]|0;
    $318 = $317&255;
    $319 = ($318|0)>(5);
    if ($319) {
     $320 = $syl;
     $321 = ((($320)) + 1|0);
     $322 = HEAP8[$321>>0]|0;
     $323 = $p;
     $324 = ((($323)) + 16|0);
     HEAP8[$324>>0] = $322;
    }
   }
   $325 = $p;
   $326 = ((($325)) + 22|0);
   $327 = HEAP8[$326>>0]|0;
   $328 = $327&255;
   $329 = $p;
   $330 = ((($329)) + 23|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = ($328|0)>($332|0);
   if ($333) {
    $334 = $p;
    $335 = ((($334)) + 22|0);
    $336 = HEAP8[$335>>0]|0;
    $337 = $336&255;
    $x = $337;
    $338 = $p;
    $339 = ((($338)) + 23|0);
    $340 = HEAP8[$339>>0]|0;
    $341 = $p;
    $342 = ((($341)) + 22|0);
    HEAP8[$342>>0] = $340;
    $343 = $x;
    $344 = $343&255;
    $345 = $p;
    $346 = ((($345)) + 23|0);
    HEAP8[$346>>0] = $344;
   }
   $347 = $p;
   $348 = ((($347)) + 7|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = ($349<<24>>24)!=(0);
   if ($350) {
    $351 = $p;
    $352 = ((($351)) + 7|0);
    $353 = HEAP8[$352>>0]|0;
    $354 = $353&255;
    $355 = (44552 + ($354<<2)|0);
    $356 = HEAP32[$355>>2]|0;
    $ph = $356;
    $357 = $p;
    $358 = ((($357)) + 22|0);
    $359 = HEAP8[$358>>0]|0;
    $360 = $359&255;
    $361 = $p;
    $362 = ((($361)) + 23|0);
    $363 = HEAP8[$362>>0]|0;
    $364 = $363&255;
    $365 = (($360) + ($364))|0;
    $366 = (($365|0) / 2)&-1;
    $x = $366;
    $367 = $x;
    $368 = $ph;
    $369 = ((($368)) + 13|0);
    $370 = HEAP8[$369>>0]|0;
    $371 = $370&255;
    $372 = (($367) + ($371))|0;
    $373 = $372&255;
    $374 = $p;
    $375 = ((($374)) + 23|0);
    HEAP8[$375>>0] = $373;
    $376 = $x;
    $377 = $ph;
    $378 = ((($377)) + 12|0);
    $379 = HEAP8[$378>>0]|0;
    $380 = $379&255;
    $381 = (($376) + ($380))|0;
    $382 = $381&255;
    $383 = $p;
    $384 = ((($383)) + 22|0);
    HEAP8[$384>>0] = $382;
   }
   $385 = $syl;
   $386 = ((($385)) + 2|0);
   $387 = HEAP8[$386>>0]|0;
   $388 = $387 << 24 >> 24;
   $389 = $388 & 2;
   $390 = ($389|0)!=(0);
   if ($390) {
    $391 = $p;
    $392 = ((($391)) + 3|0);
    $393 = HEAP8[$392>>0]|0;
    $394 = $393&255;
    $395 = $394 | 8;
    $396 = $395&255;
    HEAP8[$392>>0] = $396;
   }
   $397 = $st_ix;
   $398 = (($397) + 1)|0;
   $st_ix = $398;
  }
  $399 = $ix;
  $400 = (($399) + 1)|0;
  $ix = $400;
 }
 STACKTOP = sp;return;
}
function __ZL16CalcPitches_ToneP10Translatori($tr,$clause_tone) {
 $tr = $tr|0;
 $clause_tone = $clause_tone|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count_stressed = 0, $final_stressed = 0, $ix = 0, $or$cond = 0, $p = 0, $pause = 0, $pitch_adjust = 0, $pitch_decrement = 0, $pitch_high = 0, $pitch_low = 0, $prev_p = 0;
 var $prev_tph = 0, $prevw_tph = 0, $tone_ph = 0, $tone_promoted = 0, $tph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $clause_tone;
 $count_stressed = 0;
 $final_stressed = 0;
 $pitch_adjust = 0;
 $pitch_decrement = 0;
 $pitch_low = 0;
 $pitch_high = 0;
 $p = 50632;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[12657]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $p;
  $6 = ((($5)) + 17|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(2);
  if ($9) {
   $10 = $p;
   $11 = ((($10)) + 3|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)>=(4);
   if ($14) {
    $15 = $count_stressed;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $ix;
     $final_stressed = $17;
    }
    $18 = $p;
    $19 = ((($18)) + 3|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = ($21|0)>=(4);
    if ($22) {
     $23 = $ix;
     $final_stressed = $23;
     $24 = $count_stressed;
     $25 = (($24) + 1)|0;
     $count_stressed = $25;
    }
   }
  }
  $26 = $ix;
  $27 = (($26) + 1)|0;
  $ix = $27;
  $28 = $p;
  $29 = ((($28)) + 24|0);
  $p = $29;
 }
 $30 = $final_stressed;
 $31 = (50632 + (($30*24)|0)|0);
 $32 = ((($31)) + 3|0);
 HEAP8[$32>>0] = 7;
 $33 = $0;
 $34 = ((($33)) + 324|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(30313);
 if ($36) {
  $37 = $final_stressed;
  $38 = (50632 + (($37*24)|0)|0);
  $p = $38;
  $39 = $p;
  $40 = ((($39)) + 7|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = (__Z11PhonemeCodej(55)|0);
   $45 = $44&255;
   $46 = $p;
   $47 = ((($46)) + 7|0);
   HEAP8[$47>>0] = $45;
  }
 }
 $pause = 1;
 $tone_promoted = 0;
 $p = 50632;
 $prev_p = 50632;
 $48 = HEAP32[(44588)>>2]|0;
 $prevw_tph = $48;
 $prev_tph = $48;
 $ix = 0;
 while(1) {
  $49 = $ix;
  $50 = HEAP32[12657]|0;
  $51 = ($49|0)<($50|0);
  if (!($51)) {
   break;
  }
  $52 = $p;
  $53 = ((($52)) + 17|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $p;
   $58 = ((($57)) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($59)) + 14|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)>(50);
   if ($63) {
    $pause = 1;
    $64 = HEAP32[(44588)>>2]|0;
    $prevw_tph = $64;
   }
  }
  $65 = $p;
  $66 = ((($65)) + 21|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ($67<<24>>24)!=(0);
  if ($68) {
   $69 = HEAP32[(44588)>>2]|0;
   $prev_tph = $69;
  }
  $70 = $p;
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = $72 & 4;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $p;
   $76 = ((($75)) + 7|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $tone_ph = $78;
   $79 = $tone_ph;
   $80 = (44552 + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $tph = $81;
   $82 = $0;
   $83 = ((($82)) + 324|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(31336);
   if ($85) {
    $86 = $tone_ph;
    $87 = ($86|0)==(0);
    if ($87) {
     $88 = $pause;
     $89 = ($88|0)!=(0);
     $90 = $tone_promoted;
     $91 = ($90|0)!=(0);
     $or$cond = $89 | $91;
     if ($or$cond) {
      $92 = (__Z11PhonemeCodej(13621)|0);
      $tone_ph = $92;
      $tone_promoted = 1;
     } else {
      $93 = (__Z11PhonemeCodej(12593)|0);
      $tone_ph = $93;
     }
     $94 = $tone_ph;
     $95 = $94&255;
     $96 = $p;
     $97 = ((($96)) + 7|0);
     HEAP8[$97>>0] = $95;
     $98 = $tone_ph;
     $99 = (44552 + ($98<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $tph = $100;
    } else {
     $tone_promoted = 0;
    }
    $101 = $ix;
    $102 = $final_stressed;
    $103 = ($101|0)==($102|0);
    do {
     if ($103) {
      $104 = $tph;
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(13621);
      if (!($106)) {
       $107 = $tph;
       $108 = HEAP32[$107>>2]|0;
       $109 = ($108|0)==(12597);
       if (!($109)) {
        break;
       }
      }
      $110 = $final_stressed;
      $111 = (50632 + (($110*24)|0)|0);
      $112 = ((($111)) + 3|0);
      HEAP8[$112>>0] = 6;
     }
    } while(0);
    $113 = $prevw_tph;
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(3420466);
    do {
     if ($115) {
      $116 = $tph;
      $117 = HEAP32[$116>>2]|0;
      $118 = ($117|0)==(3420466);
      if ($118) {
       $119 = (__Z11PhonemeCodej(13619)|0);
       $120 = $119&255;
       $121 = $prev_p;
       $122 = ((($121)) + 7|0);
       HEAP8[$122>>0] = $120;
       break;
      } else {
       $123 = (__Z11PhonemeCodej(12594)|0);
       $124 = $123&255;
       $125 = $prev_p;
       $126 = ((($125)) + 7|0);
       HEAP8[$126>>0] = $124;
       break;
      }
     }
    } while(0);
    $127 = $prev_tph;
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==(12597);
    if ($129) {
     $130 = $tph;
     $131 = HEAP32[$130>>2]|0;
     $132 = ($131|0)==(12597);
     if ($132) {
      $133 = (__Z11PhonemeCodej(13109)|0);
      $134 = $133&255;
      $135 = $prev_p;
      $136 = ((($135)) + 7|0);
      HEAP8[$136>>0] = $134;
     }
    }
    $137 = $tph;
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)==(12593);
    if ($139) {
     $140 = $prevw_tph;
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==(13621);
     if ($142) {
      $143 = (__Z11PhonemeCodej(12850)|0);
      $144 = $143&255;
      $145 = $p;
      $146 = ((($145)) + 7|0);
      HEAP8[$146>>0] = $144;
     }
     $147 = $prevw_tph;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==(13619);
     if ($149) {
      $150 = (__Z11PhonemeCodej(13107)|0);
      $151 = $150&255;
      $152 = $p;
      $153 = ((($152)) + 7|0);
      HEAP8[$153>>0] = $151;
     }
     $154 = $prevw_tph;
     $155 = HEAP32[$154>>2]|0;
     $156 = ($155|0)==(3420466);
     if ($156) {
      $157 = (__Z11PhonemeCodej(13364)|0);
      $158 = $157&255;
      $159 = $p;
      $160 = ((($159)) + 7|0);
      HEAP8[$160>>0] = $158;
     }
     $161 = $p;
     $162 = ((($161)) + 3|0);
     HEAP8[$162>>0] = 0;
    }
   }
   $163 = $p;
   $prev_p = $163;
   $164 = $tph;
   $prev_tph = $164;
   $prevw_tph = $164;
   $pause = 0;
  }
  $165 = $ix;
  $166 = (($165) + 1)|0;
  $ix = $166;
  $167 = $p;
  $168 = ((($167)) + 24|0);
  $p = $168;
 }
 $p = 50632;
 $ix = 0;
 while(1) {
  $169 = $ix;
  $170 = HEAP32[12657]|0;
  $171 = ($169|0)<($170|0);
  if (!($171)) {
   break;
  }
  $172 = $p;
  $173 = HEAP16[$172>>1]|0;
  $174 = $173&65535;
  $175 = $174 & 4;
  $176 = ($175|0)!=(0);
  if ($176) {
   $177 = $p;
   $178 = ((($177)) + 7|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $tone_ph = $180;
   $181 = $p;
   $182 = ((($181)) + 3|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = ($184|0)!=(0);
   do {
    if ($185) {
     $186 = $ix;
     $187 = $final_stressed;
     $188 = ($186|0)==($187|0);
     if ($188) {
      $189 = $pitch_low;
      $pitch_adjust = $189;
      break;
     }
     $190 = $pitch_decrement;
     $191 = $pitch_adjust;
     $192 = (($191) - ($190))|0;
     $pitch_adjust = $192;
     $193 = $pitch_adjust;
     $194 = $pitch_low;
     $195 = ($193|0)<=($194|0);
     if ($195) {
      $196 = $pitch_high;
      $pitch_adjust = $196;
     }
    }
   } while(0);
   $197 = $tone_ph;
   $198 = ($197|0)==(0);
   if ($198) {
    $tone_ph = 17;
    $199 = $tone_ph;
    $200 = $199&255;
    $201 = $p;
    $202 = ((($201)) + 7|0);
    HEAP8[$202>>0] = $200;
   }
   $203 = $pitch_adjust;
   $204 = $tone_ph;
   $205 = (44552 + ($204<<2)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($206)) + 12|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = (($203) + ($209))|0;
   $211 = $210&255;
   $212 = $p;
   $213 = ((($212)) + 22|0);
   HEAP8[$213>>0] = $211;
   $214 = $pitch_adjust;
   $215 = $tone_ph;
   $216 = (44552 + ($215<<2)|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($217)) + 13|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = (($214) + ($220))|0;
   $222 = $221&255;
   $223 = $p;
   $224 = ((($223)) + 23|0);
   HEAP8[$224>>0] = $222;
  }
  $225 = $ix;
  $226 = (($225) + 1)|0;
  $ix = $226;
  $227 = $p;
  $228 = ((($227)) + 24|0);
  $p = $228;
 }
 STACKTOP = sp;return;
}
function __ZL18count_pitch_vowelsiii($start,$end,$clause_end) {
 $start = $start|0;
 $end = $end|0;
 $clause_end = $clause_end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $max_stress = 0, $max_stress_posn = 0, $max_stress_posn2 = 0, $stress = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start;
 $1 = $end;
 $2 = $clause_end;
 $max_stress = 0;
 $max_stress_posn = 0;
 $max_stress_posn2 = 0;
 HEAP32[10357] = -1;
 HEAP32[10358] = 0;
 HEAP32[10359] = 0;
 HEAP32[10360] = -1;
 $3 = $0;
 $ix = $3;
 while(1) {
  $4 = $ix;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $ix;
  $8 = HEAP32[10355]|0;
  $9 = (($8) + (($7*6)|0)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $stress = $11;
  $12 = $stress;
  $13 = $max_stress;
  $14 = ($12|0)>=($13|0);
  if ($14) {
   $15 = $stress;
   $16 = $max_stress;
   $17 = ($15|0)>($16|0);
   if ($17) {
    $18 = $ix;
    $max_stress_posn2 = $18;
   } else {
    $19 = $max_stress_posn;
    $max_stress_posn2 = $19;
   }
   $20 = $ix;
   $max_stress_posn = $20;
   $21 = $stress;
   $max_stress = $21;
  }
  $22 = $stress;
  $23 = ($22|0)>=(4);
  if ($23) {
   $24 = HEAP32[10357]|0;
   $25 = ($24|0)<(0);
   if ($25) {
    $26 = $ix;
    $27 = $0;
    $28 = (($26) - ($27))|0;
    HEAP32[10357] = $28;
   }
   $29 = $ix;
   HEAP32[10360] = $29;
  }
  $30 = $ix;
  $31 = (($30) + 1)|0;
  $ix = $31;
 }
 $32 = HEAP32[10357]|0;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = $1;
  HEAP32[10357] = $34;
 }
 $35 = $1;
 $36 = $max_stress_posn;
 $37 = (($35) - ($36))|0;
 $38 = (($37) - 1)|0;
 HEAP32[10359] = $38;
 $39 = $max_stress_posn;
 HEAP32[10361] = $39;
 $40 = $max_stress_posn2;
 HEAP32[10362] = $40;
 $41 = HEAP32[10356]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $1;
  HEAP32[10362] = $43;
  HEAP32[10361] = $43;
  STACKTOP = sp;return;
 }
 $44 = HEAP32[10360]|0;
 $45 = ($44|0)>=(0);
 if (!($45)) {
  $52 = HEAP32[10361]|0;
  $53 = HEAP32[10355]|0;
  $54 = (($53) + (($52*6)|0)|0);
  HEAP8[$54>>0] = 7;
  STACKTOP = sp;return;
 }
 $46 = $1;
 $47 = $2;
 $48 = ($46|0)==($47|0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = HEAP32[10360]|0;
 $50 = HEAP32[10355]|0;
 $51 = (($50) + (($49*6)|0)|0);
 HEAP8[$51>>0] = 7;
 STACKTOP = sp;return;
}
function __ZL12calc_pitchesiiii($control,$start,$end,$tune_number) {
 $control = $control|0;
 $start = $start|0;
 $end = $end|0;
 $tune_number = $tune_number|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $continuing = 0, $drop = 0, $ix = 0, $th = 0, $tn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $control;
 $2 = $start;
 $3 = $end;
 $4 = $tune_number;
 $continuing = 0;
 $5 = $1;
 $6 = ($5|0)==(0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  $9 = $4;
  $10 = (__ZL13calc_pitches2iii($7,$8,$9)|0);
  $0 = $10;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $11 = ($7|0)>(0);
 if ($11) {
  $continuing = 1;
 }
 $12 = $4;
 $13 = (988 + ($12<<4)|0);
 $th = $13;
 $14 = $4;
 $15 = (1196 + ($14<<4)|0);
 $tn = $15;
 $16 = $2;
 $ix = $16;
 $17 = $ix;
 $18 = $ix;
 $19 = HEAP32[10357]|0;
 $20 = (($18) + ($19))|0;
 $21 = $th;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $th;
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 __ZL16SetPitchGradientiiii($17,$20,$23,$27);
 $28 = HEAP32[10357]|0;
 $29 = $ix;
 $30 = (($29) + ($28))|0;
 $ix = $30;
 $31 = HEAP32[19039]|0;
 $32 = $31 & 512;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = HEAP32[10362]|0;
  HEAP32[10361] = $34;
 }
 $35 = $ix;
 $36 = HEAP32[10361]|0;
 $37 = $th;
 $38 = $tn;
 $39 = $continuing;
 $40 = (__ZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSii($35,$36,$37,$38,4,$39)|0);
 $ix = $40;
 $41 = HEAP32[10356]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $0 = 0;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $43 = $tn;
 $44 = ((($43)) + 14|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $46 & 1;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $ix;
  $50 = HEAP32[10355]|0;
  $51 = (($50) + (($49*6)|0)|0);
  $52 = ((($51)) + 2|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = $54 | 2;
  $56 = $55&255;
  HEAP8[$52>>0] = $56;
 }
 $57 = HEAP32[10359]|0;
 $58 = ($57|0)==(0);
 $59 = $tn;
 if ($58) {
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  HEAP32[10363] = $61;
  $62 = $tn;
  $63 = ((($62)) + 1|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $tn;
  $67 = ((($66)) + 2|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($65) - ($69))|0;
  $drop = $70;
  $71 = $ix;
  $72 = (($71) + 1)|0;
  $ix = $72;
  $73 = HEAP32[10355]|0;
  $74 = (($73) + (($71*6)|0)|0);
  $75 = $tn;
  $76 = ((($75)) + 2|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $drop;
  __ZL9set_pitchP8SYLLABLEii($74,$78,$79);
 } else {
  $80 = ((($59)) + 3|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  HEAP32[10363] = $82;
  $83 = $tn;
  $84 = ((($83)) + 4|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $tn;
  $88 = ((($87)) + 5|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = (($86) - ($90))|0;
  $drop = $91;
  $92 = $ix;
  $93 = (($92) + 1)|0;
  $ix = $93;
  $94 = HEAP32[10355]|0;
  $95 = (($94) + (($92*6)|0)|0);
  $96 = $tn;
  $97 = ((($96)) + 5|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $drop;
  __ZL9set_pitchP8SYLLABLEii($95,$99,$100);
 }
 $101 = HEAP32[10363]|0;
 $102 = $101&255;
 $103 = HEAP32[10361]|0;
 $104 = HEAP32[10355]|0;
 $105 = (($104) + (($103*6)|0)|0);
 $106 = ((($105)) + 1|0);
 HEAP8[$106>>0] = $102;
 $107 = HEAP32[10361]|0;
 $108 = HEAP32[10355]|0;
 $109 = (($108) + (($107*6)|0)|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110 << 24 >> 24;
 $112 = ($111|0)==(4);
 if ($112) {
  $113 = HEAP32[10361]|0;
  $114 = HEAP32[10355]|0;
  $115 = (($114) + (($113*6)|0)|0);
  HEAP8[$115>>0] = 6;
 }
 $116 = $ix;
 $117 = $3;
 $118 = $tn;
 $119 = ((($118)) + 12|0);
 $120 = HEAP8[$119>>0]|0;
 $121 = $120&255;
 $122 = $tn;
 $123 = ((($122)) + 13|0);
 $124 = HEAP8[$123>>0]|0;
 $125 = $124&255;
 __ZL16SetPitchGradientiiii($116,$117,$121,$125);
 $126 = HEAP32[10363]|0;
 $0 = $126;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function __ZL13calc_pitches2iii($start,$end,$tune_number) {
 $start = $start|0;
 $end = $end|0;
 $tune_number = $tune_number|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $drop = 0, $ix = 0, $tune = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $start;
 $2 = $end;
 $3 = $tune_number;
 $4 = $3;
 $5 = HEAP32[10354]|0;
 $6 = (($5) + (($4*68)|0)|0);
 $tune = $6;
 $7 = $1;
 $ix = $7;
 $8 = $ix;
 $9 = $ix;
 $10 = HEAP32[10357]|0;
 $11 = (($9) + ($10))|0;
 $12 = $tune;
 $13 = ((($12)) + 24|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $tune;
 $17 = ((($16)) + 25|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 __ZL16SetPitchGradientiiii($8,$11,$15,$19);
 $20 = HEAP32[10357]|0;
 $21 = $ix;
 $22 = (($21) + ($20))|0;
 $ix = $22;
 $23 = HEAP32[19039]|0;
 $24 = $23 & 512;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[10362]|0;
  HEAP32[10361] = $26;
 }
 $27 = $tune;
 $28 = $ix;
 $29 = HEAP32[10361]|0;
 $30 = (__ZL17SetHeadIntonationP4TUNEiii($27,$28,$29,0)|0);
 $ix = $30;
 $31 = HEAP32[10356]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $0 = 0;
  $104 = $0;
  STACKTOP = sp;return ($104|0);
 }
 $33 = HEAP32[10359]|0;
 $34 = ($33|0)==(0);
 $35 = $tune;
 if ($34) {
  $36 = ((($35)) + 42|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  HEAP32[10363] = $38;
  $39 = $tune;
  $40 = ((($39)) + 43|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $tune;
  $44 = ((($43)) + 44|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($42) - ($46))|0;
  $drop = $47;
  $48 = $ix;
  $49 = (($48) + 1)|0;
  $ix = $49;
  $50 = HEAP32[10355]|0;
  $51 = (($50) + (($48*6)|0)|0);
  $52 = $tune;
  $53 = ((($52)) + 44|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $drop;
  __ZL9set_pitchP8SYLLABLEii($51,$55,$56);
 } else {
  $57 = ((($35)) + 45|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  HEAP32[10363] = $59;
  $60 = $tune;
  $61 = ((($60)) + 46|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $tune;
  $65 = ((($64)) + 47|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = (($63) - ($67))|0;
  $drop = $68;
  $69 = $ix;
  $70 = (($69) + 1)|0;
  $ix = $70;
  $71 = HEAP32[10355]|0;
  $72 = (($71) + (($69*6)|0)|0);
  $73 = $tune;
  $74 = ((($73)) + 47|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $drop;
  __ZL9set_pitchP8SYLLABLEii($72,$76,$77);
 }
 $78 = HEAP32[10363]|0;
 $79 = $78&255;
 $80 = HEAP32[10361]|0;
 $81 = HEAP32[10355]|0;
 $82 = (($81) + (($80*6)|0)|0);
 $83 = ((($82)) + 1|0);
 HEAP8[$83>>0] = $79;
 $84 = HEAP32[10361]|0;
 $85 = HEAP32[10355]|0;
 $86 = (($85) + (($84*6)|0)|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87 << 24 >> 24;
 $89 = ($88|0)==(4);
 if ($89) {
  $90 = HEAP32[10361]|0;
  $91 = HEAP32[10355]|0;
  $92 = (($91) + (($90*6)|0)|0);
  HEAP8[$92>>0] = 6;
 }
 $93 = $ix;
 $94 = $2;
 $95 = $tune;
 $96 = ((($95)) + 48|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $tune;
 $100 = ((($99)) + 49|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 __ZL16SetPitchGradientiiii($93,$94,$98,$102);
 $103 = HEAP32[10363]|0;
 $0 = $103;
 $104 = $0;
 STACKTOP = sp;return ($104|0);
}
function __ZL16SetPitchGradientiiii($start_ix,$end_ix,$start_pitch,$end_pitch) {
 $start_ix = $start_ix|0;
 $end_ix = $end_ix|0;
 $start_pitch = $start_pitch|0;
 $end_pitch = $end_pitch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $drop = 0, $increment = 0, $ix = 0, $n_increments = 0, $pitch = 0, $stress = 0, $syl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start_ix;
 $1 = $end_ix;
 $2 = $start_pitch;
 $3 = $end_pitch;
 $4 = $3;
 $5 = $2;
 $6 = (($4) - ($5))|0;
 $7 = $6 << 8;
 $increment = $7;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $n_increments = $10;
 $11 = $n_increments;
 $12 = ($11|0)<=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $n_increments;
 $14 = ($13|0)>(1);
 if ($14) {
  $15 = $increment;
  $16 = $n_increments;
  $17 = (($15|0) / ($16|0))&-1;
  $increment = $17;
 }
 $18 = $2;
 $19 = $18 << 8;
 $pitch = $19;
 $20 = $0;
 $ix = $20;
 while(1) {
  $21 = $ix;
  $22 = $1;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $ix;
  $25 = HEAP32[10355]|0;
  $26 = (($25) + (($24*6)|0)|0);
  $syl = $26;
  $27 = $syl;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $stress = $29;
  $30 = $increment;
  $31 = ($30|0)>(0);
  if ($31) {
   $32 = $syl;
   $33 = $pitch;
   $34 = $33 >> 8;
   $35 = $increment;
   $36 = $35 >> 8;
   $37 = (0 - ($36))|0;
   __ZL9set_pitchP8SYLLABLEii($32,$34,$37);
   $38 = $increment;
   $39 = $pitch;
   $40 = (($39) + ($38))|0;
   $pitch = $40;
  } else {
   $41 = $increment;
   $42 = $41 >> 8;
   $43 = (0 - ($42))|0;
   $drop = $43;
   $44 = $drop;
   $45 = $stress;
   $46 = (924 + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($44|0)<($47|0);
   if ($48) {
    $49 = $stress;
    $50 = (924 + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $drop = $51;
   }
   $52 = $increment;
   $53 = $pitch;
   $54 = (($53) + ($52))|0;
   $pitch = $54;
   $55 = $drop;
   $56 = ($55|0)>(18);
   if ($56) {
    $drop = 18;
   }
   $57 = $syl;
   $58 = $pitch;
   $59 = $58 >> 8;
   $60 = $drop;
   __ZL9set_pitchP8SYLLABLEii($57,$59,$60);
  }
  $61 = $ix;
  $62 = (($61) + 1)|0;
  $ix = $62;
 }
 STACKTOP = sp;return;
}
function __ZL9set_pitchP8SYLLABLEii($syl,$base,$drop) {
 $syl = $syl|0;
 $base = $base|0;
 $drop = $drop|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $pitch1 = 0, $pitch2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $syl;
 $1 = $base;
 $2 = $drop;
 $flags = 0;
 $3 = $1;
 $4 = ($3|0)<(0);
 if ($4) {
  $1 = 0;
 }
 $5 = $1;
 $pitch2 = $5;
 $6 = $2;
 $7 = ($6|0)<(0);
 if ($7) {
  $flags = 1;
  $8 = $2;
  $9 = (0 - ($8))|0;
  $2 = $9;
 }
 $10 = $pitch2;
 $11 = $2;
 $12 = (($10) + ($11))|0;
 $pitch1 = $12;
 $13 = $pitch1;
 $14 = ($13|0)<(0);
 $$ = $14 ? 0 : $12;
 $pitch1 = $$;
 $15 = $pitch1;
 $16 = ($15|0)>(254);
 $$$ = $16 ? 254 : $$;
 $pitch1 = $$$;
 $17 = $pitch2;
 $18 = ($17|0)>(254);
 if ($18) {
  $pitch2 = 254;
 }
 $19 = $pitch1;
 $20 = $19&255;
 $21 = $0;
 $22 = ((($21)) + 4|0);
 HEAP8[$22>>0] = $20;
 $23 = $pitch2;
 $24 = $23&255;
 $25 = $0;
 $26 = ((($25)) + 5|0);
 HEAP8[$26>>0] = $24;
 $27 = $flags;
 $28 = $0;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = $31 | $27;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 STACKTOP = sp;return;
}
function __ZL17SetHeadIntonationP4TUNEiii($tune,$syl_ix,$end_ix,$control) {
 $tune = $tune|0;
 $syl_ix = $syl_ix|0;
 $end_ix = $end_ix|0;
 $control = $control|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $drops = 0, $head_final = 0, $increment = 0, $initial = 0;
 var $ix = 0, $n_steps = 0, $n_unstressed = 0, $or$cond = 0, $or$cond3 = 0, $overflow_ix = 0, $pitch = 0, $pitch_range = 0, $pitch_range_abs = 0, $secondary = 0, $stage = 0, $stress = 0, $syl = 0, $unstressed_inc = 0, $unstressed_ix = 0, $used_onset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tune;
 $1 = $syl_ix;
 $2 = $end_ix;
 $3 = $control;
 $pitch = 0;
 $increment = 0;
 $n_steps = 0;
 $overflow_ix = 0;
 $n_unstressed = 0;
 $unstressed_ix = 0;
 $used_onset = 0;
 $4 = $2;
 $head_final = $4;
 $secondary = 2;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $0;
 $10 = ((($9)) + 31|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($8) - ($12))|0;
 $14 = $13 << 8;
 $pitch_range = $14;
 $15 = $pitch_range;
 $16 = (Math_abs(($15|0))|0);
 $pitch_range_abs = $16;
 $drops = 956;
 $initial = 1;
 $stage = 0;
 $17 = $0;
 $18 = ((($17)) + 30|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==(255);
 $$ = $21 ? 1 : 0;
 $stage = $$;
 $22 = $0;
 $23 = ((($22)) + 33|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)!=(255);
 L1: do {
  if ($26) {
   $27 = $2;
   $28 = (($27) - 1)|0;
   $ix = $28;
   while(1) {
    $29 = $ix;
    $30 = $1;
    $31 = ($29|0)>=($30|0);
    if (!($31)) {
     break L1;
    }
    $32 = $ix;
    $33 = HEAP32[10355]|0;
    $34 = (($33) + (($32*6)|0)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = ($36|0)>=(4);
    $38 = $ix;
    if ($37) {
     break;
    }
    $39 = (($38) + -1)|0;
    $ix = $39;
   }
   $head_final = $38;
  }
 } while(0);
 while(1) {
  $40 = $1;
  $41 = $2;
  $42 = ($40|0)<($41|0);
  $43 = $1;
  if (!($42)) {
   break;
  }
  $44 = HEAP32[10355]|0;
  $45 = (($44) + (($43*6)|0)|0);
  $syl = $45;
  $46 = $syl;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $stress = $48;
  $49 = $initial;
  $50 = ($49|0)!=(0);
  $51 = $stress;
  $52 = ($51|0)>=(4);
  $or$cond = $50 | $52;
  if ($or$cond) {
   $53 = $initial;
   $54 = ($53|0)!=(0);
   $55 = $stress;
   $56 = ($55|0)==(5);
   $or$cond3 = $54 | $56;
   do {
    if ($or$cond3) {
     $initial = 0;
     $overflow_ix = 0;
     $57 = $0;
     $58 = ((($57)) + 30|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = ($60|0)==(255);
     $62 = $1;
     if ($61) {
      $63 = $head_final;
      $64 = (__ZL16count_incrementsiii($62,$63,4)|0);
      $n_steps = $64;
      $65 = $0;
      $66 = ((($65)) + 31|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $69 = $68 << 8;
      $pitch = $69;
     } else {
      $70 = (($62) + 1)|0;
      $71 = $head_final;
      $72 = (__ZL16count_incrementsiii($70,$71,4)|0);
      $n_steps = $72;
      $73 = $0;
      $74 = ((($73)) + 30|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = $75&255;
      $77 = $76 << 8;
      $pitch = $77;
      $used_onset = 1;
     }
     $78 = $n_steps;
     $79 = $0;
     $80 = ((($79)) + 34|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = ($78|0)>($82|0);
     if ($83) {
      $84 = $0;
      $85 = ((($84)) + 34|0);
      $86 = HEAP8[$85>>0]|0;
      $87 = $86&255;
      $n_steps = $87;
     }
     $88 = $n_steps;
     $89 = ($88|0)>(1);
     if ($89) {
      $90 = $pitch_range;
      $91 = $n_steps;
      $92 = (($91) - 1)|0;
      $93 = (($90|0) / ($92|0))&-1;
      $increment = $93;
      break;
     } else {
      $increment = 0;
      break;
     }
    } else {
     $94 = $1;
     $95 = $head_final;
     $96 = ($94|0)==($95|0);
     if ($96) {
      $97 = $0;
      $98 = ((($97)) + 33|0);
      $99 = HEAP8[$98>>0]|0;
      $100 = $99&255;
      $101 = $100 << 8;
      $pitch = $101;
      $stage = 2;
      break;
     }
     $102 = $used_onset;
     $103 = ($102|0)!=(0);
     if ($103) {
      $stage = 1;
      $used_onset = 0;
      $104 = $0;
      $105 = ((($104)) + 31|0);
      $106 = HEAP8[$105>>0]|0;
      $107 = $106&255;
      $108 = $107 << 8;
      $pitch = $108;
      $109 = $n_steps;
      $110 = (($109) + 1)|0;
      $n_steps = $110;
      break;
     }
     $111 = $n_steps;
     $112 = ($111|0)>(0);
     if ($112) {
      $113 = $increment;
      $114 = $pitch;
      $115 = (($114) + ($113))|0;
      $pitch = $115;
      break;
     }
     $116 = $0;
     $117 = ((($116)) + 32|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $119 << 8;
     $121 = $pitch_range_abs;
     $122 = $overflow_ix;
     $123 = (($122) + 1)|0;
     $overflow_ix = $123;
     $124 = $0;
     $125 = ((($124)) + 16|0);
     $126 = (($125) + ($122)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127 << 24 >> 24;
     $129 = Math_imul($121, $128)|0;
     $130 = (($129|0) / 64)&-1;
     $131 = (($120) + ($130))|0;
     $pitch = $131;
     $132 = $overflow_ix;
     $133 = $0;
     $134 = ((($133)) + 35|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = ($132|0)>=($136|0);
     if ($137) {
      $overflow_ix = 0;
     }
    }
   } while(0);
   $138 = $n_steps;
   $139 = (($138) + -1)|0;
   $n_steps = $139;
  }
  $140 = $stress;
  $141 = ($140|0)>=(4);
  do {
   if ($141) {
    $142 = $1;
    $143 = (($142) + 1)|0;
    $144 = $2;
    $145 = $secondary;
    $146 = (__ZL15CountUnstressediii($143,$144,$145)|0);
    $n_unstressed = $146;
    $unstressed_ix = 0;
    $147 = $syl;
    HEAP8[$147>>0] = 6;
    $148 = $0;
    $149 = ((($148)) + 26|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $syl;
    $152 = ((($151)) + 1|0);
    HEAP8[$152>>0] = $150;
    $153 = $syl;
    $154 = $pitch;
    $155 = $154 >> 8;
    $156 = $0;
    $157 = ((($156)) + 27|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    __ZL9set_pitchP8SYLLABLEii($153,$155,$159);
   } else {
    $160 = $stress;
    $161 = $secondary;
    $162 = ($160|0)>=($161|0);
    if ($162) {
     $163 = $1;
     $164 = (($163) + 1)|0;
     $165 = $2;
     $166 = $secondary;
     $167 = (__ZL15CountUnstressediii($164,$165,$166)|0);
     $n_unstressed = $167;
     $unstressed_ix = 0;
     $168 = $syl;
     $169 = $pitch;
     $170 = $169 >> 8;
     $171 = $stress;
     $172 = $drops;
     $173 = (($172) + ($171<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($168,$170,$174);
     break;
    }
    $175 = $n_unstressed;
    $176 = ($175|0)>(1);
    if ($176) {
     $177 = $stage;
     $178 = $0;
     $179 = ((($178)) + 39|0);
     $180 = (($179) + ($177)|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181 << 24 >> 24;
     $183 = $stage;
     $184 = $0;
     $185 = ((($184)) + 36|0);
     $186 = (($185) + ($183)|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187 << 24 >> 24;
     $189 = (($182) - ($188))|0;
     $190 = $n_unstressed;
     $191 = (($190) - 1)|0;
     $192 = (($189|0) / ($191|0))&-1;
     $unstressed_inc = $192;
    } else {
     $unstressed_inc = 0;
    }
    $193 = $syl;
    $194 = $pitch;
    $195 = $194 >> 8;
    $196 = $stage;
    $197 = $0;
    $198 = ((($197)) + 36|0);
    $199 = (($198) + ($196)|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200 << 24 >> 24;
    $202 = (($195) + ($201))|0;
    $203 = $unstressed_inc;
    $204 = $unstressed_ix;
    $205 = Math_imul($203, $204)|0;
    $206 = (($202) + ($205))|0;
    $207 = $stress;
    $208 = $drops;
    $209 = (($208) + ($207<<2)|0);
    $210 = HEAP32[$209>>2]|0;
    __ZL9set_pitchP8SYLLABLEii($193,$206,$210);
    $211 = $unstressed_ix;
    $212 = (($211) + 1)|0;
    $unstressed_ix = $212;
   }
  } while(0);
  $213 = $1;
  $214 = (($213) + 1)|0;
  $1 = $214;
 }
 STACKTOP = sp;return ($43|0);
}
function __ZL16count_incrementsiii($ix,$end_ix,$min_stress) {
 $ix = $ix|0;
 $end_ix = $end_ix|0;
 $min_stress = $min_stress|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $count = 0, $stress = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ix;
 $1 = $end_ix;
 $2 = $min_stress;
 $count = 0;
 while(1) {
  $3 = $0;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $0;
  $7 = (($6) + 1)|0;
  $0 = $7;
  $8 = HEAP32[10355]|0;
  $9 = (($8) + (($6*6)|0)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $stress = $11;
  $12 = $stress;
  $13 = ($12|0)>=(7);
  if ($13) {
   label = 6;
   break;
  }
  $14 = $stress;
  $15 = $2;
  $16 = ($14|0)>=($15|0);
  if (!($16)) {
   continue;
  }
  $17 = $count;
  $18 = (($17) + 1)|0;
  $count = $18;
 }
 if ((label|0) == 6) {
  $19 = $count;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZL15CountUnstressediii($start,$end,$limit) {
 $start = $start|0;
 $end = $end|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start;
 $1 = $end;
 $2 = $limit;
 $3 = $0;
 $ix = $3;
 while(1) {
  $4 = $ix;
  $5 = $1;
  $6 = ($4|0)<=($5|0);
  if (!($6)) {
   break;
  }
  $7 = $ix;
  $8 = HEAP32[10355]|0;
  $9 = (($8) + (($7*6)|0)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = $2;
  $13 = ($11|0)>=($12|0);
  if ($13) {
   break;
  }
  $14 = $ix;
  $15 = (($14) + 1)|0;
  $ix = $15;
 }
 $16 = $ix;
 $17 = $0;
 $18 = (($16) - ($17))|0;
 STACKTOP = sp;return ($18|0);
}
function __ZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSii($ix,$end_ix,$th,$tn,$min_stress,$continuing) {
 $ix = $ix|0;
 $end_ix = $end_ix|0;
 $th = $th|0;
 $tn = $tn|0;
 $min_stress = $min_stress|0;
 $continuing = $continuing|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $drops = 0, $increment = 0, $initial = 0, $n_overflow = 0, $n_primary = 0, $n_steps = 0, $or$cond = 0, $or$cond3 = 0, $overflow = 0, $overflow_tab = 0, $pitch = 0;
 var $pitch_range = 0, $pitch_range_abs = 0, $stress = 0, $syl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ix;
 $1 = $end_ix;
 $2 = $th;
 $3 = $tn;
 $4 = $min_stress;
 $5 = $continuing;
 $pitch = 0;
 $increment = 0;
 $n_primary = 0;
 $n_steps = 0;
 $overflow = 0;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $drops = $8;
 $9 = $2;
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $2;
 $14 = ((($13)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($12) - ($16))|0;
 $18 = $17 << 8;
 $pitch_range = $18;
 $19 = $pitch_range;
 $20 = (Math_abs(($19|0))|0);
 $pitch_range_abs = $20;
 $21 = $5;
 $22 = ($21|0)!=(0);
 if ($22) {
  $initial = 0;
  $overflow = 0;
  $n_overflow = 5;
  $overflow_tab = 20019;
  $23 = $pitch_range;
  $24 = $2;
  $25 = ((($24)) + 8|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($27) - 1)|0;
  $29 = (($23|0) / ($28|0))&-1;
  $increment = $29;
 } else {
  $30 = $2;
  $31 = ((($30)) + 10|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $n_overflow = $33;
  $34 = $2;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $overflow_tab = $36;
  $initial = 1;
 }
 while(1) {
  $37 = $0;
  $38 = $1;
  $39 = ($37|0)<($38|0);
  $40 = $0;
  if (!($39)) {
   break;
  }
  $41 = HEAP32[10355]|0;
  $42 = (($41) + (($40*6)|0)|0);
  $syl = $42;
  $43 = $syl;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $stress = $45;
  $46 = $initial;
  $47 = ($46|0)!=(0);
  if ($47) {
   label = 7;
  } else {
   $48 = $stress;
   $49 = $4;
   $50 = ($48|0)>=($49|0);
   if ($50) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $51 = $initial;
   $52 = ($51|0)!=(0);
   $53 = $stress;
   $54 = ($53|0)==(5);
   $or$cond = $52 | $54;
   do {
    if ($or$cond) {
     $initial = 0;
     $overflow = 0;
     $55 = $0;
     $56 = $1;
     $57 = $4;
     $58 = (__ZL16count_incrementsiii($55,$56,$57)|0);
     $n_primary = $58;
     $n_steps = $58;
     $59 = $n_steps;
     $60 = $2;
     $61 = ((($60)) + 8|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&255;
     $64 = ($59|0)>($63|0);
     if ($64) {
      $65 = $2;
      $66 = ((($65)) + 8|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $n_steps = $68;
     }
     $69 = $n_steps;
     $70 = ($69|0)>(1);
     if ($70) {
      $71 = $pitch_range;
      $72 = $n_steps;
      $73 = (($72) - 1)|0;
      $74 = (($71|0) / ($73|0))&-1;
      $increment = $74;
     } else {
      $increment = 0;
     }
     $75 = $2;
     $76 = ((($75)) + 2|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = $78 << 8;
     $pitch = $79;
    } else {
     $80 = $n_steps;
     $81 = ($80|0)>(0);
     if ($81) {
      $82 = $increment;
      $83 = $pitch;
      $84 = (($83) + ($82))|0;
      $pitch = $84;
      break;
     }
     $85 = $2;
     $86 = ((($85)) + 3|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $88 << 8;
     $90 = $pitch_range_abs;
     $91 = $overflow;
     $92 = (($91) + 1)|0;
     $overflow = $92;
     $93 = $overflow_tab;
     $94 = (($93) + ($91)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95 << 24 >> 24;
     $97 = Math_imul($90, $96)|0;
     $98 = (($97|0) / 64)&-1;
     $99 = (($89) + ($98))|0;
     $pitch = $99;
     $100 = $overflow;
     $101 = $n_overflow;
     $102 = ($100|0)>=($101|0);
     if ($102) {
      $overflow = 0;
      $103 = $2;
      $104 = ((($103)) + 12|0);
      $105 = HEAP32[$104>>2]|0;
      $overflow_tab = $105;
     }
    }
   } while(0);
   $106 = $n_steps;
   $107 = (($106) + -1)|0;
   $n_steps = $107;
   $108 = $n_primary;
   $109 = (($108) + -1)|0;
   $n_primary = $109;
   $110 = $3;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)!=(0|0);
   $114 = $n_primary;
   $115 = ($114|0)<(2);
   $or$cond3 = $113 & $115;
   if ($or$cond3) {
    $116 = $n_primary;
    $117 = $3;
    $118 = ((($117)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116<<1)|0);
    $121 = HEAP16[$120>>1]|0;
    $122 = $121 << 16 >> 16;
    $123 = $122 << 8;
    $pitch = $123;
   }
  }
  $124 = $stress;
  $125 = ($124|0)>=(4);
  do {
   if ($125) {
    $126 = $syl;
    HEAP8[$126>>0] = 6;
    $127 = $syl;
    $128 = $pitch;
    $129 = $128 >> 8;
    $130 = $stress;
    $131 = $drops;
    $132 = (($131) + ($130<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    __ZL9set_pitchP8SYLLABLEii($127,$129,$133);
   } else {
    $134 = $stress;
    $135 = ($134|0)>=(3);
    if ($135) {
     $136 = $syl;
     $137 = $pitch;
     $138 = $137 >> 8;
     $139 = $stress;
     $140 = $drops;
     $141 = (($140) + ($139<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($136,$138,$142);
     break;
    }
    $143 = $0;
    $144 = (($143) - 1)|0;
    $145 = HEAP32[10355]|0;
    $146 = (($145) + (($144*6)|0)|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147 << 24 >> 24;
    $149 = $148 & 63;
    $150 = ($149|0)>=(3);
    $151 = $syl;
    $152 = $pitch;
    $153 = $152 >> 8;
    if ($150) {
     $154 = $2;
     $155 = ((($154)) + 9|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $156 << 24 >> 24;
     $158 = (($153) - ($157))|0;
     $159 = $stress;
     $160 = $drops;
     $161 = (($160) + ($159<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($151,$158,$162);
     break;
    } else {
     $163 = $stress;
     $164 = $drops;
     $165 = (($164) + ($163<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     __ZL9set_pitchP8SYLLABLEii($151,$153,$166);
     break;
    }
   }
  } while(0);
  $167 = $0;
  $168 = (($167) + 1)|0;
  $0 = $168;
 }
 STACKTOP = sp;return ($40|0);
}
function __Z9iswalpha2i($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)<(128);
 $4 = $1;
 do {
  if ($3) {
   $5 = (_isalpha($4)|0);
   $0 = $5;
  } else {
   $6 = ($4|0)>(12352);
   $7 = $1;
   $8 = ($7|0)<=(42752);
   $or$cond = $6 & $8;
   if ($or$cond) {
    $0 = 1;
    break;
   }
   $9 = $1;
   $10 = ($9|0)>(591);
   $11 = $1;
   if ($10) {
    $12 = (_iswalpha($11)|0);
    $0 = $12;
    break;
   } else {
    $13 = (($11) - 128)|0;
    $14 = (20024 + ($13)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $0 = $16;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function __Z9iswlower2i($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)<(128);
 $4 = $1;
 do {
  if ($3) {
   $5 = (_islower($4)|0);
   $0 = $5;
  } else {
   $6 = ($4|0)>(591);
   $7 = $1;
   if ($6) {
    $8 = (_iswlower($7)|0);
    $0 = $8;
    break;
   }
   $9 = (($7) - 128)|0;
   $10 = (20024 + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($12|0)==(255);
   if ($13) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function __Z9iswupper2i($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)<(128);
 $4 = $1;
 do {
  if ($3) {
   $5 = (_isupper($4)|0);
   $0 = $5;
  } else {
   $6 = ($4|0)>(591);
   $7 = $1;
   if ($6) {
    $8 = (_iswupper($7)|0);
    $0 = $8;
    break;
   }
   $9 = (($7) - 128)|0;
   $10 = (20024 + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $x = $12;
   $13 = ($12|0)>(0);
   $14 = $x;
   $15 = ($14|0)<(254);
   $or$cond = $13 & $15;
   if ($or$cond) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __Z9towlower2j($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(73);
 if ($3) {
  $4 = HEAP32[19035]|0;
  $5 = ((($4)) + 273|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)!=(0);
  if ($7) {
   $1 = 305;
  }
 }
 $8 = $1;
 $9 = ($8>>>0)<(128);
 $10 = $1;
 if ($9) {
  $11 = (_tolower($10)|0);
  $0 = $11;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $12 = ($10>>>0)>(591);
 $13 = $1;
 if ($12) {
  $14 = (_towlower($13)|0);
  $0 = $14;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $15 = (($13) - 128)|0;
 $16 = (20024 + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $x = $18;
 $19 = ($18|0)>=(254);
 if ($19) {
  $20 = $1;
  $0 = $20;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $21 = $x;
 $22 = ($21|0)==(253);
 L17: do {
  if ($22) {
   $ix = 0;
   while(1) {
    $23 = $ix;
    $24 = (6162 + ($23<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25 << 16 >> 16;
    $27 = ($26|0)!=(0);
    if (!($27)) {
     break L17;
    }
    $28 = $ix;
    $29 = (6162 + ($28<<1)|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30 << 16 >> 16;
    $32 = $1;
    $33 = ($31|0)==($32|0);
    $34 = $ix;
    if ($33) {
     break;
    }
    $39 = (($34) + 2)|0;
    $ix = $39;
   }
   $35 = (($34) + 1)|0;
   $36 = (6162 + ($35<<1)|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37 << 16 >> 16;
   $0 = $38;
   $43 = $0;
   STACKTOP = sp;return ($43|0);
  }
 } while(0);
 $40 = $1;
 $41 = $x;
 $42 = (($40) + ($41))|0;
 $0 = $42;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function __Z9towupper2j($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2>>>0)>(591);
 $4 = $1;
 do {
  if ($3) {
   $5 = (_towupper($4)|0);
   $0 = $5;
  } else {
   $6 = (($4) - 32)|0;
   $7 = (__Z9towlower2j($6)|0);
   $8 = $1;
   $9 = ($7|0)==($8|0);
   $10 = $1;
   if ($9) {
    $11 = (($10) - 32)|0;
    $0 = $11;
    break;
   }
   $12 = (($10) - 1)|0;
   $13 = (__Z9towlower2j($12)|0);
   $14 = $1;
   $15 = ($13|0)==($14|0);
   if ($15) {
    $16 = $1;
    $17 = (($16) - 1)|0;
    $0 = $17;
    break;
   }
   $ix = 0;
   while(1) {
    $18 = $ix;
    $19 = (6202 + ($18<<1)|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 << 16 >> 16;
    $22 = ($21|0)!=(0);
    if (!($22)) {
     label = 12;
     break;
    }
    $23 = $ix;
    $24 = (6202 + ($23<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25 << 16 >> 16;
    $27 = $1;
    $28 = ($26|0)==($27|0);
    $29 = $ix;
    if ($28) {
     label = 10;
     break;
    }
    $34 = (($29) + 2)|0;
    $ix = $34;
   }
   if ((label|0) == 10) {
    $30 = (($29) + 1)|0;
    $31 = (6202 + ($30<<1)|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = $32 << 16 >> 16;
    $0 = $33;
    break;
   }
   else if ((label|0) == 12) {
    $35 = $1;
    $0 = $35;
    break;
   }
  }
 } while(0);
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function __Z3Eofv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[10703]|0;
 $2 = ($1|0)!=(0);
 do {
  if ($2) {
   $0 = 0;
  } else {
   $3 = HEAP32[10704]|0;
   $4 = ($3|0)!=(0|0);
   if ($4) {
    $5 = HEAP32[10704]|0;
    $6 = (_feof($5)|0);
    $0 = $6;
    break;
   } else {
    $7 = HEAP32[10705]|0;
    $0 = $7;
    break;
   }
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __Z13WordToString2j($word) {
 $word = $word|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $word;
 $p = 119420;
 $ix = 3;
 while(1) {
  $1 = $ix;
  $2 = ($1|0)>=(0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $ix;
  $5 = $4<<3;
  $6 = $3 >>> $5;
  $7 = $6&255;
  $8 = $p;
  HEAP8[$8>>0] = $7;
  $9 = $7 << 24 >> 24;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $p;
   $12 = ((($11)) + 1|0);
   $p = $12;
  }
  $13 = $ix;
  $14 = (($13) + -1)|0;
  $ix = $14;
 }
 $15 = $p;
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return (119420|0);
}
function __Z10Read4BytesP8_IO_FILE($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acc = 0, $c = 0, $ix = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $acc = 0;
 $ix = 0;
 while(1) {
  $1 = $ix;
  $2 = ($1|0)<(4);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = (_fgetc($3)|0);
  $5 = $4 & 255;
  $6 = $5&255;
  $c = $6;
  $7 = $c;
  $8 = $7&255;
  $9 = $ix;
  $10 = $9<<3;
  $11 = $8 << $10;
  $12 = $acc;
  $13 = (($12) + ($11))|0;
  $acc = $13;
  $14 = $ix;
  $15 = (($14) + 1)|0;
  $ix = $15;
 }
 $16 = $acc;
 STACKTOP = sp;return ($16|0);
}
function __Z11AddNameDataPKci($name,$wide) {
 $name = $name|0;
 $wide = $wide|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ix = 0, $len = 0, $vp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $wide;
 $3 = $2;
 $4 = ($3|0)!=(0);
 $5 = $1;
 if ($4) {
  $6 = (_wcslen($5)|0);
  $7 = (($6) + 1)|0;
  $8 = $7<<2;
  $len = $8;
  $9 = HEAP32[10706]|0;
  $10 = (($9) + 4)|0;
  $11 = (($10) - 1)|0;
  $12 = (($11>>>0) % 4)&-1;
  HEAP32[10706] = $12;
 } else {
  $13 = (_strlen($5)|0);
  $14 = (($13) + 1)|0;
  $len = $14;
 }
 $15 = HEAP32[10707]|0;
 $16 = $len;
 $17 = (($15) + ($16))|0;
 $18 = HEAP32[10706]|0;
 $19 = ($17|0)>=($18|0);
 do {
  if ($19) {
   $20 = HEAP32[10364]|0;
   $21 = HEAP32[10707]|0;
   $22 = $len;
   $23 = (($21) + ($22))|0;
   $24 = (($23) + 1000)|0;
   $25 = (_realloc($20,$24)|0);
   $vp = $25;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $vp;
    HEAP32[10364] = $27;
    $28 = HEAP32[10707]|0;
    $29 = $len;
    $30 = (($28) + ($29))|0;
    $31 = (($30) + 1000)|0;
    HEAP32[10706] = $31;
    break;
   }
   $0 = -1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $32 = HEAP32[10707]|0;
 $ix = $32;
 $33 = HEAP32[10364]|0;
 $34 = (($33) + ($32)|0);
 $35 = $1;
 $36 = $len;
 _memcpy(($34|0),($35|0),($36|0))|0;
 $37 = $len;
 $38 = HEAP32[10707]|0;
 $39 = (($38) + ($37))|0;
 HEAP32[10707] = $39;
 $40 = $ix;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function __Z13SetVoiceStackP12espeak_VOICEPKc($v,$variant_name) {
 $v = $v|0;
 $variant_name = $variant_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $variant_name;
 $sp = 42832;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $sp;
  dest=$4; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $sp;
  $10 = ((($9)) + 56|0);
  $11 = $0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  (_strcpy($10,$13)|0);
 }
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $sp;
  $18 = ((($17)) + 16|0);
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  __Z8strncpy0PcPKci($18,$20,40);
 }
 $21 = $0;
 $22 = ((($21)) + 14|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $sp;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = ((($27)) + 13|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $sp;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 $33 = $0;
 $34 = ((($33)) + 12|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $sp;
 $38 = ((($37)) + 8|0);
 HEAP32[$38>>2] = $36;
 $39 = $1;
 $40 = (_memcmp($39,20488,2)|0);
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = $1;
  $43 = ((($42)) + 3|0);
  $1 = $43;
 }
 $44 = $1;
 __Z8strncpy0PcPKci(119425,$44,40);
 ;HEAP32[44352>>2]=HEAP32[77632>>2]|0;HEAP32[44352+4>>2]=HEAP32[77632+4>>2]|0;HEAP32[44352+8>>2]=HEAP32[77632+8>>2]|0;HEAP32[44352+12>>2]=HEAP32[77632+12>>2]|0;HEAP32[44352+16>>2]=HEAP32[77632+16>>2]|0;HEAP32[44352+20>>2]=HEAP32[77632+20>>2]|0;
 STACKTOP = sp;return;
}
function __Z10ReadClauseP10TranslatorP8_IO_FILEPcPsPiiS5_S3_($tr,$f_in,$buf,$charix,$charix_top,$n_buf,$tone_type,$voice_change) {
 $tr = $tr|0;
 $f_in = $f_in|0;
 $buf = $buf|0;
 $charix = $charix|0;
 $charix_top = $charix_top|0;
 $n_buf = $n_buf|0;
 $tone_type = $tone_type|0;
 $voice_change = $voice_change|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $announced_punctuation = 0, $any_alnum = 0;
 var $c1 = 0, $c2 = 0, $c_next = 0, $cprev = 0, $cprev2 = 0, $end_clause_after_tag = 0, $end_clause_index = 0, $found = 0, $is_end_clause = 0, $ix = 0, $j = 0, $linelength = 0, $n_xml_buf = 0, $nl_count = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0;
 var $or$cond24 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond40 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond5 = 0, $or$cond51 = 0, $or$cond53 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond59 = 0, $or$cond61 = 0, $or$cond63 = 0;
 var $or$cond65 = 0, $or$cond67 = 0, $or$cond7 = 0, $or$cond9 = 0, $p2 = 0, $p_word = 0, $parag = 0, $phoneme_mode = 0, $punct = 0, $punct_data = 0, $self_closing = 0, $stressed_word = 0, $terminator = 0, $text_buf = 0, $text_buf2 = 0, $vararg_buffer = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0;
 var $vararg_ptr68 = 0, $vararg_ptr69 = 0, $xml_buf = 0, $xml_buf2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer79 = sp + 40|0;
 $vararg_buffer76 = sp + 32|0;
 $vararg_buffer73 = sp + 24|0;
 $vararg_buffer70 = sp + 16|0;
 $vararg_buffer = sp;
 $c1 = sp + 1168|0;
 $c2 = sp + 1164|0;
 $ix = sp + 1144|0;
 $xml_buf = sp + 52|0;
 $xml_buf2 = sp + 1280|0;
 $text_buf = sp + 1240|0;
 $text_buf2 = sp + 1208|0;
 $1 = $tr;
 $2 = $f_in;
 $3 = $buf;
 $4 = $charix;
 $5 = $charix_top;
 $6 = $n_buf;
 $7 = $tone_type;
 $8 = $voice_change;
 HEAP32[$c1>>2] = 32;
 $cprev = 32;
 $cprev2 = 32;
 HEAP32[$ix>>2] = 0;
 $linelength = 0;
 $phoneme_mode = 0;
 $any_alnum = 0;
 $punct_data = 0;
 $announced_punctuation = 0;
 $stressed_word = 0;
 $end_clause_after_tag = 0;
 $end_clause_index = 0;
 $9 = HEAP32[11094]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  HEAP32[19054] = 0;
  HEAP32[11094] = 0;
 }
 $11 = $1;
 $12 = ((($11)) + 400|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 8336|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 8340|0);
 HEAP32[$16>>2] = 0;
 HEAP32[10705] = 0;
 $17 = $7;
 HEAP32[$17>>2] = 0;
 $18 = $8;
 HEAP8[$18>>0] = 0;
 $19 = $2;
 HEAP32[10704] = $19;
 $20 = HEAP32[11095]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $3;
  $23 = HEAP32[11095]|0;
  (_strcpy($22,$23)|0);
  $24 = HEAP32[11095]|0;
  $25 = (_strlen($24)|0);
  $26 = HEAP32[$ix>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[$ix>>2] = $27;
  HEAP32[11095] = 0;
 }
 $28 = HEAP32[11096]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = HEAP32[11096]|0;
  HEAP32[$c2>>2] = $30;
 } else {
  $31 = (__ZL4GetCv()|0);
  HEAP32[$c2>>2] = $31;
 }
 L10: while(1) {
  $32 = (__Z3Eofv()|0);
  $33 = ($32|0)==(0);
  $34 = HEAP32[10703]|0;
  $35 = ($34|0)!=(0);
  $or$cond = $33 | $35;
  $36 = HEAP32[11096]|0;
  $37 = ($36|0)!=(0);
  $or$cond3 = $or$cond | $37;
  $38 = HEAP32[366]|0;
  $39 = ($38|0)>=(0);
  $or$cond67 = $or$cond3 | $39;
  if (!($or$cond67)) {
   label = 244;
   break;
  }
  $40 = HEAP32[$c1>>2]|0;
  $41 = (_iswalnum($40)|0);
  $42 = ($41|0)!=(0);
  if (!($42)) {
   $43 = HEAP32[19055]|0;
   $44 = ($43|0)>(0);
   if ($44) {
    $45 = HEAP32[10367]|0;
    $46 = HEAP32[19055]|0;
    $47 = ($45|0)>($46|0);
    if ($47) {
     label = 12;
     break;
    }
   }
   $48 = HEAP32[19053]|0;
   $49 = ($48|0)>(0);
   if ($49) {
    $50 = HEAP32[10367]|0;
    $51 = HEAP32[19053]|0;
    $52 = ($50|0)>=($51|0);
    if ($52) {
     label = 15;
     break;
    }
   }
  }
  $54 = $cprev;
  $cprev2 = $54;
  $55 = HEAP32[$c1>>2]|0;
  $cprev = $55;
  $56 = HEAP32[$c2>>2]|0;
  HEAP32[$c1>>2] = $56;
  $57 = HEAP32[366]|0;
  $58 = ($57|0)>=(0);
  if ($58) {
   $59 = HEAP32[366]|0;
   $60 = (119465 + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = ($62|0)==(0);
   if ($63) {
    HEAP32[366] = -1;
   }
  }
  $64 = HEAP32[366]|0;
  $65 = ($64|0)==(0);
  $66 = HEAP32[11096]|0;
  $67 = ($66|0)==(0);
  $or$cond5 = $65 & $67;
  if ($or$cond5) {
   $68 = HEAP32[366]|0;
   $69 = (($68) + 1)|0;
   HEAP32[366] = $69;
   $70 = (119465 + ($68)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 << 24 >> 24;
   HEAP32[$c1>>2] = $72;
  }
  $73 = HEAP32[366]|0;
  $74 = ($73|0)>=(0);
  if ($74) {
   $75 = HEAP32[366]|0;
   $76 = (($75) + 1)|0;
   HEAP32[366] = $76;
   $77 = (119465 + ($75)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78 << 24 >> 24;
   HEAP32[$c2>>2] = $79;
  } else {
   $80 = (__ZL4GetCv()|0);
   HEAP32[$c2>>2] = $80;
   $81 = (__Z3Eofv()|0);
   $82 = ($81|0)!=(0);
   if ($82) {
    HEAP32[$c2>>2] = 32;
   }
  }
  HEAP32[11096] = 0;
  $83 = HEAP32[19047]|0;
  $84 = ($83|0)!=(0);
  $85 = $phoneme_mode;
  $86 = ($85|0)==(0);
  $or$cond7 = $84 & $86;
  L32: do {
   if ($or$cond7) {
    $87 = HEAP32[11098]|0;
    $88 = ($87|0)!=(38);
    $89 = HEAP32[$c1>>2]|0;
    $90 = ($89|0)==(38);
    $or$cond9 = $88 & $90;
    do {
     if ($or$cond9) {
      $91 = HEAP32[$c2>>2]|0;
      $92 = ($91|0)==(35);
      if (!($92)) {
       $93 = HEAP32[$c2>>2]|0;
       $94 = ($93|0)>=(97);
       $95 = HEAP32[$c2>>2]|0;
       $96 = ($95|0)<=(122);
       $or$cond11 = $94 & $96;
       if (!($or$cond11)) {
        break;
       }
      }
      $n_xml_buf = 0;
      $97 = HEAP32[$c2>>2]|0;
      HEAP32[$c1>>2] = $97;
      while(1) {
       $98 = (__Z3Eofv()|0);
       $99 = ($98|0)!=(0);
       if ($99) {
        break;
       }
       $100 = HEAP32[$c1>>2]|0;
       $101 = (_iswalnum($100)|0);
       $102 = ($101|0)!=(0);
       $103 = HEAP32[$c1>>2]|0;
       $104 = ($103|0)==(35);
       $or$cond13 = $102 | $104;
       $105 = $n_xml_buf;
       $106 = ($105|0)<(20);
       $or$cond61 = $or$cond13 & $106;
       if (!($or$cond61)) {
        break;
       }
       $107 = HEAP32[$c1>>2]|0;
       $108 = $107&255;
       $109 = $n_xml_buf;
       $110 = (($109) + 1)|0;
       $n_xml_buf = $110;
       $111 = (($xml_buf2) + ($109)|0);
       HEAP8[$111>>0] = $108;
       $112 = (__ZL4GetCv()|0);
       HEAP32[$c1>>2] = $112;
      }
      $113 = $n_xml_buf;
      $114 = (($xml_buf2) + ($113)|0);
      HEAP8[$114>>0] = 0;
      $115 = (__ZL4GetCv()|0);
      HEAP32[$c2>>2] = $115;
      $116 = HEAP32[$c1>>2]|0;
      $117 = HEAP32[$c2>>2]|0;
      HEAP32[$vararg_buffer>>2] = $xml_buf2;
      $vararg_ptr68 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr68>>2] = $116;
      $vararg_ptr69 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr69>>2] = $117;
      (_sprintf(119465,20495,$vararg_buffer)|0);
      $118 = HEAP32[$c1>>2]|0;
      $119 = ($118|0)==(59);
      do {
       if ($119) {
        $120 = HEAP8[$xml_buf2>>0]|0;
        $121 = $120 << 24 >> 24;
        $122 = ($121|0)==(35);
        if ($122) {
         $123 = ((($xml_buf2)) + 1|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = $124 << 24 >> 24;
         $126 = ($125|0)==(120);
         if ($126) {
          $127 = ((($xml_buf2)) + 2|0);
          HEAP32[$vararg_buffer70>>2] = $c1;
          $128 = (_sscanf($127,21944,$vararg_buffer70)|0);
          $found = $128;
          break;
         } else {
          $129 = ((($xml_buf2)) + 1|0);
          HEAP32[$vararg_buffer73>>2] = $c1;
          $130 = (_sscanf($129,25972,$vararg_buffer73)|0);
          $found = $130;
          break;
         }
        } else {
         $131 = (__Z10LookupMnemP8MNEM_TABPKc(1468,$xml_buf2)|0);
         $found = $131;
         $132 = ($131|0)!=(-1);
         if (!($132)) {
          break;
         }
         $133 = $found;
         HEAP32[$c1>>2] = $133;
         $134 = HEAP32[$c2>>2]|0;
         $135 = ($134|0)==(0);
         if (!($135)) {
          break;
         }
         HEAP32[$c2>>2] = 32;
         break;
        }
       } else {
        $found = -1;
       }
      } while(0);
      $136 = $found;
      $137 = ($136|0)<=(0);
      if ($137) {
       HEAP32[366] = 0;
       HEAP32[$c1>>2] = 38;
       HEAP32[$c2>>2] = 32;
      }
      $138 = HEAP32[$c1>>2]|0;
      $139 = ($138|0)<=(32);
      if (!($139)) {
       break L32;
      }
      $140 = HEAP32[11099]|0;
      $141 = ($140|0)==(20);
      $142 = HEAP32[11099]|0;
      $143 = ($142|0)==(36);
      $or$cond17 = $141 | $143;
      if (!($or$cond17)) {
       break L32;
      }
      $144 = HEAP32[$c1>>2]|0;
      $145 = (($144) + 57344)|0;
      HEAP32[$c1>>2] = $145;
      break L32;
     }
    } while(0);
    $146 = HEAP32[$c1>>2]|0;
    $147 = ($146|0)==(60);
    $148 = HEAP32[11098]|0;
    $149 = ($148|0)!=(60);
    $or$cond19 = $147 & $149;
    if ($or$cond19) {
     $150 = HEAP32[$c2>>2]|0;
     $151 = ($150|0)==(33);
     if ($151) {
      while(1) {
       $152 = (__Z3Eofv()|0);
       $153 = ($152|0)!=(0);
       $154 = HEAP32[$c1>>2]|0;
       $155 = ($154|0)!=(62);
       $156 = $153 ? 0 : $155;
       if (!($156)) {
        break;
       }
       $157 = (__ZL4GetCv()|0);
       HEAP32[$c1>>2] = $157;
      }
      HEAP32[$c2>>2] = 32;
      break;
     }
     $158 = HEAP32[$c2>>2]|0;
     $159 = ($158|0)==(47);
     if (!($159)) {
      $160 = HEAP32[$c2>>2]|0;
      $161 = (__Z9iswalpha2i($160)|0);
      $162 = ($161|0)!=(0);
      if (!($162)) {
       break;
      }
     }
     $163 = HEAP32[$ix>>2]|0;
     $164 = $6;
     $165 = (($164) - 20)|0;
     $166 = ($163|0)>($165|0);
     if ($166) {
      label = 55;
      break L10;
     }
     $n_xml_buf = 0;
     $176 = HEAP32[$c2>>2]|0;
     HEAP32[$c1>>2] = $176;
     while(1) {
      $177 = (__Z3Eofv()|0);
      $178 = ($177|0)==(0);
      $179 = HEAP32[$c1>>2]|0;
      $180 = ($179|0)!=(62);
      $or$cond21 = $178 & $180;
      $181 = $n_xml_buf;
      $182 = ($181|0)<(256);
      $or$cond63 = $or$cond21 & $182;
      if (!($or$cond63)) {
       break;
      }
      $183 = HEAP32[$c1>>2]|0;
      $184 = $n_xml_buf;
      $185 = (($184) + 1)|0;
      $n_xml_buf = $185;
      $186 = (($xml_buf) + ($184<<2)|0);
      HEAP32[$186>>2] = $183;
      $187 = (__ZL4GetCv()|0);
      HEAP32[$c1>>2] = $187;
     }
     $188 = $n_xml_buf;
     $189 = (($xml_buf) + ($188<<2)|0);
     HEAP32[$189>>2] = 0;
     HEAP32[$c2>>2] = 32;
     $self_closing = 0;
     $190 = $n_xml_buf;
     $191 = (($190) - 1)|0;
     $192 = (($xml_buf) + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($193|0)==(47);
     if ($194) {
      $195 = $n_xml_buf;
      $196 = (($195) - 1)|0;
      $197 = (($xml_buf) + ($196<<2)|0);
      HEAP32[$197>>2] = 32;
      $self_closing = 1;
     }
     $198 = $3;
     $199 = $6;
     $200 = $self_closing;
     $201 = (__ZL14ProcessSsmlTagPwPcPiii($xml_buf,$198,$ix,$199,$200)|0);
     $terminator = $201;
     $202 = $terminator;
     $203 = ($202|0)!=(0);
     if ($203) {
      label = 62;
      break L10;
     }
     HEAP32[$c1>>2] = 32;
     $219 = (__ZL4GetCv()|0);
     HEAP32[$c2>>2] = $219;
     continue L10;
    }
   }
  } while(0);
  HEAP32[11098] = 0;
  $220 = HEAP32[11119]|0;
  $221 = ($220|0)!=(0);
  if ($221) {
   continue;
  }
  $222 = HEAP32[$c2>>2]|0;
  $223 = ($222|0)==(10);
  $224 = HEAP32[19125]|0;
  $225 = ($224|0)==(-1);
  $or$cond24 = $223 & $225;
  $226 = HEAP32[$c1>>2]|0;
  if ($or$cond24) {
   label = 70;
   break;
  }
  $256 = ($226|0)==(1);
  if ($256) {
   label = 76;
  } else {
   $257 = HEAP32[$c1>>2]|0;
   $258 = HEAP8[22675]|0;
   $259 = $258 << 24 >> 24;
   $260 = ($257|0)==($259|0);
   if ($260) {
    label = 76;
   }
  }
  if ((label|0) == 76) {
   label = 0;
   $261 = HEAP32[$c2>>2]|0;
   $262 = ($261|0)==(86);
   if ($262) {
    label = 77;
    break;
   }
   $286 = HEAP32[$c2>>2]|0;
   $287 = ($286|0)==(66);
   if ($287) {
    $288 = HEAP32[$ix>>2]|0;
    $289 = $3;
    $290 = (($289) + ($288)|0);
    (_strcpy($290,21236)|0);
    $291 = HEAP32[$ix>>2]|0;
    $292 = (($291) + 3)|0;
    HEAP32[$ix>>2] = $292;
    $293 = (__ZL4GetCv()|0);
    HEAP32[$c2>>2] = $293;
    $294 = ($293|0)==(48);
    if ($294) {
     HEAP32[19045] = 0;
    } else {
     HEAP32[19045] = 1;
     HEAP32[19064] = 0;
     $295 = HEAP32[$c2>>2]|0;
     $296 = ($295|0)!=(49);
     if ($296) {
      $j = 0;
      while(1) {
       $297 = HEAP32[$c2>>2]|0;
       $298 = (_iswspace($297)|0);
       $299 = ($298|0)!=(0);
       if ($299) {
        break;
       }
       $300 = (__Z3Eofv()|0);
       $301 = ($300|0)!=(0);
       $302 = $301 ^ 1;
       if (!($302)) {
        break;
       }
       $303 = HEAP32[$c2>>2]|0;
       $304 = $j;
       $305 = (($304) + 1)|0;
       $j = $305;
       $306 = (76256 + ($304<<2)|0);
       HEAP32[$306>>2] = $303;
       $307 = (__ZL4GetCv()|0);
       HEAP32[$c2>>2] = $307;
       $308 = HEAP32[$ix>>2]|0;
       $309 = (($308) + 1)|0;
       HEAP32[$ix>>2] = $309;
       $310 = $3;
       $311 = (($310) + ($308)|0);
       HEAP8[$311>>0] = 32;
      }
      $312 = $j;
      $313 = (76256 + ($312<<2)|0);
      HEAP32[$313>>2] = 0;
      HEAP32[19045] = 2;
     }
    }
    $314 = (__ZL4GetCv()|0);
    HEAP32[$c2>>2] = $314;
    continue;
   }
  }
  $315 = $linelength;
  $316 = (($315) + 1)|0;
  $linelength = $316;
  $317 = $1;
  $318 = ((($317)) + 460|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = HEAP32[$c1>>2]|0;
  $321 = (__Z12lookupwchar2PKti($319,$320)|0);
  $j = $321;
  $322 = ($321|0)!=(0);
  if ($322) {
   $323 = $j;
   $324 = ($323|0)==(1);
   if ($324) {
    continue;
   }
   $325 = $j;
   HEAP32[$c1>>2] = $325;
  }
  $326 = HEAP32[$c1>>2]|0;
  $327 = (_iswalnum($326)|0);
  $328 = ($327|0)!=(0);
  if ($328) {
   $any_alnum = 1;
  } else {
   $329 = $stressed_word;
   $330 = ($329|0)!=(0);
   if ($330) {
    $stressed_word = 0;
    HEAP32[$c1>>2] = 1328;
    $331 = HEAP32[$c2>>2]|0;
    __ZL6UngetCi($331);
    HEAP32[$c2>>2] = 32;
   }
   $332 = HEAP32[$c1>>2]|0;
   $333 = ($332|0)==(3851);
   if ($333) {
    HEAP32[$c1>>2] = 32;
   }
   $334 = HEAP32[$c1>>2]|0;
   $335 = (_iswspace($334)|0);
   $336 = ($335|0)!=(0);
   do {
    if ($336) {
     $337 = $1;
     $338 = ((($337)) + 324|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = ($339|0)==(6972015);
     if (!($340)) {
      break;
     }
     $341 = HEAP32[$ix>>2]|0;
     $342 = (($341) - 1)|0;
     $343 = $3;
     $344 = (($343) + ($342)|0);
     $p_word = $344;
     $345 = $p_word;
     $346 = HEAP8[$345>>0]|0;
     $347 = $346 << 24 >> 24;
     $348 = ($347|0)==(105);
     if (!($348)) {
      break;
     }
     $349 = $p_word;
     $350 = ((($349)) + -1|0);
     $351 = HEAP8[$350>>0]|0;
     $352 = $351 << 24 >> 24;
     $353 = ($352|0)==(46);
     if ($353) {
      $354 = $p_word;
      $355 = ((($354)) + -1|0);
      $p_word = $355;
     }
     $356 = $p_word;
     $357 = ((($356)) + -1|0);
     $358 = HEAP8[$357>>0]|0;
     $359 = $358 << 24 >> 24;
     $360 = ($359|0)==(32);
     if ($360) {
      label = 108;
      break L10;
     }
    }
   } while(0);
   $363 = HEAP32[$c1>>2]|0;
   $364 = ($363|0)==(3405);
   $365 = HEAP32[$c2>>2]|0;
   $366 = ($365|0)==(8205);
   $or$cond65 = $364 & $366;
   if ($or$cond65) {
    HEAP32[$c1>>2] = 3406;
   }
  }
  $367 = HEAP32[$c1>>2]|0;
  $368 = (__Z9iswupper2i($367)|0);
  $369 = ($368|0)!=(0);
  do {
   if ($369) {
    $370 = $1;
    $371 = ((($370)) + 8336|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + 1)|0;
    HEAP32[$371>>2] = $373;
    $374 = HEAP32[19044]|0;
    $375 = ($374|0)==(2);
    $376 = HEAP32[11099]|0;
    $377 = ($376|0)==(0);
    $or$cond29 = $375 & $377;
    if ($or$cond29) {
     $378 = $cprev;
     $379 = (__Z9iswupper2i($378)|0);
     $380 = ($379|0)!=(0);
     if (!($380)) {
      $381 = $1;
      $382 = (__ZL13LookupSpecialP10TranslatorPKcPc($381,21915,$text_buf2)|0);
      $383 = ($382|0)!=(0|0);
      if ($383) {
       HEAP32[$vararg_buffer76>>2] = $text_buf2;
       (_sprintf($text_buf,25839,$vararg_buffer76)|0);
       $384 = (_strlen($text_buf)|0);
       $j = $384;
       $385 = HEAP32[$ix>>2]|0;
       $386 = $j;
       $387 = (($385) + ($386))|0;
       $388 = $6;
       $389 = ($387|0)<($388|0);
       if (!($389)) {
        break;
       }
       $390 = HEAP32[$ix>>2]|0;
       $391 = $3;
       $392 = (($391) + ($390)|0);
       (_strcpy($392,$text_buf)|0);
       $393 = $j;
       $394 = HEAP32[$ix>>2]|0;
       $395 = (($394) + ($393))|0;
       HEAP32[$ix>>2] = $395;
      }
     }
    }
   } else {
    $396 = HEAP32[$c1>>2]|0;
    $397 = (__Z9iswalpha2i($396)|0);
    $398 = ($397|0)!=(0);
    if ($398) {
     $399 = $1;
     $400 = ((($399)) + 8340|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = (($401) + 1)|0;
     HEAP32[$400>>2] = $402;
    }
   }
  } while(0);
  $403 = HEAP32[19048]|0;
  $404 = ($403|0)!=(0);
  do {
   if ($404) {
    $405 = $phoneme_mode;
    $406 = ($405|0)>(0);
    if ($406) {
     $407 = $phoneme_mode;
     $408 = (($407) + -1)|0;
     $phoneme_mode = $408;
     break;
    }
    $409 = HEAP32[$c1>>2]|0;
    $410 = ($409|0)==(91);
    $411 = HEAP32[$c2>>2]|0;
    $412 = ($411|0)==(91);
    $or$cond31 = $410 & $412;
    if ($or$cond31) {
     $phoneme_mode = -1;
     break;
    }
    $413 = HEAP32[$c1>>2]|0;
    $414 = ($413|0)==(93);
    $415 = HEAP32[$c2>>2]|0;
    $416 = ($415|0)==(93);
    $or$cond33 = $414 & $416;
    if (!($or$cond33)) {
     break;
    }
    $phoneme_mode = 2;
   }
  } while(0);
  $417 = HEAP32[$c1>>2]|0;
  $418 = ($417|0)==(10);
  if ($418) {
   $parag = 0;
   while(1) {
    $419 = (__Z3Eofv()|0);
    $420 = ($419|0)!=(0);
    if ($420) {
     break;
    }
    $421 = HEAP32[$c2>>2]|0;
    $422 = (_iswspace($421)|0);
    $423 = ($422|0)!=(0);
    if (!($423)) {
     break;
    }
    $424 = HEAP32[$c2>>2]|0;
    $425 = ($424|0)==(10);
    if ($425) {
     $426 = $parag;
     $427 = (($426) + 1)|0;
     $parag = $427;
    }
    $428 = (__ZL4GetCv()|0);
    HEAP32[$c2>>2] = $428;
   }
   $429 = $parag;
   $430 = ($429|0)>(0);
   if ($430) {
    label = 134;
    break;
   }
   $451 = $linelength;
   $452 = HEAP32[19125]|0;
   $453 = ($451|0)<=($452|0);
   if ($453) {
    label = 142;
    break;
   }
   $linelength = 0;
  }
  $announced_punctuation = 0;
  $462 = $phoneme_mode;
  $463 = ($462|0)==(0);
  $464 = HEAP32[11099]|0;
  $465 = ($464|0)==(0);
  $or$cond36 = $463 & $465;
  do {
   if ($or$cond36) {
    $is_end_clause = 0;
    $466 = $end_clause_after_tag;
    $467 = ($466|0)!=(0);
    do {
     if ($467) {
      $468 = HEAP32[$c1>>2]|0;
      $469 = (_iswspace($468)|0);
      $470 = ($469|0)!=(0);
      if ($470) {
       break;
      }
      $471 = HEAP32[$c1>>2]|0;
      $472 = (__Z7IsAlphaj($471)|0);
      $473 = ($472|0)!=(0);
      if (!($473)) {
       label = 149;
       break L10;
      }
      $474 = HEAP32[$c1>>2]|0;
      $475 = (__Z9iswlower2i($474)|0);
      $476 = ($475|0)!=(0);
      if (!($476)) {
       label = 149;
       break L10;
      }
      $end_clause_after_tag = 0;
     }
    } while(0);
    $487 = HEAP32[$c1>>2]|0;
    $488 = ($487|0)==(46);
    $489 = HEAP32[$c2>>2]|0;
    $490 = ($489|0)==(46);
    $or$cond38 = $488 & $490;
    do {
     if ($or$cond38) {
      while(1) {
       $491 = (__ZL4GetCv()|0);
       $c_next = $491;
       $492 = ($491|0)==(46);
       if (!($492)) {
        break;
       }
       HEAP32[$c1>>2] = 8230;
       HEAP32[$c2>>2] = 32;
      }
      $493 = HEAP32[$c1>>2]|0;
      $494 = ($493|0)==(8230);
      $495 = $c_next;
      if ($494) {
       HEAP32[$c2>>2] = $495;
       break;
      } else {
       __ZL6UngetCi($495);
       break;
      }
     }
    } while(0);
    $punct_data = 0;
    $496 = HEAP32[$c1>>2]|0;
    $497 = (__Z11lookupwcharPKti(6266,$496)|0);
    $punct = $497;
    $498 = ($497|0)!=(0);
    L173: do {
     if ($498) {
      $499 = $punct;
      $500 = (2404 + ($499<<2)|0);
      $501 = HEAP32[$500>>2]|0;
      $punct_data = $501;
      $502 = $punct_data;
      $503 = $502 & 1048576;
      $504 = ($503|0)!=(0);
      if ($504) {
       $stressed_word = 1;
       $505 = $punct_data;
       $506 = $505 >> 12;
       $507 = $506 & 15;
       $508 = $7;
       HEAP32[$508>>2] = $507;
       continue L10;
      }
      $509 = HEAP32[$c2>>2]|0;
      $510 = (_iswspace($509)|0);
      $511 = ($510|0)!=(0);
      do {
       if (!($511)) {
        $512 = $punct_data;
        $513 = $512 & 32768;
        $514 = ($513|0)!=(0);
        if ($514) {
         break;
        }
        $515 = HEAP32[$c2>>2]|0;
        $516 = (__Z9IsBracketi($515)|0);
        $517 = ($516|0)!=(0);
        $518 = HEAP32[$c2>>2]|0;
        $519 = ($518|0)==(63);
        $or$cond40 = $517 | $519;
        if ($or$cond40) {
         break;
        }
        $520 = (__Z3Eofv()|0);
        $521 = ($520|0)!=(0);
        if ($521) {
         break;
        }
        $522 = HEAP32[$c2>>2]|0;
        $523 = HEAP8[22675]|0;
        $524 = $523 << 24 >> 24;
        $525 = ($522|0)==($524|0);
        if (!($525)) {
         break L173;
        }
       }
      } while(0);
      $is_end_clause = 1;
     }
    } while(0);
    $526 = HEAP32[$c1>>2]|0;
    $527 = ($526|0)==(57404);
    if ($527) {
     HEAP32[$c1>>2] = 60;
    }
    $528 = HEAP32[19045]|0;
    $529 = ($528|0)!=(0);
    do {
     if ($529) {
      $530 = HEAP32[$c1>>2]|0;
      $531 = (_iswpunct($530)|0);
      $532 = ($531|0)!=(0);
      $533 = HEAP32[11120]|0;
      $534 = ($533|0)==(0);
      $or$cond42 = $532 & $534;
      if (!($or$cond42)) {
       break;
      }
      $535 = HEAP32[19045]|0;
      $536 = ($535|0)==(1);
      if (!($536)) {
       $537 = HEAP32[$c1>>2]|0;
       $538 = (_wcschr(76256,$537)|0);
       $539 = ($538|0)!=(0|0);
       if (!($539)) {
        break;
       }
      }
      $540 = $1;
      $541 = ((($540)) + 400|0);
      HEAP32[$541>>2] = 0;
      $542 = $1;
      $543 = HEAP32[$c1>>2]|0;
      $544 = $3;
      $545 = $is_end_clause;
      $546 = (__ZL19AnnouncePunctuationP10TranslatoriPiPcS1_i($542,$543,$c2,$544,$ix,$545)|0);
      $terminator = $546;
      $547 = ($546|0)>=(0);
      if ($547) {
       label = 173;
       break L10;
      }
      $549 = HEAP32[$c1>>2]|0;
      $announced_punctuation = $549;
     }
    } while(0);
    $550 = $punct_data;
    $551 = $550 & 2097152;
    $552 = ($551|0)!=(0);
    $553 = $announced_punctuation;
    $554 = ($553|0)==(0);
    $or$cond44 = $552 & $554;
    do {
     if ($or$cond44) {
      $555 = HEAP32[$ix>>2]|0;
      $556 = $3;
      $557 = (($556) + ($555)|0);
      $p2 = $557;
      $558 = $p2;
      $559 = $1;
      $560 = HEAP32[$c1>>2]|0;
      $561 = (__ZL14LookupCharNameP10Translatorii($559,$560,1)|0);
      HEAP32[$vararg_buffer79>>2] = $561;
      (_sprintf($558,25839,$vararg_buffer79)|0);
      $562 = $p2;
      $563 = HEAP8[$562>>0]|0;
      $564 = $563 << 24 >> 24;
      $565 = ($564|0)!=(0);
      if (!($565)) {
       break;
      }
      $566 = $p2;
      $567 = (_strlen($566)|0);
      $568 = HEAP32[$ix>>2]|0;
      $569 = (($568) + ($567))|0;
      HEAP32[$ix>>2] = $569;
      $570 = HEAP32[$c1>>2]|0;
      $announced_punctuation = $570;
      $571 = $punct_data;
      $572 = $571 & -28673;
      $punct_data = $572;
     }
    } while(0);
    $573 = $is_end_clause;
    $574 = ($573|0)!=(0);
    if (!($574)) {
     break;
    }
    $nl_count = 0;
    $575 = HEAP32[$c2>>2]|0;
    $c_next = $575;
    $576 = $c_next;
    $577 = (_iswspace($576)|0);
    $578 = ($577|0)!=(0);
    L201: do {
     if ($578) {
      while(1) {
       $579 = (__Z3Eofv()|0);
       $580 = ($579|0)!=(0);
       if ($580) {
        break L201;
       }
       $581 = $c_next;
       $582 = (_iswspace($581)|0);
       $583 = ($582|0)!=(0);
       if (!($583)) {
        break L201;
       }
       $584 = $c_next;
       $585 = ($584|0)==(10);
       if ($585) {
        $586 = $nl_count;
        $587 = (($586) + 1)|0;
        $nl_count = $587;
       }
       $588 = (__ZL4GetCv()|0);
       $c_next = $588;
      }
     }
    } while(0);
    $589 = HEAP32[$c1>>2]|0;
    $590 = ($589|0)==(46);
    $591 = $nl_count;
    $592 = ($591|0)<(2);
    $or$cond47 = $590 & $592;
    if ($or$cond47) {
     $593 = $punct_data;
     $594 = $593 | 4194304;
     $punct_data = $594;
    }
    $595 = $nl_count;
    $596 = ($595|0)==(0);
    do {
     if ($596) {
      $597 = HEAP32[$c1>>2]|0;
      $598 = ($597|0)==(44);
      $599 = $cprev;
      $600 = ($599|0)==(46);
      $or$cond49 = $598 & $600;
      do {
       if ($or$cond49) {
        $601 = $1;
        $602 = ((($601)) + 324|0);
        $603 = HEAP32[$602>>2]|0;
        $604 = ($603|0)==(26741);
        if (!($604)) {
         break;
        }
        $605 = $cprev2;
        $606 = (_iswdigit($605)|0);
        $607 = ($606|0)!=(0);
        if (!($607)) {
         break;
        }
        $608 = $c_next;
        $609 = (_iswdigit($608)|0);
        $610 = ($609|0)!=(0);
        if (!($610)) {
         $611 = $c_next;
         $612 = (__Z9iswlower2i($611)|0);
         $613 = ($612|0)!=(0);
         if (!($613)) {
          break;
         }
        }
        HEAP32[$c1>>2] = 1367;
        $is_end_clause = 0;
       }
      } while(0);
      $614 = HEAP32[$c1>>2]|0;
      $615 = ($614|0)==(46);
      do {
       if ($615) {
        $616 = $1;
        $617 = ((($616)) + 200|0);
        $618 = HEAP32[$617>>2]|0;
        $619 = $618 & 65536;
        $620 = ($619|0)!=(0);
        L225: do {
         if ($620) {
          $621 = $cprev;
          $622 = (_iswdigit($621)|0);
          $623 = ($622|0)!=(0);
          do {
           if (!($623)) {
            $624 = $cprev;
            $625 = (__ZL8IsRomanUj($624)|0);
            $626 = ($625|0)!=(0);
            if (!($626)) {
             label = 204;
             break L225;
            }
            $627 = $cprev2;
            $628 = (__ZL8IsRomanUj($627)|0);
            $629 = ($628|0)!=(0);
            if ($629) {
             break;
            }
            $630 = $cprev2;
            $631 = (_iswspace($630)|0);
            $632 = ($631|0)!=(0);
            if (!($632)) {
             label = 204;
             break L225;
            }
           }
          } while(0);
          $633 = $cprev;
          $634 = (_iswdigit($633)|0);
          $635 = ($634|0)!=(0);
          if (!($635)) {
           $is_end_clause = 0;
           break;
          }
          $636 = $c_next;
          $637 = (__Z9iswlower2i($636)|0);
          $638 = ($637|0)!=(0);
          $639 = $c_next;
          $640 = ($639|0)==(45);
          $or$cond51 = $638 | $640;
          if (!($or$cond51)) {
           break;
          }
          $is_end_clause = 0;
         } else {
          label = 204;
         }
        } while(0);
        do {
         if ((label|0) == 204) {
          label = 0;
          $641 = $c_next;
          $642 = ($641|0)==(39);
          if (!($642)) {
           break;
          }
          $is_end_clause = 0;
         }
        } while(0);
        $643 = $c_next;
        $644 = (__Z9iswlower2i($643)|0);
        $645 = ($644|0)!=(0);
        if ($645) {
         $is_end_clause = 0;
        }
        $646 = $any_alnum;
        $647 = ($646|0)==(0);
        if (!($647)) {
         break;
        }
        HEAP32[$c1>>2] = 32;
        $is_end_clause = 0;
       } else {
        $648 = $any_alnum;
        $649 = ($648|0)==(0);
        if (!($649)) {
         break;
        }
        $is_end_clause = 0;
       }
      } while(0);
      $650 = $is_end_clause;
      $651 = ($650|0)!=(0);
      $652 = HEAP32[$c1>>2]|0;
      $653 = ($652|0)==(46);
      $or$cond53 = $651 & $653;
      $654 = $c_next;
      $655 = ($654|0)==(60);
      $or$cond55 = $or$cond53 & $655;
      $656 = HEAP32[19047]|0;
      $657 = ($656|0)!=(0);
      $or$cond57 = $or$cond55 & $657;
      if (!($or$cond57)) {
       break;
      }
      $is_end_clause = 0;
      $658 = HEAP32[$ix>>2]|0;
      $end_clause_index = $658;
      $659 = $punct_data;
      $end_clause_after_tag = $659;
     }
    } while(0);
    $660 = $is_end_clause;
    $661 = ($660|0)!=(0);
    if ($661) {
     label = 215;
     break L10;
    }
    $686 = (__Z3Eofv()|0);
    $687 = ($686|0)!=(0);
    if ($687) {
     break;
    }
    $688 = HEAP32[$c2>>2]|0;
    $689 = (_iswspace($688)|0);
    $690 = ($689|0)!=(0);
    if (!($690)) {
     break;
    }
    $691 = $c_next;
    __ZL6UngetCi($691);
   }
  } while(0);
  $692 = HEAP32[11103]|0;
  $693 = ($692|0)==(1);
  if ($693) {
   continue;
  }
  $694 = HEAP32[$c1>>2]|0;
  $695 = $announced_punctuation;
  $696 = ($694|0)==($695|0);
  do {
   if ($696) {
    $697 = HEAP32[$c1>>2]|0;
    $698 = (__Z9IsBracketi($697)|0);
    $699 = ($698|0)!=(0);
    if ($699) {
     HEAP32[$c1>>2] = 57384;
     break;
    }
    $700 = HEAP32[$c1>>2]|0;
    $701 = ($700|0)!=(45);
    if (!($701)) {
     break;
    }
    HEAP32[$c1>>2] = 32;
   }
  } while(0);
  $702 = HEAP32[$ix>>2]|0;
  $703 = (($702) + 1)|0;
  $j = $703;
  $704 = HEAP32[$c1>>2]|0;
  $705 = ($704|0)==(57404);
  if ($705) {
   HEAP32[$c1>>2] = 60;
  }
  $706 = HEAP32[$c1>>2]|0;
  $707 = HEAP32[$ix>>2]|0;
  $708 = $3;
  $709 = (($708) + ($707)|0);
  $710 = (__Z8utf8_outjPc($706,$709)|0);
  $711 = HEAP32[$ix>>2]|0;
  $712 = (($711) + ($710))|0;
  HEAP32[$ix>>2] = $712;
  $713 = HEAP32[$c1>>2]|0;
  $714 = (_iswspace($713)|0);
  $715 = ($714|0)!=(0);
  L264: do {
   if (!($715)) {
    $716 = HEAP32[$c1>>2]|0;
    $717 = (__Z9IsBracketi($716)|0);
    $718 = ($717|0)!=(0);
    if ($718) {
     break;
    }
    $719 = HEAP32[10367]|0;
    $720 = HEAP32[19058]|0;
    $721 = (($719) - ($720))|0;
    $722 = $721&65535;
    $723 = HEAP32[$ix>>2]|0;
    $724 = $4;
    $725 = (($724) + ($723<<1)|0);
    HEAP16[$725>>1] = $722;
    while(1) {
     $726 = $j;
     $727 = HEAP32[$ix>>2]|0;
     $728 = ($726|0)<($727|0);
     if (!($728)) {
      break L264;
     }
     $729 = $j;
     $730 = (($729) + 1)|0;
     $j = $730;
     $731 = $4;
     $732 = (($731) + ($729<<1)|0);
     HEAP16[$732>>1] = -1;
    }
   }
  } while(0);
  $733 = HEAP32[$ix>>2]|0;
  $734 = $5;
  HEAP32[$734>>2] = $733;
  $735 = HEAP32[$ix>>2]|0;
  $736 = $6;
  $737 = (($736) - 75)|0;
  $738 = ($735|0)>($737|0);
  do {
   if ($738) {
    $739 = HEAP32[$c1>>2]|0;
    $740 = (__Z7IsAlphaj($739)|0);
    $741 = ($740|0)!=(0);
    if ($741) {
     break;
    }
    $742 = HEAP32[$c1>>2]|0;
    $743 = (_iswdigit($742)|0);
    $744 = ($743|0)!=(0);
    if (!($744)) {
     label = 243;
     break L10;
    }
   }
  } while(0);
  $745 = HEAP32[$ix>>2]|0;
  $746 = $6;
  $747 = (($746) - 4)|0;
  $748 = ($745|0)>=($747|0);
  if ($748) {
   label = 243;
   break;
  }
 }
 switch (label|0) {
  case 12: {
   HEAP32[10705] = 1;
   $0 = 589864;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 15: {
   HEAP32[11094] = 1;
   HEAP32[19053] = 0;
   $53 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($53);
   $0 = 16384;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 55: {
   $167 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($167);
   $168 = HEAP32[$c1>>2]|0;
   HEAP32[11096] = $168;
   $169 = HEAP32[$ix>>2]|0;
   $170 = $3;
   $171 = (($170) + ($169)|0);
   HEAP8[$171>>0] = 32;
   $172 = HEAP32[$ix>>2]|0;
   $173 = (($172) + 1)|0;
   $174 = $3;
   $175 = (($174) + ($173)|0);
   HEAP8[$175>>0] = 0;
   $0 = 16384;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 62: {
   $204 = $end_clause_after_tag;
   $205 = ($204|0)!=(0);
   if ($205) {
    $206 = $end_clause_index;
    HEAP32[$ix>>2] = $206;
   }
   $207 = HEAP32[$ix>>2]|0;
   $208 = $3;
   $209 = (($208) + ($207)|0);
   HEAP8[$209>>0] = 32;
   $210 = HEAP32[$ix>>2]|0;
   $211 = (($210) + 1)|0;
   HEAP32[$ix>>2] = $211;
   $212 = $3;
   $213 = (($212) + ($210)|0);
   HEAP8[$213>>0] = 0;
   $214 = $terminator;
   $215 = $214 & 131072;
   $216 = ($215|0)!=(0);
   if ($216) {
    $217 = $8;
    (_strcpy($217,119529)|0);
   }
   $218 = $terminator;
   $0 = $218;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 70: {
   $227 = (__Z11lookupwcharPKti(6266,$226)|0);
   $punct = $227;
   $228 = ($227|0)==(0);
   if ($228) {
    $229 = HEAP32[10367]|0;
    $230 = HEAP32[19058]|0;
    $231 = (($229) - ($230))|0;
    $232 = $231&65535;
    $233 = HEAP32[$ix>>2]|0;
    $234 = $4;
    $235 = (($234) + ($233<<1)|0);
    HEAP16[$235>>1] = $232;
    $236 = HEAP32[$ix>>2]|0;
    $237 = $5;
    HEAP32[$237>>2] = $236;
    $238 = HEAP32[$c1>>2]|0;
    $239 = HEAP32[$ix>>2]|0;
    $240 = $3;
    $241 = (($240) + ($239)|0);
    $242 = (__Z8utf8_outjPc($238,$241)|0);
    $243 = HEAP32[$ix>>2]|0;
    $244 = (($243) + ($242))|0;
    HEAP32[$ix>>2] = $244;
    $terminator = 524328;
   } else {
    $245 = $punct;
    $246 = (2404 + ($245<<2)|0);
    $247 = HEAP32[$246>>2]|0;
    $terminator = $247;
   }
   $248 = HEAP32[$ix>>2]|0;
   $249 = $3;
   $250 = (($249) + ($248)|0);
   HEAP8[$250>>0] = 32;
   $251 = HEAP32[$ix>>2]|0;
   $252 = (($251) + 1)|0;
   $253 = $3;
   $254 = (($253) + ($252)|0);
   HEAP8[$254>>0] = 0;
   $255 = $terminator;
   $0 = $255;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 77: {
   $263 = HEAP32[$ix>>2]|0;
   $264 = (($263) + 1)|0;
   HEAP32[$ix>>2] = $264;
   $265 = $3;
   $266 = (($265) + ($263)|0);
   HEAP8[$266>>0] = 0;
   while(1) {
    $267 = (__ZL4GetCv()|0);
    HEAP32[$c1>>2] = $267;
    $268 = (_iswspace($267)|0);
    $269 = ($268|0)!=(0);
    if ($269) {
     break;
    }
    $270 = (__Z3Eofv()|0);
    $271 = ($270|0)!=(0);
    if ($271) {
     break;
    }
    $272 = HEAP32[$ix>>2]|0;
    $273 = $6;
    $274 = (($273) - 1)|0;
    $275 = ($272|0)<($274|0);
    if (!($275)) {
     break;
    }
    $276 = HEAP32[$c1>>2]|0;
    $277 = $276&255;
    $278 = HEAP32[$ix>>2]|0;
    $279 = (($278) + 1)|0;
    HEAP32[$ix>>2] = $279;
    $280 = $3;
    $281 = (($280) + ($278)|0);
    HEAP8[$281>>0] = $277;
   }
   $282 = HEAP32[$ix>>2]|0;
   $283 = (($282) + 1)|0;
   HEAP32[$ix>>2] = $283;
   $284 = $3;
   $285 = (($284) + ($282)|0);
   HEAP8[$285>>0] = 0;
   $0 = 147456;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 108: {
   HEAP32[11095] = 21240;
   $361 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($361);
   $362 = $p_word;
   HEAP8[$362>>0] = 0;
   $0 = 524328;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 134: {
   $431 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($431);
   $432 = $end_clause_after_tag;
   $433 = ($432|0)!=(0);
   if ($433) {
    $434 = $end_clause_index;
    $435 = $3;
    $436 = (($435) + ($434)|0);
    __ZL10RemoveCharPc($436);
   }
   $437 = HEAP32[$ix>>2]|0;
   $438 = $3;
   $439 = (($438) + ($437)|0);
   HEAP8[$439>>0] = 32;
   $440 = HEAP32[$ix>>2]|0;
   $441 = (($440) + 1)|0;
   $442 = $3;
   $443 = (($442) + ($441)|0);
   HEAP8[$443>>0] = 0;
   $444 = $parag;
   $445 = ($444|0)>(3);
   if ($445) {
    $parag = 3;
   }
   $446 = HEAP32[19047]|0;
   $447 = ($446|0)!=(0);
   if ($447) {
    $parag = 1;
   }
   $448 = $parag;
   $449 = ($448*30)|0;
   $450 = (524328 + ($449))|0;
   $0 = $450;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 142: {
   $454 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($454);
   $455 = HEAP32[$ix>>2]|0;
   $456 = $3;
   $457 = (($456) + ($455)|0);
   HEAP8[$457>>0] = 32;
   $458 = HEAP32[$ix>>2]|0;
   $459 = (($458) + 1)|0;
   $460 = $3;
   $461 = (($460) + ($459)|0);
   HEAP8[$461>>0] = 0;
   $0 = 262174;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 149: {
   $477 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($477);
   $478 = HEAP32[$c1>>2]|0;
   HEAP32[11096] = $478;
   $479 = $end_clause_index;
   $480 = $3;
   $481 = (($480) + ($479)|0);
   HEAP8[$481>>0] = 32;
   $482 = $end_clause_index;
   $483 = (($482) + 1)|0;
   $484 = $3;
   $485 = (($484) + ($483)|0);
   HEAP8[$485>>0] = 0;
   $486 = $end_clause_after_tag;
   $0 = $486;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 173: {
   $548 = $terminator;
   $0 = $548;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 215: {
   $662 = $c_next;
   __ZL6UngetCi($662);
   $663 = HEAP32[$ix>>2]|0;
   $664 = $3;
   $665 = (($664) + ($663)|0);
   HEAP8[$665>>0] = 32;
   $666 = HEAP32[$ix>>2]|0;
   $667 = (($666) + 1)|0;
   $668 = $3;
   $669 = (($668) + ($667)|0);
   HEAP8[$669>>0] = 0;
   $670 = $cprev;
   $671 = (_iswdigit($670)|0);
   $672 = ($671|0)!=(0);
   if ($672) {
    $673 = $c_next;
    $674 = (__Z7IsAlphaj($673)|0);
    $675 = ($674|0)!=(0);
    if (!($675)) {
     $676 = $punct_data;
     $677 = $676 & -4194305;
     $punct_data = $677;
    }
   }
   $678 = $nl_count;
   $679 = ($678|0)>(1);
   $680 = $punct_data;
   if (!($679)) {
    $0 = $680;
    $777 = $0;
    STACKTOP = sp;return ($777|0);
   }
   $681 = ($680|0)==(532520);
   $682 = $punct_data;
   $683 = ($682|0)==(536621);
   $or$cond59 = $681 | $683;
   if ($or$cond59) {
    $684 = $punct_data;
    $685 = (($684) + 35)|0;
    $0 = $685;
    $777 = $0;
    STACKTOP = sp;return ($777|0);
   } else {
    $0 = 524358;
    $777 = $0;
    STACKTOP = sp;return ($777|0);
   }
   break;
  }
  case 243: {
   $749 = HEAP32[$ix>>2]|0;
   $750 = $3;
   $751 = (($750) + ($749)|0);
   HEAP8[$751>>0] = 32;
   $752 = HEAP32[$ix>>2]|0;
   $753 = (($752) + 1)|0;
   $754 = $3;
   $755 = (($754) + ($753)|0);
   HEAP8[$755>>0] = 0;
   $756 = HEAP32[$c2>>2]|0;
   __ZL6UngetCi($756);
   $0 = 16384;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
  case 244: {
   $757 = $stressed_word;
   $758 = ($757|0)!=(0);
   if ($758) {
    $759 = HEAP32[$ix>>2]|0;
    $760 = $3;
    $761 = (($760) + ($759)|0);
    $762 = (__Z8utf8_outjPc(1328,$761)|0);
    $763 = HEAP32[$ix>>2]|0;
    $764 = (($763) + ($762))|0;
    HEAP32[$ix>>2] = $764;
   }
   $765 = $end_clause_after_tag;
   $766 = ($765|0)!=(0);
   if ($766) {
    $767 = $end_clause_index;
    $768 = $3;
    $769 = (($768) + ($767)|0);
    __ZL10RemoveCharPc($769);
   }
   $770 = HEAP32[$ix>>2]|0;
   $771 = $3;
   $772 = (($771) + ($770)|0);
   HEAP8[$772>>0] = 32;
   $773 = HEAP32[$ix>>2]|0;
   $774 = (($773) + 1)|0;
   $775 = $3;
   $776 = (($775) + ($774)|0);
   HEAP8[$776>>0] = 0;
   $0 = 589864;
   $777 = $0;
   STACKTOP = sp;return ($777|0);
   break;
  }
 }
 return (0)|0;
}
function __ZL4GetCv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $c = 0, $c1 = 0, $c2 = 0, $cbuf = 0, $ix = 0, $n_bytes = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cbuf = sp + 8|0;
 $1 = HEAP32[10703]|0;
 $c1 = $1;
 $2 = ($1|0)!=(0);
 if ($2) {
  HEAP32[10703] = 0;
  $3 = $c1;
  $0 = $3;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 $4 = HEAP32[11097]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[11097]|0;
  $c1 = $6;
  HEAP32[11097] = 0;
 } else {
  $7 = (__ZL8GetC_getv()|0);
  $c1 = $7;
 }
 $8 = HEAP32[19124]|0;
 $9 = ($8|0)==(3);
 $10 = HEAP32[19124]|0;
 $11 = ($10|0)==(4);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = HEAP32[10367]|0;
  $13 = (($12) + 1)|0;
  HEAP32[10367] = $13;
  $14 = $c1;
  $0 = $14;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 $15 = HEAP32[19124]|0;
 $16 = ($15|0)<(2);
 if ($16) {
  $17 = $c1;
  $18 = $17 & 128;
  $19 = ($18|0)!=(0);
  if ($19) {
   $n_bytes = 0;
   $20 = $c1;
   $21 = $20 & 224;
   $22 = ($21|0)==(192);
   if ($22) {
    $23 = $c1;
    $24 = $23 & 30;
    $25 = ($24|0)!=(0);
    if ($25) {
     $n_bytes = 1;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
   do {
    if ((label|0) == 13) {
     $26 = $c1;
     $27 = $26 & 240;
     $28 = ($27|0)==(224);
     if ($28) {
      $n_bytes = 2;
      break;
     }
     $29 = $c1;
     $30 = $29 & 248;
     $31 = ($30|0)==(240);
     if ($31) {
      $32 = $c1;
      $33 = $32 & 15;
      $34 = ($33|0)<=(4);
      if ($34) {
       $n_bytes = 3;
      }
     }
    }
   } while(0);
   $35 = $n_bytes;
   $ix = $35;
   $36 = ($35|0)>(0);
   if ($36) {
    $37 = $c1;
    $38 = $ix;
    $39 = (20491 + ($38)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $37 & $41;
    $c = $42;
    while(1) {
     $43 = $ix;
     $44 = ($43|0)>(0);
     if (!($44)) {
      break;
     }
     $45 = (__ZL8GetC_getv()|0);
     $46 = $ix;
     $47 = (($cbuf) + ($46<<2)|0);
     HEAP32[$47>>2] = $45;
     $c2 = $45;
     $48 = ($45|0)==(0);
     if ($48) {
      label = 22;
      break;
     }
     $51 = $c2;
     $52 = $51 & 192;
     $53 = ($52|0)!=(128);
     if ($53) {
      label = 26;
      break;
     }
     $61 = $c;
     $62 = $61 << 6;
     $63 = $c2;
     $64 = $63 & 63;
     $65 = (($62) + ($64))|0;
     $c = $65;
     $66 = $ix;
     $67 = (($66) + -1)|0;
     $ix = $67;
    }
    if ((label|0) == 22) {
     $49 = HEAP32[19124]|0;
     $50 = ($49|0)==(0);
     if ($50) {
      HEAP32[19124] = 2;
     }
     __ZL10GetC_ungeti(32);
    }
    else if ((label|0) == 26) {
     $54 = $n_bytes;
     $55 = ($54|0)==(2);
     $56 = $ix;
     $57 = ($56|0)==(1);
     $or$cond3 = $55 & $57;
     if ($or$cond3) {
      $58 = ((($cbuf)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      HEAP32[11097] = $59;
     }
     $60 = $c2;
     __ZL10GetC_ungeti($60);
    }
    $68 = $ix;
    $69 = ($68|0)==(0);
    if ($69) {
     $70 = HEAP32[10367]|0;
     $71 = (($70) + 1)|0;
     HEAP32[10367] = $71;
     $72 = $c;
     $0 = $72;
     $89 = $0;
     STACKTOP = sp;return ($89|0);
    }
   }
   $73 = HEAP32[19124]|0;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = (__Z3Eofv()|0);
    $76 = ($75|0)!=(0);
    if (!($76)) {
     HEAP32[19124] = 2;
    }
   }
  }
 }
 $77 = HEAP32[10367]|0;
 $78 = (($77) + 1)|0;
 HEAP32[10367] = $78;
 $79 = $c1;
 $80 = ($79|0)>=(160);
 $81 = $c1;
 if ($80) {
  $82 = (($81) - 160)|0;
  $83 = HEAP32[19035]|0;
  $84 = ((($83)) + 448|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($82<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  $0 = $88;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 } else {
  $0 = $81;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function __ZL8GetC_getv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $c2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[10704]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[10704]|0;
  $4 = (_fgetc($3)|0);
  $c = $4;
  $5 = HEAP32[10704]|0;
  $6 = (_feof($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   $c = 32;
  }
  $8 = HEAP32[19124]|0;
  $9 = ($8|0)==(4);
  if ($9) {
   $10 = HEAP32[10704]|0;
   $11 = (_fgetc($10)|0);
   $c2 = $11;
   $12 = HEAP32[10704]|0;
   $13 = (_feof($12)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $c2 = 0;
   }
   $15 = $c;
   $16 = $c2;
   $17 = $16 << 8;
   $18 = (($15) + ($17))|0;
   $c = $18;
  }
  $19 = $c;
  $0 = $19;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $20 = HEAP32[19124]|0;
 $21 = ($20|0)==(3);
 if ($21) {
  $22 = HEAP32[10366]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   HEAP32[10705] = 1;
   $0 = 0;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
  $25 = HEAP32[10705]|0;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $27 = HEAP32[10366]|0;
   $28 = ((($27)) + 4|0);
   HEAP32[10366] = $28;
   $29 = HEAP32[$27>>2]|0;
   $0 = $29;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
 } else {
  $30 = HEAP32[10365]|0;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(0);
  if ($33) {
   HEAP32[10705] = 1;
   $0 = 0;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
  $34 = HEAP32[10705]|0;
  $35 = ($34|0)!=(0);
  if (!($35)) {
   $36 = HEAP32[19124]|0;
   $37 = ($36|0)==(4);
   $38 = HEAP32[10365]|0;
   if ($37) {
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = HEAP32[10365]|0;
    $42 = ((($41)) + 1|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $44 << 8;
    $46 = (($40) + ($45))|0;
    $c = $46;
    $47 = HEAP32[10365]|0;
    $48 = ((($47)) + 2|0);
    HEAP32[10365] = $48;
    $49 = $c;
    $0 = $49;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
   } else {
    $50 = ((($38)) + 1|0);
    HEAP32[10365] = $50;
    $51 = HEAP8[$38>>0]|0;
    $52 = $51&255;
    $53 = $52 & 255;
    $0 = $53;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
   }
  }
 }
 $0 = 0;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function __ZL10GetC_ungeti($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = HEAP32[10704]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[10704]|0;
  (_ungetc($3,$4)|0);
  STACKTOP = sp;return;
 } else {
  $5 = HEAP32[10365]|0;
  $6 = ((($5)) + -1|0);
  HEAP32[10365] = $6;
  $7 = $0;
  $8 = $7&255;
  $9 = HEAP32[10365]|0;
  HEAP8[$9>>0] = $8;
  HEAP32[10705] = 0;
  STACKTOP = sp;return;
 }
}
function __ZL6UngetCi($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 HEAP32[10703] = $1;
 STACKTOP = sp;return;
}
function __ZL14ProcessSsmlTagPwPcPiii($xml_buf,$outbuf,$outix,$n_outbuf,$self_closing) {
 $xml_buf = $xml_buf|0;
 $outbuf = $outbuf|0;
 $outix = $outix|0;
 $n_outbuf = $n_outbuf|0;
 $self_closing = $self_closing|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $attr1 = 0, $attr2 = 0, $attr3 = 0, $buf = 0, $c = 0, $fname = 0, $index = 0, $ix = 0;
 var $param_type = 0, $px = 0, $sp = 0, $ssml_sp = 0, $tag_name = 0, $tag_type = 0, $terminator = 0, $uri = 0, $value = 0, $value2 = 0, $value3 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, $voice_change_flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $tag_name = sp + 480|0;
 $buf = sp + 400|0;
 $fname = sp + 144|0;
 $1 = $xml_buf;
 $2 = $outbuf;
 $3 = $outix;
 $4 = $n_outbuf;
 $5 = $self_closing;
 $ix = 0;
 while(1) {
  $6 = $ix;
  $7 = ($6>>>0)<(39);
  if (!($7)) {
   break;
  }
  $8 = $ix;
  $9 = $1;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $c = $11;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  }
  $13 = $c;
  $14 = (_iswspace($13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   break;
  }
  $16 = $c;
  $17 = $16&255;
  $18 = $17 << 24 >> 24;
  $19 = (_tolower($18)|0);
  $20 = $19&255;
  $21 = $ix;
  $22 = (($tag_name) + ($21)|0);
  HEAP8[$22>>0] = $20;
  $23 = $ix;
  $24 = (($23) + 1)|0;
  $ix = $24;
 }
 $25 = $ix;
 $26 = (($tag_name) + ($25)|0);
 HEAP8[$26>>0] = 0;
 $27 = $ix;
 $28 = $1;
 $29 = (($28) + ($27<<2)|0);
 $px = $29;
 $30 = HEAP8[$tag_name>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = ($31|0)==(47);
 if ($32) {
  $33 = ((($tag_name)) + 1|0);
  $34 = (__Z10LookupMnemP8MNEM_TABPKc(1524,$33)|0);
  $tag_type = $34;
  $35 = ($34|0)!=(16);
  if ($35) {
   $36 = $3;
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$36>>2] = $38;
   $39 = $2;
   $40 = (($39) + ($37)|0);
   HEAP8[$40>>0] = 32;
  }
  $41 = $tag_type;
  $42 = (($41) + 32)|0;
  $tag_type = $42;
 } else {
  $43 = (__Z10LookupMnemP8MNEM_TABPKc(1524,$tag_name)|0);
  $tag_type = $43;
  $44 = ($43|0)!=(16);
  if ($44) {
   $45 = $3;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[$45>>2] = $47;
   $48 = $2;
   $49 = (($48) + ($46)|0);
   HEAP8[$49>>0] = 32;
  }
  $50 = $5;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $tag_type;
   $53 = (20683 + ($52)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)!=(0);
   if ($55) {
    $0 = 0;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   }
  }
 }
 $voice_change_flag = 0;
 $terminator = 16384;
 $56 = HEAP32[11100]|0;
 $57 = (($56) - 1)|0;
 $58 = (42832 + (($57*76)|0)|0);
 $ssml_sp = $58;
 $59 = $tag_type;
 L20: do {
  switch ($59|0) {
  case 10:  {
   $60 = $tag_type;
   $61 = (__ZL14PushParamStacki($60)|0);
   $sp = $61;
   $62 = $px;
   $63 = (__ZL16GetSsmlAttributePwPKc($62,20702)|0);
   $attr1 = $63;
   $64 = $px;
   $65 = (__ZL16GetSsmlAttributePwPKc($64,20708)|0);
   $attr2 = $65;
   $66 = $attr1;
   $67 = (__ZL7attrcmpPKwPKc($66,20713)|0);
   $68 = ($67|0)==(0);
   if ($68) {
    $69 = $attr2;
    $70 = (__ZL10attrlookupPKwPK8MNEM_TAB($69,1788)|0);
    $value = $70;
    $71 = $value;
    $72 = $sp;
    $73 = ((($72)) + 4|0);
    $74 = ((($73)) + 20|0);
    HEAP32[$74>>2] = $71;
   } else {
    $75 = $attr1;
    $76 = (__ZL7attrcmpPKwPKc($75,20739)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     $78 = $attr2;
     $79 = (__ZL10attrlookupPKwPK8MNEM_TAB($78,1820)|0);
     $value = $79;
     $80 = $value;
     $81 = $sp;
     $82 = ((($81)) + 4|0);
     $83 = ((($82)) + 24|0);
     HEAP32[$83>>2] = $80;
    }
   }
   $84 = $2;
   $85 = $3;
   __ZL17ProcessParamStackPcPi($84,$85);
   break;
  }
  case 3:  {
   $86 = $tag_type;
   $87 = (__ZL14PushParamStacki($86)|0);
   $sp = $87;
   $param_type = 1;
   while(1) {
    $88 = $param_type;
    $89 = ($88|0)<=(4);
    if (!($89)) {
     break;
    }
    $90 = $px;
    $91 = $param_type;
    $92 = (1860 + ($91<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (__ZL16GetSsmlAttributePwPKc($90,$93)|0);
    $attr1 = $94;
    $95 = ($94|0)!=(0|0);
    if ($95) {
     $96 = $param_type;
     $97 = $attr1;
     $98 = $sp;
     __ZL19SetProsodyParameteriPwP11PARAM_STACK($96,$97,$98);
    }
    $99 = $param_type;
    $100 = (($99) + 1)|0;
    $param_type = $100;
   }
   $101 = $2;
   $102 = $3;
   __ZL17ProcessParamStackPcPi($101,$102);
   break;
  }
  case 12:  {
   $103 = $tag_type;
   $104 = (__ZL14PushParamStacki($103)|0);
   $sp = $104;
   $value = 3;
   $105 = $px;
   $106 = (__ZL16GetSsmlAttributePwPKc($105,20896)|0);
   $attr1 = $106;
   $107 = ($106|0)!=(0|0);
   if ($107) {
    $108 = $attr1;
    $109 = (__ZL10attrlookupPKwPK8MNEM_TAB($108,2132)|0);
    $value = $109;
   }
   $110 = HEAP32[19035]|0;
   $111 = ((($110)) + 244|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(1);
   $114 = $value;
   if ($113) {
    $115 = (20928 + ($114)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = $sp;
    $119 = ((($118)) + 4|0);
    $120 = ((($119)) + 16|0);
    HEAP32[$120>>2] = $117;
    $121 = $value;
    $122 = (20934 + ($121)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = $sp;
    $126 = ((($125)) + 4|0);
    $127 = ((($126)) + 8|0);
    HEAP32[$127>>2] = $124;
   } else {
    $128 = (20940 + ($114)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $sp;
    $132 = ((($131)) + 4|0);
    $133 = ((($132)) + 8|0);
    HEAP32[$133>>2] = $130;
    $134 = $value;
    $135 = $sp;
    $136 = ((($135)) + 4|0);
    $137 = ((($136)) + 48|0);
    HEAP32[$137>>2] = $134;
   }
   $138 = $2;
   $139 = $3;
   __ZL17ProcessParamStackPcPi($138,$139);
   break;
  }
  case 44: case 35: case 42:  {
   $140 = $tag_type;
   $141 = $2;
   $142 = $3;
   __ZL13PopParamStackiPcPi($140,$141,$142);
   break;
  }
  case 4:  {
   $143 = $px;
   $144 = (__ZL16GetSsmlAttributePwPKc($143,20946)|0);
   $attr1 = $144;
   $145 = $px;
   $146 = (__ZL16GetSsmlAttributePwPKc($145,20959)|0);
   $attr2 = $146;
   $147 = $px;
   $148 = (__ZL16GetSsmlAttributePwPKc($147,20966)|0);
   $attr3 = $148;
   $149 = $attr1;
   $150 = (__ZL10attrlookupPKwPK8MNEM_TAB($149,2180)|0);
   $value = $150;
   $151 = $attr2;
   $152 = (__ZL10attrlookupPKwPK8MNEM_TAB($151,2228)|0);
   $value2 = $152;
   $153 = $value2;
   $154 = ($153|0)==(1);
   if ($154) {
    $value = 19;
   }
   $155 = $attr3;
   $156 = (__ZL10attrnumberPKwii($155,0,0)|0);
   $value3 = $156;
   $157 = $value;
   $158 = ($157|0)==(64);
   do {
    if ($158) {
     $159 = $value3;
     $160 = ($159|0)<=(1);
     if ($160) {
      $value = 193;
      break;
     } else {
      $161 = $value3;
      $162 = (64 + ($161))|0;
      $value = $162;
      break;
     }
    }
   } while(0);
   $163 = $value;
   HEAP32[$vararg_buffer>>2] = 1;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $163;
   (_sprintf($buf,21029,$vararg_buffer)|0);
   $164 = $3;
   $165 = HEAP32[$164>>2]|0;
   $166 = $2;
   $167 = (($166) + ($165)|0);
   (_strcpy($167,$buf)|0);
   $168 = (_strlen($buf)|0);
   $169 = $3;
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + ($168))|0;
   HEAP32[$169>>2] = $171;
   $172 = $3;
   $173 = HEAP32[$172>>2]|0;
   HEAP32[11118] = $173;
   $174 = $value;
   HEAP32[11099] = $174;
   break;
  }
  case 36:  {
   $175 = HEAP32[11099]|0;
   $176 = ($175|0)==(36);
   if ($176) {
    $177 = $3;
    $178 = HEAP32[$177>>2]|0;
    $179 = $2;
    $180 = (($179) + ($178)|0);
    HEAP8[$180>>0] = 0;
    $181 = $2;
    $182 = HEAP32[11118]|0;
    $183 = $3;
    (__ZL14ReplaceKeyNamePciPi($181,$182,$183)|0);
   }
   $184 = $3;
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + 1)|0;
   HEAP32[$184>>2] = $186;
   $187 = $2;
   $188 = (($187) + ($185)|0);
   HEAP8[$188>>0] = 1;
   $189 = $3;
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + 1)|0;
   HEAP32[$189>>2] = $191;
   $192 = $2;
   $193 = (($192) + ($190)|0);
   HEAP8[$193>>0] = 89;
   HEAP32[11099] = 0;
   break;
  }
  case 9:  {
   $194 = $px;
   $195 = (__ZL16GetSsmlAttributePwPKc($194,21073)|0);
   $attr1 = $195;
   $196 = ($195|0)!=(0|0);
   if ($196) {
    HEAP32[11119] = 1;
    $197 = $3;
    $198 = HEAP32[$197>>2]|0;
    $199 = $2;
    $200 = (($199) + ($198)|0);
    $201 = $attr1;
    $202 = $4;
    $203 = $3;
    $204 = HEAP32[$203>>2]|0;
    $205 = (($202) - ($204))|0;
    $206 = (__ZL13attrcopy_utf8PcPKwi($200,$201,$205)|0);
    $207 = $3;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($206))|0;
    HEAP32[$207>>2] = $209;
   }
   break;
  }
  case 14:  {
   HEAP32[11119] = 1;
   break;
  }
  case 46: case 41:  {
   HEAP32[11119] = 0;
   break;
  }
  case 5:  {
   $210 = $px;
   $211 = (__ZL16GetSsmlAttributePwPKc($210,25416)|0);
   $attr1 = $211;
   $212 = ($211|0)!=(0|0);
   if ($212) {
    $213 = $attr1;
    (__ZL13attrcopy_utf8PcPKwi($buf,$213,80)|0);
    $214 = (_strcmp(119994,$buf)|0);
    $215 = ($214|0)==(0);
    if ($215) {
     HEAP32[11094] = 1;
     HEAP8[119994] = 0;
     $0 = 16384;
     $430 = $0;
     STACKTOP = sp;return ($430|0);
    } else {
     $216 = (__Z11AddNameDataPKci($buf,0)|0);
     $index = $216;
     $217 = ($216|0)>=(0);
     if (!($217)) {
      break L20;
     }
     $218 = $index;
     HEAP32[$vararg_buffer3>>2] = 1;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $218;
     (_sprintf($buf,21079,$vararg_buffer3)|0);
     $219 = $3;
     $220 = HEAP32[$219>>2]|0;
     $221 = $2;
     $222 = (($221) + ($220)|0);
     (_strcpy($222,$buf)|0);
     $223 = (_strlen($buf)|0);
     $224 = $3;
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + ($223))|0;
     HEAP32[$224>>2] = $226;
     break L20;
    }
   }
   break;
  }
  case 11:  {
   $227 = $tag_type;
   $228 = (__ZL14PushParamStacki($227)|0);
   $sp = $228;
   $229 = $px;
   $230 = (__ZL16GetSsmlAttributePwPKc($229,21085)|0);
   $attr1 = $230;
   $231 = ($230|0)!=(0|0);
   do {
    if ($231) {
     $232 = $attr1;
     (__ZL13attrcopy_utf8PcPKwi($buf,$232,80)|0);
     $233 = HEAP32[10337]|0;
     $234 = ($233|0)==(0|0);
     if (!($234)) {
      $256 = (__Z11AddNameDataPKci($buf,0)|0);
      $index = $256;
      $257 = ($256|0)>=(0);
      if (!($257)) {
       break;
      }
      $258 = $index;
      $259 = HEAP32[10364]|0;
      $260 = (($259) + ($258)|0);
      $uri = $260;
      $261 = HEAP32[10337]|0;
      $262 = $uri;
      $263 = HEAP32[571]|0;
      $264 = (FUNCTION_TABLE_iiii[$261 & 63](1,$262,$263)|0);
      $265 = ($264|0)==(0);
      if (!($265)) {
       break;
      }
      $266 = $index;
      HEAP32[$vararg_buffer15>>2] = 1;
      $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
      HEAP32[$vararg_ptr18>>2] = $266;
      (_sprintf($buf,21168,$vararg_buffer15)|0);
      $267 = $3;
      $268 = HEAP32[$267>>2]|0;
      $269 = $2;
      $270 = (($269) + ($268)|0);
      (_strcpy($270,$buf)|0);
      $271 = (_strlen($buf)|0);
      $272 = $3;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($273) + ($271))|0;
      HEAP32[$272>>2] = $274;
      $275 = $sp;
      $276 = ((($275)) + 4|0);
      HEAP32[$276>>2] = 1;
      break;
     }
     $235 = HEAP32[571]|0;
     $236 = ($235|0)!=(0|0);
     if ($236) {
      $237 = HEAP8[$buf>>0]|0;
      $238 = $237 << 24 >> 24;
      $239 = ($238|0)!=(47);
      if ($239) {
       $240 = HEAP32[571]|0;
       HEAP32[$vararg_buffer7>>2] = $240;
       $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
       HEAP32[$vararg_ptr10>>2] = $buf;
       (_sprintf($fname,21089,$vararg_buffer7)|0);
       $241 = (__ZL14LoadSoundFile2PKc($fname)|0);
       $index = $241;
      } else {
       label = 58;
      }
     } else {
      label = 58;
     }
     if ((label|0) == 58) {
      $242 = (__ZL14LoadSoundFile2PKc($buf)|0);
      $index = $242;
     }
     $243 = $index;
     $244 = ($243|0)>=(0);
     if ($244) {
      $245 = $index;
      HEAP32[$vararg_buffer11>>2] = 1;
      $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
      HEAP32[$vararg_ptr14>>2] = $245;
      (_sprintf($buf,21162,$vararg_buffer11)|0);
      $246 = $3;
      $247 = HEAP32[$246>>2]|0;
      $248 = $2;
      $249 = (($248) + ($247)|0);
      (_strcpy($249,$buf)|0);
      $250 = (_strlen($buf)|0);
      $251 = $3;
      $252 = HEAP32[$251>>2]|0;
      $253 = (($252) + ($250))|0;
      HEAP32[$251>>2] = $253;
      $254 = $sp;
      $255 = ((($254)) + 4|0);
      HEAP32[$255>>2] = 1;
     }
    }
   } while(0);
   $277 = $2;
   $278 = $3;
   __ZL17ProcessParamStackPcPi($277,$278);
   $279 = $5;
   $280 = ($279|0)!=(0);
   if ($280) {
    $281 = $tag_type;
    $282 = $2;
    $283 = $3;
    __ZL13PopParamStackiPcPi($281,$282,$283);
   } else {
    HEAP32[11120] = 1;
   }
   $0 = 16384;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 43:  {
   $284 = $tag_type;
   $285 = $2;
   $286 = $3;
   __ZL13PopParamStackiPcPi($284,$285,$286);
   HEAP32[11120] = 0;
   $0 = 16384;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 13:  {
   $value = 21;
   $terminator = 16384;
   $287 = $px;
   $288 = (__ZL16GetSsmlAttributePwPKc($287,21174)|0);
   $attr1 = $288;
   $289 = ($288|0)!=(0|0);
   if ($289) {
    $290 = $attr1;
    $291 = (__ZL10attrlookupPKwPK8MNEM_TAB($290,2292)|0);
    $value = $291;
    $292 = $value;
    $293 = ($292|0)<(3);
    if ($293) {
     $294 = $3;
     $295 = HEAP32[$294>>2]|0;
     $296 = $2;
     $297 = (($296) + ($295)|0);
     $298 = $value;
     HEAP32[$vararg_buffer19>>2] = 1;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $298;
     (_sprintf($297,21195,$vararg_buffer19)|0);
     $299 = $3;
     $300 = HEAP32[$299>>2]|0;
     $301 = (($300) + 3)|0;
     HEAP32[$299>>2] = $301;
     $terminator = 0;
    }
    $302 = $value;
    $303 = (2348 + ($302<<2)|0);
    $304 = HEAP32[$303>>2]|0;
    $value = $304;
   }
   $305 = $px;
   $306 = (__ZL16GetSsmlAttributePwPKc($305,21201)|0);
   $attr2 = $306;
   $307 = ($306|0)!=(0|0);
   if ($307) {
    $308 = $attr2;
    $309 = (__ZL10attrnumberPKwii($308,0,1)|0);
    $value2 = $309;
    $310 = $value2;
    $311 = $310<<8;
    $312 = HEAP32[(74664)>>2]|0;
    $313 = ($312*10)|0;
    $314 = (($311|0) / ($313|0))&-1;
    $value = $314;
    $315 = $value;
    $316 = ($315|0)<(200);
    if ($316) {
     $317 = $value2;
     $318 = $317<<8;
     $319 = HEAP32[18665]|0;
     $320 = ($319*10)|0;
     $321 = (($318|0) / ($320|0))&-1;
     $value = $321;
    }
    $322 = $terminator;
    $323 = ($322|0)==(0);
    if ($323) {
     $terminator = 16384;
    }
   }
   $324 = $terminator;
   $325 = ($324|0)!=(0);
   if ($325) {
    $326 = $value;
    $327 = ($326|0)>(4095);
    if ($327) {
     $328 = $value;
     $329 = (($328|0) / 32)&-1;
     $value = $329;
     $330 = $value;
     $331 = ($330|0)>(4095);
     $$ = $331 ? 4095 : $329;
     $value = $$;
     $332 = $terminator;
     $333 = $332 | 8388608;
     $terminator = $333;
    }
    $334 = $terminator;
    $335 = $value;
    $336 = (($334) + ($335))|0;
    $0 = $336;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   }
   break;
  }
  case 1:  {
   $337 = $px;
   $338 = (__ZL16GetSsmlAttributePwPKc($337,21206)|0);
   $attr1 = $338;
   $339 = ($338|0)!=(0|0);
   if ($339) {
    $340 = $attr1;
    (__ZL13attrcopy_utf8PcPKwi($buf,$340,80)|0);
    $341 = (__Z11AddNameDataPKci($buf,0)|0);
    $index = $341;
    $342 = ($341|0)>=(0);
    if ($342) {
     $343 = $index;
     $344 = HEAP32[10364]|0;
     $345 = (($344) + ($343)|0);
     HEAP32[571] = $345;
    }
   }
   $346 = $px;
   $347 = $tag_type;
   $348 = (__ZL18GetVoiceAttributesPwi($346,$347)|0);
   $349 = ($348|0)==(0);
   if ($349) {
    $0 = 0;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   } else {
    $0 = 147456;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   }
   break;
  }
  case 2:  {
   $350 = $px;
   $351 = $tag_type;
   $352 = (__ZL18GetVoiceAttributesPwi($350,$351)|0);
   $353 = ($352|0)==(0);
   if ($353) {
    $0 = 0;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   } else {
    $0 = 147456;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   }
   break;
  }
  case 33:  {
   while(1) {
    $354 = HEAP32[11100]|0;
    $355 = ($354|0)>(1);
    if (!($355)) {
     break;
    }
    $356 = HEAP32[11100]|0;
    $357 = (($356) - 1)|0;
    $358 = (42832 + (($357*76)|0)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ($359|0)!=(1);
    if (!($360)) {
     break;
    }
    $361 = HEAP32[11100]|0;
    $362 = (($361) + -1)|0;
    HEAP32[11100] = $362;
   }
   $363 = $px;
   $364 = $tag_type;
   $365 = (__ZL18GetVoiceAttributesPwi($363,$364)|0);
   $366 = (524328 + ($365))|0;
   $0 = $366;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 34:  {
   while(1) {
    $367 = HEAP32[11100]|0;
    $368 = ($367|0)>(1);
    if (!($368)) {
     break;
    }
    $369 = HEAP32[11100]|0;
    $370 = (($369) - 1)|0;
    $371 = (42832 + (($370*76)|0)|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = ($372|0)!=(2);
    if (!($373)) {
     break;
    }
    $374 = HEAP32[11100]|0;
    $375 = (($374) + -1)|0;
    HEAP32[11100] = $375;
   }
   $terminator = 0;
   $376 = $terminator;
   $377 = $px;
   $378 = $tag_type;
   $379 = (__ZL18GetVoiceAttributesPwi($377,$378)|0);
   $380 = (($376) + ($379))|0;
   $0 = $380;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 47: case 15:  {
   $0 = 262174;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 6:  {
   $381 = $ssml_sp;
   $382 = HEAP32[$381>>2]|0;
   $383 = ($382|0)==(6);
   if ($383) {
    $384 = $px;
    $385 = (__ZL18GetVoiceAttributesPwi($384,38)|0);
    $voice_change_flag = $385;
   }
   $386 = $px;
   $387 = $tag_type;
   $388 = (__ZL18GetVoiceAttributesPwi($386,$387)|0);
   $389 = $voice_change_flag;
   $390 = $389 | $388;
   $voice_change_flag = $390;
   $391 = $voice_change_flag;
   $392 = (524358 + ($391))|0;
   $0 = $392;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 7:  {
   $393 = $ssml_sp;
   $394 = HEAP32[$393>>2]|0;
   $395 = ($394|0)==(6);
   if ($395) {
    $396 = $px;
    $397 = (__ZL18GetVoiceAttributesPwi($396,38)|0);
    $voice_change_flag = $397;
   }
   $398 = $ssml_sp;
   $399 = HEAP32[$398>>2]|0;
   $400 = ($399|0)==(7);
   if ($400) {
    $401 = $px;
    $402 = (__ZL18GetVoiceAttributesPwi($401,39)|0);
    $403 = $voice_change_flag;
    $404 = $403 | $402;
    $voice_change_flag = $404;
   }
   $405 = $px;
   $406 = $tag_type;
   $407 = (__ZL18GetVoiceAttributesPwi($405,$406)|0);
   $408 = $voice_change_flag;
   $409 = $408 | $407;
   $voice_change_flag = $409;
   $410 = $voice_change_flag;
   $411 = (524358 + ($410))|0;
   $0 = $411;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 38:  {
   $412 = $ssml_sp;
   $413 = HEAP32[$412>>2]|0;
   $414 = ($413|0)==(6);
   if ($414) {
    $415 = $px;
    $416 = $tag_type;
    $417 = (__ZL18GetVoiceAttributesPwi($415,$416)|0);
    $voice_change_flag = $417;
   }
   $418 = $voice_change_flag;
   $419 = (524328 + ($418))|0;
   $0 = $419;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  case 39:  {
   $420 = $ssml_sp;
   $421 = HEAP32[$420>>2]|0;
   $422 = ($421|0)==(6);
   if (!($422)) {
    $423 = $ssml_sp;
    $424 = HEAP32[$423>>2]|0;
    $425 = ($424|0)==(7);
    if (!($425)) {
     $0 = 524358;
     $430 = $0;
     STACKTOP = sp;return ($430|0);
    }
   }
   $426 = $px;
   $427 = $tag_type;
   $428 = (__ZL18GetVoiceAttributesPwi($426,$427)|0);
   $429 = (($428) + 524358)|0;
   $0 = $429;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $0 = 0;
 $430 = $0;
 STACKTOP = sp;return ($430|0);
}
function __ZL14PushParamStacki($tag_type) {
 $tag_type = $tag_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $sp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag_type;
 $1 = HEAP32[11101]|0;
 $2 = (41472 + ($1<<6)|0);
 $sp = $2;
 $3 = HEAP32[11101]|0;
 $4 = ($3|0)<(19);
 if ($4) {
  $5 = HEAP32[11101]|0;
  $6 = (($5) + 1)|0;
  HEAP32[11101] = $6;
 }
 $7 = $0;
 $8 = $sp;
 HEAP32[$8>>2] = $7;
 $ix = 0;
 while(1) {
  $9 = $ix;
  $10 = ($9|0)<(15);
  if (!($10)) {
   break;
  }
  $11 = $ix;
  $12 = $sp;
  $13 = ((($12)) + 4|0);
  $14 = (($13) + ($11<<2)|0);
  HEAP32[$14>>2] = -1;
  $15 = $ix;
  $16 = (($15) + 1)|0;
  $ix = $16;
 }
 $17 = $sp;
 STACKTOP = sp;return ($17|0);
}
function __ZL16GetSsmlAttributePwPKc($pw,$name) {
 $pw = $pw|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pw;
 $2 = $name;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   label = 19;
   break;
  }
  $6 = $1;
  $7 = ((($6)) + -4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_iswspace($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $ix = 0;
   while(1) {
    $11 = $1;
    $12 = HEAP32[$11>>2]|0;
    $13 = $ix;
    $14 = $2;
    $15 = (($14) + ($13)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($12|0)==($17|0);
    if (!($18)) {
     break;
    }
    $19 = $1;
    $20 = ((($19)) + 4|0);
    $1 = $20;
    $21 = $ix;
    $22 = (($21) + 1)|0;
    $ix = $22;
   }
   $23 = $ix;
   $24 = $2;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)==(0);
   if ($28) {
    break;
   }
  }
  $52 = $1;
  $53 = ((($52)) + 4|0);
  $1 = $53;
 }
 if ((label|0) == 19) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 while(1) {
  $29 = $1;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_iswspace($30)|0);
  $32 = ($31|0)!=(0);
  $33 = $1;
  if (!($32)) {
   break;
  }
  $34 = ((($33)) + 4|0);
  $1 = $34;
 }
 $35 = HEAP32[$33>>2]|0;
 $36 = ($35|0)==(61);
 if ($36) {
  $37 = $1;
  $38 = ((($37)) + 4|0);
  $1 = $38;
 }
 while(1) {
  $39 = $1;
  $40 = HEAP32[$39>>2]|0;
  $41 = (_iswspace($40)|0);
  $42 = ($41|0)!=(0);
  $43 = $1;
  if (!($42)) {
   break;
  }
  $44 = ((($43)) + 4|0);
  $1 = $44;
 }
 $45 = HEAP32[$43>>2]|0;
 $46 = ($45|0)==(34);
 if (!($46)) {
  $47 = $1;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(39);
  if (!($49)) {
   $0 = 44408;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
 }
 $50 = $1;
 $51 = ((($50)) + 4|0);
 $0 = $51;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function __ZL7attrcmpPKwPKc($string1,$string2) {
 $string1 = $string1|0;
 $string2 = $string2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string1;
 $2 = $string2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 1;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $ix = 0;
 while(1) {
  $5 = $ix;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $ix;
  $10 = $2;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($8|0)==($13|0);
  if (!($14)) {
   break;
  }
  $15 = $ix;
  $16 = $1;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $ix;
  $21 = (($20) + 1)|0;
  $ix = $21;
 }
 $22 = $ix;
 $23 = $1;
 $24 = (($23) + ($22<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(34);
 if ($26) {
  label = 9;
 } else {
  $27 = $ix;
  $28 = $1;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(39);
  if ($31) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $32 = $ix;
  $33 = $2;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(0);
  if ($37) {
   $0 = 0;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 }
 $0 = 1;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZL10attrlookupPKwPK8MNEM_TAB($string1,$mtab) {
 $string1 = $string1|0;
 $mtab = $mtab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string1;
 $2 = $mtab;
 $ix = 0;
 while(1) {
  $3 = $ix;
  $4 = $2;
  $5 = (($4) + ($3<<3)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $1;
  $9 = $ix;
  $10 = $2;
  $11 = (($10) + ($9<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZL7attrcmpPKwPKc($8,$12)|0);
  $14 = ($13|0)==(0);
  $15 = $ix;
  if ($14) {
   label = 4;
   break;
  }
  $20 = (($15) + 1)|0;
  $ix = $20;
 }
 if ((label|0) == 4) {
  $16 = $2;
  $17 = (($16) + ($15<<3)|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $0 = $19;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $21 = $ix;
  $22 = $2;
  $23 = (($22) + ($21<<3)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZL17ProcessParamStackPcPi($outbuf,$outix) {
 $outbuf = $outbuf|0;
 $outix = $outix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ix = 0, $new_parameters = 0, $param = 0, $value = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 92|0;
 $new_parameters = sp + 12|0;
 $0 = $outbuf;
 $1 = $outix;
 $param = 0;
 while(1) {
  $2 = $param;
  $3 = ($2|0)<(15);
  if (!($3)) {
   break;
  }
  $4 = $param;
  $5 = (($new_parameters) + ($4<<2)|0);
  HEAP32[$5>>2] = -1;
  $6 = $param;
  $7 = (($6) + 1)|0;
  $param = $7;
 }
 $ix = 0;
 while(1) {
  $8 = $ix;
  $9 = HEAP32[11101]|0;
  $10 = ($8|0)<($9|0);
  $param = 0;
  if (!($10)) {
   break;
  }
  while(1) {
   $11 = $param;
   $12 = ($11|0)<(15);
   if (!($12)) {
    break;
   }
   $13 = $param;
   $14 = $ix;
   $15 = (41472 + ($14<<6)|0);
   $16 = ((($15)) + 4|0);
   $17 = (($16) + ($13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)>=(0);
   if ($19) {
    $20 = $param;
    $21 = $ix;
    $22 = (41472 + ($21<<6)|0);
    $23 = ((($22)) + 4|0);
    $24 = (($23) + ($20<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $param;
    $27 = (($new_parameters) + ($26<<2)|0);
    HEAP32[$27>>2] = $25;
   }
   $28 = $param;
   $29 = (($28) + 1)|0;
   $param = $29;
  }
  $30 = $ix;
  $31 = (($30) + 1)|0;
  $ix = $31;
 }
 while(1) {
  $32 = $param;
  $33 = ($32|0)<(15);
  if (!($33)) {
   break;
  }
  $34 = $param;
  $35 = (($new_parameters) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $value = $36;
  $37 = $param;
  $38 = (44412 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36|0)!=($39|0);
  if ($40) {
   HEAP8[$buf>>0] = 0;
   $41 = $param;
   switch ($41|0) {
   case 5:  {
    $42 = $value;
    $43 = (($42) - 1)|0;
    HEAP32[19045] = $43;
    break;
   }
   case 6:  {
    $44 = $value;
    HEAP32[19044] = $44;
    break;
   }
   case 12: case 4: case 3: case 2: case 1:  {
    $45 = $value;
    $46 = $param;
    $47 = (20772 + ($46)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    HEAP32[$vararg_buffer>>2] = 1;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $45;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $49;
    (_sprintf($buf,20787,$vararg_buffer)|0);
    break;
   }
   default: {
   }
   }
   $50 = $param;
   $51 = (($new_parameters) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $param;
   $54 = (44412 + ($53<<2)|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = HEAP32[$55>>2]|0;
   $57 = $0;
   $58 = (($57) + ($56)|0);
   (_strcpy($58,$buf)|0);
   $59 = (_strlen($buf)|0);
   $60 = $1;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($59))|0;
   HEAP32[$60>>2] = $62;
  }
  $63 = $param;
  $64 = (($63) + 1)|0;
  $param = $64;
 }
 STACKTOP = sp;return;
}
function __ZL19SetProsodyParameteriPwP11PARAM_STACK($param_type,$attr1,$sp) {
 $param_type = $param_type|0;
 $attr1 = $attr1|0;
 $sp = $sp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sign = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 4|0;
 $0 = $param_type;
 $1 = $attr1;
 $2 = $sp;
 $3 = $1;
 $4 = $0;
 $5 = (1880 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZL10attrlookupPKwPK8MNEM_TAB($3,$6)|0);
 HEAP32[$value>>2] = $7;
 $8 = ($7|0)>=(0);
 $9 = $0;
 if ($8) {
  $10 = ((41476) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$value>>2]|0;
  $13 = Math_imul($11, $12)|0;
  $14 = (($13|0) / 100)&-1;
  $15 = $0;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  $18 = (($17) + ($15<<2)|0);
  HEAP32[$18>>2] = $14;
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = (__ZL18attr_prosody_valueiPKwPi($9,$19,$value)|0);
 $sign = $20;
 $21 = $sign;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$value>>2]|0;
  $24 = $0;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = (($26) + ($24<<2)|0);
  HEAP32[$27>>2] = $23;
  STACKTOP = sp;return;
 }
 $28 = $sign;
 $29 = ($28|0)==(2);
 $30 = $0;
 $31 = (44412 + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$value>>2]|0;
 if ($29) {
  $34 = Math_imul($32, $33)|0;
  $35 = (($34|0) / 100)&-1;
  $36 = $0;
  $37 = $2;
  $38 = ((($37)) + 4|0);
  $39 = (($38) + ($36<<2)|0);
  HEAP32[$39>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $40 = $sign;
  $41 = Math_imul($33, $40)|0;
  $42 = (($32) + ($41))|0;
  $43 = $0;
  $44 = $2;
  $45 = ((($44)) + 4|0);
  $46 = (($45) + ($43<<2)|0);
  HEAP32[$46>>2] = $42;
  STACKTOP = sp;return;
 }
}
function __ZL18attr_prosody_valueiPKwPi($param_type,$pw,$value_out) {
 $param_type = $param_type|0;
 $pw = $pw|0;
 $value_out = $value_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $sign = 0, $tail = 0, $value = 0.0, $x = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tail = sp + 16|0;
 $1 = $param_type;
 $2 = $pw;
 $3 = $value_out;
 $sign = 0;
 while(1) {
  $4 = $2;
  $5 = HEAP32[$4>>2]|0;
  $6 = (_iswspace($5)|0);
  $7 = ($6|0)!=(0);
  $8 = $2;
  if (!($7)) {
   break;
  }
  $9 = ((($8)) + 4|0);
  $2 = $9;
 }
 $10 = HEAP32[$8>>2]|0;
 $11 = ($10|0)==(43);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $2 = $13;
  $sign = 1;
 }
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(45);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 4|0);
  $2 = $18;
  $sign = -1;
 }
 $19 = $2;
 $20 = (+_wcstod($19,$tail));
 $value = $20;
 $21 = HEAP32[$tail>>2]|0;
 $22 = $2;
 $23 = ($21|0)==($22|0);
 if ($23) {
  $24 = $3;
  HEAP32[$24>>2] = 100;
  $0 = 2;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $25 = HEAP32[$tail>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(37);
 if ($27) {
  $28 = $sign;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $sign;
   $31 = (+($30|0));
   $32 = $value;
   $33 = $31 * $32;
   $34 = 100.0 + $33;
   $value = $34;
  }
  $35 = $value;
  $36 = (~~(($35)));
  $37 = $3;
  HEAP32[$37>>2] = $36;
  $0 = 2;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $38 = HEAP32[$tail>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(115);
 if ($40) {
  $41 = HEAP32[$tail>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(116);
  if ($44) {
   $45 = $value;
   $46 = $sign;
   $47 = (+($46|0));
   $48 = $45 * $47;
   $49 = $48 / 12.0;
   $50 = (+Math_pow(2.0,(+$49)));
   $51 = $50 * 100.0;
   $x = $51;
   $52 = $x;
   $53 = (~~(($52)));
   $54 = $3;
   HEAP32[$54>>2] = $53;
   $0 = 2;
   $75 = $0;
   STACKTOP = sp;return ($75|0);
  }
 }
 $55 = $1;
 $56 = ($55|0)==(1);
 if (!($56)) {
  $71 = $value;
  $72 = (~~(($71)));
  $73 = $3;
  HEAP32[$73>>2] = $72;
  $74 = $sign;
  $0 = $74;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $57 = $sign;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = $value;
  $60 = $59 * 100.0;
  $61 = (~~(($60)));
  $62 = $3;
  HEAP32[$62>>2] = $61;
 } else {
  $63 = $sign;
  $64 = (+($63|0));
  $65 = $value;
  $66 = $64 * $65;
  $67 = $66 * 100.0;
  $68 = (~~(($67)));
  $69 = (100 + ($68))|0;
  $70 = $3;
  HEAP32[$70>>2] = $69;
 }
 $0 = 2;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function __ZL13PopParamStackiPcPi($tag_type,$outbuf,$outix) {
 $tag_type = $tag_type|0;
 $outbuf = $outbuf|0;
 $outix = $outix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ix = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag_type;
 $1 = $outbuf;
 $2 = $outix;
 $top = 0;
 $3 = $0;
 $4 = ($3|0)>=(32);
 if ($4) {
  $5 = $0;
  $6 = (($5) - 32)|0;
  $0 = $6;
 }
 $ix = 0;
 while(1) {
  $7 = $ix;
  $8 = HEAP32[11101]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $ix;
  $11 = (41472 + ($10<<6)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = ($12|0)==($13|0);
  if ($14) {
   $15 = $ix;
   $top = $15;
  }
  $16 = $ix;
  $17 = (($16) + 1)|0;
  $ix = $17;
 }
 $18 = $top;
 $19 = ($18|0)>(0);
 if (!($19)) {
  $21 = $1;
  $22 = $2;
  __ZL17ProcessParamStackPcPi($21,$22);
  STACKTOP = sp;return;
 }
 $20 = $top;
 HEAP32[11101] = $20;
 $21 = $1;
 $22 = $2;
 __ZL17ProcessParamStackPcPi($21,$22);
 STACKTOP = sp;return;
}
function __ZL10attrnumberPKwii($pw,$default_value,$type) {
 $pw = $pw|0;
 $default_value = $default_value|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pw;
 $2 = $default_value;
 $3 = $type;
 $value = 0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = (__Z9IsDigit09j($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   while(1) {
    $11 = $1;
    $12 = HEAP32[$11>>2]|0;
    $13 = (__Z9IsDigit09j($12)|0);
    $14 = ($13|0)!=(0);
    if (!($14)) {
     break;
    }
    $15 = $value;
    $16 = ($15*10)|0;
    $17 = $1;
    $18 = ((($17)) + 4|0);
    $1 = $18;
    $19 = HEAP32[$17>>2]|0;
    $20 = (($16) + ($19))|0;
    $21 = (($20) - 48)|0;
    $value = $21;
   }
   $22 = $3;
   $23 = ($22|0)==(1);
   if ($23) {
    $24 = $1;
    $25 = HEAP32[$24>>2]|0;
    $26 = (_towlower($25)|0);
    $27 = ($26|0)==(115);
    if ($27) {
     $28 = $value;
     $29 = ($28*1000)|0;
     $value = $29;
    }
   }
   $30 = $value;
   $0 = $30;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $10 = $2;
 $0 = $10;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function __ZL14ReplaceKeyNamePciPi($outbuf,$index,$outix) {
 $outbuf = $outbuf|0;
 $index = $index|0;
 $outix = $outix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0;
 var $letter = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $outbuf;
 $2 = $index;
 $3 = $outix;
 $4 = $2;
 $5 = $1;
 $6 = (($5) + ($4)|0);
 $p = $6;
 $7 = $p;
 $8 = (__Z10LookupMnemP8MNEM_TABPKc(2244,$7)|0);
 $letter = $8;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $letter;
  $11 = $p;
  $12 = (__Z8utf8_outjPc($10,$11)|0);
  $ix = $12;
  $13 = $2;
  $14 = $ix;
  $15 = (($13) + ($14))|0;
  $16 = $3;
  HEAP32[$16>>2] = $15;
  $17 = $letter;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL13attrcopy_utf8PcPKwi($buf,$pw,$len) {
 $buf = $buf|0;
 $pw = $pw|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $ix = 0, $n = 0, $or$cond = 0, $prev_c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $pw;
 $2 = $len;
 $ix = 0;
 $prev_c = 0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   while(1) {
    $5 = $ix;
    $6 = $2;
    $7 = (($6) - 4)|0;
    $8 = ($5|0)<($7|0);
    if (!($8)) {
     break L1;
    }
    $9 = $1;
    $10 = ((($9)) + 4|0);
    $1 = $10;
    $11 = HEAP32[$9>>2]|0;
    $c = $11;
    $12 = ($11|0)!=(0);
    if (!($12)) {
     break L1;
    }
    $13 = $c;
    $14 = ($13|0)==(34);
    $15 = $prev_c;
    $16 = ($15|0)!=(92);
    $or$cond = $14 & $16;
    if ($or$cond) {
     break L1;
    }
    $17 = $c;
    $18 = $ix;
    $19 = $0;
    $20 = (($19) + ($18)|0);
    $21 = (__Z8utf8_outjPc($17,$20)|0);
    $n = $21;
    $22 = $n;
    $23 = $ix;
    $24 = (($23) + ($22))|0;
    $ix = $24;
    $25 = $c;
    $prev_c = $25;
   }
  }
 } while(0);
 $26 = $ix;
 $27 = $0;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = $ix;
 STACKTOP = sp;return ($29|0);
}
function __ZL14LoadSoundFile2PKc($fname) {
 $fname = $fname|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fname;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[734]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $ix;
  $6 = (74724 + ($5<<4)|0);
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $1;
   $11 = $ix;
   $12 = (74724 + ($11<<4)|0);
   $13 = ((($12)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strcmp($10,$14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $18 = $ix;
  $19 = (($18) + 1)|0;
  $ix = $19;
 }
 if ((label|0) == 5) {
  $17 = $ix;
  $0 = $17;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $20 = HEAP32[572]|0;
 $21 = (($20) + 1)|0;
 HEAP32[572] = $21;
 $22 = HEAP32[572]|0;
 $23 = ($22|0)>=(4);
 $$ = $23 ? 0 : $21;
 HEAP32[572] = $$;
 $24 = $1;
 $25 = HEAP32[572]|0;
 $26 = (__ZL13LoadSoundFilePKci($24,$25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 } else {
  $28 = $ix;
  $29 = (74724 + ($28<<4)|0);
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $1;
  $33 = (_strlen($32)|0);
  $34 = (($33) + 1)|0;
  $35 = (_realloc($31,$34)|0);
  $36 = HEAP32[572]|0;
  $37 = (74724 + ($36<<4)|0);
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $35;
  $39 = HEAP32[572]|0;
  $40 = (74724 + ($39<<4)|0);
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $1;
  (_strcpy($42,$43)|0);
  $44 = HEAP32[572]|0;
  $0 = $44;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __ZL13LoadSoundFilePKci($fname,$index) {
 $fname = $fname|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $command = 0, $f = 0, $fd_temp = 0, $fname2 = 0, $fname_temp = 0, $header = 0, $ip = 0, $ix = 0, $length = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $fname_temp = sp + 756|0;
 $fname2 = sp + 542|0;
 $header = sp + 28|0;
 $command = sp + 76|0;
 $1 = $fname;
 $2 = $index;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $2;
  $6 = (74724 + ($5<<4)|0);
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 $9 = $1;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = 1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $11 = $1;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)!=(47);
 if ($14) {
  $15 = $1;
  HEAP32[$vararg_buffer>>2] = 118980;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 47;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 47;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $15;
  (_sprintf($fname2,21095,$vararg_buffer)|0);
  $1 = $fname2;
 }
 $f = 0;
 $16 = $1;
 $17 = (_fopen($16,22483)|0);
 $f = $17;
 $18 = ($17|0)!=(0|0);
 do {
  if ($18) {
   $19 = $f;
   (_fseek($19,20,0)|0);
   $ix = 0;
   while(1) {
    $20 = $ix;
    $21 = ($20|0)<(3);
    if (!($21)) {
     break;
    }
    $22 = $f;
    $23 = (__Z10Read4BytesP8_IO_FILE($22)|0);
    $24 = $ix;
    $25 = (($header) + ($24<<2)|0);
    HEAP32[$25>>2] = $23;
    $26 = $ix;
    $27 = (($26) + 1)|0;
    $ix = $27;
   }
   $28 = HEAP32[$header>>2]|0;
   $29 = ($28|0)!=(65537);
   if (!($29)) {
    $30 = ((($header)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[20097]|0;
    $33 = ($31|0)!=($32|0);
    if (!($33)) {
     $34 = ((($header)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = HEAP32[20097]|0;
     $37 = $36<<1;
     $38 = ($35|0)!=($37|0);
     if (!($38)) {
      break;
     }
    }
   }
   $39 = $f;
   (_fclose($39)|0);
   $f = 0;
   (_strcpy($fname_temp,21114)|0);
   $40 = (_mkstemp($fname_temp)|0);
   $fd_temp = $40;
   $41 = ($40|0)>=(0);
   if ($41) {
    $42 = $fd_temp;
    (_close($42)|0);
    $43 = $1;
    $44 = HEAP32[20097]|0;
    HEAP32[$vararg_buffer4>>2] = $43;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $44;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = $fname_temp;
    (_sprintf($command,21132,$vararg_buffer4)|0);
    $45 = (_system(($command|0))|0);
    $46 = ($45|0)==(0);
    if ($46) {
     $1 = $fname_temp;
    }
   }
  }
 } while(0);
 $47 = $f;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $49 = $1;
  $50 = (_fopen($49,22483)|0);
  $f = $50;
  $51 = $f;
  $52 = ($51|0)==(0|0);
  if ($52) {
   $0 = 3;
   $81 = $0;
   STACKTOP = sp;return ($81|0);
  }
 }
 $53 = $1;
 $54 = (__Z13GetFileLengthPKc($53)|0);
 $length = $54;
 $55 = $f;
 (_fseek($55,0,0)|0);
 $56 = $2;
 $57 = (74724 + ($56<<4)|0);
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $length;
 $61 = (_realloc($59,$60)|0);
 $p = $61;
 $62 = ($61|0)==(0|0);
 if ($62) {
  $63 = $f;
  (_fclose($63)|0);
  $0 = 4;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 } else {
  $64 = $p;
  $65 = $length;
  $66 = $f;
  $67 = (_fread($64,1,$65,$66)|0);
  $length = $67;
  $68 = $f;
  (_fclose($68)|0);
  (_remove($fname_temp)|0);
  $69 = $p;
  $70 = ((($69)) + 40|0);
  $ip = $70;
  $71 = $ip;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72|0) / 2)&-1;
  $74 = $2;
  $75 = (74724 + ($74<<4)|0);
  $76 = ((($75)) + 4|0);
  HEAP32[$76>>2] = $73;
  $77 = $p;
  $78 = $2;
  $79 = (74724 + ($78<<4)|0);
  $80 = ((($79)) + 8|0);
  HEAP32[$80>>2] = $77;
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function __ZL18GetVoiceAttributesPwi($pw,$tag_type) {
 $pw = $pw|0;
 $tag_type = $tag_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $age = 0;
 var $gender = 0, $lang = 0, $name = 0, $new_voice_id = 0, $or$cond = 0, $ssml_sp = 0, $value = 0, $variant = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pw;
 $2 = $tag_type;
 $3 = $2;
 $4 = $3 & 32;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[11100]|0;
  $7 = ($6|0)>(1);
  if ($7) {
   $8 = HEAP32[11100]|0;
   $9 = (($8) + -1)|0;
   HEAP32[11100] = $9;
  }
 } else {
  $10 = $1;
  $11 = (__ZL16GetSsmlAttributePwPKc($10,21215)|0);
  $lang = $11;
  $12 = $2;
  $13 = ($12|0)!=(2);
  if ($13) {
   $name = 0;
   $variant = 0;
   $age = 0;
   $gender = 0;
  } else {
   $14 = $1;
   $15 = (__ZL16GetSsmlAttributePwPKc($14,25416)|0);
   $name = $15;
   $16 = $1;
   $17 = (__ZL16GetSsmlAttributePwPKc($16,25829)|0);
   $variant = $17;
   $18 = $1;
   $19 = (__ZL16GetSsmlAttributePwPKc($18,21224)|0);
   $age = $19;
   $20 = $1;
   $21 = (__ZL16GetSsmlAttributePwPKc($20,25430)|0);
   $gender = $21;
  }
  $22 = $2;
  $23 = ($22|0)!=(2);
  $24 = $lang;
  $25 = ($24|0)==(0|0);
  $or$cond = $23 & $25;
  if ($or$cond) {
   $0 = 0;
   $58 = $0;
   STACKTOP = sp;return ($58|0);
  }
  $26 = HEAP32[11100]|0;
  $27 = (($26) + 1)|0;
  HEAP32[11100] = $27;
  $28 = (42832 + (($26*76)|0)|0);
  $ssml_sp = $28;
  $29 = $ssml_sp;
  $30 = ((($29)) + 56|0);
  $31 = $lang;
  (__ZL13attrcopy_utf8PcPKwi($30,$31,20)|0);
  $32 = $ssml_sp;
  $33 = ((($32)) + 16|0);
  $34 = $name;
  (__ZL13attrcopy_utf8PcPKwi($33,$34,40)|0);
  $35 = $variant;
  $36 = (__ZL10attrnumberPKwii($35,1,0)|0);
  $value = $36;
  $37 = ($36|0)>(0);
  if ($37) {
   $38 = $value;
   $39 = (($38) + -1)|0;
   $value = $39;
  }
  $40 = $value;
  $41 = $ssml_sp;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = $40;
  $43 = $age;
  $44 = (__ZL10attrnumberPKwii($43,0,0)|0);
  $45 = $ssml_sp;
  $46 = ((($45)) + 12|0);
  HEAP32[$46>>2] = $44;
  $47 = $gender;
  $48 = (__ZL10attrlookupPKwPK8MNEM_TAB($47,2372)|0);
  $49 = $ssml_sp;
  $50 = ((($49)) + 8|0);
  HEAP32[$50>>2] = $48;
  $51 = $2;
  $52 = $ssml_sp;
  HEAP32[$52>>2] = $51;
 }
 $53 = (__ZL14VoiceFromStackv()|0);
 $new_voice_id = $53;
 $54 = $new_voice_id;
 $55 = (_strcmp($54,119529)|0);
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $new_voice_id;
  (_strcpy(119529,$57)|0);
  $0 = 131072;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 } else {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZL14VoiceFromStackv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $ix = 0, $language = 0, $p = 0, $sp = 0, $v_id = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $voice_found = 0, $voice_name_specified = 0, $voice_select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $voice_found = sp + 32|0;
 $voice_select = sp + 8|0;
 $language = sp + 144|0;
 $buf = sp + 64|0;
 (_strcpy(119489,(42848))|0);
 (_strcpy($language,(42888))|0);
 $1 = HEAP32[(42844)>>2]|0;
 $2 = $1&255;
 $3 = ((($voice_select)) + 13|0);
 HEAP8[$3>>0] = $2;
 $4 = HEAP32[(42840)>>2]|0;
 $5 = $4&255;
 $6 = ((($voice_select)) + 12|0);
 HEAP8[$6>>0] = $5;
 $7 = HEAP32[(42836)>>2]|0;
 $8 = $7&255;
 $9 = ((($voice_select)) + 14|0);
 HEAP8[$9>>0] = $8;
 $10 = ((($voice_select)) + 8|0);
 HEAP32[$10>>2] = 0;
 $ix = 0;
 while(1) {
  $11 = $ix;
  $12 = HEAP32[11100]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $ix;
  $15 = (42832 + (($14*76)|0)|0);
  $sp = $15;
  $voice_name_specified = 0;
  $16 = $sp;
  $17 = ((($16)) + 16|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $sp;
   $22 = ((($21)) + 16|0);
   $23 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(0,$22)|0);
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $voice_name_specified = 1;
    $25 = $sp;
    $26 = ((($25)) + 16|0);
    (_strcpy(119489,$26)|0);
    HEAP8[$language>>0] = 0;
    $27 = ((($voice_select)) + 12|0);
    HEAP8[$27>>0] = 0;
    $28 = ((($voice_select)) + 13|0);
    HEAP8[$28>>0] = 0;
    $29 = ((($voice_select)) + 14|0);
    HEAP8[$29>>0] = 0;
   }
  }
  $30 = $sp;
  $31 = ((($30)) + 56|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $sp;
   $36 = ((($35)) + 56|0);
   (_strcpy($language,$36)|0);
   $37 = HEAP32[(44356)>>2]|0;
   $p = $37;
   while(1) {
    $38 = $p;
    $39 = ((($38)) + 1|0);
    $p = $39;
    $40 = HEAP8[$38>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)!=(0);
    if (!($42)) {
     break;
    }
    $43 = $p;
    $44 = (_strcmp($43,$language)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     label = 10;
     break;
    }
    $48 = $p;
    $49 = (_strlen($48)|0);
    $50 = (($49) + 1)|0;
    $51 = $p;
    $52 = (($51) + ($50)|0);
    $p = $52;
   }
   if ((label|0) == 10) {
    label = 0;
    $46 = HEAP32[(44356)>>2]|0;
    $47 = ((($46)) + 1|0);
    (_strcpy($language,$47)|0);
   }
   $53 = $voice_name_specified;
   $54 = ($53|0)==(0);
   if ($54) {
    HEAP8[119489] = 0;
   }
  }
  $55 = $sp;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $sp;
   $60 = ((($59)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61&255;
   $63 = ((($voice_select)) + 12|0);
   HEAP8[$63>>0] = $62;
  }
  $64 = $sp;
  $65 = ((($64)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $sp;
   $69 = ((($68)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70&255;
   $72 = ((($voice_select)) + 13|0);
   HEAP8[$72>>0] = $71;
  }
  $73 = $sp;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $sp;
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79&255;
   $81 = ((($voice_select)) + 14|0);
   HEAP8[$81>>0] = $80;
  }
  $82 = $ix;
  $83 = (($82) + 1)|0;
  $ix = $83;
 }
 HEAP32[$voice_select>>2] = 119489;
 $84 = ((($voice_select)) + 4|0);
 HEAP32[$84>>2] = $language;
 $85 = (__Z11SelectVoiceP12espeak_VOICEPi($voice_select,$voice_found)|0);
 $v_id = $85;
 $86 = $v_id;
 $87 = ($86|0)==(0|0);
 if ($87) {
  $0 = 27486;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $88 = $v_id;
 $89 = (_strchr($88,43)|0);
 $90 = ($89|0)==(0|0);
 do {
  if ($90) {
   $91 = ((($voice_select)) + 12|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = ($93|0)==(0);
   if (!($94)) {
    $95 = ((($voice_select)) + 12|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = HEAP8[(44364)>>0]|0;
    $99 = $98&255;
    $100 = ($97|0)==($99|0);
    if (!($100)) {
     break;
    }
   }
   $101 = HEAP8[119425]|0;
   $102 = $101 << 24 >> 24;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $v_id;
    HEAP32[$vararg_buffer>>2] = $104;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 119425;
    (_sprintf($buf,26286,$vararg_buffer)|0);
    __Z8strncpy0PcPKci(119489,$buf,40);
    $0 = 119489;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
  }
 } while(0);
 $105 = $v_id;
 $0 = $105;
 $106 = $0;
 STACKTOP = sp;return ($106|0);
}
function __ZL13LookupSpecialP10TranslatorPKcPc($tr,$string,$text_out) {
 $tr = $tr|0;
 $string = $string|0;
 $text_out = $text_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $phonemes = 0, $phonemes2 = 0, $string1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $flags = sp + 8|0;
 $phonemes = sp + 87|0;
 $phonemes2 = sp + 32|0;
 $string1 = sp + 4|0;
 $1 = $tr;
 $2 = $string;
 $3 = $text_out;
 $4 = $2;
 HEAP32[$string1>>2] = $4;
 $5 = ((($flags)) + 4|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$flags>>2] = 0;
 $6 = $1;
 $7 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($6,$string1,$phonemes,$flags,0,0)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  __Z13SetWordStressP10TranslatorPcPjii($9,$phonemes,$flags,-1,0);
  __Z14DecodePhonemesPKcPc($phonemes,$phonemes2);
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $phonemes2;
  (_sprintf($10,21243,$vararg_buffer)|0);
  $11 = $3;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL10RemoveCharPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $p;
 $1 = $0;
 $2 = $0;
 $3 = (__Z7utf8_inPiPKc($c,$2)|0);
 _memset(($1|0),32,($3|0))|0;
 STACKTOP = sp;return;
}
function __ZL19AnnouncePunctuationP10TranslatoriPiPcS1_i($tr,$c1,$c2_ptr,$output,$bufix,$end_clause) {
 $tr = $tr|0;
 $c1 = $c1|0;
 $c2_ptr = $c2_ptr|0;
 $output = $output|0;
 $bufix = $bufix|0;
 $end_clause = $end_clause|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $attributes = 0, $buf = 0, $buf2 = 0, $bufix1 = 0, $c2 = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $ph_buf = 0, $punct_count = 0, $punctname = 0, $short_pause = 0, $soundicon = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer8 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 224|0;
 $buf2 = sp + 144|0;
 $ph_buf = sp + 112|0;
 $1 = $tr;
 $2 = $c1;
 $3 = $c2_ptr;
 $4 = $output;
 $5 = $bufix;
 $6 = $end_clause;
 $punctname = 0;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $c2 = $8;
 HEAP8[$buf>>0] = 0;
 $9 = $2;
 $10 = (__ZL15LookupSoundiconi($9)|0);
 $soundicon = $10;
 $11 = ($10|0)>=(0);
 do {
  if ($11) {
   $12 = $soundicon;
   HEAP32[$vararg_buffer>>2] = $12;
   (_sprintf($buf,21250,$vararg_buffer)|0);
   $13 = $c2;
   __ZL6UngetCi($13);
  } else {
   $14 = $2;
   $15 = ($14|0)==(46);
   $16 = $6;
   $17 = ($16|0)!=(0);
   $or$cond = $15 & $17;
   $18 = $c2;
   $19 = ($18|0)!=(46);
   $or$cond3 = $or$cond & $19;
   if ($or$cond3) {
    $20 = $1;
    $21 = (__ZL13LookupSpecialP10TranslatorPKcPc($20,21256,$ph_buf)|0);
    $22 = ($21|0)!=(0|0);
    if ($22) {
     $punctname = $ph_buf;
    }
   }
   $23 = $punctname;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $25 = $1;
    $26 = $2;
    $27 = (__ZL14LookupCharNameP10Translatorii($25,$26,0)|0);
    $punctname = $27;
   }
   $28 = $punctname;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $0 = -1;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   }
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   $33 = $6;
   $34 = ($33|0)==(0);
   $or$cond5 = $32 | $34;
   if (!($or$cond5)) {
    $35 = $1;
    $36 = ((($35)) + 24|0);
    $37 = ((($36)) + 68|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & 2;
    $40 = ($39|0)!=(0);
    if (!($40)) {
     $71 = $c2;
     __ZL6UngetCi($71);
     $72 = HEAP32[19047]|0;
     $73 = ($72|0)!=(0);
     if ($73) {
      $74 = $2;
      $75 = ($74|0)==(60);
      $76 = $2;
      $77 = ($76|0)==(38);
      $or$cond7 = $75 | $77;
      if ($or$cond7) {
       $78 = $2;
       HEAP32[11098] = $78;
      }
     }
     $79 = $2;
     HEAP32[11096] = $79;
     HEAP8[$buf>>0] = 32;
     $80 = ((($buf)) + 1|0);
     HEAP8[$80>>0] = 0;
     break;
    }
   }
   $punct_count = 1;
   while(1) {
    $41 = $c2;
    $42 = $2;
    $43 = ($41|0)==($42|0);
    $44 = $2;
    $45 = ($44|0)!=(60);
    $46 = $43 ? $45 : 0;
    if (!($46)) {
     break;
    }
    $47 = $punct_count;
    $48 = (($47) + 1)|0;
    $punct_count = $48;
    $49 = (__ZL4GetCv()|0);
    $c2 = $49;
   }
   $50 = $c2;
   $51 = $3;
   HEAP32[$51>>2] = $50;
   $52 = $6;
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $c2;
    __ZL6UngetCi($54);
   }
   $55 = $punct_count;
   $56 = ($55|0)==(1);
   if ($56) {
    $57 = $punctname;
    HEAP32[$vararg_buffer8>>2] = $57;
    (_sprintf($buf,21304,$vararg_buffer8)|0);
    break;
   }
   $58 = $punct_count;
   $59 = ($58|0)<(4);
   if (!($59)) {
    $68 = $punctname;
    $69 = $punct_count;
    $70 = $punctname;
    HEAP32[$vararg_buffer18>>2] = $68;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $69;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = $70;
    (_sprintf($buf,21321,$vararg_buffer18)|0);
    break;
   }
   HEAP8[$buf>>0] = 0;
   $60 = HEAP32[(80336)>>2]|0;
   $61 = ($60|0)<(300);
   if ($61) {
    (_sprintf($buf,21308,$vararg_buffer11)|0);
   }
   while(1) {
    $62 = $punct_count;
    $63 = (($62) + -1)|0;
    $punct_count = $63;
    $64 = ($62|0)>(0);
    if (!($64)) {
     break;
    }
    $65 = $punctname;
    HEAP32[$vararg_buffer13>>2] = $65;
    (_sprintf($buf2,21304,$vararg_buffer13)|0);
    (_strcat($buf,$buf2)|0);
   }
   $66 = HEAP32[(80336)>>2]|0;
   $67 = ($66|0)<(300);
   if ($67) {
    (_sprintf($buf2,21314,$vararg_buffer16)|0);
    (_strcat($buf,$buf2)|0);
   }
  }
 } while(0);
 $81 = $5;
 $82 = HEAP32[$81>>2]|0;
 $bufix1 = $82;
 $83 = (_strlen($buf)|0);
 $len = $83;
 $84 = $5;
 $85 = HEAP32[$84>>2]|0;
 $86 = $4;
 $87 = (($86) + ($85)|0);
 (_strcpy($87,$buf)|0);
 $88 = $len;
 $89 = $5;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($88))|0;
 HEAP32[$89>>2] = $91;
 $92 = $6;
 $93 = ($92|0)==(0);
 if ($93) {
  $0 = -1;
  $120 = $0;
  STACKTOP = sp;return ($120|0);
 }
 $94 = $2;
 $95 = ($94|0)==(45);
 if ($95) {
  $0 = 16384;
  $120 = $0;
  STACKTOP = sp;return ($120|0);
 }
 $96 = $2;
 $97 = (__Z11lookupwcharPKti(6266,$96)|0);
 $98 = (2404 + ($97<<2)|0);
 $99 = HEAP32[$98>>2]|0;
 $attributes = $99;
 $short_pause = 262148;
 $100 = $attributes;
 $101 = $100 & 28672;
 $102 = ($101|0)==(4096);
 $$ = $102 ? 266244 : 262148;
 $short_pause = $$;
 $103 = $bufix1;
 $104 = ($103|0)>(0);
 if ($104) {
  $105 = $1;
  $106 = ((($105)) + 24|0);
  $107 = ((($106)) + 68|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 & 2;
  $110 = ($109|0)!=(0);
  if (!($110)) {
   $111 = $attributes;
   $112 = $111 & -32769;
   $113 = ($112|0)==(266270);
   if ($113) {
    $0 = 262148;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   } else {
    $114 = $short_pause;
    $0 = $114;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   }
  }
 }
 $115 = $attributes;
 $116 = $115 & 524288;
 $117 = ($116|0)!=(0);
 if ($117) {
  $118 = $attributes;
  $0 = $118;
  $120 = $0;
  STACKTOP = sp;return ($120|0);
 } else {
  $119 = $short_pause;
  $0 = $119;
  $120 = $0;
  STACKTOP = sp;return ($120|0);
 }
 return (0)|0;
}
function __ZL15LookupSoundiconi($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $ix = 4;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[734]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 9;
   break;
  }
  $5 = $ix;
  $6 = (74724 + ($5<<4)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ($7|0)==($8|0);
  $10 = $ix;
  if ($9) {
   break;
  }
  $19 = (($10) + 1)|0;
  $ix = $19;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $11 = (74724 + ($10<<4)|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $ix;
  $16 = (__ZL13LoadSoundFilePKci(0,$15)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   $0 = -1;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $18 = $ix;
 $0 = $18;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __ZL14LookupCharNameP10Translatorii($tr,$c,$only) {
 $tr = $tr|0;
 $c = $c|0;
 $only = $only|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $ix = 0, $lang_name = 0, $phonemes = 0, $phonemes2 = 0, $single_letter = 0, $string = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $flags = sp + 32|0;
 $single_letter = sp + 176|0;
 $phonemes = sp + 116|0;
 $phonemes2 = sp + 56|0;
 $string = sp + 20|0;
 $0 = $tr;
 $1 = $c;
 $2 = $only;
 $lang_name = 0;
 HEAP8[119569] = 0;
 HEAP32[$flags>>2] = 0;
 $3 = ((($flags)) + 4|0);
 HEAP32[$3>>2] = 0;
 HEAP8[$single_letter>>0] = 0;
 $4 = ((($single_letter)) + 1|0);
 HEAP8[$4>>0] = 95;
 $5 = $1;
 $6 = ((($single_letter)) + 2|0);
 $7 = (__Z8utf8_outjPc($5,$6)|0);
 $ix = $7;
 $8 = $ix;
 $9 = (2 + ($8))|0;
 $10 = (($single_letter) + ($9)|0);
 HEAP8[$10>>0] = 0;
 $11 = $2;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = ((($single_letter)) + 2|0);
  HEAP32[$string>>2] = $13;
  $14 = $0;
  (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($14,$string,$phonemes,$flags,0,0)|0);
 } else {
  $15 = ((($single_letter)) + 1|0);
  HEAP32[$string>>2] = $15;
  $16 = $0;
  $17 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($16,$string,$phonemes,$flags,0,0)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = ((($single_letter)) + 2|0);
   HEAP32[$string>>2] = $19;
   $20 = $0;
   $21 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($20,$string,$phonemes,$flags,0,0)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = ((($single_letter)) + 1|0);
    HEAP8[$23>>0] = 32;
    $24 = $0;
    $25 = ((($single_letter)) + 2|0);
    (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($24,$25,$phonemes,60,0,0,0)|0);
   }
  }
 }
 $26 = $2;
 $27 = ($26|0)==(0);
 do {
  if ($27) {
   $28 = HEAP8[$phonemes>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = HEAP8[$phonemes>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(21);
    if (!($33)) {
     break;
    }
   }
   $34 = $0;
   $35 = ((($34)) + 324|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(25966);
   if ($37) {
    (__Z14SetTranslator2PKc(25406)|0);
    $38 = ((($single_letter)) + 1|0);
    HEAP32[$string>>2] = $38;
    $39 = ((($single_letter)) + 1|0);
    HEAP8[$39>>0] = 95;
    $40 = HEAP32[19036]|0;
    $41 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($40,$string,$phonemes,$flags,0,0)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     $43 = ((($single_letter)) + 2|0);
     HEAP32[$string>>2] = $43;
     $44 = HEAP32[19036]|0;
     (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($44,$string,$phonemes,$flags,0,0)|0);
    }
    $45 = HEAP8[$phonemes>>0]|0;
    $46 = ($45<<24>>24)!=(0);
    if ($46) {
     $lang_name = 25406;
     break;
    } else {
     $47 = HEAP32[1124]|0;
     $48 = ((($47)) + 60|0);
     $49 = HEAP32[$48>>2]|0;
     __Z18SelectPhonemeTablei($49);
     break;
    }
   }
  }
 } while(0);
 $50 = HEAP8[$phonemes>>0]|0;
 $51 = ($50<<24>>24)!=(0);
 if (!($51)) {
  $63 = $2;
  $64 = ($63|0)==(0);
  if (!($64)) {
   STACKTOP = sp;return (119569|0);
  }
  (_strcpy(119569,21287)|0);
  STACKTOP = sp;return (119569|0);
 }
 $52 = $lang_name;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = HEAP32[19036]|0;
  __Z13SetWordStressP10TranslatorPcPjii($54,$phonemes,$flags,-1,0);
  __Z14DecodePhonemesPKcPc($phonemes,$phonemes2);
  $55 = $0;
  $56 = ((($55)) + 324|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (__Z13WordToString2j($57)|0);
  HEAP32[$vararg_buffer>>2] = 25406;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $phonemes2;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $58;
  (_sprintf(119569,21260,$vararg_buffer)|0);
  $59 = HEAP32[1124]|0;
  $60 = ((($59)) + 60|0);
  $61 = HEAP32[$60>>2]|0;
  __Z18SelectPhonemeTablei($61);
  STACKTOP = sp;return (119569|0);
 } else {
  $62 = $0;
  __Z13SetWordStressP10TranslatorPcPjii($62,$phonemes,$flags,-1,0);
  __Z14DecodePhonemesPKcPc($phonemes,$phonemes2);
  HEAP32[$vararg_buffer3>>2] = $phonemes2;
  (_sprintf(119569,21279,$vararg_buffer3)|0);
  STACKTOP = sp;return (119569|0);
 }
 return (0)|0;
}
function __ZL8IsRomanUj($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(73);
 $4 = $1;
 $5 = ($4|0)==(86);
 $or$cond = $3 | $5;
 $6 = $1;
 $7 = ($6|0)==(88);
 $or$cond3 = $or$cond | $7;
 $8 = $1;
 $9 = ($8|0)==(76);
 $or$cond5 = $or$cond3 | $9;
 if ($or$cond5) {
  $0 = 1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __Z12InitNamedatav() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[10707] = 0;
 $0 = HEAP32[10364]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[10364]|0;
 _free($2);
 HEAP32[10364] = 0;
 HEAP32[10706] = 0;
 return;
}
function __Z9InitText2v() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $param = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[10703] = 0;
 HEAP32[11096] = 0;
 HEAP32[11100] = 1;
 HEAP32[11101] = 1;
 HEAP32[10708] = 0;
 $param = 0;
 while(1) {
  $0 = $param;
  $1 = ($0|0)<(15);
  if (!($1)) {
   break;
  }
  $2 = $param;
  $3 = ((41476) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $param;
  $6 = (44412 + ($5<<2)|0);
  HEAP32[$6>>2] = $4;
  $7 = $param;
  $8 = (($7) + 1)|0;
  $param = $8;
 }
 $9 = HEAP32[(44432)>>2]|0;
 HEAP32[19045] = $9;
 $10 = HEAP32[(44436)>>2]|0;
 HEAP32[19044] = $10;
 HEAP8[119529] = 0;
 HEAP32[11119] = 0;
 HEAP32[11120] = 0;
 HEAP32[11094] = 0;
 HEAP32[10367] = -1;
 HEAP32[11099] = 0;
 HEAP32[571] = 0;
 STACKTOP = sp;return;
}
function __Z8SetSpeedi($control) {
 $control = $control|0;
 var $$ = 0, $$$ = 0, $$$2 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $s1 = 0, $sonic = 0.0, $wpm = 0, $wpm2 = 0, $wpm_value = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $control;
 HEAP32[(74688)>>2] = 0;
 HEAP32[(74684)>>2] = 450;
 HEAP32[(74676)>>2] = 110;
 HEAP32[(74680)>>2] = 100;
 HEAP32[(74668)>>2] = 5;
 $1 = HEAP32[(80336)>>2]|0;
 $wpm = $1;
 $2 = $0;
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = HEAP32[(80360)>>2]|0;
  $wpm = $4;
 }
 $5 = $wpm;
 $wpm_value = $5;
 $6 = HEAP32[1124]|0;
 $7 = ((($6)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $wpm;
  $11 = HEAP32[1124]|0;
  $12 = ((($11)) + 84|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = Math_imul($10, $13)|0;
  $15 = (($14|0) / 100)&-1;
  $wpm = $15;
 }
 $16 = $0;
 $17 = $16 & 2;
 $18 = ($17|0)!=(0);
 if ($18) {
  __Z12DoSonicSpeedi(1024);
 }
 $19 = $wpm_value;
 $20 = ($19|0)>(450);
 if (!($20)) {
  $21 = $wpm_value;
  $22 = HEAP32[(74692)>>2]|0;
  $23 = ($21|0)>($22|0);
  $24 = $wpm;
  $25 = ($24|0)>(350);
  $or$cond = $23 & $25;
  if (!($or$cond)) {
   $59 = $wpm;
   $60 = ($59|0)>(450);
   if ($60) {
    $wpm = 450;
   }
   $61 = $wpm;
   $62 = ($61|0)>(360);
   if ($62) {
    $63 = $wpm;
    $64 = (($63) - 360)|0;
    $65 = (($64|0) / 8)&-1;
    HEAP32[(74688)>>2] = $65;
   }
   $66 = $wpm;
   $wpm2 = $66;
   $67 = $wpm;
   $68 = ($67|0)>(359);
   $$ = $68 ? 359 : $66;
   $wpm2 = $$;
   $69 = $wpm;
   $70 = ($69|0)<(80);
   $$$ = $70 ? 80 : $$;
   $wpm2 = $$$;
   $71 = $wpm2;
   $72 = (($71) - 80)|0;
   $73 = (21331 + ($72)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $x = $75;
   $76 = $wpm;
   $77 = ($76|0)>=(380);
   $$2 = $77 ? 7 : $75;
   $x = $$2;
   $78 = $wpm;
   $79 = ($78|0)>=(400);
   $$$2 = $79 ? 6 : $$2;
   $x = $$$2;
   $80 = $0;
   $81 = $80 & 1;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $x;
    $84 = HEAP32[1124]|0;
    $85 = ((($84)) + 72|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = Math_imul($83, $86)|0;
    $88 = (($87|0) / 256)&-1;
    HEAP32[646] = $88;
    $89 = $x;
    $90 = HEAP32[1124]|0;
    $91 = ((($90)) + 76|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = Math_imul($89, $92)|0;
    $94 = (($93|0) / 256)&-1;
    HEAP32[647] = $94;
    $95 = $x;
    $96 = HEAP32[1124]|0;
    $97 = ((($96)) + 80|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = Math_imul($95, $98)|0;
    $100 = (($99|0) / 256)&-1;
    HEAP32[648] = $100;
    $101 = $x;
    $102 = ($101|0)<=(7);
    if ($102) {
     $103 = $x;
     HEAP32[646] = $103;
     $104 = $x;
     $105 = (($104) - 1)|0;
     HEAP32[648] = $105;
     HEAP32[647] = $105;
    }
   }
   $106 = $0;
   $107 = $106 & 2;
   $108 = ($107|0)!=(0);
   if (!($108)) {
    STACKTOP = sp;return;
   }
   $109 = $wpm;
   $110 = ($109|0)>(350);
   $111 = $wpm;
   if ($110) {
    $112 = (($111) - 350)|0;
    $113 = (($112|0) / 3)&-1;
    $114 = (85 - ($113))|0;
    HEAP32[(74676)>>2] = $114;
    $115 = $wpm;
    $116 = (($115) - 350)|0;
    $117 = (($116|0) / 8)&-1;
    $118 = (60 - ($117))|0;
    HEAP32[(74680)>>2] = $118;
   } else {
    $119 = ($111|0)>(250);
    if ($119) {
     $120 = $wpm;
     $121 = (($120) - 250)|0;
     $122 = (($121|0) / 4)&-1;
     $123 = (110 - ($122))|0;
     HEAP32[(74676)>>2] = $123;
     $124 = $wpm;
     $125 = (($124) - 250)|0;
     $126 = (($125|0) / 2)&-1;
     $127 = (110 - ($126))|0;
     HEAP32[(74680)>>2] = $127;
    }
   }
   $128 = $x;
   $129 = HEAP32[1124]|0;
   $130 = ((($129)) + 72|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = Math_imul($128, $131)|0;
   $133 = (($132|0) / 256)&-1;
   $s1 = $133;
   $134 = $wpm;
   $135 = ($134|0)>=(170);
   $136 = $s1;
   if ($135) {
    $137 = ($136*150)|0;
    $138 = (($137|0) / 128)&-1;
    $139 = (110 + ($138))|0;
    HEAP32[(74672)>>2] = $139;
   } else {
    $140 = $136<<7;
    $141 = (($140|0) / 130)&-1;
    $142 = (128 + ($141))|0;
    HEAP32[(74672)>>2] = $142;
   }
   $143 = $wpm;
   $144 = ($143|0)>=(350);
   if ($144) {
    $145 = $wpm;
    $146 = (($145) - 350)|0;
    $147 = (21611 + ($146)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    HEAP32[(74672)>>2] = $149;
   }
   $150 = $wpm;
   $151 = ($150|0)>=(390);
   if ($151) {
    $152 = $wpm;
    $153 = (($152) - 400)|0;
    $154 = (($153|0) / 2)&-1;
    $155 = (450 - ($154))|0;
    HEAP32[(74684)>>2] = $155;
    $156 = $wpm;
    $157 = ($156|0)>(440);
    if ($157) {
     $158 = $wpm;
     $159 = (($158) - 440)|0;
     $160 = (420 - ($159))|0;
     HEAP32[(74684)>>2] = $160;
    }
   }
   $161 = HEAP32[(74684)>>2]|0;
   $162 = HEAP32[20098]|0;
   $163 = Math_imul($161, $162)|0;
   $164 = (($163|0) / 22050)&-1;
   HEAP32[(74684)>>2] = $164;
   $165 = $s1;
   $166 = $165<<8;
   $167 = (($166|0) / 115)&-1;
   HEAP32[18665] = $167;
   HEAP32[(74664)>>2] = 0;
   $168 = $wpm;
   $169 = ($168|0)>(430);
   do {
    if ($169) {
     HEAP32[18665] = 12;
    } else {
     $170 = $wpm;
     $171 = ($170|0)>(400);
     if ($171) {
      HEAP32[18665] = 13;
      break;
     }
     $172 = $wpm;
     $173 = ($172|0)>(374);
     if ($173) {
      HEAP32[18665] = 14;
      break;
     }
     $174 = $wpm;
     $175 = ($174|0)>(350);
     if ($175) {
      $176 = $wpm;
      $177 = (($176) - 350)|0;
      $178 = (21712 + ($177)|0);
      $179 = HEAP8[$178>>0]|0;
      $180 = $179&255;
      HEAP32[18665] = $180;
     }
    }
   } while(0);
   $181 = HEAP32[(74664)>>2]|0;
   $182 = ($181|0)==(0);
   if (!($182)) {
    STACKTOP = sp;return;
   }
   $183 = HEAP32[18665]|0;
   HEAP32[(74664)>>2] = $183;
   $184 = ($183|0)<(16);
   $$3 = $184 ? 16 : $183;
   HEAP32[(74664)>>2] = $$3;
   STACKTOP = sp;return;
  }
 }
 $26 = $wpm;
 $wpm2 = $26;
 $wpm = 175;
 $x = 73;
 $27 = $0;
 $28 = $27 & 1;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $x;
  $31 = HEAP32[1124]|0;
  $32 = ((($31)) + 72|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($30, $33)|0;
  $35 = (($34|0) / 256)&-1;
  HEAP32[646] = $35;
  $36 = $x;
  $37 = HEAP32[1124]|0;
  $38 = ((($37)) + 76|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $41 = (($40|0) / 256)&-1;
  HEAP32[647] = $41;
  $42 = $x;
  $43 = HEAP32[1124]|0;
  $44 = ((($43)) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = Math_imul($42, $45)|0;
  $47 = (($46|0) / 256)&-1;
  HEAP32[648] = $47;
 }
 $48 = $0;
 $49 = $48 & 2;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $wpm2;
 $52 = (+($51|0));
 $53 = $wpm;
 $54 = (+($53|0));
 $55 = $52 / $54;
 $sonic = $55;
 $56 = $sonic;
 $57 = $56 * 1024.0;
 $58 = (~~(($57)));
 __Z12DoSonicSpeedi($58);
 HEAP32[18665] = 85;
 HEAP32[(74664)>>2] = 80;
 HEAP32[(74668)>>2] = 22;
 HEAP32[(74684)>>2] = 900;
 HEAP32[(74672)>>2] = 211;
 HEAP32[(74676)>>2] = 210;
 HEAP32[(74680)>>2] = 170;
 STACKTOP = sp;return;
}
function __Z12SetParameteriii($parameter,$value,$relative) {
 $parameter = $parameter|0;
 $value = $value|0;
 $relative = $relative|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $default_value = 0, $new_value = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $parameter;
 $1 = $value;
 $2 = $relative;
 $3 = $1;
 $new_value = $3;
 $4 = $2;
 $5 = ($4|0)!=(0);
 $6 = $0;
 $7 = ($6|0)<(5);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = $0;
  $9 = (1404 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $default_value = $10;
  $11 = $default_value;
  $12 = $default_value;
  $13 = $1;
  $14 = Math_imul($12, $13)|0;
  $15 = (($14|0) / 100)&-1;
  $16 = (($11) + ($15))|0;
  $new_value = $16;
 }
 $17 = $new_value;
 $18 = $0;
 $19 = ((41476) + ($18<<2)|0);
 HEAP32[$19>>2] = $17;
 $20 = $new_value;
 $21 = $0;
 $22 = (42752 + ($21<<2)|0);
 HEAP32[$22>>2] = $20;
 $23 = $0;
 switch ($23|0) {
 case 1:  {
  $24 = $new_value;
  HEAP32[(80336)>>2] = $24;
  $25 = $new_value;
  HEAP32[(80360)>>2] = $25;
  __Z8SetSpeedi(3);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $26 = $new_value;
  HEAP32[(80340)>>2] = $26;
  (__Z12GetAmplitudev()|0);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $27 = $new_value;
  $28 = ($27|0)>(99);
  if ($28) {
   $new_value = 99;
  }
  $29 = $new_value;
  $30 = ($29|0)<(0);
  if ($30) {
   $new_value = 0;
  }
  $31 = $new_value;
  HEAP32[(80332)>>2] = $31;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $32 = $new_value;
  $33 = ($32|0)>(99);
  if ($33) {
   $new_value = 99;
  }
  $34 = $new_value;
  HEAP32[(80344)>>2] = $34;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $35 = $new_value;
  HEAP32[19125] = $35;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $36 = $new_value;
  HEAP32[19050] = $36;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $37 = $new_value;
  $38 = $37 & 255;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $new_value;
   $41 = $40 & 255;
   $42 = HEAP32[19035]|0;
   $43 = ((($42)) + 248|0);
   HEAP32[$43>>2] = $41;
  }
  $44 = $new_value;
  HEAP32[19039] = $44;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __Z11CalcLengthsP10Translator($tr) {
 $tr = $tr|0;
 var $$ = 0, $$4 = 0, $$5 = 0, $$8 = 0, $$old = 0, $$old9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $98 = 0, $99 = 0, $embedded_ix = 0, $emphasized = 0, $end_of_clause = 0, $env2 = 0, $ix = 0, $ix2 = 0, $last_pitch = 0, $len = 0, $length_mod = 0, $min_drop = 0, $next = 0, $next2 = 0, $next2type = 0, $next3 = 0, $or$cond = 0;
 var $or$cond10 = 0, $or$cond3 = 0, $or$cond7 = 0, $p = 0, $p2 = 0, $phdata_tone = 0, $pitch1 = 0, $pitch_env = 0, $pitch_start = 0, $pre_sonorant = 0, $pre_voiced = 0, $prev = 0, $stress = 0, $tone_mod = 0, $type = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $embedded_ix = sp + 180|0;
 $phdata_tone = sp + 8|0;
 $0 = $tr;
 $pre_sonorant = 0;
 $pre_voiced = 0;
 $last_pitch = 0;
 HEAP32[$embedded_ix>>2] = 0;
 $pitch_env = 0;
 $ix = 1;
 while(1) {
  $1 = $ix;
  $2 = HEAP32[12657]|0;
  $3 = ($1|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = $ix;
  $5 = (($4) - 1)|0;
  $6 = (50632 + (($5*24)|0)|0);
  $prev = $6;
  $7 = $ix;
  $8 = (50632 + (($7*24)|0)|0);
  $p = $8;
  $9 = $p;
  $10 = ((($9)) + 3|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 & 7;
  $stress = $13;
  $14 = $p;
  $15 = ((($14)) + 3|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 8;
  $emphasized = $18;
  $19 = $ix;
  $20 = (($19) + 1)|0;
  $21 = (50632 + (($20*24)|0)|0);
  $next = $21;
  $22 = $p;
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $24 & 2;
  $26 = ($25|0)!=(0);
  if ($26) {
   __ZL11DoEmbedded2Pi($embedded_ix);
  }
  $27 = $p;
  $28 = ((($27)) + 17|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $type = $30;
  $31 = $p;
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = $33 & 4;
  $35 = ($34|0)!=(0);
  $$ = $35 ? 2 : $30;
  $type = $$;
  $36 = $type;
  L7: do {
   switch ($36|0) {
   case 0:  {
    $last_pitch = 0;
    break;
   }
   case 4:  {
    $last_pitch = 0;
    $37 = $prev;
    $38 = ((($37)) + 17|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = ($40|0)==(6);
    do {
     if ($41) {
      $42 = $p;
      $43 = ((($42)) + 18|0);
      HEAP8[$43>>0] = 25;
     } else {
      $44 = HEAP32[11121]|0;
      $45 = ($44|0)>(0);
      $46 = $stress;
      $47 = ($46|0)<(4);
      $or$cond = $45 | $47;
      $48 = $p;
      $49 = ((($48)) + 18|0);
      if ($or$cond) {
       HEAP8[$49>>0] = 48;
       break;
      } else {
       HEAP8[$49>>0] = 60;
       break;
      }
     }
    } while(0);
    $50 = $prev;
    $51 = ((($50)) + 17|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ($53|0)==(4);
    if ($54) {
     $55 = $p;
     $56 = ((($55)) + 18|0);
     HEAP8[$56>>0] = 60;
    }
    $57 = $0;
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 & 16;
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = $p;
     $62 = ((($61)) + 21|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = ($63<<24>>24)!=(0);
     if ($64) {
      $65 = $p;
      $66 = ((($65)) + 18|0);
      HEAP8[$66>>0] = 60;
     }
    }
    $67 = $p;
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $71 & 4194304;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = $p;
     $75 = ((($74)) + 18|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = (($77) + 30)|0;
     $79 = $78&255;
     HEAP8[$75>>0] = $79;
    }
    $80 = $p;
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = $82 & 8;
    $84 = ($83|0)!=(0);
    if ($84) {
     $85 = $0;
     $86 = ((($85)) + 260|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $p;
     $89 = ((($88)) + 18|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90&255;
     $92 = (($91) + ($87))|0;
     $93 = $92&255;
     HEAP8[$89>>0] = $93;
    }
    break;
   }
   case 6: case 7:  {
    $94 = $p;
    $95 = ((($94)) + 21|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)!=(0);
    do {
     if ($97) {
      $98 = $prev;
      $99 = ((($98)) + 17|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100&255;
      $102 = ($101|0)==(2);
      if ($102) {
       $103 = $p;
       $104 = ((($103)) + 8|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ((($105)) + 4|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = $107 & 16777216;
       $109 = ($108|0)!=(0);
       if ($109) {
        break;
       }
      }
      $110 = $p;
      $111 = ((($110)) + 18|0);
      HEAP8[$111>>0] = 15;
     }
    } while(0);
    $112 = $next;
    $113 = ((($112)) + 17|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = ($115|0)==(0);
    if ($116) {
     $117 = $prev;
     $118 = ((($117)) + 17|0);
     $119 = HEAP8[$118>>0]|0;
     $120 = $119&255;
     $121 = ($120|0)==(8);
     if ($121) {
      $122 = $p;
      $123 = ((($122)) + 8|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $126 & 8;
      $128 = ($127|0)!=(0);
      if (!($128)) {
       $129 = $p;
       $130 = ((($129)) + 18|0);
       HEAP8[$130>>0] = 25;
      }
     }
    }
    $131 = $prev;
    $132 = ((($131)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($133)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $135 & 16384;
    $137 = ($136|0)!=(0);
    if ($137) {
     $138 = $p;
     $139 = ((($138)) + 18|0);
     HEAP8[$139>>0] = 30;
    }
    $140 = $0;
    $141 = HEAP32[$140>>2]|0;
    $142 = $141 & 16;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $p;
     $145 = ((($144)) + 21|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = ($146<<24>>24)!=(0);
     if ($147) {
      $148 = $p;
      $149 = ((($148)) + 18|0);
      HEAP8[$149>>0] = 30;
     }
    }
    $150 = $p;
    $151 = ((($150)) + 8|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ((($152)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = $154 & 32;
    $156 = ($155|0)!=(0);
    do {
     if ($156) {
      $157 = $next;
      $158 = ((($157)) + 17|0);
      $159 = HEAP8[$158>>0]|0;
      $160 = $159&255;
      $161 = ($160|0)==(4);
      if ($161) {
       $162 = $next;
       $163 = ((($162)) + 21|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = ($164<<24>>24)!=(0);
       if ($165) {
        label = 40;
       } else {
        $166 = $prev;
        $167 = ((($166)) + 17|0);
        $168 = HEAP8[$167>>0]|0;
        $169 = $168&255;
        $170 = ($169|0)==(2);
        $171 = $p;
        $172 = ((($171)) + 12|0);
        if ($170) {
         HEAP32[$172>>2] = 200;
         break;
        } else {
         HEAP32[$172>>2] = 150;
         break;
        }
       }
      } else {
       label = 40;
      }
     } else {
      label = 40;
     }
    } while(0);
    if ((label|0) == 40) {
     label = 0;
     $173 = $p;
     $174 = ((($173)) + 12|0);
     HEAP32[$174>>2] = 256;
    }
    $175 = $type;
    $176 = ($175|0)==(7);
    if ($176) {
     $177 = $next;
     $178 = ((($177)) + 17|0);
     $179 = HEAP8[$178>>0]|0;
     $180 = $179&255;
     $181 = ($180|0)==(2);
     if ($181) {
      $pre_voiced = 1;
     }
     $182 = $prev;
     $183 = ((($182)) + 17|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = ($185|0)==(2);
     if (!($186)) {
      $187 = $prev;
      $188 = ((($187)) + 17|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = $189&255;
      $191 = ($190|0)==(3);
      if (!($191)) {
       break L7;
      }
     }
     $192 = $prev;
     $193 = ((($192)) + 12|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (255 + ($194))|0;
     $196 = (($195>>>0) / 2)&-1;
     $197 = $p;
     $198 = ((($197)) + 12|0);
     HEAP32[$198>>2] = $196;
    }
    break;
   }
   case 5:  {
    $199 = $prev;
    $200 = ((($199)) + 17|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = ($202|0)==(7);
    if ($203) {
     label = 51;
    } else {
     $204 = $prev;
     $205 = ((($204)) + 17|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = $206&255;
     $208 = ($207|0)==(6);
     if ($208) {
      label = 51;
     } else {
      $209 = $prev;
      $210 = ((($209)) + 8|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = ((($211)) + 4|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = $213 & 32;
      $215 = ($214|0)!=(0);
      if ($215) {
       label = 51;
      } else {
       $216 = $prev;
       $217 = ((($216)) + 17|0);
       $218 = HEAP8[$217>>0]|0;
       $219 = $218&255;
       $220 = ($219|0)==(3);
       if ($220) {
        label = 51;
       }
      }
     }
    }
    if ((label|0) == 51) {
     label = 0;
     $221 = $p;
     $222 = ((($221)) + 18|0);
     HEAP8[$222>>0] = 30;
    }
    $223 = $next;
    $224 = ((($223)) + 17|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225&255;
    $227 = ($226|0)==(2);
    if ($227) {
     label = 54;
    } else {
     $228 = $next;
     $229 = ((($228)) + 17|0);
     $230 = HEAP8[$229>>0]|0;
     $231 = $230&255;
     $232 = ($231|0)==(3);
     if ($232) {
      label = 54;
     }
    }
    do {
     if ((label|0) == 54) {
      label = 0;
      $233 = $next;
      $234 = ((($233)) + 17|0);
      $235 = HEAP8[$234>>0]|0;
      $236 = $235&255;
      $237 = ($236|0)==(2);
      if ($237) {
       label = 56;
      } else {
       $238 = $next;
       $239 = ((($238)) + 21|0);
       $240 = HEAP8[$239>>0]|0;
       $241 = ($240<<24>>24)!=(0);
       if (!($241)) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       label = 0;
       $pre_voiced = 1;
      }
      $242 = $p;
      $243 = ((($242)) + 18|0);
      HEAP8[$243>>0] = 40;
      $244 = $prev;
      $245 = ((($244)) + 17|0);
      $246 = HEAP8[$245>>0]|0;
      $247 = $246&255;
      $248 = ($247|0)==(2);
      if ($248) {
       $249 = $p;
       $250 = ((($249)) + 18|0);
       HEAP8[$250>>0] = 0;
       break;
      }
      $251 = $prev;
      $252 = ((($251)) + 17|0);
      $253 = HEAP8[$252>>0]|0;
      $254 = $253&255;
      $255 = ($254|0)==(0);
      if ($255) {
       $256 = $prev;
       $257 = ((($256)) + 12|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = $p;
       $260 = ((($259)) + 18|0);
       $261 = HEAP8[$260>>0]|0;
       $262 = $261&255;
       $263 = ($258>>>0)<($262>>>0);
       if ($263) {
        $264 = $prev;
        $265 = ((($264)) + 12|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $p;
        $268 = ((($267)) + 18|0);
        $269 = HEAP8[$268>>0]|0;
        $270 = $269&255;
        $271 = (($270) - ($266))|0;
        $272 = $271&255;
        HEAP8[$268>>0] = $272;
        break;
       } else {
        $273 = $p;
        $274 = ((($273)) + 18|0);
        HEAP8[$274>>0] = 0;
        break;
       }
      }
      $275 = $p;
      $276 = ((($275)) + 21|0);
      $277 = HEAP8[$276>>0]|0;
      $278 = $277&255;
      $279 = ($278|0)==(0);
      if ($279) {
       $280 = $prev;
       $281 = ((($280)) + 17|0);
       $282 = HEAP8[$281>>0]|0;
       $283 = $282&255;
       $284 = ($283|0)==(3);
       if ($284) {
        $285 = $p;
        $286 = ((($285)) + 18|0);
        HEAP8[$286>>0] = 20;
       }
       $287 = $prev;
       $288 = ((($287)) + 17|0);
       $289 = HEAP8[$288>>0]|0;
       $290 = $289&255;
       $291 = ($290|0)==(8);
       if ($291) {
        $292 = $p;
        $293 = ((($292)) + 18|0);
        HEAP8[$293>>0] = 12;
       }
       $294 = $prev;
       $295 = ((($294)) + 17|0);
       $296 = HEAP8[$295>>0]|0;
       $297 = $296&255;
       $298 = ($297|0)==(4);
       if ($298) {
        $299 = $prev;
        $300 = ((($299)) + 8|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = ((($301)) + 4|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = $303 & 8;
        $305 = ($304|0)!=(0);
        if (!($305)) {
         $306 = $p;
         $307 = ((($306)) + 18|0);
         HEAP8[$307>>0] = 0;
        }
       }
      }
     }
    } while(0);
    $308 = $0;
    $309 = HEAP32[$308>>2]|0;
    $310 = $309 & 16;
    $311 = ($310|0)!=(0);
    if ($311) {
     $312 = $p;
     $313 = ((($312)) + 21|0);
     $314 = HEAP8[$313>>0]|0;
     $315 = ($314<<24>>24)!=(0);
     if ($315) {
      $316 = $p;
      $317 = ((($316)) + 18|0);
      $318 = HEAP8[$317>>0]|0;
      $319 = $318&255;
      $320 = ($319|0)<(20);
      if ($320) {
       $321 = $p;
       $322 = ((($321)) + 18|0);
       HEAP8[$322>>0] = 20;
      }
     }
    }
    break;
   }
   case 8: case 3:  {
    $323 = $0;
    $324 = ((($323)) + 408|0);
    $325 = HEAP8[$324>>0]|0;
    $326 = $p;
    $327 = ((($326)) + 20|0);
    HEAP8[$327>>0] = $325;
    $328 = $p;
    $329 = ((($328)) + 12|0);
    HEAP32[$329>>2] = 256;
    $min_drop = 0;
    $330 = $p;
    $331 = ((($330)) + 21|0);
    $332 = HEAP8[$331>>0]|0;
    $333 = ($332<<24>>24)!=(0);
    if ($333) {
     $334 = $prev;
     $335 = ((($334)) + 17|0);
     $336 = HEAP8[$335>>0]|0;
     $337 = $336&255;
     $338 = ($337|0)==(3);
     if ($338) {
      $339 = $p;
      $340 = ((($339)) + 18|0);
      HEAP8[$340>>0] = 25;
     }
     $341 = $prev;
     $342 = ((($341)) + 17|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $343&255;
     $345 = ($344|0)==(2);
     if ($345) {
      $346 = $p;
      $347 = ((($346)) + 8|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ((($348)) + 4|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = $350 & 16777216;
      $352 = ($351|0)!=(0);
      if (!($352)) {
       $353 = $p;
       $354 = ((($353)) + 18|0);
       HEAP8[$354>>0] = 12;
      }
     }
    }
    $355 = $next;
    $356 = ((($355)) + 17|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = $357&255;
    $359 = ($358|0)==(2);
    if ($359) {
     $pre_sonorant = 1;
     break L7;
    }
    $360 = $last_pitch;
    $361 = $360&255;
    $362 = $p;
    $363 = ((($362)) + 23|0);
    HEAP8[$363>>0] = $361;
    $364 = $prev;
    $365 = ((($364)) + 17|0);
    $366 = HEAP8[$365>>0]|0;
    $367 = $366&255;
    $368 = ($367|0)==(2);
    L115: do {
     if ($368) {
      label = 85;
     } else {
      $369 = $prev;
      $370 = ((($369)) + 17|0);
      $371 = HEAP8[$370>>0]|0;
      $372 = $371&255;
      $373 = ($372|0)==(3);
      if ($373) {
       label = 85;
      } else {
       $411 = $ix;
       $ix2 = $411;
       while(1) {
        $412 = $ix2;
        $413 = HEAP32[12657]|0;
        $414 = ($412|0)<($413|0);
        if (!($414)) {
         break L115;
        }
        $415 = $ix2;
        $416 = (50632 + (($415*24)|0)|0);
        $417 = ((($416)) + 17|0);
        $418 = HEAP8[$417>>0]|0;
        $419 = $418&255;
        $420 = ($419|0)==(2);
        $421 = $ix2;
        if ($420) {
         break;
        }
        $427 = (($421) + 1)|0;
        $ix2 = $427;
       }
       $422 = (50632 + (($421*24)|0)|0);
       $423 = ((($422)) + 23|0);
       $424 = HEAP8[$423>>0]|0;
       $425 = $p;
       $426 = ((($425)) + 23|0);
       HEAP8[$426>>0] = $424;
      }
     }
    } while(0);
    if ((label|0) == 85) {
     label = 0;
     $374 = $prev;
     $375 = ((($374)) + 12|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = $p;
     $378 = ((($377)) + 12|0);
     HEAP32[$378>>2] = $376;
     $379 = $p;
     $380 = ((($379)) + 17|0);
     $381 = HEAP8[$380>>0]|0;
     $382 = $381&255;
     $383 = ($382|0)==(3);
     if ($383) {
      $384 = HEAP32[646]|0;
      $385 = $p;
      $386 = ((($385)) + 12|0);
      HEAP32[$386>>2] = $384;
     }
     $387 = $next;
     $388 = ((($387)) + 17|0);
     $389 = HEAP8[$388>>0]|0;
     $390 = $389&255;
     $391 = ($390|0)==(5);
     if ($391) {
      $392 = $p;
      $393 = ((($392)) + 12|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = ($394*160)|0;
      $396 = (($395>>>0) / 100)&-1;
      $397 = $p;
      $398 = ((($397)) + 12|0);
      HEAP32[$398>>2] = $396;
     }
     $399 = $next;
     $400 = ((($399)) + 17|0);
     $401 = HEAP8[$400>>0]|0;
     $402 = $401&255;
     $403 = ($402|0)==(7);
     if ($403) {
      $404 = $p;
      $405 = ((($404)) + 12|0);
      $406 = HEAP32[$405>>2]|0;
      $407 = ($406*120)|0;
      $408 = (($407>>>0) / 100)&-1;
      $409 = $p;
      $410 = ((($409)) + 12|0);
      HEAP32[$410>>2] = $408;
     }
    }
    $428 = $p;
    $429 = ((($428)) + 23|0);
    $430 = HEAP8[$429>>0]|0;
    $431 = $430&255;
    $432 = (($431) - 16)|0;
    $433 = $432&255;
    $434 = $p;
    $435 = ((($434)) + 22|0);
    HEAP8[$435>>0] = $433;
    $436 = $p;
    $437 = ((($436)) + 23|0);
    $438 = HEAP8[$437>>0]|0;
    $439 = $438&255;
    $440 = ($439|0)<(16);
    if ($440) {
     $441 = $p;
     $442 = ((($441)) + 22|0);
     HEAP8[$442>>0] = 0;
    }
    $443 = $p;
    $444 = ((($443)) + 16|0);
    HEAP8[$444>>0] = 0;
    $pre_voiced = 0;
    break;
   }
   case 2:  {
    $min_drop = 0;
    $445 = $ix;
    $446 = (($445) + 2)|0;
    $447 = (50632 + (($446*24)|0)|0);
    $next2 = $447;
    $448 = $ix;
    $449 = (($448) + 3)|0;
    $450 = (50632 + (($449*24)|0)|0);
    $next3 = $450;
    $451 = $stress;
    $452 = ($451|0)>(7);
    if ($452) {
     $stress = 7;
    }
    $453 = $stress;
    $454 = ($453|0)<=(1);
    if ($454) {
     $455 = $stress;
     $456 = $455 ^ 1;
     $stress = $456;
    }
    $457 = $pre_sonorant;
    $458 = ($457|0)!=(0);
    $459 = $stress;
    $460 = $0;
    $461 = ((($460)) + 408|0);
    $462 = (($461) + ($459)|0);
    $463 = HEAP8[$462>>0]|0;
    if ($458) {
     $464 = $463&255;
     $465 = (($464) - 1)|0;
     $466 = $465&255;
     $467 = $p;
     $468 = ((($467)) + 20|0);
     HEAP8[$468>>0] = $466;
    } else {
     $469 = $p;
     $470 = ((($469)) + 20|0);
     HEAP8[$470>>0] = $463;
    }
    $471 = $emphasized;
    $472 = ($471|0)!=(0);
    if ($472) {
     $473 = $p;
     $474 = ((($473)) + 20|0);
     HEAP8[$474>>0] = 25;
    }
    $475 = $ix;
    $476 = HEAP32[12657]|0;
    $477 = (($476) - 3)|0;
    $478 = ($475|0)>=($477|0);
    if ($478) {
     $479 = $p;
     $480 = ((($479)) + 20|0);
     $481 = HEAP8[$480>>0]|0;
     $482 = $481&255;
     $483 = $0;
     $484 = ((($483)) + 24|0);
     $485 = ((($484)) + 36|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = ($482|0)>($486|0);
     if ($487) {
      $488 = $0;
      $489 = ((($488)) + 24|0);
      $490 = ((($489)) + 36|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = $491&255;
      $493 = $p;
      $494 = ((($493)) + 20|0);
      HEAP8[$494>>0] = $492;
     }
    }
    HEAP32[11121] = 0;
    $end_of_clause = 0;
    $495 = $p;
    $496 = ((($495)) + 24|0);
    $p2 = $496;
    while(1) {
     $497 = $p2;
     $498 = ((($497)) + 21|0);
     $499 = HEAP8[$498>>0]|0;
     $500 = $499&255;
     $501 = ($500|0)==(0);
     $502 = $p2;
     if (!($501)) {
      break;
     }
     $503 = ((($502)) + 17|0);
     $504 = HEAP8[$503>>0]|0;
     $505 = $504&255;
     $506 = ($505|0)==(2);
     if ($506) {
      $507 = $p2;
      $508 = ((($507)) + 8|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = ((($509)) + 4|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = $511 & 1048576;
      $513 = ($512|0)!=(0);
      if (!($513)) {
       $514 = HEAP32[11121]|0;
       $515 = (($514) + 1)|0;
       HEAP32[11121] = $515;
      }
     }
     $516 = $p2;
     $517 = ((($516)) + 8|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = ((($518)) + 10|0);
     $520 = HEAP8[$519>>0]|0;
     $521 = $520&255;
     $522 = ($521|0)==(27);
     if ($522) {
      $end_of_clause = 2;
     }
     $523 = $p2;
     $524 = ((($523)) + 24|0);
     $p2 = $524;
    }
    $525 = ((($502)) + 8|0);
    $526 = HEAP32[$525>>2]|0;
    $527 = ((($526)) + 10|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $528&255;
    $530 = ($529|0)==(27);
    if ($530) {
     $end_of_clause = 2;
    }
    $531 = $p2;
    $532 = ((($531)) + 21|0);
    $533 = HEAP8[$532>>0]|0;
    $534 = $533&255;
    $535 = $534 & 2;
    $536 = ($535|0)!=(0);
    $537 = HEAP32[11121]|0;
    $538 = ($537|0)==(0);
    $or$cond3 = $536 & $538;
    if ($or$cond3) {
     $end_of_clause = 2;
    }
    $539 = $next;
    $540 = ((($539)) + 8|0);
    $541 = HEAP32[$540>>2]|0;
    $542 = ((($541)) + 10|0);
    $543 = HEAP8[$542>>0]|0;
    $544 = $543&255;
    $545 = ($544|0)==(23);
    if ($545) {
     $546 = $next2;
     $547 = ((($546)) + 17|0);
     $548 = HEAP8[$547>>0]|0;
     $549 = $548&255;
     $550 = ($549|0)==(0);
     if ($550) {
      $551 = $next2;
      $next = $551;
      $552 = $next3;
      $next2 = $552;
      $553 = $ix;
      $554 = (($553) + 4)|0;
      $555 = (50632 + (($554*24)|0)|0);
      $next3 = $555;
     }
    }
    $556 = $next2;
    $557 = ((($556)) + 8|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = ((($558)) + 15|0);
    $560 = HEAP8[$559>>0]|0;
    $561 = $560&255;
    $next2type = $561;
    $562 = HEAP32[11121]|0;
    $563 = ($562|0)==(0);
    do {
     if ($563) {
      $564 = $next;
      $565 = ((($564)) + 21|0);
      $566 = HEAP8[$565>>0]|0;
      $567 = ($566<<24>>24)!=(0);
      if ($567) {
       $$old = $next2type;
       $$old9 = ($$old|0)!=(1);
       if ($$old9) {
        label = 130;
       }
      } else {
       $568 = $next2;
       $569 = ((($568)) + 21|0);
       $570 = HEAP8[$569>>0]|0;
       $571 = ($570<<24>>24)!=(0);
       $572 = $next2type;
       $573 = ($572|0)!=(1);
       $or$cond10 = $571 & $573;
       if ($or$cond10) {
        label = 130;
       }
      }
      if ((label|0) == 130) {
       label = 0;
       $next2type = 0;
      }
      $574 = $next2type;
      $575 = ($574*10)|0;
      $576 = $next;
      $577 = ((($576)) + 8|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = ((($578)) + 15|0);
      $580 = HEAP8[$579>>0]|0;
      $581 = $580&255;
      $582 = (($575) + ($581))|0;
      $583 = $0;
      $584 = ((($583)) + 196|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = (($585) + ($582)|0);
      $587 = HEAP8[$586>>0]|0;
      $588 = $587&255;
      $len = $588;
      $589 = $next;
      $590 = ((($589)) + 21|0);
      $591 = HEAP8[$590>>0]|0;
      $592 = ($591<<24>>24)!=(0);
      if ($592) {
       $593 = $0;
       $594 = HEAP32[$593>>2]|0;
       $595 = $594 & 32;
       $596 = ($595|0)!=(0);
       if ($596) {
        $597 = $len;
        $598 = $next;
        $599 = ((($598)) + 8|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = ((($600)) + 15|0);
        $602 = HEAP8[$601>>0]|0;
        $603 = $602&255;
        $604 = ($603*10)|0;
        $605 = (($604) + 1)|0;
        $606 = $0;
        $607 = ((($606)) + 196|0);
        $608 = HEAP32[$607>>2]|0;
        $609 = (($608) + ($605)|0);
        $610 = HEAP8[$609>>0]|0;
        $611 = $610&255;
        $612 = (($597) + ($611))|0;
        $613 = (($612|0) / 2)&-1;
        $length_mod = $613;
        break;
       }
      }
      $614 = $len;
      $length_mod = $614;
     } else {
      $615 = $next2type;
      $616 = ($615*10)|0;
      $617 = $next;
      $618 = ((($617)) + 8|0);
      $619 = HEAP32[$618>>2]|0;
      $620 = ((($619)) + 15|0);
      $621 = HEAP8[$620>>0]|0;
      $622 = $621&255;
      $623 = (($616) + ($622))|0;
      $624 = $0;
      $625 = ((($624)) + 192|0);
      $626 = HEAP32[$625>>2]|0;
      $627 = (($626) + ($623)|0);
      $628 = HEAP8[$627>>0]|0;
      $629 = $628&255;
      $length_mod = $629;
      $630 = $next;
      $631 = ((($630)) + 17|0);
      $632 = HEAP8[$631>>0]|0;
      $633 = $632&255;
      $634 = ($633|0)==(8);
      if ($634) {
       $635 = $next2;
       $636 = ((($635)) + 17|0);
       $637 = HEAP8[$636>>0]|0;
       $638 = $637&255;
       $639 = ($638|0)==(4);
       if (!($639)) {
        $640 = $next2;
        $641 = ((($640)) + 17|0);
        $642 = HEAP8[$641>>0]|0;
        $643 = $642&255;
        $644 = ($643|0)==(5);
        if (!($644)) {
         break;
        }
       }
       $645 = $next3;
       $646 = ((($645)) + 8|0);
       $647 = HEAP32[$646>>2]|0;
       $648 = ((($647)) + 4|0);
       $649 = HEAP32[$648>>2]|0;
       $650 = $649 & 8;
       $651 = ($650|0)!=(0);
       if ($651) {
        $652 = $length_mod;
        $653 = (($652) - 15)|0;
        $length_mod = $653;
       }
      }
     }
    } while(0);
    $654 = HEAP32[11121]|0;
    $655 = ($654|0)==(0);
    do {
     if ($655) {
      $656 = HEAP32[646]|0;
      $657 = $length_mod;
      $658 = Math_imul($657, $656)|0;
      $length_mod = $658;
     } else {
      $659 = HEAP32[11121]|0;
      $660 = ($659|0)==(1);
      if ($660) {
       $661 = HEAP32[647]|0;
       $662 = $length_mod;
       $663 = Math_imul($662, $661)|0;
       $length_mod = $663;
       break;
      } else {
       $664 = HEAP32[648]|0;
       $665 = $length_mod;
       $666 = Math_imul($665, $664)|0;
       $length_mod = $666;
       break;
      }
     }
    } while(0);
    $667 = $length_mod;
    $668 = (($667|0) / 128)&-1;
    $length_mod = $668;
    $669 = $length_mod;
    $670 = ($669|0)<(8);
    $$4 = $670 ? 8 : $668;
    $length_mod = $$4;
    $671 = $stress;
    $672 = ($671|0)>=(7);
    if ($672) {
     $673 = $0;
     $674 = ((($673)) + 312|0);
     $675 = HEAP32[$674>>2]|0;
     $676 = $length_mod;
     $677 = (($676) + ($675))|0;
     $length_mod = $677;
     $678 = $emphasized;
     $679 = ($678|0)!=(0);
     if ($679) {
      $680 = $0;
      $681 = ((($680)) + 312|0);
      $682 = HEAP32[$681>>2]|0;
      $683 = (($682|0) / 2)&-1;
      $684 = $length_mod;
      $685 = (($684) + ($683))|0;
      $length_mod = $685;
     }
    } else {
     $686 = $emphasized;
     $687 = ($686|0)!=(0);
     if ($687) {
      $688 = $0;
      $689 = ((($688)) + 312|0);
      $690 = HEAP32[$689>>2]|0;
      $691 = $length_mod;
      $692 = (($691) + ($690))|0;
      $length_mod = $692;
     }
    }
    $693 = $stress;
    $694 = $0;
    $695 = ((($694)) + 424|0);
    $696 = (($695) + ($693<<1)|0);
    $697 = HEAP16[$696>>1]|0;
    $698 = $697 << 16 >> 16;
    $len = $698;
    $699 = ($698|0)==(0);
    if ($699) {
     $700 = $0;
     $701 = ((($700)) + 424|0);
     $702 = ((($701)) + 12|0);
     $703 = HEAP16[$702>>1]|0;
     $704 = $703 << 16 >> 16;
     $len = $704;
    }
    $705 = $length_mod;
    $706 = $len;
    $707 = Math_imul($705, $706)|0;
    $length_mod = $707;
    $708 = $p;
    $709 = ((($708)) + 7|0);
    $710 = HEAP8[$709>>0]|0;
    $711 = $710&255;
    $712 = ($711|0)!=(0);
    if ($712) {
     $713 = $p;
     $714 = ((($713)) + 7|0);
     $715 = HEAP8[$714>>0]|0;
     $716 = $715&255;
     $717 = (44552 + ($716<<2)|0);
     $718 = HEAP32[$717>>2]|0;
     $719 = ((($718)) + 14|0);
     $720 = HEAP8[$719>>0]|0;
     $721 = $720&255;
     $tone_mod = $721;
     $722 = ($721|0)>(0);
     if ($722) {
      $723 = $length_mod;
      $724 = $tone_mod;
      $725 = Math_imul($723, $724)|0;
      $726 = (($725|0) / 100)&-1;
      $length_mod = $726;
     }
    }
    $727 = $end_of_clause;
    $728 = ($727|0)==(2);
    if ($728) {
     $729 = $0;
     $730 = ((($729)) + 12|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = $731 & 2097152;
     $733 = ($732|0)!=(0);
     if (!($733)) {
      $734 = $p;
      $735 = ((($734)) + 8|0);
      $736 = HEAP32[$735>>2]|0;
      $737 = ((($736)) + 14|0);
      $738 = HEAP8[$737>>0]|0;
      $739 = $738&255;
      $740 = $739<<1;
      $len = $740;
      $741 = $0;
      $742 = ((($741)) + 12|0);
      $743 = HEAP32[$742>>2]|0;
      $744 = $743 & 262144;
      $745 = ($744|0)!=(0);
      $$5 = $745 ? 200 : $740;
      $len = $$5;
      $746 = $length_mod;
      $747 = $len;
      $748 = (280 - ($747))|0;
      $749 = (($748|0) / 3)&-1;
      $750 = (256 + ($749))|0;
      $751 = Math_imul($746, $750)|0;
      $752 = (($751|0) / 256)&-1;
      $length_mod = $752;
     }
    }
    $753 = $length_mod;
    $754 = $0;
    $755 = ((($754)) + 308|0);
    $756 = HEAP32[$755>>2]|0;
    $757 = HEAP32[646]|0;
    $758 = Math_imul($756, $757)|0;
    $759 = ($753|0)>($758|0);
    if ($759) {
     $760 = $0;
     $761 = ((($760)) + 308|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = HEAP32[646]|0;
     $764 = Math_imul($762, $763)|0;
     $length_mod = $764;
    }
    $765 = $length_mod;
    $766 = (($765|0) / 128)&-1;
    $length_mod = $766;
    $767 = $p;
    $768 = ((($767)) + 17|0);
    $769 = HEAP8[$768>>0]|0;
    $770 = $769&255;
    $771 = ($770|0)!=(2);
    if ($771) {
     $length_mod = 256;
     $min_drop = 16;
    }
    $772 = $length_mod;
    $773 = $p;
    $774 = ((($773)) + 12|0);
    HEAP32[$774>>2] = $772;
    $775 = $p;
    $776 = ((($775)) + 16|0);
    $777 = HEAP8[$776>>0]|0;
    $778 = $777&255;
    $779 = ($778|0)>=(19);
    if ($779) {
     $780 = HEAP32[1295]|0;
     (_fprintf($780,21737,$vararg_buffer)|0);
     $781 = $p;
     $782 = ((($781)) + 16|0);
     HEAP8[$782>>0] = 0;
    }
    $783 = $p;
    $784 = ((($783)) + 16|0);
    $785 = HEAP8[$784>>0]|0;
    $786 = $785&255;
    $787 = (($786) + 1)|0;
    $env2 = $787;
    $788 = $p;
    $789 = ((($788)) + 7|0);
    $790 = HEAP8[$789>>0]|0;
    $791 = $790&255;
    $792 = ($791|0)!=(0);
    if ($792) {
     $793 = $p;
     $794 = ((($793)) + 7|0);
     $795 = HEAP8[$794>>0]|0;
     $796 = $795&255;
     __Z17InterpretPhoneme2iP12PHONEME_DATA($796,$phdata_tone);
     $797 = ((($phdata_tone)) + 124|0);
     $798 = HEAP32[$797>>2]|0;
     $799 = (__Z11GetEnvelopei($798)|0);
     $pitch_env = $799;
    } else {
     $800 = $env2;
     $801 = (844 + ($800<<2)|0);
     $802 = HEAP32[$801>>2]|0;
     $pitch_env = $802;
    }
    $803 = $p;
    $804 = ((($803)) + 22|0);
    $805 = HEAP8[$804>>0]|0;
    $806 = $805&255;
    $807 = $p;
    $808 = ((($807)) + 23|0);
    $809 = HEAP8[$808>>0]|0;
    $810 = $809&255;
    $811 = $p;
    $812 = ((($811)) + 22|0);
    $813 = HEAP8[$812>>0]|0;
    $814 = $813&255;
    $815 = (($810) - ($814))|0;
    $816 = $pitch_env;
    $817 = HEAP8[$816>>0]|0;
    $818 = $817&255;
    $819 = Math_imul($815, $818)|0;
    $820 = (($819|0) / 256)&-1;
    $821 = (($806) + ($820))|0;
    $pitch_start = $821;
    $822 = $pre_sonorant;
    $823 = ($822|0)!=(0);
    $824 = $pre_voiced;
    $825 = ($824|0)!=(0);
    $or$cond7 = $823 | $825;
    do {
     if ($or$cond7) {
      $826 = $pitch_start;
      $827 = ($826|0)==(255);
      if ($827) {
       $828 = $pitch_start;
       $last_pitch = $828;
      }
      $829 = $pitch_start;
      $830 = $last_pitch;
      $831 = (($829) - ($830))|0;
      $832 = ($831|0)>(16);
      if ($832) {
       $833 = $pitch_start;
       $834 = (($833) - 16)|0;
       $last_pitch = $834;
      }
      $835 = $last_pitch;
      $836 = $835&255;
      $837 = $prev;
      $838 = ((($837)) + 22|0);
      HEAP8[$838>>0] = $836;
      $839 = $pitch_start;
      $840 = $839&255;
      $841 = $prev;
      $842 = ((($841)) + 23|0);
      HEAP8[$842>>0] = $840;
      $843 = $last_pitch;
      $844 = $pitch_start;
      $845 = ($843|0)<($844|0);
      $846 = $prev;
      $847 = ((($846)) + 16|0);
      if ($845) {
       HEAP8[$847>>0] = 2;
       $848 = $env2;
       $849 = $848&255;
       $850 = $p;
       $851 = ((($850)) + 16|0);
       HEAP8[$851>>0] = $849;
      } else {
       HEAP8[$847>>0] = 0;
      }
      $852 = $length_mod;
      $853 = $prev;
      $854 = ((($853)) + 12|0);
      HEAP32[$854>>2] = $852;
      $855 = $p;
      $856 = ((($855)) + 20|0);
      $857 = HEAP8[$856>>0]|0;
      $858 = $prev;
      $859 = ((($858)) + 20|0);
      HEAP8[$859>>0] = $857;
      $860 = $prev;
      $861 = ((($860)) + 17|0);
      $862 = HEAP8[$861>>0]|0;
      $863 = $862&255;
      $864 = ($863|0)!=(3);
      if (!($864)) {
       break;
      }
      $865 = $prev;
      $866 = ((($865)) + 20|0);
      $867 = HEAP8[$866>>0]|0;
      $868 = $867&255;
      $869 = ($868|0)>(18);
      if (!($869)) {
       break;
      }
      $870 = $prev;
      $871 = ((($870)) + 20|0);
      HEAP8[$871>>0] = 18;
     }
    } while(0);
    $872 = $next;
    $873 = HEAP16[$872>>1]|0;
    $874 = $873&65535;
    $875 = $874 & -2;
    $876 = $875&65535;
    HEAP16[$872>>1] = $876;
    $877 = $next;
    $878 = ((($877)) + 17|0);
    $879 = HEAP8[$878>>0]|0;
    $880 = $879&255;
    $881 = ($880|0)==(8);
    do {
     if ($881) {
      $882 = $next2;
      $883 = ((($882)) + 17|0);
      $884 = HEAP8[$883>>0]|0;
      $885 = $884&255;
      $886 = ($885|0)!=(2);
      if (!($886)) {
       break;
      }
      $887 = $next;
      $888 = HEAP16[$887>>1]|0;
      $889 = $888&65535;
      $890 = $889 | 1;
      $891 = $890&65535;
      HEAP16[$887>>1] = $891;
     }
    } while(0);
    $892 = $next;
    $893 = ((($892)) + 17|0);
    $894 = HEAP8[$893>>0]|0;
    $895 = $894&255;
    $896 = ($895|0)==(3);
    do {
     if ($896) {
      $897 = $next;
      $898 = HEAP16[$897>>1]|0;
      $899 = $898&65535;
      $900 = $899 | 1;
      $901 = $900&65535;
      HEAP16[$897>>1] = $901;
      $902 = $next2;
      $903 = ((($902)) + 17|0);
      $904 = HEAP8[$903>>0]|0;
      $905 = $904&255;
      $906 = ($905|0)==(2);
      if ($906) {
       $907 = $next;
       $908 = HEAP16[$907>>1]|0;
       $909 = $908&65535;
       $910 = $909 & -2;
       $911 = $910&65535;
       HEAP16[$907>>1] = $911;
      }
      $912 = $next2;
      $913 = ((($912)) + 17|0);
      $914 = HEAP8[$913>>0]|0;
      $915 = $914&255;
      $916 = ($915|0)!=(2);
      if (!($916)) {
       break;
      }
      $917 = $next;
      $918 = ((($917)) + 8|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = HEAP32[$919>>2]|0;
      $921 = ($920|0)==(12146);
      if (!($921)) {
       break;
      }
      $922 = $next;
      $923 = HEAP16[$922>>1]|0;
      $924 = $923&65535;
      $925 = $924 & -2;
      $926 = $925&65535;
      HEAP16[$922>>1] = $926;
     }
    } while(0);
    $927 = $min_drop;
    $928 = ($927|0)>(0);
    do {
     if ($928) {
      $929 = $p;
      $930 = ((($929)) + 23|0);
      $931 = HEAP8[$930>>0]|0;
      $932 = $931&255;
      $933 = $p;
      $934 = ((($933)) + 22|0);
      $935 = HEAP8[$934>>0]|0;
      $936 = $935&255;
      $937 = (($932) - ($936))|0;
      $938 = $min_drop;
      $939 = ($937|0)<($938|0);
      if (!($939)) {
       break;
      }
      $940 = $p;
      $941 = ((($940)) + 23|0);
      $942 = HEAP8[$941>>0]|0;
      $943 = $942&255;
      $944 = $min_drop;
      $945 = (($943) - ($944))|0;
      $pitch1 = $945;
      $946 = $pitch1;
      $947 = ($946|0)<(0);
      $$8 = $947 ? 0 : $945;
      $pitch1 = $$8;
      $948 = $pitch1;
      $949 = $948&255;
      $950 = $p;
      $951 = ((($950)) + 22|0);
      HEAP8[$951>>0] = $949;
     }
    } while(0);
    $952 = $p;
    $953 = ((($952)) + 22|0);
    $954 = HEAP8[$953>>0]|0;
    $955 = $954&255;
    $956 = $p;
    $957 = ((($956)) + 23|0);
    $958 = HEAP8[$957>>0]|0;
    $959 = $958&255;
    $960 = $p;
    $961 = ((($960)) + 22|0);
    $962 = HEAP8[$961>>0]|0;
    $963 = $962&255;
    $964 = (($959) - ($963))|0;
    $965 = $p;
    $966 = ((($965)) + 16|0);
    $967 = HEAP8[$966>>0]|0;
    $968 = $967&255;
    $969 = (844 + ($968<<2)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = ((($970)) + 127|0);
    $972 = HEAP8[$971>>0]|0;
    $973 = $972&255;
    $974 = Math_imul($964, $973)|0;
    $975 = (($974|0) / 256)&-1;
    $976 = (($955) + ($975))|0;
    $last_pitch = $976;
    $pre_sonorant = 0;
    $pre_voiced = 0;
    break;
   }
   default: {
   }
   }
  } while(0);
  $977 = $ix;
  $978 = (($977) + 1)|0;
  $ix = $978;
 }
 STACKTOP = sp;return;
}
function __ZL11DoEmbedded2Pi($embix) {
 $embix = $embix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $embix;
 while(1) {
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 1)|0;
  HEAP32[$1>>2] = $3;
  $4 = (76504 + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $word = $5;
  $6 = $word;
  $7 = $6 & 31;
  $8 = ($7|0)==(2);
  if ($8) {
   $9 = $word;
   $10 = $9 & 127;
   $11 = $word;
   $12 = $11 >>> 8;
   __Z11SetEmbeddedii($10,$12);
   __Z8SetSpeedi(1);
  }
  $13 = $word;
  $14 = $13 & 128;
  $15 = ($14|0)==(0);
  if (!($15)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z20LookupAccentedLetterP10TranslatorjPc($tr,$letter,$ph_buf) {
 $tr = $tr|0;
 $letter = $letter|0;
 $ph_buf = $ph_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $accent1 = 0, $accent2 = 0, $accent_data = 0, $basic_letter = 0;
 var $flags1 = 0, $flags2 = 0, $letter2 = 0, $or$cond = 0, $or$cond3 = 0, $ph_accent1 = 0, $ph_accent2 = 0, $ph_letter1 = 0, $ph_letter2 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp;
 $ph_letter1 = sp + 190|0;
 $ph_letter2 = sp + 160|0;
 $ph_accent1 = sp + 130|0;
 $ph_accent2 = sp + 100|0;
 $0 = $tr;
 $1 = $letter;
 $2 = $ph_buf;
 $accent_data = 0;
 $accent1 = 0;
 $accent2 = 0;
 $letter2 = 0;
 HEAP8[$ph_accent2>>0] = 0;
 $3 = $1;
 $4 = ($3>>>0)>=(224);
 $5 = $1;
 $6 = ($5>>>0)<(383);
 $or$cond = $4 & $6;
 $7 = $1;
 if ($or$cond) {
  $8 = (($7) - 224)|0;
  $9 = (6352 + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $accent_data = $11;
 } else {
  $12 = ($7>>>0)>=(592);
  $13 = $1;
  $14 = ($13>>>0)<=(680);
  $or$cond3 = $12 & $14;
  if ($or$cond3) {
   $15 = $1;
   $16 = (($15) - 592)|0;
   $17 = (6672 + ($16<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $accent_data = $19;
  }
 }
 $20 = $accent_data;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $accent_data;
 $23 = $22 & 63;
 $24 = (($23) + 59)|0;
 $basic_letter = $24;
 $25 = $basic_letter;
 $26 = ($25|0)<(97);
 if ($26) {
  $27 = $basic_letter;
  $28 = (($27) - 59)|0;
  $29 = (6850 + ($28<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $basic_letter = $31;
 }
 $32 = $accent_data;
 $33 = $32 & 32768;
 $34 = ($33|0)!=(0);
 $35 = $accent_data;
 $36 = $35 >> 6;
 if ($34) {
  $37 = $36 & 63;
  $letter2 = $37;
  $38 = $letter2;
  $39 = (($38) + 59)|0;
  $letter2 = $39;
  $40 = $accent_data;
  $41 = $40 >> 12;
  $42 = $41 & 7;
  $accent2 = $42;
 } else {
  $43 = $36 & 31;
  $accent1 = $43;
  $44 = $accent_data;
  $45 = $44 >> 11;
  $46 = $45 & 15;
  $accent2 = $46;
 }
 $47 = $0;
 $48 = $accent1;
 $49 = (2596 + ($48<<3)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__Z6LookupP10TranslatorPKcPc($47,$50,$ph_accent1)|0);
 $flags1 = $51;
 $52 = ($51|0)!=(0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $0;
 $54 = $basic_letter;
 $55 = (__ZL13LookupLetter2P10TranslatorjPc($53,$54,$ph_letter1)|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $accent2;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = $0;
  $60 = $accent2;
  $61 = (2596 + ($60<<3)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (__Z6LookupP10TranslatorPKcPc($59,$62,$ph_accent2)|0);
  $flags2 = $63;
  $64 = $flags2;
  $65 = $64 & 4096;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $2;
   (_strcpy($67,$ph_accent2)|0);
   $68 = $2;
   $69 = (_strlen($68)|0);
   $70 = $2;
   $71 = (($70) + ($69)|0);
   $2 = $71;
   HEAP8[$ph_accent2>>0] = 0;
  }
 }
 $72 = $letter2;
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $0;
  $75 = $letter2;
  (__ZL13LookupLetter2P10TranslatorjPc($74,$75,$ph_letter2)|0);
  $76 = $2;
  HEAP32[$vararg_buffer>>2] = $ph_accent1;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 23;
  $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $ph_letter1;
  $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = 6;
  $vararg_ptr7 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $ph_letter2;
  $vararg_ptr8 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $ph_accent2;
  (_sprintf($76,21876,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $77 = $accent1;
 $78 = ($77|0)==(0);
 if ($78) {
  $79 = $2;
  (_strcpy($79,$ph_letter1)|0);
  STACKTOP = sp;return;
 }
 $80 = $0;
 $81 = ((($80)) + 240|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 & 1;
 $84 = ($83|0)!=(0);
 if (!($84)) {
  $85 = $flags1;
  $86 = $85 & 4096;
  $87 = ($86|0)!=(0);
  if (!($87)) {
   $88 = $accent1;
   $89 = (2596 + ($88<<3)|0);
   $90 = ((($89)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 & 1;
   $93 = ($92|0)!=(0);
   if (!($93)) {
    $95 = $2;
    HEAP32[$vararg_buffer15>>2] = 4;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $ph_letter1;
    $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
    HEAP32[$vararg_ptr19>>2] = 23;
    $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
    HEAP32[$vararg_ptr20>>2] = $ph_accent1;
    $vararg_ptr21 = ((($vararg_buffer15)) + 16|0);
    HEAP32[$vararg_ptr21>>2] = 23;
    (_sprintf($95,21898,$vararg_buffer15)|0);
    STACKTOP = sp;return;
   }
  }
 }
 $94 = $2;
 HEAP32[$vararg_buffer9>>2] = $ph_accent1;
 $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = 23;
 $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
 HEAP32[$vararg_ptr13>>2] = 6;
 $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
 HEAP32[$vararg_ptr14>>2] = $ph_letter1;
 (_sprintf($94,21889,$vararg_buffer9)|0);
 STACKTOP = sp;return;
}
function __ZL13LookupLetter2P10TranslatorjPc($tr,$letter,$ph_buf) {
 $tr = $tr|0;
 $letter = $letter|0;
 $ph_buf = $ph_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $single_letter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $single_letter = sp + 16|0;
 $0 = $tr;
 $1 = $letter;
 $2 = $ph_buf;
 HEAP8[$single_letter>>0] = 0;
 $3 = ((($single_letter)) + 1|0);
 HEAP8[$3>>0] = 95;
 $4 = $1;
 $5 = ((($single_letter)) + 2|0);
 $6 = (__Z8utf8_outjPc($4,$5)|0);
 $len = $6;
 $7 = $len;
 $8 = (($7) + 2)|0;
 $9 = (($single_letter) + ($8)|0);
 HEAP8[$9>>0] = 32;
 $10 = $len;
 $11 = (($10) + 3)|0;
 $12 = (($single_letter) + ($11)|0);
 HEAP8[$12>>0] = 0;
 $13 = $0;
 $14 = ((($single_letter)) + 1|0);
 $15 = $2;
 $16 = (__Z6LookupP10TranslatorPKcPc($13,$14,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $27 = $2;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  STACKTOP = sp;return ($29|0);
 }
 $18 = ((($single_letter)) + 1|0);
 HEAP8[$18>>0] = 32;
 $19 = $0;
 $20 = ((($single_letter)) + 2|0);
 $21 = $2;
 $22 = (__Z6LookupP10TranslatorPKcPc($19,$20,$21)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  $27 = $2;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  STACKTOP = sp;return ($29|0);
 }
 $24 = $0;
 $25 = ((($single_letter)) + 2|0);
 $26 = $2;
 (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($24,$25,$26,20,0,0,0)|0);
 $27 = $2;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 STACKTOP = sp;return ($29|0);
}
function __Z12LookupLetterP10TranslatorjiPci($tr,$letter,$next_byte,$ph_buf1,$control) {
 $tr = $tr|0;
 $letter = $letter|0;
 $next_byte = $next_byte|0;
 $ph_buf1 = $ph_buf1|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $dict_flags = 0, $len = 0, $ph_buf3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dict_flags = sp + 16|0;
 $ph_buf3 = sp + 48|0;
 $0 = $tr;
 $1 = $letter;
 $2 = $next_byte;
 $3 = $ph_buf1;
 $4 = $control;
 $5 = $3;
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = (__Z8utf8_outjPc($6,(119631))|0);
 $len = $7;
 $8 = $len;
 $9 = (($8) + 2)|0;
 $10 = (119629 + ($9)|0);
 HEAP8[$10>>0] = 32;
 $11 = $2;
 $12 = ($11|0)==(-1);
 if ($12) {
  $13 = $0;
  $14 = $3;
  $15 = (__Z6LookupP10TranslatorPKcPc($13,(119631),$14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   STACKTOP = sp;return;
  }
  HEAP8[(119630)>>0] = 95;
  $17 = $0;
  $18 = (__Z6LookupP10TranslatorPKcPc($17,(119630),$ph_buf3)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   STACKTOP = sp;return;
  }
  $20 = $0;
  $21 = ((($20)) + 324|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(25966);
  if ($23) {
   STACKTOP = sp;return;
  }
  (__Z14SetTranslator2PKc(25406)|0);
  $24 = HEAP32[19036]|0;
  $25 = (__Z6LookupP10TranslatorPKcPc($24,(119631),$ph_buf3)|0);
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $3;
   HEAP32[$vararg_buffer>>2] = 21;
   (_sprintf($27,23014,$vararg_buffer)|0);
  }
  $28 = HEAP32[1124]|0;
  $29 = ((($28)) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  __Z18SelectPhonemeTablei($30);
  STACKTOP = sp;return;
 }
 $31 = $1;
 $32 = ($31>>>0)<=(32);
 if (!($32)) {
  $33 = $1;
  $34 = (_iswspace($33)|0);
  $35 = ($34|0)!=(0);
  if (!($35)) {
   $39 = $2;
   $40 = ($39|0)!=(32);
   if ($40) {
    $2 = 31;
   }
   $41 = $2;
   $42 = $41&255;
   $43 = $len;
   $44 = (3 + ($43))|0;
   $45 = (119629 + ($44)|0);
   HEAP8[$45>>0] = $42;
   HEAP8[(119630)>>0] = 95;
   $46 = ((($dict_flags)) + 4|0);
   HEAP32[$46>>2] = 0;
   $47 = $0;
   $48 = (__Z6LookupP10TranslatorPKcPc($47,(119630),$ph_buf3)|0);
   $49 = ($48|0)==(0);
   if ($49) {
    HEAP8[(119630)>>0] = 32;
    $50 = $0;
    $51 = (__Z6LookupP10TranslatorPKcPc($50,(119631),$ph_buf3)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = $0;
     (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($53,(119631),$ph_buf3,40,0,268435456,0)|0);
    }
   }
   $54 = HEAP8[$ph_buf3>>0]|0;
   $55 = $54 << 24 >> 24;
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = $0;
    $58 = $1;
    __Z20LookupAccentedLetterP10TranslatorjPc($57,$58,$ph_buf3);
   }
   $59 = $3;
   (_strcpy($59,$ph_buf3)|0);
   $60 = $3;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = ($62|0)==(0);
   if ($63) {
    STACKTOP = sp;return;
   }
   $64 = $3;
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 << 24 >> 24;
   $67 = ($66|0)==(21);
   if ($67) {
    STACKTOP = sp;return;
   }
   HEAP32[$dict_flags>>2] = 0;
   $68 = ((($dict_flags)) + 4|0);
   HEAP32[$68>>2] = 0;
   $69 = $0;
   $70 = $3;
   $71 = $4;
   $72 = $71 & 1;
   __Z13SetWordStressP10TranslatorPcPjii($69,$70,$dict_flags,-1,$72);
   STACKTOP = sp;return;
  }
 }
 $36 = $1;
 HEAP32[$vararg_buffer1>>2] = $36;
 (_sprintf((119630),21909,$vararg_buffer1)|0);
 $37 = $0;
 $38 = $3;
 (__Z6LookupP10TranslatorPKcPc($37,(119630),$38)|0);
 STACKTOP = sp;return;
}
function __Z14NonAsciiNumberi($letter) {
 $letter = $letter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $letter;
 $p = 2772;
 while(1) {
  $2 = $p;
  $3 = HEAP32[$2>>2]|0;
  $base = $3;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $1;
  $6 = $base;
  $7 = ($5|0)<($6|0);
  if ($7) {
   label = 7;
   break;
  }
  $8 = $1;
  $9 = $base;
  $10 = (($9) + 10)|0;
  $11 = ($8|0)<($10|0);
  if ($11) {
   label = 5;
   break;
  }
  $16 = $p;
  $17 = ((($16)) + 4|0);
  $p = $17;
 }
 if ((label|0) == 5) {
  $12 = $1;
  $13 = $base;
  $14 = (($12) - ($13))|0;
  $15 = (($14) + 48)|0;
  $0 = $15;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __Z13IsSuperscripti($letter) {
 $letter = $letter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $letter;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = (6880 + ($2<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $c = $5;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $c;
  $8 = $1;
  $9 = ($7|0)>($8|0);
  if ($9) {
   label = 7;
   break;
  }
  $10 = $c;
  $11 = $1;
  $12 = ($10|0)==($11|0);
  $13 = $ix;
  if ($12) {
   label = 5;
   break;
  }
  $18 = (($13) + 2)|0;
  $ix = $18;
 }
 if ((label|0) == 5) {
  $14 = (($13) + 1)|0;
  $15 = (6880 + ($14<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $0 = $17;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __Z15TranslateLetterP10TranslatorPcS1_i($tr,$word,$phonemes,$control) {
 $tr = $tr|0;
 $word = $word|0;
 $phonemes = $phonemes|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $al_flags = 0, $al_offset = 0, $alphabet = 0, $c = 0, $capital = 0, $code = 0, $hangul_buf = 0, $hexbuf = 0, $initial = 0, $ix = 0, $language = 0, $len = 0, $letter = 0, $modifier = 0, $n_bytes = 0, $number = 0, $or$cond = 0;
 var $or$cond3 = 0, $p2 = 0, $p3 = 0, $pbuf = 0, $ph_alphabet = 0, $ph_buf = 0, $ph_buf2 = 0, $phontab_1 = 0, $speak_letter_number = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $letter = sp + 104|0;
 $capital = sp + 400|0;
 $ph_buf = sp + 320|0;
 $ph_buf2 = sp + 240|0;
 $ph_alphabet = sp + 160|0;
 $hexbuf = sp + 144|0;
 $hangul_buf = sp + 132|0;
 $1 = $tr;
 $2 = $word;
 $3 = $phonemes;
 $4 = $control;
 HEAP8[$ph_buf>>0] = 0;
 HEAP8[$ph_alphabet>>0] = 0;
 HEAP8[$capital>>0] = 0;
 $5 = HEAP32[19035]|0;
 $6 = ((($5)) + 404|0);
 $7 = HEAP32[$6>>2]|0;
 $phontab_1 = $7;
 $8 = $2;
 $9 = (__Z7utf8_inPiPKc($letter,$8)|0);
 $n_bytes = $9;
 $10 = HEAP32[$letter>>2]|0;
 $11 = $10 & 1048320;
 $12 = ($11|0)==(57344);
 if ($12) {
  $13 = HEAP32[$letter>>2]|0;
  $14 = $13 & 255;
  HEAP32[$letter>>2] = $14;
 }
 $15 = $4;
 $16 = $15 & 2;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[$letter>>2]|0;
  $19 = (__Z9iswupper2i($18)|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $1;
   (__Z6LookupP10TranslatorPKcPc($21,21915,$capital)|0);
  }
 }
 $22 = HEAP32[$letter>>2]|0;
 $23 = (__Z9towlower2j($22)|0);
 HEAP32[$letter>>2] = $23;
 $24 = $1;
 $25 = HEAP32[$letter>>2]|0;
 $26 = $n_bytes;
 $27 = $2;
 $28 = (($27) + ($26)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29 << 24 >> 24;
 $31 = $4;
 $32 = $31 & 1;
 __Z12LookupLetterP10TranslatorjiPci($24,$25,$30,$ph_buf,$32);
 $33 = HEAP8[$ph_buf>>0]|0;
 $34 = $33 << 24 >> 24;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = HEAP32[$letter>>2]|0;
  $37 = (__Z13IsSuperscripti($36)|0);
  $c = $37;
  $38 = ($37|0)!=(0);
  if ($38) {
   $39 = $c;
   $40 = $39 & 16383;
   HEAP32[$letter>>2] = $40;
   $41 = $4;
   $42 = $41 & 4;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $c;
    $45 = $44 >> 14;
    $46 = (2840 + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $modifier = $47;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     $49 = $1;
     $50 = $modifier;
     (__Z6LookupP10TranslatorPKcPc($49,$50,$capital)|0);
     $51 = HEAP8[$capital>>0]|0;
     $52 = $51 << 24 >> 24;
     $53 = ($52|0)==(0);
     if ($53) {
      $54 = (__Z14SetTranslator2PKc(25406)|0);
      $55 = $54&255;
      $56 = ((($capital)) + 2|0);
      HEAP8[$56>>0] = $55;
      $57 = HEAP32[19036]|0;
      $58 = $modifier;
      $59 = ((($capital)) + 3|0);
      (__Z6LookupP10TranslatorPKcPc($57,$58,$59)|0);
      $60 = ((($capital)) + 3|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = ($62|0)!=(0);
      if ($63) {
       HEAP8[$capital>>0] = 9;
       $64 = ((($capital)) + 1|0);
       HEAP8[$64>>0] = 21;
       $65 = ((($capital)) + 3|0);
       $66 = (_strlen($65)|0);
       $len = $66;
       $67 = $len;
       $68 = (($67) + 3)|0;
       $69 = (($capital) + ($68)|0);
       HEAP8[$69>>0] = 21;
       $70 = $phontab_1;
       $71 = $70&255;
       $72 = $len;
       $73 = (($72) + 4)|0;
       $74 = (($capital) + ($73)|0);
       HEAP8[$74>>0] = $71;
       $75 = $len;
       $76 = (($75) + 5)|0;
       $77 = (($capital) + ($76)|0);
       HEAP8[$77>>0] = 0;
      }
     }
    }
   }
  }
  $78 = $1;
  $79 = HEAP32[$letter>>2]|0;
  $80 = $n_bytes;
  $81 = $2;
  $82 = (($81) + ($80)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = $4;
  $86 = $85 & 1;
  __Z12LookupLetterP10TranslatorjiPci($78,$79,$84,$ph_buf,$86);
 }
 $87 = HEAP8[$ph_buf>>0]|0;
 $88 = $87 << 24 >> 24;
 $89 = ($88|0)==(21);
 if ($89) {
  $90 = $3;
  (_strcpy($90,$ph_buf)|0);
  $0 = 0;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $91 = HEAP8[$ph_buf>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[$letter>>2]|0;
  $95 = (__Z14NonAsciiNumberi($94)|0);
  $number = $95;
  $96 = ($95|0)>(0);
  if ($96) {
   $97 = $1;
   $98 = $number;
   $99 = $4;
   $100 = $99 & 1;
   __Z12LookupLetterP10TranslatorjiPci($97,$98,0,$ph_buf,$100);
  }
 }
 $al_offset = 0;
 $al_flags = 0;
 $101 = HEAP32[$letter>>2]|0;
 $102 = (__Z16AlphabetFromChari($101)|0);
 $alphabet = $102;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = $alphabet;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $al_offset = $106;
  $107 = $alphabet;
  $108 = ((($107)) + 16|0);
  $109 = HEAP32[$108>>2]|0;
  $al_flags = $109;
 }
 $110 = $alphabet;
 $111 = HEAP32[19062]|0;
 $112 = ($110|0)!=($111|0);
 if ($112) {
  $113 = $alphabet;
  HEAP32[19062] = $113;
  $114 = $alphabet;
  $115 = ($114|0)!=(0|0);
  if ($115) {
   $116 = $al_flags;
   $117 = $116 & 1;
   $118 = ($117|0)!=(0);
   if (!($118)) {
    $119 = $al_offset;
    $120 = HEAP32[19035]|0;
    $121 = ((($120)) + 720|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($119|0)!=($122|0);
    if ($123) {
     $124 = $al_flags;
     $125 = $124 & 1;
     $126 = ($125|0)!=(0);
     if (!($126)) {
      $127 = $al_offset;
      $128 = HEAP32[19035]|0;
      $129 = ((($128)) + 300|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($127|0)==($130|0);
      if (!($131)) {
       $132 = $al_offset;
       $133 = HEAP32[19035]|0;
       $134 = ((($133)) + 296|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($132|0)==($135|0);
       if (!($136)) {
        HEAP8[$ph_buf2>>0] = 0;
        $137 = HEAP32[19035]|0;
        $138 = $alphabet;
        $139 = HEAP32[$138>>2]|0;
        $140 = (__Z6LookupP10TranslatorPKcPc($137,$139,$ph_alphabet)|0);
        $141 = ($140|0)==(0);
        if ($141) {
         $142 = (__Z14SetTranslator2PKc(25406)|0);
         $143 = $142&255;
         $144 = ((($ph_alphabet)) + 2|0);
         HEAP8[$144>>0] = $143;
         $145 = HEAP32[19036]|0;
         $146 = $alphabet;
         $147 = HEAP32[$146>>2]|0;
         (__Z6LookupP10TranslatorPKcPc($145,$147,$ph_buf2)|0);
        } else {
         $148 = HEAP32[19035]|0;
         $149 = $1;
         $150 = ($148|0)!=($149|0);
         if ($150) {
          $151 = $1;
          $152 = ((($151)) + 404|0);
          $153 = HEAP32[$152>>2]|0;
          $phontab_1 = $153;
          (_strcpy($ph_buf2,$ph_alphabet)|0);
          $154 = HEAP32[19035]|0;
          $155 = ((($154)) + 404|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = $156&255;
          $158 = ((($ph_alphabet)) + 2|0);
          HEAP8[$158>>0] = $157;
         }
        }
        $159 = HEAP8[$ph_buf2>>0]|0;
        $160 = $159 << 24 >> 24;
        $161 = ($160|0)!=(0);
        if ($161) {
         HEAP8[$ph_alphabet>>0] = 9;
         $162 = ((($ph_alphabet)) + 1|0);
         HEAP8[$162>>0] = 21;
         $163 = ((($ph_alphabet)) + 3|0);
         (_strcpy($163,$ph_buf2)|0);
         $164 = (_strlen($ph_buf2)|0);
         $165 = (($164) + 3)|0;
         $len = $165;
         $166 = $len;
         $167 = (($ph_alphabet) + ($166)|0);
         HEAP8[$167>>0] = 21;
         $168 = $phontab_1;
         $169 = $168&255;
         $170 = $len;
         $171 = (($170) + 1)|0;
         $172 = (($ph_alphabet) + ($171)|0);
         HEAP8[$172>>0] = $169;
         $173 = $len;
         $174 = (($173) + 2)|0;
         $175 = (($ph_alphabet) + ($174)|0);
         HEAP8[$175>>0] = 0;
        }
       }
      }
     }
    }
   }
  }
 }
 $176 = HEAP8[$ph_buf>>0]|0;
 $177 = $176 << 24 >> 24;
 $178 = ($177|0)==(0);
 if ($178) {
  $179 = $al_offset;
  $180 = ($179|0)!=(0);
  if ($180) {
   $181 = $al_offset;
   $182 = HEAP32[19035]|0;
   $183 = ((($182)) + 300|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($181|0)==($184|0);
   if ($185) {
    $186 = HEAP32[19035]|0;
    $187 = ((($186)) + 304|0);
    $188 = HEAP32[$187>>2]|0;
    $language = $188;
   } else {
    label = 38;
   }
  } else {
   label = 38;
  }
  do {
   if ((label|0) == 38) {
    $189 = $alphabet;
    $190 = ($189|0)!=(0|0);
    if ($190) {
     $191 = $alphabet;
     $192 = ((($191)) + 12|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($193|0)!=(0);
     if ($194) {
      $195 = $al_flags;
      $196 = $195 & 2;
      $197 = ($196|0)!=(0);
      if (!($197)) {
       $198 = $alphabet;
       $199 = ((($198)) + 12|0);
       $200 = HEAP32[$199>>2]|0;
       $language = $200;
       break;
      }
     }
    }
    $language = 25966;
   }
  } while(0);
  $201 = $language;
  $202 = $1;
  $203 = ((($202)) + 324|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($201|0)!=($204|0);
  $206 = $language;
  $207 = ($206|0)==(27503);
  $or$cond = $205 | $207;
  if ($or$cond) {
   $208 = $language;
   $209 = (__Z13WordToString2j($208)|0);
   $210 = (__Z14SetTranslator2PKc($209)|0);
   $211 = $210&255;
   $212 = ((($ph_buf)) + 2|0);
   HEAP8[$212>>0] = $211;
   $213 = HEAP32[19036]|0;
   $214 = ($213|0)!=(0|0);
   if ($214) {
    $215 = HEAP32[$letter>>2]|0;
    $216 = (($215) - 44032)|0;
    $code = $216;
    $217 = ($216|0)>=(0);
    $218 = HEAP32[$letter>>2]|0;
    $219 = ($218|0)<=(55215);
    $or$cond3 = $217 & $219;
    if ($or$cond3) {
     HEAP8[$hangul_buf>>0] = 32;
     $220 = ((($hangul_buf)) + 1|0);
     $p3 = $220;
     $221 = $code;
     $222 = (($221|0) / 28)&-1;
     $223 = (($222|0) / 21)&-1;
     $initial = $223;
     $224 = ($223|0)!=(11);
     if ($224) {
      $225 = $initial;
      $226 = (($225) + 4352)|0;
      $227 = $p3;
      $228 = (__Z8utf8_outjPc($226,$227)|0);
      $229 = $p3;
      $230 = (($229) + ($228)|0);
      $p3 = $230;
     }
     $231 = $code;
     $232 = (($231|0) / 28)&-1;
     $233 = (($232|0) % 21)&-1;
     $234 = (($233) + 4449)|0;
     $235 = $p3;
     (__Z8utf8_outjPc($234,$235)|0);
     $236 = $code;
     $237 = (($236|0) % 28)&-1;
     $238 = (($237) + 4519)|0;
     $239 = $p3;
     $240 = ((($239)) + 3|0);
     (__Z8utf8_outjPc($238,$240)|0);
     $241 = $p3;
     $242 = ((($241)) + 6|0);
     HEAP8[$242>>0] = 32;
     $243 = $p3;
     $244 = ((($243)) + 7|0);
     HEAP8[$244>>0] = 0;
     $245 = ((($ph_buf)) + 3|0);
     HEAP8[$245>>0] = 0;
     $246 = HEAP32[19036]|0;
     $247 = ((($hangul_buf)) + 1|0);
     $248 = ((($ph_buf)) + 3|0);
     (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($246,$247,$248,77,0,0,0)|0);
     $249 = HEAP32[19036]|0;
     $250 = ((($ph_buf)) + 3|0);
     __Z13SetWordStressP10TranslatorPcPjii($249,$250,0,-1,0);
    } else {
     $251 = HEAP32[19036]|0;
     $252 = HEAP32[$letter>>2]|0;
     $253 = $n_bytes;
     $254 = $2;
     $255 = (($254) + ($253)|0);
     $256 = HEAP8[$255>>0]|0;
     $257 = $256 << 24 >> 24;
     $258 = ((($ph_buf)) + 3|0);
     $259 = $4;
     $260 = $259 & 1;
     __Z12LookupLetterP10TranslatorjiPci($251,$252,$257,$258,$260);
    }
    $261 = ((($ph_buf)) + 3|0);
    $262 = HEAP8[$261>>0]|0;
    $263 = $262 << 24 >> 24;
    $264 = ($263|0)==(21);
    if ($264) {
     $265 = ((($ph_buf)) + 4|0);
     $266 = (__Z14SetTranslator2PKc($265)|0);
     $267 = $266&255;
     $268 = ((($ph_buf)) + 2|0);
     HEAP8[$268>>0] = $267;
     $269 = HEAP32[19036]|0;
     $270 = HEAP32[$letter>>2]|0;
     $271 = $n_bytes;
     $272 = $2;
     $273 = (($272) + ($271)|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $274 << 24 >> 24;
     $276 = ((($ph_buf)) + 3|0);
     $277 = $4;
     $278 = $277 & 1;
     __Z12LookupLetterP10TranslatorjiPci($269,$270,$275,$276,$278);
    }
    $279 = HEAP32[1124]|0;
    $280 = ((($279)) + 60|0);
    $281 = HEAP32[$280>>2]|0;
    __Z18SelectPhonemeTablei($281);
    $282 = ((($ph_buf)) + 3|0);
    $283 = HEAP8[$282>>0]|0;
    $284 = $283 << 24 >> 24;
    $285 = ($284|0)!=(0);
    if ($285) {
     HEAP8[$ph_buf>>0] = 9;
     $286 = ((($ph_buf)) + 1|0);
     HEAP8[$286>>0] = 21;
     $287 = ((($ph_buf)) + 3|0);
     $288 = (_strlen($287)|0);
     $289 = (($288) + 3)|0;
     $len = $289;
     $290 = $len;
     $291 = (($ph_buf) + ($290)|0);
     HEAP8[$291>>0] = 21;
     $292 = $1;
     $293 = ((($292)) + 404|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $294&255;
     $296 = $len;
     $297 = (($296) + 1)|0;
     $298 = (($ph_buf) + ($297)|0);
     HEAP8[$298>>0] = $295;
     $299 = $len;
     $300 = (($299) + 2)|0;
     $301 = (($ph_buf) + ($300)|0);
     HEAP8[$301>>0] = 0;
    }
   }
  }
 }
 $302 = HEAP8[$ph_buf>>0]|0;
 $303 = $302 << 24 >> 24;
 $304 = ($303|0)==(0);
 if ($304) {
  $305 = HEAP8[$ph_buf>>0]|0;
  $306 = $305 << 24 >> 24;
  $307 = ($306|0)==(0);
  if ($307) {
   $speak_letter_number = 1;
   $308 = $al_flags;
   $309 = $308 & 16;
   $310 = ($309|0)!=(0);
   if (!($310)) {
    $311 = HEAP32[$letter>>2]|0;
    $312 = (__Z9iswalpha2i($311)|0);
    $313 = ($312|0)!=(0);
    if ($313) {
     $314 = HEAP32[19035]|0;
     (__Z6LookupP10TranslatorPKcPc($314,21930,$ph_buf)|0);
    }
    $315 = HEAP8[$ph_buf>>0]|0;
    $316 = $315 << 24 >> 24;
    $317 = ($316|0)==(0);
    if ($317) {
     $318 = HEAP32[$letter>>2]|0;
     $319 = (_iswspace($318)|0);
     $320 = ($319|0)!=(0);
     if (!($320)) {
      $321 = HEAP32[19035]|0;
      (__Z6LookupP10TranslatorPKcPc($321,21934,$ph_buf)|0);
     }
    }
    $322 = HEAP8[$ph_buf>>0]|0;
    $323 = $322 << 24 >> 24;
    $324 = ($323|0)==(0);
    if ($324) {
     (__Z14EncodePhonemesPKcPcPi(21938,$ph_buf,0)|0);
    }
   }
   $325 = $4;
   $326 = $325 & 4;
   $327 = ($326|0)!=(0);
   if (!($327)) {
    $328 = $al_flags;
    $329 = $328 & 8;
    $330 = ($329|0)!=(0);
    if ($330) {
     $speak_letter_number = 0;
    }
   }
   $331 = $speak_letter_number;
   $332 = ($331|0)!=(0);
   if ($332) {
    $333 = $al_offset;
    $334 = ($333|0)==(10240);
    if ($334) {
     $p2 = $hexbuf;
     $ix = 0;
     while(1) {
      $335 = $ix;
      $336 = ($335|0)<(8);
      if (!($336)) {
       break;
      }
      $337 = HEAP32[$letter>>2]|0;
      $338 = $ix;
      $339 = 1 << $338;
      $340 = $337 & $339;
      $341 = ($340|0)!=(0);
      if ($341) {
       $342 = $ix;
       $343 = (49 + ($342))|0;
       $344 = $343&255;
       $345 = $p2;
       $346 = ((($345)) + 1|0);
       $p2 = $346;
       HEAP8[$345>>0] = $344;
      }
      $347 = $ix;
      $348 = (($347) + 1)|0;
      $ix = $348;
     }
     $349 = $p2;
     HEAP8[$349>>0] = 0;
    } else {
     $350 = HEAP32[$letter>>2]|0;
     HEAP32[$vararg_buffer>>2] = $350;
     (_sprintf($hexbuf,21944,$vararg_buffer)|0);
    }
    $pbuf = $ph_buf;
    $p2 = $hexbuf;
    while(1) {
     $351 = $p2;
     $352 = HEAP8[$351>>0]|0;
     $353 = $352 << 24 >> 24;
     $354 = ($353|0)!=(0);
     $355 = $pbuf;
     if (!($354)) {
      break;
     }
     $356 = (_strlen($355)|0);
     $357 = $pbuf;
     $358 = (($357) + ($356)|0);
     $pbuf = $358;
     $359 = $pbuf;
     $360 = ((($359)) + 1|0);
     $pbuf = $360;
     HEAP8[$359>>0] = 23;
     $361 = HEAP32[19035]|0;
     $362 = $p2;
     $363 = HEAP8[$362>>0]|0;
     $364 = $363 << 24 >> 24;
     $365 = $pbuf;
     __Z12LookupLetterP10TranslatorjiPci($361,$364,0,$365,1);
     $366 = $pbuf;
     $367 = HEAP8[$366>>0]|0;
     $368 = $367 << 24 >> 24;
     $369 = ($368|0)==(0);
     if ($369) {
      label = 80;
     } else {
      $370 = $pbuf;
      $371 = HEAP8[$370>>0]|0;
      $372 = $371 << 24 >> 24;
      $373 = ($372|0)==(21);
      if ($373) {
       label = 80;
      }
     }
     if ((label|0) == 80) {
      label = 0;
      $374 = $p2;
      $375 = HEAP8[$374>>0]|0;
      $376 = $375 << 24 >> 24;
      $377 = ($376|0)>=(97);
      if ($377) {
       $378 = $p2;
       $379 = HEAP8[$378>>0]|0;
       $380 = $379 << 24 >> 24;
       $381 = (($380) - 97)|0;
       $382 = (2856 + ($381<<2)|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = $pbuf;
       (__Z14EncodePhonemesPKcPcPi($383,$384,0)|0);
      }
     }
     $385 = $p2;
     $386 = ((($385)) + 1|0);
     $p2 = $386;
    }
    (_strcat($355,21975)|0);
   }
  }
 }
 $387 = $3;
 $388 = (_strlen($387)|0);
 $len = $388;
 $389 = $1;
 $390 = ((($389)) + 240|0);
 $391 = HEAP32[$390>>2]|0;
 $392 = $391 & 2;
 $393 = ($392|0)!=(0);
 if ($393) {
  HEAP32[$vararg_buffer4>>2] = 255;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $ph_alphabet;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $ph_buf;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $capital;
  (_sprintf($ph_buf2,21977,$vararg_buffer4)|0);
 } else {
  HEAP32[$vararg_buffer10>>2] = 255;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $ph_alphabet;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $capital;
  $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $ph_buf;
  (_sprintf($ph_buf2,21977,$vararg_buffer10)|0);
 }
 $394 = $len;
 $395 = (_strlen($ph_buf2)|0);
 $396 = (($394) + ($395))|0;
 $397 = ($396>>>0)<(200);
 if ($397) {
  $398 = $len;
  $399 = $3;
  $400 = (($399) + ($398)|0);
  (_strcpy($400,$ph_buf2)|0);
 }
 $401 = $n_bytes;
 $0 = $401;
 $402 = $0;
 STACKTOP = sp;return ($402|0);
}
function __Z17SetSpellingStressP10TranslatorPcii($tr,$phonemes,$control,$n_chars) {
 $tr = $tr|0;
 $phonemes = $phonemes|0;
 $control = $control|0;
 $n_chars = $n_chars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $buf = 0, $c = 0, $count = 0;
 var $ix = 0, $n_stress = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $0 = $tr;
 $1 = $phonemes;
 $2 = $control;
 $3 = $n_chars;
 $n_stress = 0;
 $prev = 0;
 $ix = 0;
 while(1) {
  $4 = $ix;
  $5 = $1;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $c = $8;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $c;
  $11 = ($10|0)==(6);
  $12 = $prev;
  $13 = ($12|0)!=(21);
  $or$cond = $11 & $13;
  if ($or$cond) {
   $14 = $n_stress;
   $15 = (($14) + 1)|0;
   $n_stress = $15;
  }
  $16 = $c;
  $prev = $16;
  $17 = $16&255;
  $18 = $ix;
  $19 = (($buf) + ($18)|0);
  HEAP8[$19>>0] = $17;
  $20 = $ix;
  $21 = (($20) + 1)|0;
  $ix = $21;
 }
 $22 = $ix;
 $23 = (($buf) + ($22)|0);
 HEAP8[$23>>0] = 0;
 $count = 0;
 $prev = 0;
 $ix = 0;
 while(1) {
  $24 = $ix;
  $25 = (($buf) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $c = $27;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $c;
  $30 = ($29|0)==(6);
  $31 = $3;
  $32 = ($31|0)>(1);
  $or$cond3 = $30 & $32;
  $33 = $prev;
  $34 = ($33|0)!=(21);
  $or$cond5 = $or$cond3 & $34;
  do {
   if ($or$cond5) {
    $35 = $count;
    $36 = (($35) + 1)|0;
    $count = $36;
    $37 = $0;
    $38 = ((($37)) + 269|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(1);
    $42 = $count;
    if ($41) {
     $43 = ($42|0)>(1);
     if (!($43)) {
      label = 23;
      break;
     }
     $c = 5;
     label = 23;
     break;
    }
    $44 = $n_stress;
    $45 = ($42|0)!=($44|0);
    if ($45) {
     $46 = $count;
     $47 = (($46|0) % 3)&-1;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      $49 = $count;
      $50 = $n_stress;
      $51 = (($50) - 1)|0;
      $52 = ($49|0)==($51|0);
      if (!($52)) {
       label = 23;
       break;
      }
     }
     $c = 5;
     label = 23;
    } else {
     label = 23;
    }
   } else {
    $53 = $c;
    $54 = ($53|0)==(255);
    if ($54) {
     $55 = $2;
     $56 = ($55|0)<(2);
     $57 = $ix;
     $58 = ($57|0)==(0);
     $or$cond7 = $56 | $58;
     if (!($or$cond7)) {
      $59 = $2;
      $60 = ($59|0)==(4);
      if ($60) {
       $c = 9;
      }
      $61 = $count;
      $62 = (($61|0) % 3)&-1;
      $63 = ($62|0)==(0);
      $64 = $2;
      $65 = ($64|0)>(2);
      $or$cond9 = $63 | $65;
      if ($or$cond9) {
       $c = 11;
       label = 23;
       break;
      } else {
       $c = 23;
       label = 23;
       break;
      }
     }
    } else {
     label = 23;
    }
   }
  } while(0);
  if ((label|0) == 23) {
   label = 0;
   $66 = $c;
   $prev = $66;
   $67 = $66&255;
   $68 = $1;
   $69 = ((($68)) + 1|0);
   $1 = $69;
   HEAP8[$68>>0] = $67;
  }
  $70 = $ix;
  $71 = (($70) + 1)|0;
  $ix = $71;
 }
 $72 = $2;
 $73 = ($72|0)>=(2);
 if (!($73)) {
  $76 = $1;
  HEAP8[$76>>0] = 0;
  STACKTOP = sp;return;
 }
 $74 = $1;
 $75 = ((($74)) + 1|0);
 $1 = $75;
 HEAP8[$74>>0] = 11;
 $76 = $1;
 HEAP8[$76>>0] = 0;
 STACKTOP = sp;return;
}
function __Z14TranslateRomanP10TranslatorPcS1_P8WORD_TAB($tr,$word,$ph_out,$wtab) {
 $tr = $tr|0;
 $word = $word|0;
 $ph_out = $ph_out|0;
 $wtab = $wtab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc = 0, $c = 0, $flags = 0, $n_digits = 0, $num_control = 0, $number_chars = 0, $or$cond = 0, $or$cond3 = 0;
 var $p = 0, $p2 = 0, $ph_roman = 0, $prev = 0, $repeat = 0, $subtract = 0, $value = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, $word_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $flags = sp + 8|0;
 $ph_roman = sp + 240|0;
 $number_chars = sp + 80|0;
 $1 = $tr;
 $2 = $word;
 $3 = $ph_out;
 $4 = $wtab;
 $repeat = 0;
 $n_digits = 0;
 $num_control = 0;
 $acc = 0;
 $prev = 0;
 $subtract = 32767;
 $5 = $3;
 HEAP8[$5>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $6 = ((($flags)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 200|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 33554432;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $16 = $2;
  $17 = ((($16)) + -2|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (__Z9IsDigit09j($19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = $2;
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(32);
   if ($26) {
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
   $27 = $2;
   $word_start = $27;
   while(1) {
    $28 = $2;
    $29 = ((($28)) + 1|0);
    $2 = $29;
    $30 = HEAP8[$28>>0]|0;
    $31 = $30 << 24 >> 24;
    $c = $31;
    $32 = ($31|0)!=(32);
    if (!($32)) {
     label = 28;
     break;
    }
    $33 = HEAP32[720]|0;
    $34 = $c;
    $35 = (_strchr($33,$34)|0);
    $p2 = $35;
    $36 = ($35|0)==(0|0);
    if ($36) {
     label = 10;
     break;
    }
    $37 = $p2;
    $38 = HEAP32[720]|0;
    $39 = $37;
    $40 = $38;
    $41 = (($39) - ($40))|0;
    $42 = (2884 + ($41<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $value = $43;
    $44 = $value;
    $45 = $prev;
    $46 = ($44|0)==($45|0);
    if ($46) {
     $47 = $repeat;
     $48 = (($47) + 1)|0;
     $repeat = $48;
     $49 = $repeat;
     $50 = ($49|0)>=(3);
     if ($50) {
      label = 13;
      break;
     }
    } else {
     $repeat = 0;
    }
    $51 = $prev;
    $52 = ($51|0)>(1);
    $53 = $prev;
    $54 = ($53|0)!=(10);
    $or$cond = $52 & $54;
    $55 = $prev;
    $56 = ($55|0)!=(100);
    $or$cond3 = $or$cond & $56;
    if ($or$cond3) {
     $57 = $value;
     $58 = $prev;
     $59 = ($57|0)>=($58|0);
     if ($59) {
      label = 17;
      break;
     }
    }
    $60 = $prev;
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $prev;
     $63 = $value;
     $64 = ($62|0)<($63|0);
     if ($64) {
      $65 = $acc;
      $66 = (($65|0) % 10)&-1;
      $67 = ($66|0)!=(0);
      if ($67) {
       label = 22;
       break;
      }
      $68 = $prev;
      $69 = ($68*10)|0;
      $70 = $value;
      $71 = ($69|0)<($70|0);
      if ($71) {
       label = 22;
       break;
      }
      $72 = $prev;
      $subtract = $72;
      $73 = $subtract;
      $74 = $value;
      $75 = (($74) - ($73))|0;
      $value = $75;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $76 = $value;
     $77 = $subtract;
     $78 = ($76|0)>=($77|0);
     if ($78) {
      label = 25;
      break;
     }
     $79 = $prev;
     $80 = $acc;
     $81 = (($80) + ($79))|0;
     $acc = $81;
    }
    $82 = $value;
    $prev = $82;
    $83 = $n_digits;
    $84 = (($83) + 1)|0;
    $n_digits = $84;
   }
   if ((label|0) == 10) {
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
   else if ((label|0) == 13) {
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
   else if ((label|0) == 17) {
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
   else if ((label|0) == 22) {
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
   else if ((label|0) == 25) {
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
   else if ((label|0) == 28) {
    $85 = $2;
    $86 = HEAP8[$85>>0]|0;
    $87 = $86 << 24 >> 24;
    $88 = (__Z9IsDigit09j($87)|0);
    $89 = ($88|0)!=(0);
    if ($89) {
     $0 = 0;
     $171 = $0;
     STACKTOP = sp;return ($171|0);
    }
    $90 = $prev;
    $91 = $acc;
    $92 = (($91) + ($90))|0;
    $acc = $92;
    $93 = $acc;
    $94 = $1;
    $95 = ((($94)) + 216|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($93|0)<($96|0);
    if ($97) {
     $0 = 0;
     $171 = $0;
     STACKTOP = sp;return ($171|0);
    }
    $98 = $acc;
    $99 = $1;
    $100 = ((($99)) + 212|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($98|0)>($101|0);
    if ($102) {
     $0 = 0;
     $171 = $0;
     STACKTOP = sp;return ($171|0);
    }
    $103 = $1;
    (__Z6LookupP10TranslatorPKcPc($103,21994,$ph_roman)|0);
    $104 = $3;
    $p = $104;
    $105 = $1;
    $106 = ((($105)) + 200|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $107 & 67108864;
    $109 = ($108|0)==(0);
    if ($109) {
     $110 = $3;
     (_strcpy($110,$ph_roman)|0);
     $111 = (_strlen($ph_roman)|0);
     $112 = $3;
     $113 = (($112) + ($111)|0);
     $p = $113;
    }
    $114 = $acc;
    $115 = $1;
    $116 = ((($115)) + 236|0);
    $117 = HEAP32[$116>>2]|0;
    HEAP32[$vararg_buffer>>2] = $114;
    $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $117;
    (_sprintf($number_chars,22001,$vararg_buffer)|0);
    $118 = $2;
    $119 = HEAP8[$118>>0]|0;
    $120 = $119 << 24 >> 24;
    $121 = ($120|0)==(46);
    if ($121) {
     $0 = 0;
     $171 = $0;
     STACKTOP = sp;return ($171|0);
    }
    $122 = $1;
    $123 = $word_start;
    $124 = $2;
    $125 = $4;
    $126 = (__ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($122,$123,$124,$125,1)|0);
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $4;
     $129 = HEAP32[$128>>2]|0;
     $130 = $129 | 32768;
     HEAP32[$128>>2] = $130;
    }
    $131 = $1;
    $132 = ((($131)) + 200|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $133 & 134217728;
    $135 = ($134|0)!=(0);
    do {
     if ($135) {
      $136 = $1;
      $137 = ((($136)) + 324|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(26741);
      $140 = $4;
      $141 = HEAP32[$140>>2]|0;
      if (!($139)) {
       $154 = $141 | 32768;
       HEAP32[$140>>2] = $154;
       break;
      }
      $142 = $141 & 32768;
      $143 = ($142|0)!=(0);
      if (!($143)) {
       $144 = $4;
       $145 = HEAP32[$144>>2]|0;
       $146 = $145 & 16384;
       $147 = ($146|0)!=(0);
       if ($147) {
        $148 = $2;
        $149 = $acc;
        $150 = (__ZL11hu_number_ePKcii($148,0,$149)|0);
        $151 = ($150|0)!=(0);
        if ($151) {
         $152 = $num_control;
         $153 = $152 | 1;
         $num_control = $153;
         break;
        }
       }
       $0 = 0;
       $171 = $0;
       STACKTOP = sp;return ($171|0);
      }
     }
    } while(0);
    $155 = $1;
    $156 = ((($155)) + 8352|0);
    HEAP32[$156>>2] = 0;
    $157 = $1;
    $158 = ((($157)) + 8352|0);
    $159 = ((($158)) + 4|0);
    HEAP32[$159>>2] = 0;
    $160 = $1;
    $161 = ((($number_chars)) + 2|0);
    $162 = $p;
    $163 = $4;
    $164 = $num_control;
    (__Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($160,$161,$162,$flags,$163,$164)|0);
    $165 = $1;
    $166 = ((($165)) + 200|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $167 & 67108864;
    $169 = ($168|0)!=(0);
    if ($169) {
     $170 = $3;
     (_strcat($170,$ph_roman)|0);
    }
    $0 = 1;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
  }
 }
 $0 = 0;
 $171 = $0;
 STACKTOP = sp;return ($171|0);
}
function __ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($tr,$word,$word_end,$wtab,$roman) {
 $tr = $tr|0;
 $word = $word|0;
 $word_end = $word_end|0;
 $wtab = $wtab|0;
 $roman = $roman|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c2 = 0, $nextflags = 0, $ordinal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c2 = sp + 4|0;
 $0 = $tr;
 $1 = $word;
 $2 = $word_end;
 $3 = $wtab;
 $4 = $roman;
 $ordinal = 0;
 $5 = $0;
 $6 = ((($5)) + 200|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 65536;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $10 = $2;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)==(46);
   if (!($13)) {
    $14 = $3;
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 65536;
    $17 = ($16|0)!=(0);
    if (!($17)) {
     break;
    }
   }
   $18 = $3;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 256;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $23 = $4;
    $24 = ($23|0)!=(0);
    if (!($24)) {
     $25 = $3;
     $26 = ((($25)) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 & 2;
     $29 = ($28|0)!=(0);
     if ($29) {
      break;
     }
    }
    $30 = $2;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(46);
    $34 = $2;
    if ($33) {
     $35 = ((($34)) + 2|0);
     (__Z7utf8_inPiPKc($c2,$35)|0);
    } else {
     (__Z7utf8_inPiPKc($c2,$34)|0);
    }
    $36 = $2;
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)!=(0);
    if ($39) {
     $40 = $2;
     $41 = ((($40)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)!=(0);
     if ($44) {
      $45 = HEAP32[$c2>>2]|0;
      $46 = ($45|0)==(0);
      if (!($46)) {
       $47 = $3;
       $48 = HEAP32[$47>>2]|0;
       $49 = $48 & 131072;
       $50 = ($49|0)!=(0);
       if (!($50)) {
        $51 = HEAP32[$c2>>2]|0;
        $52 = (__Z7IsAlphaj($51)|0);
        $53 = ($52|0)!=(0);
        if (!($53)) {
         break;
        }
       }
      }
      $ordinal = 2;
      $54 = $2;
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($56|0)==(46);
      if ($57) {
       $58 = $2;
       HEAP8[$58>>0] = 32;
      }
      $59 = $4;
      $60 = ($59|0)==(0);
      if ($60) {
       $61 = $0;
       $62 = ((($61)) + 324|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(26741);
       if ($64) {
        $nextflags = 0;
        $65 = HEAP32[$c2>>2]|0;
        $66 = (__Z7IsAlphaj($65)|0);
        $67 = ($66|0)!=(0);
        if ($67) {
         $68 = $0;
         $69 = $2;
         $70 = ((($69)) + 2|0);
         $71 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($68,$70,0,0,0)|0);
         $nextflags = $71;
        }
        $72 = $0;
        $73 = ((($72)) + 8352|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $74 & 32768;
        $76 = ($75|0)!=(0);
        do {
         if ($76) {
          $77 = HEAP32[$c2>>2]|0;
          $78 = ($77|0)==(0);
          if (!($78)) {
           $79 = $3;
           $80 = HEAP32[$79>>2]|0;
           $81 = $80 & 131072;
           $82 = ($81|0)!=(0);
           if (!($82)) {
            $83 = HEAP32[$c2>>2]|0;
            $84 = (_iswdigit($83)|0);
            $85 = ($84|0)!=(0);
            if (!($85)) {
             break;
            }
           }
          }
          $ordinal = 0;
         }
        } while(0);
        $86 = $nextflags;
        $87 = $86 & 32768;
        $88 = ($87|0)!=(0);
        if ($88) {
         $ordinal = 0;
        }
        $89 = $nextflags;
        $90 = $89 & 131072;
        $91 = ($90|0)!=(0);
        if ($91) {
         $92 = $1;
         $93 = ((($92)) + -2|0);
         $94 = HEAP8[$93>>0]|0;
         $95 = $94 << 24 >> 24;
         $96 = ($95|0)==(45);
         if ($96) {
          $ordinal = 0;
         }
         $97 = $0;
         $98 = ((($97)) + 8352|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = $99 & 163840;
         $101 = ($100|0)!=(0);
         if ($101) {
          $ordinal = 34;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $102 = $ordinal;
 STACKTOP = sp;return ($102|0);
}
function __ZL11hu_number_ePKcii($word,$thousandplex,$value) {
 $word = $word|0;
 $thousandplex = $thousandplex|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $word;
 $2 = $thousandplex;
 $3 = $value;
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(97);
 if (!($7)) {
  $8 = $1;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(101);
  if (!($11)) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $12 = $1;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(32);
 do {
  if (!($16)) {
   $17 = $1;
   $18 = ((($17)) + 1|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(122);
   if (!($21)) {
    $22 = $1;
    $23 = ((($22)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(116);
    if ($26) {
     $27 = $1;
     $28 = ((($27)) + 2|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29 << 24 >> 24;
     $31 = ($30|0)==(116);
     if ($31) {
      break;
     }
    }
    $32 = $2;
    $33 = ($32|0)==(1);
    if ($33) {
     label = 10;
    } else {
     $34 = $3;
     $35 = (($34|0) % 1000)&-1;
     $36 = ($35|0)==(0);
     if ($36) {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     $37 = $1;
     $38 = ((($37)) + 1|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39 << 24 >> 24;
     $41 = ($40|0)==(108);
     if ($41) {
      $0 = 0;
      $42 = $0;
      STACKTOP = sp;return ($42|0);
     }
    }
    $0 = 1;
    $42 = $0;
    STACKTOP = sp;return ($42|0);
   }
  }
 } while(0);
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($tr,$word1,$ph_out,$flags,$wtab,$control) {
 $tr = $tr|0;
 $word1 = $word1|0;
 $ph_out = $ph_out|0;
 $flags = $flags|0;
 $wtab = $wtab|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tr;
 $2 = $word1;
 $3 = $ph_out;
 $4 = $flags;
 $5 = $wtab;
 $6 = $control;
 $7 = HEAP32[19046]|0;
 $8 = ($7|0)==(193);
 if (!($8)) {
  $9 = $5;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 524288;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $1;
   $14 = ((($13)) + 200|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $1;
    $18 = $2;
    $19 = $3;
    $20 = $4;
    $21 = $5;
    $22 = $6;
    $23 = (__ZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABi($17,$18,$19,$20,$21,$22)|0);
    $0 = $23;
    $24 = $0;
    STACKTOP = sp;return ($24|0);
   } else {
    $0 = 0;
    $24 = $0;
    STACKTOP = sp;return ($24|0);
   }
  }
 }
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABi($tr,$word,$ph_out,$flags,$wtab,$control) {
 $tr = $tr|0;
 $word = $word|0;
 $ph_out = $ph_out|0;
 $flags = $flags|0;
 $wtab = $wtab|0;
 $control = $control|0;
 var $$ = 0, $$old = 0, $$old20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf1 = 0, $buf_digit_lookup = 0, $c = 0, $decimal_count = 0, $decimal_mode = 0, $decimal_point = 0;
 var $digix = 0, $group_len = 0, $ix = 0, $len = 0, $max_decimal_count = 0, $n_digits = 0, $next_char = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond24 = 0, $or$cond27 = 0, $or$cond30 = 0, $or$cond6 = 0, $or$cond8 = 0, $ordinal = 0;
 var $p = 0, $p1 = 0, $p2 = 0, $ph_append = 0, $ph_buf = 0, $ph_buf2 = 0, $ph_zeros = 0, $prev_thousands = 0, $skipwords = 0, $string = 0, $suffix = 0, $suffix_ix = 0, $suppress_null = 0, $switch$split2D = 0, $switch$split732D = 0, $switch$split762D = 0, $switch$split792D = 0, $switch$split822D = 0, $switch$split852D = 0, $this_value = 0;
 var $thousandplex = 0, $thousands_exact = 0, $thousands_inc = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer50 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0;
 var $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer63 = sp + 104|0;
 $vararg_buffer60 = sp + 96|0;
 $vararg_buffer57 = sp + 88|0;
 $vararg_buffer50 = sp + 64|0;
 $vararg_buffer43 = sp + 40|0;
 $vararg_buffer40 = sp + 32|0;
 $vararg_buffer37 = sp + 24|0;
 $vararg_buffer34 = sp + 16|0;
 $vararg_buffer31 = sp + 8|0;
 $vararg_buffer = sp;
 $p = sp + 124|0;
 $string = sp + 768|0;
 $buf1 = sp + 668|0;
 $ph_append = sp + 616|0;
 $ph_buf = sp + 416|0;
 $ph_buf2 = sp + 362|0;
 $ph_zeros = sp + 312|0;
 $suffix = sp + 282|0;
 $buf_digit_lookup = sp + 232|0;
 $p2 = sp + 120|0;
 $next_char = sp + 116|0;
 $1 = $tr;
 $2 = $word;
 $3 = $ph_out;
 $4 = $flags;
 $5 = $wtab;
 $6 = $control;
 $suppress_null = 0;
 $decimal_point = 0;
 $thousandplex = 0;
 $thousands_exact = 1;
 $thousands_inc = 0;
 $prev_thousands = 0;
 $ordinal = 0;
 $skipwords = 0;
 $7 = $4;
 HEAP32[$7>>2] = 0;
 HEAP32[11122] = 0;
 HEAP8[$buf_digit_lookup>>0] = 0;
 HEAP32[11123] = $buf_digit_lookup;
 $8 = $6;
 HEAP32[11124] = $8;
 $ix = 0;
 while(1) {
  $9 = $ix;
  $10 = $2;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (__Z9IsDigit09j($13)|0);
  $15 = ($14|0)!=(0);
  $16 = $ix;
  if (!($15)) {
   break;
  }
  $17 = (($16) + 1)|0;
  $ix = $17;
 }
 $n_digits = $16;
 $18 = $2;
 $19 = (_atoi($18)|0);
 $this_value = $19;
 $value = $19;
 $group_len = 3;
 $20 = $1;
 $21 = ((($20)) + 204|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 16384;
 $24 = ($23|0)!=(0);
 $$ = $24 ? 4 : 3;
 $group_len = $$;
 $25 = $n_digits;
 $26 = $group_len;
 $27 = ($25|0)==($26|0);
 if ($27) {
  $28 = $2;
  $29 = ((($28)) + -2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = $1;
  $33 = ((($32)) + 220|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)==($34|0);
  if ($35) {
   $36 = $2;
   $37 = ((($36)) + -3|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38 << 24 >> 24;
   $40 = (__Z9IsDigit09j($39)|0);
   $41 = ($40|0)!=(0);
   if ($41) {
    $prev_thousands = 1;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $42 = $1;
   $43 = ((($42)) + 220|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(32);
   if ($45) {
    $$old = $n_digits;
    $$old20 = ($$old|0)==(3);
    if (!($$old20)) {
     break;
    }
   } else {
    $46 = $1;
    $47 = ((($46)) + 200|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & 4096;
    $50 = ($49|0)!=(0);
    $51 = $n_digits;
    $52 = ($51|0)==(3);
    $or$cond21 = $50 & $52;
    if (!($or$cond21)) {
     break;
    }
   }
   $53 = $5;
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & 262144;
   $56 = ($55|0)!=(0);
   if (!($56)) {
    $57 = $2;
    $58 = ((($57)) + -2|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = (__Z9IsDigit09j($60)|0);
    $62 = ($61|0)!=(0);
    if ($62) {
     $prev_thousands = 1;
    }
   }
  }
 } while(0);
 $63 = $prev_thousands;
 $64 = ($63|0)==(0);
 if ($64) {
  HEAP32[11125] = 0;
 }
 HEAP8[119639] = 0;
 HEAP8[$ph_zeros>>0] = 0;
 $65 = $prev_thousands;
 $66 = ($65|0)!=(0);
 if ($66) {
  label = 18;
 } else {
  $67 = $2;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68 << 24 >> 24;
  $70 = ($69|0)!=(48);
  if ($70) {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $71 = $1;
  $72 = $2;
  $73 = $ix;
  $74 = $2;
  $75 = (($74) + ($73)|0);
  $76 = $5;
  $77 = (__ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($71,$72,$75,$76,0)|0);
  $ordinal = $77;
 }
 $78 = $ix;
 $79 = $2;
 $80 = (($79) + ($78)|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81 << 24 >> 24;
 $83 = ($82|0)==(46);
 if ($83) {
  $84 = $ix;
  $85 = (($84) + 1)|0;
  $86 = $2;
  $87 = (($86) + ($85)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = (__Z9IsDigit09j($89)|0);
  $91 = ($90|0)!=(0);
  if (!($91)) {
   $92 = $ix;
   $93 = (($92) + 2)|0;
   $94 = $2;
   $95 = (($94) + ($93)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96 << 24 >> 24;
   $98 = (__Z9IsDigit09j($97)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    $100 = $5;
    $101 = ((($100)) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 256;
    $104 = ($103|0)!=(0);
    if (!($104)) {
     $105 = $ix;
     $106 = $2;
     $107 = (($106) + ($105)|0);
     HEAP8[$107>>0] = 0;
    }
   }
  }
 }
 $108 = $ordinal;
 $109 = ($108|0)==(0);
 if ($109) {
  label = 26;
 } else {
  $110 = $1;
  $111 = ((($110)) + 324|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(26741);
  if ($113) {
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $114 = $ix;
   $115 = (($114) + 1)|0;
   $ix = $115;
   HEAP32[$p>>2] = $suffix;
   $116 = $5;
   $117 = HEAP32[$116>>2]|0;
   $118 = $117 & 16384;
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = HEAP32[$p>>2]|0;
    $121 = ((($120)) + 1|0);
    HEAP32[$p>>2] = $121;
    HEAP8[$120>>0] = 45;
    $122 = $ix;
    $123 = (($122) + 1)|0;
    $ix = $123;
   }
   while(1) {
    $124 = $ix;
    $125 = $2;
    $126 = (($125) + ($124)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    $129 = ($128|0)!=(0);
    if (!($129)) {
     break;
    }
    $130 = $ix;
    $131 = $2;
    $132 = (($131) + ($130)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133 << 24 >> 24;
    $135 = ($134|0)!=(32);
    $136 = $ix;
    $137 = ($136|0)<(29);
    $or$cond24 = $135 & $137;
    if (!($or$cond24)) {
     break;
    }
    $138 = $ix;
    $139 = (($138) + 1)|0;
    $ix = $139;
    $140 = $2;
    $141 = (($140) + ($138)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = HEAP32[$p>>2]|0;
    $144 = ((($143)) + 1|0);
    HEAP32[$p>>2] = $144;
    HEAP8[$143>>0] = $142;
   }
   $145 = HEAP32[$p>>2]|0;
   HEAP8[$145>>0] = 0;
   $146 = HEAP8[$suffix>>0]|0;
   $147 = $146 << 24 >> 24;
   $148 = ($147|0)!=(0);
   if ($148) {
    $149 = $1;
    $150 = ((($149)) + 232|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)!=(0|0);
    if ($152) {
     $153 = $1;
     $154 = ((($153)) + 232|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (_strcmp($suffix,$155)|0);
     $157 = ($156|0)==(0);
     if ($157) {
      $ordinal = 2;
      break;
     }
    }
    $158 = HEAP8[$suffix>>0]|0;
    $159 = $158 << 24 >> 24;
    $160 = (__Z9IsDigit09j($159)|0);
    $161 = ($160|0)!=(0);
    if (!($161)) {
     HEAP32[$vararg_buffer>>2] = $suffix;
     (_sprintf($string,22013,$vararg_buffer)|0);
     $162 = $1;
     $163 = (__Z6LookupP10TranslatorPKcPc($162,$string,119639)|0);
     $164 = ($163|0)!=(0);
     if ($164) {
      $ordinal = 2;
      $165 = $4;
      $166 = HEAP32[$165>>2]|0;
      $167 = $166 | 128;
      HEAP32[$165>>2] = $167;
      $skipwords = 1;
      HEAP32[$vararg_buffer31>>2] = $suffix;
      (_sprintf($string,22018,$vararg_buffer31)|0);
      $168 = $1;
      (__Z6LookupP10TranslatorPKcPc($168,$string,119651)|0);
     }
    }
   }
  }
 } while(0);
 $169 = $5;
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 & 32768;
 $172 = ($171|0)!=(0);
 if ($172) {
  $ordinal = 2;
 }
 HEAP8[$ph_append>>0] = 0;
 HEAP8[$ph_buf2>>0] = 0;
 $173 = $2;
 $174 = HEAP8[$173>>0]|0;
 $175 = $174 << 24 >> 24;
 $176 = ($175|0)==(48);
 $177 = $prev_thousands;
 $178 = ($177|0)==(0);
 $or$cond = $176 & $178;
 L54: do {
  if ($or$cond) {
   $179 = $2;
   $180 = ((($179)) + 1|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181 << 24 >> 24;
   $183 = ($182|0)!=(32);
   if ($183) {
    $184 = $2;
    $185 = ((($184)) + 1|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = $1;
    $189 = ((($188)) + 224|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($187|0)!=($190|0);
    if ($191) {
     $192 = $n_digits;
     $193 = ($192|0)==(2);
     if ($193) {
      $194 = $2;
      $195 = ((($194)) + 3|0);
      $196 = HEAP8[$195>>0]|0;
      $197 = $196 << 24 >> 24;
      $198 = ($197|0)==(58);
      if ($198) {
       $199 = $2;
       $200 = ((($199)) + 5|0);
       $201 = HEAP8[$200>>0]|0;
       $202 = $201 << 24 >> 24;
       $203 = (__Z9IsDigit09j($202)|0);
       $204 = ($203|0)!=(0);
       if ($204) {
        $205 = $2;
        $206 = ((($205)) + 7|0);
        $207 = HEAP8[$206>>0]|0;
        $208 = $207 << 24 >> 24;
        $209 = (_isspace($208)|0);
        $210 = ($209|0)!=(0);
        if ($210) {
         break;
        }
       }
      }
     }
     $211 = $n_digits;
     $212 = ($211|0)>(3);
     if ($212) {
      $213 = $4;
      $214 = HEAP32[$213>>2]|0;
      $215 = $214 & -129;
      HEAP32[$213>>2] = $215;
      $0 = 0;
      $669 = $0;
      STACKTOP = sp;return ($669|0);
     }
     $ix = 0;
     while(1) {
      $216 = $ix;
      $217 = $2;
      $218 = (($217) + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219 << 24 >> 24;
      $221 = ($220|0)==(48);
      if (!($221)) {
       break L54;
      }
      $222 = $ix;
      $223 = $n_digits;
      $224 = (($223) - 1)|0;
      $225 = ($222|0)<($224|0);
      if (!($225)) {
       break L54;
      }
      $226 = $1;
      $227 = (_strlen($ph_zeros)|0);
      $228 = (($ph_zeros) + ($227)|0);
      (__Z6LookupP10TranslatorPKcPc($226,22024,$228)|0);
      $229 = $ix;
      $230 = (($229) + 1)|0;
      $ix = $230;
     }
    }
   }
  }
 } while(0);
 $231 = $1;
 $232 = ((($231)) + 200|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = $233 & 4096;
 $235 = ($234|0)!=(0);
 if ($235) {
  $236 = $n_digits;
  $237 = $2;
  $238 = (($237) + ($236)|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239 << 24 >> 24;
  $241 = ($240|0)==(32);
  if ($241) {
   $thousands_inc = 1;
  } else {
   label = 56;
  }
 } else {
  label = 56;
 }
 if ((label|0) == 56) {
  $242 = $n_digits;
  $243 = $2;
  $244 = (($243) + ($242)|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245 << 24 >> 24;
  $247 = $1;
  $248 = ((($247)) + 220|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ($246|0)==($249|0);
  if ($250) {
   $thousands_inc = 2;
  }
 }
 $251 = $n_digits;
 $252 = (($251) + 2)|0;
 $suffix_ix = $252;
 $253 = $thousands_inc;
 $254 = ($253|0)>(0);
 L79: do {
  if ($254) {
   $255 = $n_digits;
   $256 = $thousands_inc;
   $257 = (($255) + ($256))|0;
   $digix = $257;
   while(1) {
    $258 = $thousandplex;
    $259 = (($258) + 1)|0;
    $260 = $5;
    $261 = (($260) + (($259*12)|0)|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $262 & 262144;
    $264 = ($263|0)==(0);
    if (!($264)) {
     break L79;
    }
    $265 = $digix;
    $266 = $2;
    $267 = (($266) + ($265)|0);
    $268 = $group_len;
    $269 = (__Z19CheckThousandsGroupPci($267,$268)|0);
    if (!($269)) {
     break L79;
    }
    $ix = 0;
    while(1) {
     $270 = $ix;
     $271 = $group_len;
     $272 = ($270|0)<($271|0);
     if (!($272)) {
      break;
     }
     $273 = $digix;
     $274 = $ix;
     $275 = (($273) + ($274))|0;
     $276 = $2;
     $277 = (($276) + ($275)|0);
     $278 = HEAP8[$277>>0]|0;
     $279 = $278 << 24 >> 24;
     $280 = ($279|0)!=(48);
     if ($280) {
      label = 65;
      break;
     }
     $281 = $ix;
     $282 = (($281) + 1)|0;
     $ix = $282;
    }
    if ((label|0) == 65) {
     label = 0;
     $thousands_exact = 0;
    }
    $283 = $thousandplex;
    $284 = (($283) + 1)|0;
    $thousandplex = $284;
    $285 = $group_len;
    $286 = $digix;
    $287 = (($286) + ($285))|0;
    $digix = $287;
    $288 = $digix;
    $289 = $2;
    $290 = (($289) + ($288)|0);
    $291 = HEAP8[$290>>0]|0;
    $292 = $291 << 24 >> 24;
    $293 = $1;
    $294 = ((($293)) + 220|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = ($292|0)==($295|0);
    if (!($296)) {
     $297 = $1;
     $298 = ((($297)) + 200|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = $299 & 4096;
     $301 = ($300|0)!=(0);
     if (!($301)) {
      break L79;
     }
     $302 = $digix;
     $303 = $2;
     $304 = (($303) + ($302)|0);
     $305 = HEAP8[$304>>0]|0;
     $306 = $305 << 24 >> 24;
     $307 = ($306|0)==(32);
     if (!($307)) {
      break L79;
     }
    }
    $308 = $digix;
    $309 = (($308) + 2)|0;
    $suffix_ix = $309;
    $310 = $thousands_inc;
    $311 = $digix;
    $312 = (($311) + ($310))|0;
    $digix = $312;
   }
  }
 } while(0);
 $313 = $value;
 $314 = ($313|0)==(0);
 $315 = $prev_thousands;
 $316 = ($315|0)!=(0);
 $or$cond6 = $314 & $316;
 if ($or$cond6) {
  $suppress_null = 1;
 }
 $317 = $1;
 $318 = ((($317)) + 324|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = ($319|0)==(26741);
 if ($320) {
  $321 = $thousandplex;
  $322 = $5;
  $323 = (($322) + (($321*12)|0)|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = $324 & 16384;
  $326 = ($325|0)!=(0);
  $327 = $thousands_exact;
  $328 = ($327|0)==(1);
  $or$cond8 = $326 & $328;
  if ($or$cond8) {
   $329 = $suffix_ix;
   $330 = $2;
   $331 = (($330) + ($329)|0);
   $332 = $thousandplex;
   $333 = $value;
   $334 = (__ZL11hu_number_ePKcii($331,$332,$333)|0);
   $335 = ($334|0)!=(0);
   if ($335) {
    $336 = HEAP32[11124]|0;
    $337 = $336 | 1;
    HEAP32[11124] = $337;
   }
  }
 }
 $338 = $n_digits;
 $339 = $2;
 $340 = (($339) + ($338)|0);
 $341 = HEAP8[$340>>0]|0;
 $342 = $341 << 24 >> 24;
 $343 = $1;
 $344 = ((($343)) + 224|0);
 $345 = HEAP32[$344>>2]|0;
 $346 = ($342|0)==($345|0);
 if ($346) {
  $347 = $n_digits;
  $348 = (($347) + 1)|0;
  $349 = $2;
  $350 = (($349) + ($348)|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = $351 << 24 >> 24;
  $353 = (__Z9IsDigit09j($352)|0);
  $354 = ($353|0)!=(0);
  if ($354) {
   $355 = $1;
   (__Z6LookupP10TranslatorPKcPc($355,22027,$ph_append)|0);
   $decimal_point = 256;
  } else {
   label = 80;
  }
 } else {
  label = 80;
 }
 do {
  if ((label|0) == 80) {
   $356 = $suppress_null;
   $357 = ($356|0)==(0);
   if ($357) {
    $358 = $thousands_inc;
    $359 = ($358|0)>(0);
    $360 = $thousandplex;
    $361 = ($360|0)>(0);
    $or$cond27 = $359 & $361;
    $362 = $suppress_null;
    $363 = ($362|0)==(0);
    $or$cond30 = $or$cond27 & $363;
    if (!($or$cond30)) {
     break;
    }
    $364 = $1;
    $365 = $value;
    $366 = $thousandplex;
    $367 = $thousands_exact;
    $368 = (__ZL15LookupThousandsP10TranslatoriiiPc($364,$365,$366,$367,$ph_append)|0);
    $369 = ($368|0)!=(0);
    if (!($369)) {
     break;
    }
    $value = 0;
    $suppress_null = 1;
    break;
   } else {
    $370 = HEAP32[11125]|0;
    $371 = ($370|0)==(1);
    if (!($371)) {
     break;
    }
    $372 = $thousandplex;
    $373 = (($372) + 1)|0;
    HEAP32[$vararg_buffer34>>2] = $373;
    (_sprintf($string,22109,$vararg_buffer34)|0);
    $374 = $1;
    $375 = (__Z6LookupP10TranslatorPKcPc($374,$string,$buf1)|0);
    $376 = ($375|0)==(0);
    if (!($376)) {
     break;
    }
    $377 = $thousandplex;
    HEAP32[$vararg_buffer37>>2] = $377;
    (_sprintf($string,22109,$vararg_buffer37)|0);
    $378 = $1;
    (__Z6LookupP10TranslatorPKcPc($378,$string,$ph_append)|0);
    break;
   }
  }
 } while(0);
 $379 = HEAP8[$ph_append>>0]|0;
 $380 = $379 << 24 >> 24;
 $381 = ($380|0)==(0);
 if ($381) {
  $382 = $n_digits;
  $383 = $2;
  $384 = (($383) + ($382)|0);
  $385 = HEAP8[$384>>0]|0;
  $386 = $385 << 24 >> 24;
  $387 = ($386|0)==(46);
  $388 = $thousandplex;
  $389 = ($388|0)==(0);
  $or$cond10 = $387 & $389;
  if ($or$cond10) {
   $390 = $1;
   (__Z6LookupP10TranslatorPKcPc($390,22131,$ph_append)|0);
  }
 }
 $391 = $thousandplex;
 $392 = ($391|0)==(0);
 do {
  if ($392) {
   $393 = $2;
   HEAP32[$p>>2] = $393;
   while(1) {
    $394 = HEAP32[$p>>2]|0;
    $395 = ((($394)) + 1|0);
    $396 = HEAP8[$395>>0]|0;
    $397 = $396 << 24 >> 24;
    $398 = (__Z9IsDigit09j($397)|0);
    $399 = ($398|0)!=(0);
    $400 = HEAP32[$p>>2]|0;
    if (!($399)) {
     break;
    }
    $401 = ((($400)) + 1|0);
    HEAP32[$p>>2] = $401;
   }
   $402 = ((($400)) + -1|0);
   $403 = HEAP8[$402>>0]|0;
   $404 = $403 << 24 >> 24;
   $405 = (__Z9IsDigit09j($404)|0);
   $406 = ($405|0)!=(0);
   if ($406) {
    $407 = HEAP32[$p>>2]|0;
    $408 = ((($407)) + -1|0);
    HEAP32[$p2>>2] = $408;
    $409 = $1;
    $410 = $4;
    $411 = $5;
    $412 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($409,$p2,$buf_digit_lookup,$410,4,$411)|0);
    $413 = ($412|0)!=(0);
    if ($413) {
     HEAP32[11122] = 2;
    }
   }
   $414 = HEAP8[$buf_digit_lookup>>0]|0;
   $415 = $414 << 24 >> 24;
   $416 = ($415|0)==(0);
   if ($416) {
    $417 = HEAP32[$p>>2]|0;
    $418 = HEAP8[$417>>0]|0;
    $419 = $418 << 24 >> 24;
    $420 = ($419|0)!=(48);
    if ($420) {
     $421 = $1;
     $422 = $4;
     $423 = $5;
     $424 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($421,$p,$buf_digit_lookup,$422,4,$423)|0);
     $425 = ($424|0)!=(0);
     if ($425) {
      HEAP32[11122] = 1;
     }
    }
   }
   $426 = $prev_thousands;
   $427 = ($426|0)==(0);
   if ($427) {
    $428 = $decimal_point;
    $429 = ($428|0)==(0);
    $430 = $ordinal;
    $431 = ($430|0)==(0);
    $or$cond12 = $429 & $431;
    do {
     if ($or$cond12) {
      $432 = $value;
      HEAP32[$vararg_buffer40>>2] = $432;
      (_sprintf($string,22134,$vararg_buffer40)|0);
      $433 = $1;
      $434 = $3;
      $435 = (__Z6LookupP10TranslatorPKcPc($433,$string,$434)|0);
      $436 = ($435|0)!=(0);
      if (!($436)) {
       break;
      }
      $0 = 1;
      $669 = $0;
      STACKTOP = sp;return ($669|0);
     }
    } while(0);
    $437 = $1;
    $438 = ((($437)) + 204|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $439 & 65536;
    $441 = ($440|0)!=(0);
    if ($441) {
     $442 = $2;
     HEAP32[$p2>>2] = $442;
     while(1) {
      $443 = HEAP32[$p2>>2]|0;
      $444 = HEAP8[$443>>0]|0;
      $445 = $444 << 24 >> 24;
      $446 = ($445|0)!=(32);
      if ($446) {
       $447 = HEAP32[$p2>>2]|0;
       $448 = HEAP8[$447>>0]|0;
       $449 = $448 << 24 >> 24;
       $450 = ($449|0)!=(0);
       $670 = $450;
      } else {
       $670 = 0;
      }
      $451 = HEAP32[$p2>>2]|0;
      $452 = ((($451)) + 1|0);
      if (!($670)) {
       break;
      }
      HEAP32[$p2>>2] = $452;
     }
     $453 = HEAP8[$452>>0]|0;
     $454 = $453 << 24 >> 24;
     $455 = ($454|0)==(37);
     if (!($455)) {
      break;
     }
     $456 = $1;
     $457 = $3;
     (__Z6LookupP10TranslatorPKcPc($456,22139,$457)|0);
     $458 = $3;
     $459 = (_strlen($458)|0);
     $460 = $3;
     $461 = (($460) + ($459)|0);
     $3 = $461;
     $462 = HEAP32[$p2>>2]|0;
     $463 = ((($462)) + 1|0);
     HEAP8[$463>>0] = 32;
    }
   }
  }
 } while(0);
 $464 = $1;
 $465 = $value;
 $466 = $suppress_null;
 $467 = $thousandplex;
 $468 = $prev_thousands;
 $469 = $ordinal;
 $470 = $468 | $469;
 $471 = $decimal_point;
 $472 = $470 | $471;
 (__ZL10LookupNum3P10TranslatoriPciii($464,$465,$ph_buf,$466,$467,$472)|0);
 $473 = $thousandplex;
 $474 = ($473|0)>(0);
 if ($474) {
  $475 = $1;
  $476 = ((($475)) + 204|0);
  $477 = HEAP32[$476>>2]|0;
  $478 = $477 & 512;
  $479 = ($478|0)!=(0);
  if ($479) {
   $480 = $3;
   HEAP32[$vararg_buffer43>>2] = $ph_zeros;
   $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
   HEAP32[$vararg_ptr46>>2] = $ph_append;
   $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
   HEAP32[$vararg_ptr47>>2] = 15;
   $vararg_ptr48 = ((($vararg_buffer43)) + 12|0);
   HEAP32[$vararg_ptr48>>2] = $ph_buf2;
   $vararg_ptr49 = ((($vararg_buffer43)) + 16|0);
   HEAP32[$vararg_ptr49>>2] = $ph_buf;
   (_sprintf($480,22269,$vararg_buffer43)|0);
  } else {
   label = 116;
  }
 } else {
  label = 116;
 }
 if ((label|0) == 116) {
  $481 = $3;
  HEAP32[$vararg_buffer50>>2] = $ph_zeros;
  $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
  HEAP32[$vararg_ptr53>>2] = $ph_buf2;
  $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
  HEAP32[$vararg_ptr54>>2] = $ph_buf;
  $vararg_ptr55 = ((($vararg_buffer50)) + 12|0);
  HEAP32[$vararg_ptr55>>2] = 15;
  $vararg_ptr56 = ((($vararg_buffer50)) + 16|0);
  HEAP32[$vararg_ptr56>>2] = $ph_append;
  (_sprintf($481,22280,$vararg_buffer50)|0);
 }
 L158: while(1) {
  $482 = $decimal_point;
  $483 = ($482|0)!=(0);
  if (!($483)) {
   break;
  }
  $484 = $n_digits;
  $485 = (($484) + 1)|0;
  $n_digits = $485;
  $decimal_count = 0;
  while(1) {
   $486 = $n_digits;
   $487 = $decimal_count;
   $488 = (($486) + ($487))|0;
   $489 = $2;
   $490 = (($489) + ($488)|0);
   $491 = HEAP8[$490>>0]|0;
   $492 = $491 << 24 >> 24;
   $493 = (__Z9IsDigit09j($492)|0);
   $494 = ($493|0)!=(0);
   if (!($494)) {
    break;
   }
   $495 = $decimal_count;
   $496 = (($495) + 1)|0;
   $decimal_count = $496;
  }
  $max_decimal_count = 2;
  $497 = $1;
  $498 = ((($497)) + 200|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = $499 & 57344;
  $decimal_mode = $500;
  $switch$split2D = ($500|0)<(32768);
  L165: do {
   if ($switch$split2D) {
    $switch$split732D = ($500|0)<(16384);
    if ($switch$split732D) {
     switch ($500|0) {
     case 8192:  {
      label = 128;
      break L165;
      break;
     }
     default: {
      break L165;
     }
     }
    }
    $switch$split792D = ($500|0)<(24576);
    if ($switch$split792D) {
     switch ($500|0) {
     case 16384:  {
      label = 123;
      break L165;
      break;
     }
     default: {
      break L165;
     }
     }
    }
    switch ($500|0) {
    case 24576:  {
     break;
    }
    default: {
     break L165;
    }
    }
    $556 = $decimal_count;
    $557 = ($556|0)<=(4);
    if (!($557)) {
     break;
    }
    $558 = $n_digits;
    $559 = $2;
    $560 = (($559) + ($558)|0);
    $561 = HEAP8[$560>>0]|0;
    $562 = $561 << 24 >> 24;
    $563 = ($562|0)!=(48);
    if (!($563)) {
     break;
    }
    $564 = $1;
    $565 = $n_digits;
    $566 = $2;
    $567 = (($566) + ($565)|0);
    $568 = (_atoi($567)|0);
    (__ZL10LookupNum3P10TranslatoriPciii($564,$568,$buf1,0,0,0)|0);
    $569 = $3;
    (_strcat($569,$buf1)|0);
    $570 = $decimal_count;
    $571 = $n_digits;
    $572 = (($571) + ($570))|0;
    $n_digits = $572;
   } else {
    $switch$split762D = ($500|0)<(49152);
    if ($switch$split762D) {
     $switch$split822D = ($500|0)<(40960);
     if (!($switch$split822D)) {
      switch ($500|0) {
      case 40960:  {
       label = 128;
       break L165;
       break;
      }
      default: {
       break L165;
      }
      }
     }
     switch ($500|0) {
     case 32768:  {
      break;
     }
     default: {
      break L165;
     }
     }
     $max_decimal_count = 5;
     label = 123;
     break;
    }
    $switch$split852D = ($500|0)<(57344);
    if ($switch$split852D) {
     switch ($500|0) {
     case 49152:  {
      label = 128;
      break L165;
      break;
     }
     default: {
      break L165;
     }
     }
    }
    switch ($500|0) {
    case 57344:  {
     break;
    }
    default: {
     break L165;
    }
    }
    while(1) {
     $573 = $decimal_count;
     $574 = (($573) + -1)|0;
     $decimal_count = $574;
     $575 = ($573|0)>(1);
     if (!($575)) {
      break L165;
     }
     $576 = $n_digits;
     $577 = $2;
     $578 = (($577) + ($576)|0);
     $579 = HEAP8[$578>>0]|0;
     $580 = $579 << 24 >> 24;
     HEAP32[$vararg_buffer60>>2] = $580;
     (_sprintf($string,22297,$vararg_buffer60)|0);
     $581 = $1;
     $582 = (__Z6LookupP10TranslatorPKcPc($581,$string,$buf1)|0);
     $583 = ($582|0)==(0);
     if ($583) {
      break L165;
     }
     $584 = $n_digits;
     $585 = (($584) + 1)|0;
     $n_digits = $585;
     $586 = $3;
     (_strcat($586,$buf1)|0);
    }
   }
  } while(0);
  L191: do {
   if ((label|0) == 123) {
    while(1) {
     label = 0;
     $501 = $n_digits;
     $502 = $2;
     $503 = (($502) + ($501)|0);
     $504 = HEAP8[$503>>0]|0;
     $505 = $504 << 24 >> 24;
     $506 = ($505|0)==(48);
     if (!($506)) {
      break;
     }
     $507 = $1;
     (__Z6LookupP10TranslatorPKcPc($507,22024,$buf1)|0);
     $508 = $3;
     (_strcat($508,$buf1)|0);
     $509 = $decimal_count;
     $510 = (($509) + -1)|0;
     $decimal_count = $510;
     $511 = $n_digits;
     $512 = (($511) + 1)|0;
     $n_digits = $512;
     label = 123;
    }
    $513 = $decimal_count;
    $514 = $max_decimal_count;
    $515 = ($513|0)<=($514|0);
    if ($515) {
     $516 = $n_digits;
     $517 = $2;
     $518 = (($517) + ($516)|0);
     $519 = HEAP8[$518>>0]|0;
     $520 = $519 << 24 >> 24;
     $521 = (__Z9IsDigit09j($520)|0);
     $522 = ($521|0)!=(0);
     if (!($522)) {
      break;
     }
     $523 = $1;
     $524 = $n_digits;
     $525 = $2;
     $526 = (($525) + ($524)|0);
     $527 = (_atoi($526)|0);
     (__ZL10LookupNum3P10TranslatoriPciii($523,$527,$buf1,0,0,0)|0);
     $528 = $3;
     (_strcat($528,$buf1)|0);
     $529 = $decimal_count;
     $530 = $n_digits;
     $531 = (($530) + ($529))|0;
     $n_digits = $531;
    }
   }
   else if ((label|0) == 128) {
    label = 0;
    $532 = $1;
    $533 = $n_digits;
    $534 = $2;
    $535 = (($534) + ($533)|0);
    $536 = (_atoi($535)|0);
    (__ZL10LookupNum3P10TranslatoriPciii($532,$536,$ph_buf,0,0,0)|0);
    $537 = $n_digits;
    $538 = $2;
    $539 = (($538) + ($537)|0);
    $540 = HEAP8[$539>>0]|0;
    $541 = $540 << 24 >> 24;
    $542 = ($541|0)==(48);
    $543 = $decimal_mode;
    $544 = ($543|0)!=(8192);
    $or$cond14 = $542 | $544;
    do {
     if ($or$cond14) {
      $545 = $decimal_count;
      HEAP32[$vararg_buffer57>>2] = $545;
      (_sprintf($string,22291,$vararg_buffer57)|0);
      $546 = $1;
      $547 = (__Z6LookupP10TranslatorPKcPc($546,$string,$buf1)|0);
      $548 = ($547|0)==(0);
      if ($548) {
       break L191;
      }
      $549 = $decimal_mode;
      $550 = ($549|0)==(49152);
      if ($550) {
       $551 = $3;
       (_strcat($551,$buf1)|0);
       break;
      } else {
       (_strcat($ph_buf,$buf1)|0);
       break;
      }
     }
    } while(0);
    $552 = $3;
    (_strcat($552,$ph_buf)|0);
    $553 = $decimal_count;
    $554 = $n_digits;
    $555 = (($554) + ($553))|0;
    $n_digits = $555;
   }
  } while(0);
  while(1) {
   $587 = $n_digits;
   $588 = $2;
   $589 = (($588) + ($587)|0);
   $590 = HEAP8[$589>>0]|0;
   $c = $590;
   $591 = $590&255;
   $592 = (__Z9IsDigit09j($591)|0);
   $593 = ($592|0)!=(0);
   if (!($593)) {
    break;
   }
   $594 = $3;
   $595 = (_strlen($594)|0);
   $596 = ($595>>>0)<(190);
   if (!($596)) {
    break;
   }
   $597 = $n_digits;
   $598 = (($597) + 1)|0;
   $n_digits = $598;
   $599 = $2;
   $600 = (($599) + ($597)|0);
   $601 = HEAP8[$600>>0]|0;
   $602 = $601 << 24 >> 24;
   $603 = (($602) - 48)|0;
   $value = $603;
   $604 = $1;
   $605 = $value;
   (__ZL10LookupNum2P10TranslatoriiiPc($604,$605,0,2,$buf1)|0);
   $606 = $3;
   $607 = (_strlen($606)|0);
   $len = $607;
   $608 = $len;
   $609 = $3;
   $610 = (($609) + ($608)|0);
   HEAP32[$vararg_buffer63>>2] = 15;
   $vararg_ptr66 = ((($vararg_buffer63)) + 4|0);
   HEAP32[$vararg_ptr66>>2] = $buf1;
   (_sprintf($610,26281,$vararg_buffer63)|0);
  }
  $611 = $1;
  $612 = (__Z6LookupP10TranslatorPKcPc($611,22302,$buf1)|0);
  $613 = ($612|0)!=(0);
  if ($613) {
   $614 = $3;
   (_strcat($614,$buf1)|0);
  }
  $615 = $c;
  $616 = $615&255;
  $617 = $1;
  $618 = ((($617)) + 224|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = ($616|0)==($619|0);
  do {
   if ($620) {
    $621 = $n_digits;
    $622 = (($621) + 1)|0;
    $623 = $2;
    $624 = (($623) + ($622)|0);
    $625 = HEAP8[$624>>0]|0;
    $626 = $625 << 24 >> 24;
    $627 = (__Z9IsDigit09j($626)|0);
    $628 = ($627|0)!=(0);
    if (!($628)) {
     break;
    }
    $629 = $1;
    (__Z6LookupP10TranslatorPKcPc($629,22027,$buf1)|0);
    $630 = $3;
    (_strcat($630,$buf1)|0);
    continue L158;
   }
  } while(0);
  $decimal_point = 0;
 }
 $631 = $3;
 $632 = HEAP8[$631>>0]|0;
 $633 = $632 << 24 >> 24;
 $634 = ($633|0)!=(0);
 if ($634) {
  $635 = $3;
  $636 = HEAP8[$635>>0]|0;
  $637 = $636 << 24 >> 24;
  $638 = ($637|0)!=(21);
  if ($638) {
   $639 = $n_digits;
   $640 = (($639) + 1)|0;
   $641 = $2;
   $642 = (($641) + ($640)|0);
   $p1 = $642;
   $643 = $p1;
   $644 = (__Z7utf8_inPiPKc($next_char,$643)|0);
   $645 = $p1;
   $646 = (($645) + ($644)|0);
   $p1 = $646;
   $647 = $1;
   $648 = ((($647)) + 200|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = $649 & 131072;
   $651 = ($650|0)!=(0);
   $652 = HEAP32[$next_char>>2]|0;
   $653 = ($652|0)==(32);
   $or$cond17 = $651 & $653;
   if ($or$cond17) {
    $654 = $p1;
    (__Z7utf8_inPiPKc($next_char,$654)|0);
   }
   $655 = HEAP32[$next_char>>2]|0;
   $656 = (__Z9iswalpha2i($655)|0);
   $657 = ($656|0)==(0);
   $658 = $thousands_exact;
   $659 = ($658|0)==(0);
   $or$cond19 = $657 & $659;
   if ($or$cond19) {
    $660 = $3;
    (_strcat($660,22308)|0);
   }
  }
 }
 $661 = $4;
 $662 = HEAP32[$661>>2]|0;
 $663 = $662 | -2147483648;
 HEAP32[$661>>2] = $663;
 $664 = HEAP32[11125]|0;
 $665 = (($664) + -1)|0;
 HEAP32[11125] = $665;
 $666 = $skipwords;
 $667 = ($666|0)!=(0);
 if ($667) {
  $668 = $skipwords;
  HEAP32[10344] = $668;
 }
 $0 = 1;
 $669 = $0;
 STACKTOP = sp;return ($669|0);
}
function __Z19CheckThousandsGroupPci($word,$group_len) {
 $word = $word|0;
 $group_len = $group_len|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $word;
 $2 = $group_len;
 $3 = $2;
 $4 = $1;
 $5 = (($4) + ($3)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (__Z9IsDigit09j($7)|0);
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   label = 3;
  } else {
   $10 = (__Z9IsDigit09j(-1)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    label = 3;
   } else {
    $ix = 0;
    while(1) {
     $12 = $ix;
     $13 = $2;
     $14 = ($12|0)<($13|0);
     if (!($14)) {
      label = 9;
      break;
     }
     $15 = $ix;
     $16 = $1;
     $17 = (($16) + ($15)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = (__Z9IsDigit09j($19)|0);
     $21 = ($20|0)!=(0);
     if (!($21)) {
      label = 7;
      break;
     }
     $22 = $ix;
     $23 = (($22) + 1)|0;
     $ix = $23;
    }
    if ((label|0) == 7) {
     $$expand_i1_val2 = 0;
     HEAP8[$0>>0] = $$expand_i1_val2;
     break;
    }
    else if ((label|0) == 9) {
     $$expand_i1_val4 = 1;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $24 = $$pre_trunc&1;
 STACKTOP = sp;return ($24|0);
}
function __ZL15LookupThousandsP10TranslatoriiiPc($tr,$value,$thousandplex,$thousands_exact,$ph_out) {
 $tr = $tr|0;
 $value = $value|0;
 $thousandplex = $thousandplex|0;
 $thousands_exact = $thousands_exact|0;
 $ph_out = $ph_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found = 0, $found_value = 0, $or$cond = 0, $ph_buf = 0, $ph_of = 0, $ph_thousands = 0, $string = 0, $vararg_buffer = 0;
 var $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr40 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer34 = sp + 72|0;
 $vararg_buffer31 = sp + 64|0;
 $vararg_buffer27 = sp + 56|0;
 $vararg_buffer23 = sp + 48|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $string = sp + 212|0;
 $ph_of = sp + 200|0;
 $ph_thousands = sp + 160|0;
 $ph_buf = sp + 120|0;
 $1 = $tr;
 $2 = $value;
 $3 = $thousandplex;
 $4 = $thousands_exact;
 $5 = $ph_out;
 $found_value = 0;
 HEAP8[$ph_of>>0] = 0;
 $6 = $2;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $4;
  $9 = $8 & 1;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $4;
   $12 = $11 & 2;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $2;
    $15 = $3;
    HEAP32[$vararg_buffer>>2] = $14;
    $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr2>>2] = $15;
    (_sprintf($string,22032,$vararg_buffer)|0);
    $16 = $1;
    $17 = (__Z6LookupP10TranslatorPKcPc($16,$string,$ph_thousands)|0);
    $found_value = $17;
   }
   $18 = $found_value;
   $19 = ($18|0)!=(0);
   $20 = $19 ^ 1;
   $21 = $20&1;
   $22 = HEAP32[11124]|0;
   $23 = $22 & 1;
   $24 = $21 & $23;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $2;
    $27 = $3;
    HEAP32[$vararg_buffer3>>2] = $26;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $27;
    (_sprintf($string,22040,$vararg_buffer3)|0);
    $28 = $1;
    $29 = (__Z6LookupP10TranslatorPKcPc($28,$string,$ph_thousands)|0);
    $found_value = $29;
   }
   $30 = $found_value;
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $32 = $2;
    $33 = $3;
    HEAP32[$vararg_buffer7>>2] = $32;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $33;
    (_sprintf($string,22048,$vararg_buffer7)|0);
    $34 = $1;
    $35 = (__Z6LookupP10TranslatorPKcPc($34,$string,$ph_thousands)|0);
    $found_value = $35;
   }
  }
  $36 = $found_value;
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = $2;
   $39 = $3;
   HEAP32[$vararg_buffer11>>2] = $38;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $39;
   (_sprintf($string,22056,$vararg_buffer11)|0);
   $40 = $1;
   $41 = (__Z6LookupP10TranslatorPKcPc($40,$string,$ph_thousands)|0);
   $found_value = $41;
  }
 }
 $42 = $found_value;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $2;
  $45 = (($44|0) % 100)&-1;
  $46 = ($45|0)>=(20);
  if ($46) {
   $47 = $1;
   (__Z6LookupP10TranslatorPKcPc($47,22063,$ph_of)|0);
  }
  $found = 0;
  $48 = $4;
  $49 = $48 & 1;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $4;
   $52 = $51 & 2;
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $2;
    $55 = (__ZL9M_Varianti($54)|0);
    $56 = $3;
    HEAP32[$vararg_buffer15>>2] = $55;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $56;
    (_sprintf($string,22082,$vararg_buffer15)|0);
    $57 = $1;
    $58 = (__Z6LookupP10TranslatorPKcPc($57,$string,$ph_thousands)|0);
    $found = $58;
   }
   $59 = $found;
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $61 = HEAP32[11124]|0;
    $62 = $61 & 1;
    $63 = ($62|0)!=(0);
    if ($63) {
     $64 = $2;
     $65 = (__ZL9M_Varianti($64)|0);
     $66 = $3;
     HEAP32[$vararg_buffer19>>2] = $65;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $66;
     (_sprintf($string,22089,$vararg_buffer19)|0);
     $67 = $1;
     $68 = (__Z6LookupP10TranslatorPKcPc($67,$string,$ph_thousands)|0);
     $found = $68;
    }
   }
   $69 = $found;
   $70 = ($69|0)!=(0);
   if (!($70)) {
    $71 = $2;
    $72 = (__ZL9M_Varianti($71)|0);
    $73 = $3;
    HEAP32[$vararg_buffer23>>2] = $72;
    $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
    HEAP32[$vararg_ptr26>>2] = $73;
    (_sprintf($string,22096,$vararg_buffer23)|0);
    $74 = $1;
    $75 = (__Z6LookupP10TranslatorPKcPc($74,$string,$ph_thousands)|0);
    $found = $75;
   }
  }
  $76 = $found;
  $77 = ($76|0)==(0);
  if ($77) {
   $78 = $2;
   $79 = (__ZL9M_Varianti($78)|0);
   $80 = $3;
   HEAP32[$vararg_buffer27>>2] = $79;
   $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
   HEAP32[$vararg_ptr30>>2] = $80;
   (_sprintf($string,22103,$vararg_buffer27)|0);
   $81 = $1;
   $82 = (__Z6LookupP10TranslatorPKcPc($81,$string,$ph_thousands)|0);
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = $3;
    $85 = ($84|0)>(3);
    if ($85) {
     $86 = $3;
     $87 = (($86) - 1)|0;
     HEAP32[$vararg_buffer31>>2] = $87;
     (_sprintf($string,22109,$vararg_buffer31)|0);
     $88 = $1;
     $89 = (__Z6LookupP10TranslatorPKcPc($88,$string,$ph_buf)|0);
     $90 = ($89|0)==(0);
     if ($90) {
      $91 = $1;
      (__Z6LookupP10TranslatorPKcPc($91,22115,$ph_thousands)|0);
      HEAP32[11125] = 3;
     }
    }
    $92 = HEAP8[$ph_thousands>>0]|0;
    $93 = $92 << 24 >> 24;
    $94 = ($93|0)==(0);
    if ($94) {
     $95 = $2;
     HEAP32[$vararg_buffer34>>2] = $95;
     (_sprintf($string,22120,$vararg_buffer34)|0);
     $96 = $1;
     $97 = (__Z6LookupP10TranslatorPKcPc($96,$string,$ph_thousands)|0);
     $found_value = $97;
     $98 = ($97|0)==(0);
     if ($98) {
      $99 = $1;
      (__Z6LookupP10TranslatorPKcPc($99,22126,$ph_thousands)|0);
     }
     HEAP32[11125] = 2;
    }
   }
  }
 }
 $100 = $5;
 HEAP32[$vararg_buffer37>>2] = $ph_of;
 $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
 HEAP32[$vararg_ptr40>>2] = $ph_thousands;
 (_sprintf($100,25145,$vararg_buffer37)|0);
 $101 = $2;
 $102 = ($101|0)==(1);
 $103 = $3;
 $104 = ($103|0)==(1);
 $or$cond = $102 & $104;
 if ($or$cond) {
  $105 = $1;
  $106 = ((($105)) + 200|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $107 & 2097152;
  $109 = ($108|0)!=(0);
  if ($109) {
   $0 = 1;
   $111 = $0;
   STACKTOP = sp;return ($111|0);
  }
 }
 $110 = $found_value;
 $0 = $110;
 $111 = $0;
 STACKTOP = sp;return ($111|0);
}
function __ZL9M_Varianti($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $teens = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $teens = 0;
 $2 = $1;
 $3 = (($2|0) % 100)&-1;
 $4 = ($3|0)>(10);
 if ($4) {
  $5 = $1;
  $6 = (($5|0) % 100)&-1;
  $7 = ($6|0)<(20);
  if ($7) {
   $teens = 1;
  }
 }
 $8 = HEAP32[19035]|0;
 $9 = ((($8)) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> 6;
 $12 = $11 & 7;
 L5: do {
  switch ($12|0) {
  case 1:  {
   $13 = $teens;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = $1;
    $16 = (($15|0) % 10)&-1;
    $17 = ($16|0)==(1);
    if ($17) {
     $0 = 22068;
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   break;
  }
  case 2:  {
   $18 = $1;
   $19 = ($18|0)>=(2);
   $20 = $1;
   $21 = ($20|0)<=(4);
   $or$cond = $19 & $21;
   if ($or$cond) {
    $0 = 22071;
   } else {
    label = 25;
   }
   break;
  }
  case 3:  {
   $22 = $teens;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $1;
    $25 = (($24|0) % 10)&-1;
    $26 = ($25|0)>=(2);
    if ($26) {
     $27 = $1;
     $28 = (($27|0) % 10)&-1;
     $29 = ($28|0)<=(4);
     if ($29) {
      $0 = 22071;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   break;
  }
  case 4:  {
   $30 = $teens;
   $31 = ($30|0)==(1);
   if (!($31)) {
    $32 = $1;
    $33 = (($32|0) % 10)&-1;
    $34 = ($33|0)==(0);
    if (!($34)) {
     $35 = $1;
     $36 = (($35|0) % 10)&-1;
     $37 = ($36|0)==(1);
     if (!($37)) {
      label = 25;
      break L5;
     }
     $0 = 22071;
     break L5;
    }
   }
   $0 = 22075;
   break;
  }
  case 5:  {
   $38 = $teens;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = $1;
    $41 = (($40|0) % 10)&-1;
    $42 = ($41|0)==(1);
    if ($42) {
     $0 = 22068;
     break L5;
    }
    $43 = $1;
    $44 = (($43|0) % 10)&-1;
    $45 = ($44|0)>=(2);
    if ($45) {
     $46 = $1;
     $47 = (($46|0) % 10)&-1;
     $48 = ($47|0)<=(4);
     if ($48) {
      $0 = 22071;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   break;
  }
  default: {
   label = 25;
  }
  }
 } while(0);
 if ((label|0) == 25) {
  $0 = 22079;
 }
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function __ZL10LookupNum3P10TranslatoriPciii($tr,$value,$ph_out,$suppress_null,$thousandplex,$control) {
 $tr = $tr|0;
 $value = $value|0;
 $ph_out = $ph_out|0;
 $suppress_null = $suppress_null|0;
 $thousandplex = $thousandplex|0;
 $control = $control|0;
 var $$ = 0, $$26 = 0, $$31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf1 = 0, $buf2 = 0, $exact = 0, $found = 0, $hundreds = 0, $ix = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0;
 var $or$cond25 = 0, $or$cond28 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond7$not = 0, $or$cond9 = 0, $ordinal = 0, $ph_100 = 0, $ph_10T = 0, $ph_digits = 0, $ph_hundred_and = 0, $ph_thousand_and = 0, $ph_thousands = 0, $say_one_hundred = 0, $say_zero_hundred = 0, $string = 0, $tensunits = 0, $tplex = 0;
 var $vararg_buffer = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer56 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0, $x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer56 = sp + 72|0;
 $vararg_buffer50 = sp + 56|0;
 $vararg_buffer47 = sp + 48|0;
 $vararg_buffer44 = sp + 40|0;
 $vararg_buffer41 = sp + 32|0;
 $vararg_buffer35 = sp + 16|0;
 $vararg_buffer = sp;
 $string = sp + 516|0;
 $buf1 = sp + 416|0;
 $buf2 = sp + 316|0;
 $ph_100 = sp + 296|0;
 $ph_10T = sp + 276|0;
 $ph_digits = sp + 226|0;
 $ph_thousands = sp + 176|0;
 $ph_hundred_and = sp + 164|0;
 $ph_thousand_and = sp + 152|0;
 $0 = $tr;
 $1 = $value;
 $2 = $ph_out;
 $3 = $suppress_null;
 $4 = $thousandplex;
 $5 = $control;
 $say_zero_hundred = 0;
 $6 = $5;
 $7 = $6 & 34;
 $ordinal = $7;
 $8 = $1;
 $9 = (($8|0) / 100)&-1;
 $hundreds = $9;
 $10 = $1;
 $11 = (($10|0) % 100)&-1;
 $tensunits = $11;
 HEAP8[$buf1>>0] = 0;
 HEAP8[$ph_thousands>>0] = 0;
 HEAP8[$ph_thousand_and>>0] = 0;
 $12 = $0;
 $13 = ((($12)) + 200|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 4194304;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = $17 & 1;
  $19 = ($18|0)!=(0);
  $20 = $hundreds;
  $21 = ($20|0)>=(10);
  $or$cond = $19 | $21;
  if ($or$cond) {
   $say_zero_hundred = 1;
  }
 }
 $22 = $hundreds;
 $23 = ($22|0)>(0);
 $24 = $say_zero_hundred;
 $25 = ($24|0)!=(0);
 $or$cond3 = $23 | $25;
 if ($or$cond3) {
  $found = 0;
  $26 = $ordinal;
  $27 = ($26|0)!=(0);
  $28 = $tensunits;
  $29 = ($28|0)==(0);
  $or$cond5 = $27 & $29;
  if ($or$cond5) {
   $30 = $0;
   $31 = (__Z6LookupP10TranslatorPKcPc($30,22141,$ph_100)|0);
   $found = $31;
  }
  $32 = $found;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = $tensunits;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = $0;
    $37 = (__Z6LookupP10TranslatorPKcPc($36,22146,$ph_100)|0);
    $found = $37;
   }
   $38 = $found;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    $40 = $0;
    (__Z6LookupP10TranslatorPKcPc($40,22151,$ph_100)|0);
   }
  }
  $41 = $0;
  $42 = ((($41)) + 200|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & 2048;
  $45 = ($44|0)!=(0);
  $46 = $hundreds;
  $47 = ($46|0)==(19);
  $or$cond7 = $45 & $47;
  $or$cond7$not = $or$cond7 ^ 1;
  $48 = $hundreds;
  $49 = ($48|0)>=(10);
  $or$cond30 = $or$cond7$not & $49;
  if ($or$cond30) {
   HEAP8[$ph_digits>>0] = 0;
   $exact = 0;
   $50 = $1;
   $51 = (($50|0) % 1000)&-1;
   $52 = ($51|0)==(0);
   $$ = $52 ? 1 : 0;
   $exact = $$;
   $53 = $4;
   $54 = (($53) + 1)|0;
   $tplex = $54;
   $55 = $0;
   $56 = ((($55)) + 204|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 16384;
   $59 = ($58|0)!=(0);
   $$31 = $59 ? 0 : $54;
   $tplex = $$31;
   $60 = $0;
   $61 = $hundreds;
   $62 = (($61|0) / 10)&-1;
   $63 = $tplex;
   $64 = $exact;
   $65 = $ordinal;
   $66 = $64 | $65;
   $67 = (__ZL15LookupThousandsP10TranslatoriiiPc($60,$62,$63,$66,$ph_10T)|0);
   $68 = ($67|0)==(0);
   if ($68) {
    $x = 0;
    $69 = $0;
    $70 = ((($69)) + 204|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $tplex;
    $73 = 1 << $72;
    $74 = $71 & $73;
    $75 = ($74|0)!=(0);
    if ($75) {
     $x = 8;
    }
    $76 = $0;
    $77 = ((($76)) + 324|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(28012);
    if ($79) {
     $x = 520;
    }
    $80 = $0;
    $81 = $hundreds;
    $82 = (($81|0) / 10)&-1;
    $83 = $4;
    $84 = $x;
    (__ZL10LookupNum2P10TranslatoriiiPc($80,$82,$83,$84,$ph_digits)|0);
   }
   $85 = $0;
   $86 = ((($85)) + 204|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 & 512;
   $89 = ($88|0)!=(0);
   if ($89) {
    HEAP32[$vararg_buffer>>2] = $ph_10T;
    $vararg_ptr32 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr32>>2] = 15;
    $vararg_ptr33 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr33>>2] = $ph_digits;
    $vararg_ptr34 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr34>>2] = 15;
    (_sprintf($ph_thousands,22243,$vararg_buffer)|0);
   } else {
    HEAP32[$vararg_buffer35>>2] = $ph_digits;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = 15;
    $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
    HEAP32[$vararg_ptr39>>2] = $ph_10T;
    $vararg_ptr40 = ((($vararg_buffer35)) + 12|0);
    HEAP32[$vararg_ptr40>>2] = 15;
    (_sprintf($ph_thousands,22243,$vararg_buffer35)|0);
   }
   $90 = $hundreds;
   $91 = (($90|0) % 10)&-1;
   $hundreds = $91;
   $92 = $hundreds;
   $93 = ($92|0)==(0);
   $94 = $say_zero_hundred;
   $95 = ($94|0)==(0);
   $or$cond9 = $93 & $95;
   if ($or$cond9) {
    HEAP8[$ph_100>>0] = 0;
   }
   $3 = 1;
   $96 = $5;
   $97 = $96 | 1;
   $5 = $97;
  }
  HEAP8[$ph_digits>>0] = 0;
  $98 = $hundreds;
  $99 = ($98|0)>(0);
  $100 = $say_zero_hundred;
  $101 = ($100|0)!=(0);
  $or$cond11 = $99 | $101;
  do {
   if ($or$cond11) {
    $102 = $0;
    $103 = ((($102)) + 200|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 262144;
    $106 = ($105|0)!=(0);
    do {
     if ($106) {
      $107 = $5;
      $108 = $107 & 1;
      $109 = ($108|0)!=(0);
      if (!($109)) {
       $110 = HEAP8[$ph_thousands>>0]|0;
       $111 = $110 << 24 >> 24;
       $112 = ($111|0)!=(0);
       if (!($112)) {
        break;
       }
      }
      $113 = $0;
      (__Z6LookupP10TranslatorPKcPc($113,22228,$ph_thousand_and)|0);
     }
    } while(0);
    $3 = 1;
    $found = 0;
    $114 = $ordinal;
    $115 = ($114|0)!=(0);
    do {
     if ($115) {
      $116 = $tensunits;
      $117 = ($116|0)==(0);
      if (!($117)) {
       $118 = $0;
       $119 = ((($118)) + 204|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $120 & 4096;
       $122 = ($121|0)!=(0);
       if (!($122)) {
        break;
       }
      }
      $123 = $hundreds;
      HEAP32[$vararg_buffer41>>2] = $123;
      (_sprintf($string,22252,$vararg_buffer41)|0);
      $124 = $0;
      $125 = (__Z6LookupP10TranslatorPKcPc($124,$string,$ph_digits)|0);
      $found = $125;
      $126 = $0;
      $127 = ((($126)) + 204|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = $128 & 4096;
      $130 = ($129|0)!=(0);
      $131 = $tensunits;
      $132 = ($131|0)>(0);
      $or$cond13 = $130 & $132;
      if ($or$cond13) {
       (_strcat($ph_digits,119639)|0);
      }
     }
    } while(0);
    $133 = $hundreds;
    $134 = ($133|0)==(0);
    $135 = $say_zero_hundred;
    $136 = ($135|0)!=(0);
    $or$cond15 = $134 & $136;
    if ($or$cond15) {
     $137 = $0;
     (__Z6LookupP10TranslatorPKcPc($137,22024,$ph_digits)|0);
     break;
    }
    $138 = $hundreds;
    $139 = ($138|0)==(1);
    if ($139) {
     $140 = $0;
     $141 = ((($140)) + 204|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 & 131072;
     $144 = ($143|0)!=(0);
     if ($144) {
      $145 = $5;
      $146 = $145 & 1;
      $147 = ($146|0)==(0);
      if (!($147)) {
       label = 40;
      }
     } else {
      label = 40;
     }
    } else {
     label = 40;
    }
    if ((label|0) == 40) {
     $148 = $found;
     $149 = ($148|0)==(0);
     $150 = $tensunits;
     $151 = ($150|0)==(0);
     $or$cond17 = $149 & $151;
     if ($or$cond17) {
      $152 = $hundreds;
      HEAP32[$vararg_buffer44>>2] = $152;
      (_sprintf($string,22258,$vararg_buffer44)|0);
      $153 = $0;
      $154 = (__Z6LookupP10TranslatorPKcPc($153,$string,$ph_digits)|0);
      $found = $154;
     }
     $155 = $found;
     $156 = ($155|0)!=(0);
     if (!($156)) {
      $157 = $hundreds;
      HEAP32[$vararg_buffer47>>2] = $157;
      (_sprintf($string,22264,$vararg_buffer47)|0);
      $158 = $0;
      $159 = (__Z6LookupP10TranslatorPKcPc($158,$string,$ph_digits)|0);
      $found = $159;
     }
    }
    $160 = $found;
    $161 = ($160|0)!=(0);
    if ($161) {
     HEAP8[$ph_100>>0] = 0;
     break;
    }
    $say_one_hundred = 1;
    $162 = $hundreds;
    $163 = ($162|0)==(1);
    if ($163) {
     $164 = $0;
     $165 = ((($164)) + 200|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $166 & 1024;
     $168 = ($167|0)!=(0);
     if ($168) {
      $say_one_hundred = 0;
     }
    }
    $169 = $say_one_hundred;
    $170 = ($169|0)!=(0);
    if ($170) {
     $171 = $0;
     $172 = $hundreds;
     $173 = $4;
     (__ZL10LookupNum2P10TranslatoriiiPc($171,$172,$173,0,$ph_digits)|0);
    }
   }
  } while(0);
  HEAP32[$vararg_buffer50>>2] = $ph_thousands;
  $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
  HEAP32[$vararg_ptr53>>2] = $ph_thousand_and;
  $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
  HEAP32[$vararg_ptr54>>2] = $ph_digits;
  $vararg_ptr55 = ((($vararg_buffer50)) + 12|0);
  HEAP32[$vararg_ptr55>>2] = $ph_100;
  (_sprintf($buf1,22234,$vararg_buffer50)|0);
 }
 HEAP8[$ph_hundred_and>>0] = 0;
 $174 = $tensunits;
 $175 = ($174|0)>(0);
 do {
  if ($175) {
   $176 = $5;
   $177 = $176 & 2;
   $178 = ($177|0)!=(0);
   if ($178) {
    $179 = $0;
    $180 = ((($179)) + 204|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $181 & 4096;
    $183 = ($182|0)!=(0);
    if ($183) {
     break;
    }
   }
   $184 = $1;
   $185 = ($184|0)>(100);
   if ($185) {
    label = 57;
   } else {
    $186 = $5;
    $187 = $186 & 1;
    $188 = ($187|0)!=(0);
    $189 = $4;
    $190 = ($189|0)==(0);
    $or$cond19 = $188 & $190;
    if ($or$cond19) {
     label = 57;
    }
   }
   do {
    if ((label|0) == 57) {
     $191 = $0;
     $192 = ((($191)) + 200|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $193 & 64;
     $195 = ($194|0)!=(0);
     if (!($195)) {
      $196 = $0;
      $197 = ((($196)) + 200|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $198 & 8388608;
      $200 = ($199|0)!=(0);
      $201 = $tensunits;
      $202 = ($201|0)<(10);
      $or$cond21 = $200 & $202;
      if (!($or$cond21)) {
       break;
      }
     }
     $203 = $0;
     (__Z6LookupP10TranslatorPKcPc($203,22228,$ph_hundred_and)|0);
    }
   } while(0);
   $204 = $0;
   $205 = ((($204)) + 200|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $206 & 524288;
   $208 = ($207|0)!=(0);
   $209 = $hundreds;
   $210 = ($209|0)==(0);
   $or$cond23 = $208 & $210;
   if ($or$cond23) {
    $211 = $5;
    $212 = $211 & 1;
    $213 = ($212|0)!=(0);
    if (!($213)) {
     $214 = HEAP8[$ph_thousands>>0]|0;
     $215 = $214 << 24 >> 24;
     $216 = ($215|0)!=(0);
     if (!($216)) {
      break;
     }
    }
    $217 = $0;
    (__Z6LookupP10TranslatorPKcPc($217,22228,$ph_hundred_and)|0);
   }
  }
 } while(0);
 HEAP8[$buf2>>0] = 0;
 $218 = $tensunits;
 $219 = ($218|0)!=(0);
 $220 = $3;
 $221 = ($220|0)==(0);
 $or$cond25 = $219 | $221;
 if (!($or$cond25)) {
  $267 = HEAP8[119639]|0;
  $268 = $267 << 24 >> 24;
  $269 = ($268|0)!=(0);
  if (!($269)) {
   $282 = $2;
   HEAP32[$vararg_buffer56>>2] = $buf1;
   $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
   HEAP32[$vararg_ptr59>>2] = $ph_hundred_and;
   $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
   HEAP32[$vararg_ptr60>>2] = 15;
   $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
   HEAP32[$vararg_ptr61>>2] = $buf2;
   (_sprintf($282,25384,$vararg_buffer56)|0);
   STACKTOP = sp;return 0;
  }
  $270 = (_strlen($buf1)|0);
  $ix = $270;
  $271 = $ix;
  $272 = ($271|0)>(0);
  if ($272) {
   $273 = $ix;
   $274 = (($273) - 1)|0;
   $275 = (($buf1) + ($274)|0);
   $276 = HEAP8[$275>>0]|0;
   $277 = $276 << 24 >> 24;
   $278 = ($277|0)==(10);
   if ($278) {
    $279 = $ix;
    $280 = (($279) - 1)|0;
    $281 = (($buf1) + ($280)|0);
    HEAP8[$281>>0] = 0;
   }
  }
  (_strcpy($buf2,119639)|0);
  $282 = $2;
  HEAP32[$vararg_buffer56>>2] = $buf1;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $ph_hundred_and;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = 15;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $buf2;
  (_sprintf($282,25384,$vararg_buffer56)|0);
  STACKTOP = sp;return 0;
 }
 $x = 0;
 $222 = $4;
 $223 = ($222|0)==(0);
 if ($223) {
  $x = 2;
  $224 = $ordinal;
  $225 = ($224|0)!=(0);
  $$26 = $225 ? 3 : 2;
  $x = $$26;
  $226 = $1;
  $227 = ($226|0)<(100);
  if ($227) {
   $228 = $5;
   $229 = $228 & 1;
   $230 = ($229|0)!=(0);
   if (!($230)) {
    $231 = $x;
    $232 = $231 | 4;
    $x = $232;
   }
  }
  $233 = $ordinal;
  $234 = $233 & 32;
  $235 = ($234|0)!=(0);
  if ($235) {
   $236 = $x;
   $237 = $236 | 32;
   $x = $237;
  }
 } else {
  $238 = $0;
  $239 = ((($238)) + 204|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $4;
  $242 = 1 << $241;
  $243 = $240 & $242;
  $244 = ($243|0)!=(0);
  if ($244) {
   $x = 8;
  }
 }
 $245 = $0;
 $246 = ((($245)) + 324|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)==(28012);
 $249 = $4;
 $250 = ($249|0)==(1);
 $or$cond28 = $248 & $250;
 if ($or$cond28) {
  $251 = $x;
  $252 = $251 | 520;
  $x = $252;
 }
 $253 = $0;
 $254 = $tensunits;
 $255 = $4;
 $256 = $x;
 $257 = $5;
 $258 = $257 & 256;
 $259 = $256 | $258;
 $260 = (__ZL10LookupNum2P10TranslatoriiiPc($253,$254,$255,$259,$buf2)|0);
 $261 = ($260|0)!=(0);
 if (!($261)) {
  $282 = $2;
  HEAP32[$vararg_buffer56>>2] = $buf1;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $ph_hundred_and;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = 15;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $buf2;
  (_sprintf($282,25384,$vararg_buffer56)|0);
  STACKTOP = sp;return 0;
 }
 $262 = $0;
 $263 = ((($262)) + 200|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = $264 & 128;
 $266 = ($265|0)!=(0);
 if (!($266)) {
  $282 = $2;
  HEAP32[$vararg_buffer56>>2] = $buf1;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $ph_hundred_and;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = 15;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $buf2;
  (_sprintf($282,25384,$vararg_buffer56)|0);
  STACKTOP = sp;return 0;
 }
 HEAP8[$ph_hundred_and>>0] = 0;
 $282 = $2;
 HEAP32[$vararg_buffer56>>2] = $buf1;
 $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
 HEAP32[$vararg_ptr59>>2] = $ph_hundred_and;
 $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
 HEAP32[$vararg_ptr60>>2] = 15;
 $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
 HEAP32[$vararg_ptr61>>2] = $buf2;
 (_sprintf($282,25384,$vararg_buffer56)|0);
 STACKTOP = sp;return 0;
}
function __ZL10LookupNum2P10TranslatoriiiPc($tr,$value,$thousandplex,$control,$ph_out) {
 $tr = $tr|0;
 $value = $value|0;
 $thousandplex = $thousandplex|0;
 $control = $control|0;
 $ph_out = $ph_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found = 0, $found_ordinal = 0, $is_ordinal = 0, $ix = 0, $next_phtype = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ord_type = 0, $ph_and = 0, $ph_digits = 0, $ph_ordinal = 0, $ph_tens = 0, $string = 0, $tens = 0, $units = 0, $used_and = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer73 = 0, $vararg_buffer79 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr38 = 0, $vararg_ptr54 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, $vararg_ptr89 = 0, $vararg_ptr90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer86 = sp + 192|0;
 $vararg_buffer83 = sp + 184|0;
 $vararg_buffer79 = sp + 176|0;
 $vararg_buffer73 = sp + 160|0;
 $vararg_buffer67 = sp + 144|0;
 $vararg_buffer64 = sp + 136|0;
 $vararg_buffer61 = sp + 128|0;
 $vararg_buffer58 = sp + 120|0;
 $vararg_buffer55 = sp + 112|0;
 $vararg_buffer51 = sp + 104|0;
 $vararg_buffer48 = sp + 96|0;
 $vararg_buffer45 = sp + 88|0;
 $vararg_buffer42 = sp + 80|0;
 $vararg_buffer39 = sp + 72|0;
 $vararg_buffer35 = sp + 64|0;
 $vararg_buffer32 = sp + 56|0;
 $vararg_buffer29 = sp + 48|0;
 $vararg_buffer26 = sp + 40|0;
 $vararg_buffer23 = sp + 32|0;
 $vararg_buffer19 = sp + 24|0;
 $vararg_buffer15 = sp + 16|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer = sp;
 $string = sp + 392|0;
 $ph_ordinal = sp + 372|0;
 $ph_tens = sp + 322|0;
 $ph_digits = sp + 272|0;
 $ph_and = sp + 260|0;
 $0 = $tr;
 $1 = $value;
 $2 = $thousandplex;
 $3 = $control;
 $4 = $ph_out;
 $used_and = 0;
 $found_ordinal = 0;
 $ord_type = 111;
 $5 = $1;
 $6 = (($5|0) % 10)&-1;
 $units = $6;
 $7 = $1;
 $8 = (($7|0) / 10)&-1;
 $tens = $8;
 $found = 0;
 HEAP8[$ph_ordinal>>0] = 0;
 HEAP8[$ph_tens>>0] = 0;
 HEAP8[$ph_digits>>0] = 0;
 HEAP8[$ph_and>>0] = 0;
 $9 = $3;
 $10 = $9 & 32;
 $11 = ($10|0)!=(0);
 if ($11) {
  $ord_type = 113;
 }
 $12 = $3;
 $13 = $12 & 1;
 $is_ordinal = $13;
 $14 = $3;
 $15 = $14 & 2;
 $16 = ($15|0)!=(0);
 $17 = HEAP32[11122]|0;
 $18 = ($17|0)==(2);
 $or$cond = $16 & $18;
 do {
  if ($or$cond) {
   $19 = $4;
   $20 = HEAP32[11123]|0;
   (_strcpy($19,$20)|0);
  } else {
   $21 = HEAP32[11123]|0;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)==(0);
   do {
    if ($24) {
     $25 = $3;
     $26 = $25 & 8;
     $27 = ($26|0)!=(0);
     if ($27) {
      $28 = $1;
      HEAP32[$vararg_buffer>>2] = $28;
      (_sprintf($string,22155,$vararg_buffer)|0);
      $29 = $0;
      $30 = (__Z6LookupP10TranslatorPKcPc($29,$string,$ph_digits)|0);
      $found = $30;
      $31 = ($30|0)==(0);
      if ($31) {
       $32 = $1;
       HEAP32[$vararg_buffer12>>2] = $32;
       (_sprintf($string,22161,$vararg_buffer12)|0);
       $33 = $0;
       $34 = (__Z6LookupP10TranslatorPKcPc($33,$string,$ph_digits)|0);
       $found = $34;
      }
     } else {
      $35 = $is_ordinal;
      $36 = ($35|0)!=(0);
      if ($36) {
       (_strcpy($ph_ordinal,119639)|0);
       $37 = $3;
       $38 = $37 & 4;
       $39 = ($38|0)!=(0);
       if ($39) {
        $40 = $1;
        $41 = $ord_type;
        HEAP32[$vararg_buffer15>>2] = $40;
        $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
        HEAP32[$vararg_ptr18>>2] = $41;
        (_sprintf($string,22166,$vararg_buffer15)|0);
        $42 = $0;
        $43 = (__Z6LookupP10TranslatorPKcPc($42,$string,$ph_digits)|0);
        $found = $43;
        $44 = ($43|0)!=(0);
        if ($44) {
         $45 = HEAP8[119651]|0;
         $46 = $45 << 24 >> 24;
         $47 = ($46|0)!=(0);
         if ($47) {
          (_strcpy($ph_ordinal,119651)|0);
         }
        }
       }
       $48 = $found;
       $49 = ($48|0)==(0);
       if ($49) {
        $50 = $1;
        $51 = $ord_type;
        HEAP32[$vararg_buffer19>>2] = $50;
        $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
        HEAP32[$vararg_ptr22>>2] = $51;
        (_sprintf($string,22173,$vararg_buffer19)|0);
        $52 = $0;
        $53 = (__Z6LookupP10TranslatorPKcPc($52,$string,$ph_digits)|0);
        $found = $53;
       }
       $54 = $found;
       $found_ordinal = $54;
      }
     }
     $55 = $found;
     $56 = ($55|0)==(0);
     if ($56) {
      $57 = $3;
      $58 = $57 & 2;
      $59 = ($58|0)!=(0);
      if ($59) {
       $60 = HEAP32[11124]|0;
       $61 = $60 & 1;
       $62 = ($61|0)!=(0);
       if ($62) {
        $63 = $1;
        HEAP32[$vararg_buffer23>>2] = $63;
        (_sprintf($string,22179,$vararg_buffer23)|0);
        $64 = $0;
        $65 = (__Z6LookupP10TranslatorPKcPc($64,$string,$ph_digits)|0);
        $found = $65;
       }
      } else {
       $66 = $0;
       $67 = ((($66)) + 204|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = $68 & 262144;
       $70 = ($69|0)!=(0);
       $71 = $2;
       $72 = ($71|0)<=(1);
       $or$cond3 = $70 & $72;
       $73 = $1;
       if ($or$cond3) {
        HEAP32[$vararg_buffer26>>2] = $73;
        (_sprintf($string,22184,$vararg_buffer26)|0);
       } else {
        HEAP32[$vararg_buffer29>>2] = $73;
        (_sprintf($string,22189,$vararg_buffer29)|0);
       }
       $74 = $0;
       $75 = (__Z6LookupP10TranslatorPKcPc($74,$string,$ph_digits)|0);
       $found = $75;
      }
      $76 = $found;
      $77 = ($76|0)!=(0);
      if (!($77)) {
       $78 = $is_ordinal;
       $79 = ($78|0)!=(0);
       if ($79) {
        $80 = $0;
        $81 = ((($80)) + 204|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = $82 & 8192;
        $84 = ($83|0)!=(0);
        if ($84) {
         break;
        }
       }
       $85 = $1;
       HEAP32[$vararg_buffer32>>2] = $85;
       (_sprintf($string,22194,$vararg_buffer32)|0);
       $86 = $0;
       $87 = (__Z6LookupP10TranslatorPKcPc($86,$string,$ph_digits)|0);
       $found = $87;
      }
     }
    }
   } while(0);
   $88 = $3;
   $89 = $88 & 16;
   $90 = ($89|0)!=(0);
   $91 = $1;
   $92 = ($91|0)<(10);
   $or$cond5 = $90 & $92;
   do {
    if ($or$cond5) {
     $93 = $0;
     (__Z6LookupP10TranslatorPKcPc($93,22024,$ph_tens)|0);
    } else {
     $94 = $found;
     $95 = ($94|0)!=(0);
     if ($95) {
      HEAP8[$ph_tens>>0] = 0;
      break;
     }
     $96 = $is_ordinal;
     $97 = ($96|0)!=(0);
     if ($97) {
      $98 = $tens;
      $99 = $ord_type;
      HEAP32[$vararg_buffer35>>2] = $98;
      $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
      HEAP32[$vararg_ptr38>>2] = $99;
      (_sprintf($string,22198,$vararg_buffer35)|0);
      $100 = $0;
      $101 = (__Z6LookupP10TranslatorPKcPc($100,$string,$ph_tens)|0);
      $102 = ($101|0)!=(0);
      if ($102) {
       $found_ordinal = 1;
       $103 = $units;
       $104 = ($103|0)!=(0);
       if ($104) {
        $105 = $0;
        $106 = ((($105)) + 204|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = $107 & 4096;
        $109 = ($108|0)!=(0);
        if ($109) {
         (_strcat($ph_tens,119639)|0);
        }
       }
      }
     }
     $110 = $found_ordinal;
     $111 = ($110|0)==(0);
     if ($111) {
      $112 = $3;
      $113 = $112 & 512;
      $114 = ($113|0)!=(0);
      $115 = $tens;
      if ($114) {
       HEAP32[$vararg_buffer39>>2] = $115;
       (_sprintf($string,22205,$vararg_buffer39)|0);
      } else {
       HEAP32[$vararg_buffer42>>2] = $115;
       (_sprintf($string,22211,$vararg_buffer42)|0);
      }
      $116 = $0;
      (__Z6LookupP10TranslatorPKcPc($116,$string,$ph_tens)|0);
     }
     $117 = HEAP8[$ph_tens>>0]|0;
     $118 = $117 << 24 >> 24;
     $119 = ($118|0)==(0);
     if ($119) {
      $120 = $0;
      $121 = ((($120)) + 200|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $122 & 1048576;
      $124 = ($123|0)!=(0);
      if ($124) {
       $125 = $1;
       $126 = (($125|0) % 20)&-1;
       $units = $126;
       $127 = $tens;
       $128 = $127 & 254;
       HEAP32[$vararg_buffer45>>2] = $128;
       (_sprintf($string,22211,$vararg_buffer45)|0);
       $129 = $0;
       (__Z6LookupP10TranslatorPKcPc($129,$string,$ph_tens)|0);
      }
     }
     HEAP8[$ph_digits>>0] = 0;
     $130 = $units;
     $131 = ($130|0)>(0);
     if ($131) {
      $found = 0;
      $132 = $3;
      $133 = $132 & 2;
      $134 = ($133|0)!=(0);
      if ($134) {
       $135 = HEAP32[11123]|0;
       $136 = HEAP8[$135>>0]|0;
       $137 = $136 << 24 >> 24;
       $138 = ($137|0)!=(0);
       if ($138) {
        $139 = HEAP32[11123]|0;
        (_strcpy($ph_digits,$139)|0);
        $found_ordinal = 1;
        HEAP8[$ph_ordinal>>0] = 0;
        break;
       }
      }
      $140 = $3;
      $141 = $140 & 8;
      $142 = ($141|0)!=(0);
      if ($142) {
       $143 = $units;
       HEAP32[$vararg_buffer48>>2] = $143;
       (_sprintf($string,22161,$vararg_buffer48)|0);
       $144 = $0;
       $145 = (__Z6LookupP10TranslatorPKcPc($144,$string,$ph_digits)|0);
       $found = $145;
      }
      $146 = $is_ordinal;
      $147 = ($146|0)!=(0);
      if ($147) {
       $148 = $0;
       $149 = ((($148)) + 200|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = $150 & 16;
       $152 = ($151|0)==(0);
       if ($152) {
        $153 = $units;
        $154 = $ord_type;
        HEAP32[$vararg_buffer51>>2] = $153;
        $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
        HEAP32[$vararg_ptr54>>2] = $154;
        (_sprintf($string,22173,$vararg_buffer51)|0);
        $155 = $0;
        $156 = (__Z6LookupP10TranslatorPKcPc($155,$string,$ph_digits)|0);
        $found = $156;
        $157 = ($156|0)!=(0);
        if ($157) {
         $found_ordinal = 1;
        }
       }
      }
      $158 = $found;
      $159 = ($158|0)==(0);
      do {
       if ($159) {
        $160 = HEAP32[11124]|0;
        $161 = $160 & 1;
        $162 = ($161|0)!=(0);
        if ($162) {
         $163 = $3;
         $164 = $163 & 2;
         $165 = ($164|0)!=(0);
         if ($165) {
          $166 = $units;
          HEAP32[$vararg_buffer55>>2] = $166;
          (_sprintf($string,22179,$vararg_buffer55)|0);
          $167 = $0;
          $168 = (__Z6LookupP10TranslatorPKcPc($167,$string,$ph_digits)|0);
          $found = $168;
          break;
         }
        }
        $169 = $3;
        $170 = $169 & 2;
        $171 = ($170|0)==(0);
        if (!($171)) {
         $172 = $0;
         $173 = ((($172)) + 200|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = $174 & 16;
         $176 = ($175|0)!=(0);
         if (!($176)) {
          break;
         }
        }
        $177 = $0;
        $178 = ((($177)) + 204|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = $179 & 262144;
        $181 = ($180|0)!=(0);
        $182 = $2;
        $183 = ($182|0)<=(1);
        $or$cond7 = $181 & $183;
        $184 = $units;
        if ($or$cond7) {
         HEAP32[$vararg_buffer58>>2] = $184;
         (_sprintf($string,22184,$vararg_buffer58)|0);
        } else {
         HEAP32[$vararg_buffer61>>2] = $184;
         (_sprintf($string,22189,$vararg_buffer61)|0);
        }
        $185 = $0;
        $186 = (__Z6LookupP10TranslatorPKcPc($185,$string,$ph_digits)|0);
        $found = $186;
       }
      } while(0);
      $187 = $found;
      $188 = ($187|0)==(0);
      if ($188) {
       $189 = $units;
       HEAP32[$vararg_buffer64>>2] = $189;
       (_sprintf($string,22194,$vararg_buffer64)|0);
       $190 = $0;
       (__Z6LookupP10TranslatorPKcPc($190,$string,$ph_digits)|0);
      }
     }
    }
   } while(0);
   $191 = $is_ordinal;
   $192 = ($191|0)!=(0);
   $193 = $found_ordinal;
   $194 = ($193|0)==(0);
   $or$cond9 = $192 & $194;
   if ($or$cond9) {
    $195 = HEAP8[$ph_ordinal>>0]|0;
    $196 = $195 << 24 >> 24;
    $197 = ($196|0)==(0);
    if ($197) {
     $198 = $1;
     $199 = ($198|0)>=(20);
     do {
      if ($199) {
       $200 = $1;
       $201 = (($200|0) % 10)&-1;
       $202 = ($201|0)==(0);
       if (!($202)) {
        $203 = $0;
        $204 = ((($203)) + 200|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = $205 & 16;
        $207 = ($206|0)!=(0);
        if (!($207)) {
         break;
        }
       }
       $208 = $0;
       (__Z6LookupP10TranslatorPKcPc($208,22216,$ph_ordinal)|0);
      }
     } while(0);
     $209 = HEAP8[$ph_ordinal>>0]|0;
     $210 = $209 << 24 >> 24;
     $211 = ($210|0)==(0);
     if ($211) {
      $212 = $0;
      (__Z6LookupP10TranslatorPKcPc($212,22223,$ph_ordinal)|0);
     }
    }
   }
   $213 = $0;
   $214 = ((($213)) + 200|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $215 & 48;
   $217 = ($216|0)!=(0);
   if ($217) {
    $218 = HEAP8[$ph_tens>>0]|0;
    $219 = $218 << 24 >> 24;
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = HEAP8[$ph_digits>>0]|0;
     $222 = $221 << 24 >> 24;
     $223 = ($222|0)!=(0);
     if ($223) {
      $224 = $0;
      (__Z6LookupP10TranslatorPKcPc($224,22228,$ph_and)|0);
      $225 = $is_ordinal;
      $226 = ($225|0)!=(0);
      if ($226) {
       $227 = $0;
       $228 = ((($227)) + 204|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = $229 & 2048;
       $231 = ($230|0)!=(0);
       if ($231) {
        HEAP8[$ph_and>>0] = 0;
       }
      }
      $232 = $0;
      $233 = ((($232)) + 200|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = $234 & 16;
      $236 = ($235|0)!=(0);
      $237 = $4;
      if ($236) {
       HEAP32[$vararg_buffer67>>2] = $ph_digits;
       $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
       HEAP32[$vararg_ptr70>>2] = $ph_and;
       $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
       HEAP32[$vararg_ptr71>>2] = $ph_tens;
       $vararg_ptr72 = ((($vararg_buffer67)) + 12|0);
       HEAP32[$vararg_ptr72>>2] = $ph_ordinal;
       (_sprintf($237,22234,$vararg_buffer67)|0);
      } else {
       HEAP32[$vararg_buffer73>>2] = $ph_tens;
       $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
       HEAP32[$vararg_ptr76>>2] = $ph_and;
       $vararg_ptr77 = ((($vararg_buffer73)) + 8|0);
       HEAP32[$vararg_ptr77>>2] = $ph_digits;
       $vararg_ptr78 = ((($vararg_buffer73)) + 12|0);
       HEAP32[$vararg_ptr78>>2] = $ph_ordinal;
       (_sprintf($237,22234,$vararg_buffer73)|0);
      }
      $used_and = 1;
      break;
     }
    }
   }
   $238 = $0;
   $239 = ((($238)) + 200|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $240 & 512;
   $242 = ($241|0)!=(0);
   if ($242) {
    $243 = (_strlen($ph_tens)|0);
    $244 = (($243) - 1)|0;
    $ix = $244;
    $245 = ($244|0)>=(0);
    if ($245) {
     $246 = HEAP8[$ph_digits>>0]|0;
     $247 = $246 << 24 >> 24;
     $248 = ($247|0)!=(0);
     if ($248) {
      $249 = HEAP8[$ph_digits>>0]|0;
      $250 = $249 << 24 >> 24;
      $251 = (44552 + ($250<<2)|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ((($252)) + 11|0);
      $254 = HEAP8[$253>>0]|0;
      $255 = $254&255;
      $next_phtype = $255;
      $256 = ($255|0)==(1);
      if ($256) {
       $257 = ((($ph_digits)) + 1|0);
       $258 = HEAP8[$257>>0]|0;
       $259 = $258 << 24 >> 24;
       $260 = (44552 + ($259<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ((($261)) + 11|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = $263&255;
       $next_phtype = $264;
      }
      $265 = $ix;
      $266 = (($ph_tens) + ($265)|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = $267 << 24 >> 24;
      $269 = (44552 + ($268<<2)|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ((($270)) + 11|0);
      $272 = HEAP8[$271>>0]|0;
      $273 = $272&255;
      $274 = ($273|0)==(2);
      $275 = $next_phtype;
      $276 = ($275|0)==(2);
      $or$cond11 = $274 & $276;
      if ($or$cond11) {
       $277 = $ix;
       $278 = (($ph_tens) + ($277)|0);
       HEAP8[$278>>0] = 0;
      }
     }
    }
   }
   $279 = $0;
   $280 = ((($279)) + 204|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = $281 & 524288;
   $283 = ($282|0)!=(0);
   if ($283) {
    $284 = HEAP8[$ph_ordinal>>0]|0;
    $285 = $284 << 24 >> 24;
    $286 = ($285|0)!=(0);
    if ($286) {
     $287 = $4;
     HEAP32[$vararg_buffer79>>2] = $ph_tens;
     $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
     HEAP32[$vararg_ptr82>>2] = $ph_digits;
     $288 = (_sprintf($287,25145,$vararg_buffer79)|0);
     $ix = $288;
     $289 = $ix;
     $290 = ($289|0)>(0);
     if ($290) {
      $291 = $ix;
      $292 = (($291) - 1)|0;
      $293 = $4;
      $294 = (($293) + ($292)|0);
      $295 = HEAP8[$294>>0]|0;
      $296 = $295&255;
      $297 = (44552 + ($296<<2)|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ((($298)) + 11|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = $300&255;
      $302 = ($301|0)==(2);
      if ($302) {
       $303 = $ix;
       $304 = (($303) + -1)|0;
       $ix = $304;
      }
     }
     $305 = $ix;
     $306 = $4;
     $307 = (($306) + ($305)|0);
     HEAP32[$vararg_buffer83>>2] = $ph_ordinal;
     (_sprintf($307,25839,$vararg_buffer83)|0);
     break;
    }
   }
   $308 = $4;
   HEAP32[$vararg_buffer86>>2] = $ph_tens;
   $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
   HEAP32[$vararg_ptr89>>2] = $ph_digits;
   $vararg_ptr90 = ((($vararg_buffer86)) + 8|0);
   HEAP32[$vararg_ptr90>>2] = $ph_ordinal;
   (_sprintf($308,23049,$vararg_buffer86)|0);
  }
 } while(0);
 $309 = $0;
 $310 = ((($309)) + 200|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $311 & 268435456;
 $313 = ($312|0)!=(0);
 if ($313) {
  $found = 0;
  $ix = 0;
  while(1) {
   $314 = $ix;
   $315 = $4;
   $316 = (_strlen($315)|0);
   $317 = ($314|0)<($316|0);
   if (!($317)) {
    break;
   }
   $318 = $ix;
   $319 = $4;
   $320 = (($319) + ($318)|0);
   $321 = HEAP8[$320>>0]|0;
   $322 = $321 << 24 >> 24;
   $323 = ($322|0)==(6);
   do {
    if ($323) {
     $324 = $found;
     $325 = ($324|0)!=(0);
     if ($325) {
      $326 = $ix;
      $327 = $4;
      $328 = (($327) + ($326)|0);
      HEAP8[$328>>0] = 5;
      break;
     } else {
      $found = 1;
      break;
     }
    }
   } while(0);
   $329 = $ix;
   $330 = (($329) + 1)|0;
   $ix = $330;
  }
  $354 = $used_and;
  STACKTOP = sp;return ($354|0);
 }
 $331 = $0;
 $332 = ((($331)) + 200|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = $333 & 256;
 $335 = ($334|0)!=(0);
 if (!($335)) {
  $354 = $used_and;
  STACKTOP = sp;return ($354|0);
 }
 $found = 0;
 $336 = $4;
 $337 = (_strlen($336)|0);
 $338 = (($337) - 1)|0;
 $ix = $338;
 while(1) {
  $339 = $ix;
  $340 = ($339|0)>=(0);
  if (!($340)) {
   break;
  }
  $341 = $ix;
  $342 = $4;
  $343 = (($342) + ($341)|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = $344 << 24 >> 24;
  $346 = ($345|0)==(6);
  do {
   if ($346) {
    $347 = $found;
    $348 = ($347|0)!=(0);
    if ($348) {
     $349 = $ix;
     $350 = $4;
     $351 = (($350) + ($349)|0);
     HEAP8[$351>>0] = 5;
     break;
    } else {
     $found = 1;
     break;
    }
   }
  } while(0);
  $352 = $ix;
  $353 = (($352) + -1)|0;
  $ix = $353;
 }
 $354 = $used_and;
 STACKTOP = sp;return ($354|0);
}
function __Z15LoadMbrolaTablePKcS0_i($mbrola_voice,$phtrans,$srate) {
 $mbrola_voice = $mbrola_voice|0;
 $phtrans = $phtrans|0;
 $srate = $srate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f_in = 0, $ix = 0, $path = 0, $pw = 0, $size = 0, $vararg_buffer = 0;
 var $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $path = sp + 72|0;
 $1 = $mbrola_voice;
 $2 = $phtrans;
 $3 = $srate;
 HEAP8[119969] = 0;
 HEAP32[18664] = 0;
 HEAP32[11126] = 0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[20098]|0;
  HEAP32[20097] = $6;
  __Z12SetParameteriii(14,0,0);
  $0 = 0;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $7 = $1;
 HEAP32[$vararg_buffer>>2] = 118980;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_sprintf($path,22310,$vararg_buffer)|0);
 $8 = (__Z13GetFileLengthPKc($path)|0);
 $9 = ($8|0)<=(0);
 if ($9) {
  $10 = $1;
  HEAP32[$vararg_buffer2>>2] = $10;
  (_sprintf($path,22323,$vararg_buffer2)|0);
  $11 = (__Z13GetFileLengthPKc($path)|0);
  $12 = ($11|0)<=(0);
  if ($12) {
   $13 = $1;
   $14 = $1;
   HEAP32[$vararg_buffer5>>2] = $13;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $14;
   (_sprintf($path,22344,$vararg_buffer5)|0);
   $15 = (__Z13GetFileLengthPKc($path)|0);
   $16 = ($15|0)<=(0);
   if ($16) {
    $17 = $1;
    HEAP32[$vararg_buffer9>>2] = $17;
    (_sprintf($path,22368,$vararg_buffer9)|0);
   }
  }
 }
 _close_MBR();
 $18 = (_init_MBR($path)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $0 = 2;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 __Z14setNoError_MBRi(1);
 $20 = $2;
 HEAP32[$vararg_buffer12>>2] = 118980;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $20;
 (_sprintf($path,22396,$vararg_buffer12)|0);
 $21 = (__Z13GetFileLengthPKc($path)|0);
 $size = $21;
 $22 = (_fopen($path,22483)|0);
 $f_in = $22;
 $23 = ($22|0)==(0|0);
 if ($23) {
  _close_MBR();
  $0 = 2;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $24 = HEAP32[11127]|0;
 $25 = $size;
 $26 = (_realloc($24,$25)|0);
 HEAP32[11127] = $26;
 $27 = ($26|0)==(0|0);
 $28 = $f_in;
 if ($27) {
  (_fclose($28)|0);
  _close_MBR();
  $0 = -1;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $29 = (__Z10Read4BytesP8_IO_FILE($28)|0);
 HEAP32[11128] = $29;
 $30 = HEAP32[11127]|0;
 $pw = $30;
 $ix = 4;
 while(1) {
  $31 = $ix;
  $32 = $size;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $f_in;
  $35 = (__Z10Read4BytesP8_IO_FILE($34)|0);
  $36 = $pw;
  $37 = ((($36)) + 4|0);
  $pw = $37;
  HEAP32[$36>>2] = $35;
  $38 = $ix;
  $39 = (($38) + 4)|0;
  $ix = $39;
 }
 $40 = HEAP32[11127]|0;
 $41 = $size;
 $42 = $f_in;
 $43 = (_fread($40,1,$41,$42)|0);
 $size = $43;
 $44 = $f_in;
 (_fclose($44)|0);
 $45 = HEAP32[11128]|0;
 $46 = $45 & 255;
 $47 = (+($46|0));
 $48 = $47 / 16.0;
 _setVolumeRatio_MBR($48);
 $49 = $3;
 HEAP32[20097] = $49;
 $50 = $3;
 $51 = ($50|0)==(22050);
 if ($51) {
  __Z12SetParameteriii(14,0,0);
 } else {
  __Z12SetParameteriii(14,1,0);
 }
 $52 = $1;
 (_strcpy(119969,$52)|0);
 HEAP32[18664] = 1000;
 $0 = 0;
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function __Z14setNoError_MBRi($no_error) {
 $no_error = $no_error|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $no_error;
 STACKTOP = sp;return;
}
function __Z15MbrolaTranslateP12PHONEME_LISTiiP8_IO_FILE($plist,$n_phonemes,$resume,$f_mbrola) {
 $plist = $plist|0;
 $n_phonemes = $n_phonemes|0;
 $resume = $resume|0;
 $f_mbrola = $f_mbrola|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $control = 0, $done = 0, $final_pitch = 0, $fmtp = 0, $len = 0, $len1 = 0, $len_percent = 0, $mbr_buf = 0, $name = 0;
 var $name2 = 0, $next = 0, $p = 0, $pause = 0, $ph = 0, $ph_next = 0, $ph_prev = 0, $phdata = 0, $phoneme_name = 0, $pitch = 0, $pitch1 = 0, $ptr = 0, $released = 0, $res = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $phdata = sp + 152|0;
 $fmtp = sp + 104|0;
 $name2 = sp + 92|0;
 $control = sp + 88|0;
 $len_percent = sp + 80|0;
 $mbr_buf = sp + 376|0;
 $phoneme_name = sp + 360|0;
 $1 = $plist;
 $2 = $n_phonemes;
 $3 = $resume;
 $4 = $f_mbrola;
 $pause = 0;
 $5 = $3;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  HEAP32[11129] = 1;
  HEAP32[11130] = 0;
  HEAP32[11131] = 0;
 }
 while(1) {
  $7 = HEAP32[11129]|0;
  $8 = $2;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 63;
   break;
  }
  $10 = (__Z9WcmdqFreev()|0);
  $11 = ($10|0)<(25);
  if ($11) {
   label = 5;
   break;
  }
  $ptr = $mbr_buf;
  $12 = HEAP32[11129]|0;
  $13 = $1;
  $14 = (($13) + (($12*24)|0)|0);
  $p = $14;
  $15 = HEAP32[11129]|0;
  $16 = (($15) + 1)|0;
  $17 = $1;
  $18 = (($17) + (($16*24)|0)|0);
  $next = $18;
  $19 = $p;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $ph = $21;
  $22 = HEAP32[11129]|0;
  $23 = (($22) - 1)|0;
  $24 = $1;
  $25 = (($24) + (($23*24)|0)|0);
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $ph_prev = $27;
  $28 = HEAP32[11129]|0;
  $29 = (($28) + 1)|0;
  $30 = $1;
  $31 = (($30) + (($29*24)|0)|0);
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $ph_next = $33;
  $34 = $p;
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = $36 & 2;
  $38 = ($37|0)!=(0);
  if ($38) {
   $39 = $p;
   $40 = ((($39)) + 4|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   __Z10DoEmbeddedPii(44520,$42);
  }
  $43 = $p;
  $44 = ((($43)) + 21|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $46 & 4;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $p;
   $50 = ((($49)) + 4|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = $52 & 2047;
   $54 = HEAP32[19058]|0;
   $55 = (($53) + ($54))|0;
   $56 = HEAP32[19056]|0;
   __Z8DoMarkeriiii(2,$55,0,$56);
  }
  $57 = $p;
  $58 = ((($57)) + 21|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60 & 1;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = $p;
   $64 = ((($63)) + 4|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $66 & 2047;
   $68 = HEAP32[19058]|0;
   $69 = (($67) + ($68))|0;
   $70 = $p;
   $71 = ((($70)) + 4|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = $73 >> 11;
   $75 = HEAP32[19059]|0;
   $76 = HEAP32[11131]|0;
   $77 = (($76) + 1)|0;
   HEAP32[11131] = $77;
   $78 = (($75) + ($76))|0;
   __Z8DoMarkeriiii(1,$69,$74,$78);
  }
  $79 = $p;
  $80 = $ph;
  $81 = $ph_prev;
  $82 = $ph_next;
  $83 = (__ZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_($79,$80,$81,$82,$name2,$len_percent,$control)|0);
  $name = $83;
  $84 = HEAP32[$control>>2]|0;
  $85 = $84 & 1;
  $86 = ($85|0)!=(0);
  if ($86) {
   $87 = HEAP32[11129]|0;
   $88 = (($87) + 1)|0;
   HEAP32[11129] = $88;
  }
  $89 = $name;
  $90 = ($89|0)==(0);
  if ($90) {
   $91 = HEAP32[11129]|0;
   $92 = (($91) + 1)|0;
   HEAP32[11129] = $92;
   continue;
  }
  $93 = $ph;
  $94 = ((($93)) + 11|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = ($96|0)==(0);
  if ($97) {
   $98 = $name;
   $99 = $ph;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98|0)==($100|0);
   if ($101) {
    $name = 95;
    $102 = $p;
    $103 = ((($102)) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = HEAP32[18665]|0;
    $106 = Math_imul($104, $105)|0;
    $107 = (($106>>>0) / 256)&-1;
    $len = $107;
    $108 = $len;
    $109 = ($108|0)==(0);
    $$ = $109 ? 1 : $107;
    $len = $$;
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $110 = HEAP32[(74672)>>2]|0;
   $111 = ($110*80)|0;
   $112 = (($111|0) / 256)&-1;
   $len = $112;
  }
  $113 = $ph;
  $114 = ((($113)) + 10|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = ($116|0)!=(15);
  if ($117) {
   $118 = $p;
   $119 = ((($118)) + 8|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $p;
   $122 = HEAP32[19041]|0;
   $123 = $122 & 2;
   (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($phoneme_name,$120,$121,$123,0)|0);
   $124 = $p;
   $125 = ((($124)) + 4|0);
   $126 = HEAP16[$125>>1]|0;
   $127 = $126&65535;
   $128 = $127 & 2047;
   $129 = HEAP32[19058]|0;
   $130 = (($128) + ($129))|0;
   __Z15DoPhonemeMarkeriiiPc(7,$130,0,$phoneme_name);
  }
  $131 = $ptr;
  $132 = $name;
  $133 = (__Z12WordToStringj($132)|0);
  HEAP32[$vararg_buffer>>2] = $133;
  $134 = (_sprintf($131,22412,$vararg_buffer)|0);
  $135 = $ptr;
  $136 = (($135) + ($134)|0);
  $ptr = $136;
  $137 = HEAP32[$name2>>2]|0;
  $138 = ($137|0)==(95);
  if ($138) {
   $139 = HEAP32[$len_percent>>2]|0;
   $pause = $139;
   HEAP32[$name2>>2] = 0;
  }
  $done = 0;
  $final_pitch = 121874;
  $140 = $ph;
  $141 = ((($140)) + 11|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  switch ($143|0) {
  case 2:  {
   $144 = $ph;
   $145 = ((($144)) + 14|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $len = $147;
   $148 = $p;
   $149 = HEAP16[$148>>1]|0;
   $150 = $149&65535;
   $151 = $150 & 8;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = HEAP32[(44600)>>2]|0;
    $154 = ((($153)) + 14|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = $len;
    $158 = (($157) + ($156))|0;
    $len = $158;
   }
   $159 = $ph_next;
   $160 = ((($159)) + 11|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = ($162|0)==(0);
   if ($163) {
    $164 = $len;
    $165 = (($164) + 50)|0;
    $len = $165;
   }
   $166 = $len;
   $167 = $p;
   $168 = ((($167)) + 12|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = Math_imul($166, $169)|0;
   $171 = (($170>>>0) / 256)&-1;
   $len = $171;
   $172 = HEAP32[$name2>>2]|0;
   $173 = ($172|0)==(0);
   $174 = $p;
   $175 = ((($174)) + 16|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $p;
   $179 = ((($178)) + 22|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = $p;
   $183 = ((($182)) + 23|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   if ($173) {
    $186 = (__ZL10WritePitchiiiii($177,$181,$185,0,0)|0);
    $pitch = $186;
    $187 = $ptr;
    $188 = $len;
    $189 = $pitch;
    HEAP32[$vararg_buffer2>>2] = $188;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $189;
    $190 = (_sprintf($187,22440,$vararg_buffer2)|0);
    $191 = $ptr;
    $192 = (($191) + ($190)|0);
    $ptr = $192;
   } else {
    $193 = HEAP32[$len_percent>>2]|0;
    $194 = (__ZL10WritePitchiiiii($177,$181,$185,$193,0)|0);
    $pitch1 = $194;
    $195 = $len;
    $196 = HEAP32[$len_percent>>2]|0;
    $197 = Math_imul($195, $196)|0;
    $198 = (($197|0) / 100)&-1;
    $len1 = $198;
    $199 = $ptr;
    $200 = $len1;
    $201 = $pitch1;
    HEAP32[$vararg_buffer6>>2] = $200;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $201;
    $202 = (_sprintf($199,22440,$vararg_buffer6)|0);
    $203 = $ptr;
    $204 = (($203) + ($202)|0);
    $ptr = $204;
    $205 = $p;
    $206 = ((($205)) + 16|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $209 = $p;
    $210 = ((($209)) + 22|0);
    $211 = HEAP8[$210>>0]|0;
    $212 = $211&255;
    $213 = $p;
    $214 = ((($213)) + 23|0);
    $215 = HEAP8[$214>>0]|0;
    $216 = $215&255;
    $217 = HEAP32[$len_percent>>2]|0;
    $218 = (0 - ($217))|0;
    $219 = (__ZL10WritePitchiiiii($208,$212,$216,$218,0)|0);
    $pitch1 = $219;
    $220 = $ptr;
    $221 = HEAP32[$name2>>2]|0;
    $222 = (__Z12WordToStringj($221)|0);
    $223 = $len;
    $224 = $len1;
    $225 = (($223) - ($224))|0;
    $226 = $pitch1;
    HEAP32[$vararg_buffer10>>2] = $222;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $225;
    $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = $226;
    $227 = (_sprintf($220,22446,$vararg_buffer10)|0);
    $228 = $ptr;
    $229 = (($228) + ($227)|0);
    $ptr = $229;
   }
   $done = 1;
   break;
  }
  case 4:  {
   $released = 0;
   $230 = $next;
   $231 = ((($230)) + 17|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232&255;
   $234 = ($233|0)==(2);
   $$1 = $234 ? 1 : 0;
   $released = $$1;
   $235 = $next;
   $236 = ((($235)) + 17|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = ($238|0)==(3);
   if ($239) {
    $240 = $next;
    $241 = ((($240)) + 21|0);
    $242 = HEAP8[$241>>0]|0;
    $243 = ($242<<24>>24)!=(0);
    if (!($243)) {
     $released = 1;
    }
   }
   $244 = $released;
   $245 = ($244|0)==(0);
   if ($245) {
    $246 = $p;
    $247 = HEAP16[$246>>1]|0;
    $248 = $247&65535;
    $249 = $248 | 8192;
    $250 = $249&65535;
    HEAP16[$246>>1] = $250;
   }
   $251 = $p;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$251,$phdata,0);
   $252 = (__Z9DoSample3P12PHONEME_DATAii($phdata,0,-1)|0);
   $len = $252;
   $253 = $len;
   $254 = ($253*1000)|0;
   $255 = HEAP32[20097]|0;
   $256 = (($254|0) / ($255|0))&-1;
   $len = $256;
   $257 = $p;
   $258 = ((($257)) + 18|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = (__Z11PauseLengthii($260,1)|0);
   $262 = $len;
   $263 = (($262) + ($261))|0;
   $len = $263;
   break;
  }
  case 5:  {
   $264 = HEAP32[(74672)>>2]|0;
   $265 = ($264*80)|0;
   $266 = (($265|0) / 256)&-1;
   $len = $266;
   break;
  }
  case 6:  {
   $len = 0;
   $267 = $p;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$267,$phdata,0);
   $268 = $p;
   $269 = HEAP16[$268>>1]|0;
   $270 = $269&65535;
   $271 = $270 & 8;
   $272 = ($271|0)!=(0);
   if ($272) {
    $273 = $p;
    $274 = ((($273)) + 12|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (__Z9DoSample3P12PHONEME_DATAii($phdata,$275,-1)|0);
    $len = $276;
   }
   $277 = $p;
   $278 = ((($277)) + 12|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (__Z9DoSample3P12PHONEME_DATAii($phdata,$279,-1)|0);
   $281 = $len;
   $282 = (($281) + ($280))|0;
   $len = $282;
   $283 = $len;
   $284 = ($283*1000)|0;
   $285 = HEAP32[20097]|0;
   $286 = (($284|0) / ($285|0))&-1;
   $len = $286;
   break;
  }
  case 8:  {
   $287 = $next;
   $288 = ((($287)) + 17|0);
   $289 = HEAP8[$288>>0]|0;
   $290 = $289&255;
   $291 = ($290|0)!=(2);
   if ($291) {
    dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $292 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$292,$phdata,0);
    $293 = ((($phdata)) + 68|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = ((($fmtp)) + 8|0);
    HEAP32[$295>>2] = $294;
    $296 = $p;
    $297 = ((($296)) + 8|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $p;
    $300 = (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($298,0,$fmtp,$299,-1)|0);
    $len = $300;
    $301 = $len;
    $302 = ($301*1000)|0;
    $303 = HEAP32[20097]|0;
    $304 = (($302|0) / ($303|0))&-1;
    $len = $304;
    $305 = $next;
    $306 = ((($305)) + 17|0);
    $307 = HEAP8[$306>>0]|0;
    $308 = $307&255;
    $309 = ($308|0)==(0);
    if ($309) {
     $310 = $len;
     $311 = (($310) + 50)|0;
     $len = $311;
    }
    $312 = $p;
    $313 = ((($312)) + 16|0);
    $314 = HEAP8[$313>>0]|0;
    $315 = $314&255;
    $316 = $p;
    $317 = ((($316)) + 22|0);
    $318 = HEAP8[$317>>0]|0;
    $319 = $318&255;
    $320 = $p;
    $321 = ((($320)) + 23|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = $322&255;
    $324 = (__ZL10WritePitchiiiii($315,$319,$323,0,1)|0);
    $final_pitch = $324;
   }
   break;
  }
  case 3:  {
   $325 = $next;
   $326 = ((($325)) + 17|0);
   $327 = HEAP8[$326>>0]|0;
   $328 = $327&255;
   $329 = ($328|0)==(0);
   if ($329) {
    $330 = $len;
    $331 = (($330) + 50)|0;
    $len = $331;
    $332 = $p;
    $333 = ((($332)) + 16|0);
    $334 = HEAP8[$333>>0]|0;
    $335 = $334&255;
    $336 = $p;
    $337 = ((($336)) + 22|0);
    $338 = HEAP8[$337>>0]|0;
    $339 = $338&255;
    $340 = $p;
    $341 = ((($340)) + 23|0);
    $342 = HEAP8[$341>>0]|0;
    $343 = $342&255;
    $344 = (__ZL10WritePitchiiiii($335,$339,$343,0,1)|0);
    $final_pitch = $344;
   }
   break;
  }
  default: {
  }
  }
  $345 = $done;
  $346 = ($345|0)!=(0);
  if (!($346)) {
   $347 = HEAP32[$name2>>2]|0;
   $348 = ($347|0)!=(0);
   if ($348) {
    $349 = $len;
    $350 = HEAP32[$len_percent>>2]|0;
    $351 = Math_imul($349, $350)|0;
    $352 = (($351|0) / 100)&-1;
    $len1 = $352;
    $353 = $ptr;
    $354 = $len1;
    $355 = HEAP32[$name2>>2]|0;
    $356 = (__Z12WordToStringj($355)|0);
    HEAP32[$vararg_buffer15>>2] = $354;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $356;
    $357 = (_sprintf($353,22455,$vararg_buffer15)|0);
    $358 = $ptr;
    $359 = (($358) + ($357)|0);
    $ptr = $359;
    $360 = $len1;
    $361 = $len;
    $362 = (($361) - ($360))|0;
    $len = $362;
   }
   $363 = $ptr;
   $364 = $len;
   $365 = $final_pitch;
   HEAP32[$vararg_buffer19>>2] = $364;
   $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
   HEAP32[$vararg_ptr22>>2] = $365;
   $366 = (_sprintf($363,22462,$vararg_buffer19)|0);
   $367 = $ptr;
   $368 = (($367) + ($366)|0);
   $ptr = $368;
  }
  $369 = $pause;
  $370 = ($369|0)!=(0);
  if ($370) {
   $371 = $pause;
   $372 = (__Z11PauseLengthii($371,0)|0);
   $373 = $len;
   $374 = (($373) + ($372))|0;
   $len = $374;
   $375 = $ptr;
   $376 = $pause;
   $377 = (__Z11PauseLengthii($376,0)|0);
   HEAP32[$vararg_buffer23>>2] = $377;
   $378 = (_sprintf($375,22468,$vararg_buffer23)|0);
   $379 = $ptr;
   $380 = (($379) + ($378)|0);
   $ptr = $380;
   $pause = 0;
  }
  $381 = $4;
  $382 = ($381|0)!=(0|0);
  if ($382) {
   $383 = $ptr;
   $384 = $383;
   $385 = $mbr_buf;
   $386 = (($384) - ($385))|0;
   $387 = $4;
   (_fwrite($mbr_buf,1,$386,$387)|0);
  } else {
   $388 = (_write_MBR($mbr_buf)|0);
   $res = $388;
   $389 = $res;
   $390 = ($389|0)<(0);
   if ($390) {
    label = 58;
    break;
   }
   $391 = $res;
   $392 = ($391|0)==(0);
   if ($392) {
    label = 60;
    break;
   }
   $393 = HEAP32[20803]|0;
   $394 = (80488 + ($393<<4)|0);
   HEAP32[$394>>2] = 13;
   $395 = $len;
   $396 = HEAP32[20803]|0;
   $397 = (80488 + ($396<<4)|0);
   $398 = ((($397)) + 4|0);
   HEAP32[$398>>2] = $395;
   __Z8WcmdqIncv();
  }
  $399 = HEAP32[11129]|0;
  $400 = (($399) + 1)|0;
  HEAP32[11129] = $400;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 58) {
  $0 = 0;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 60) {
  $0 = 1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 63) {
  $401 = $4;
  $402 = ($401|0)!=(0|0);
  if (!($402)) {
   (_flush_MBR()|0);
   $403 = HEAP32[20803]|0;
   $404 = (80488 + ($403<<4)|0);
   HEAP32[$404>>2] = 13;
   $405 = HEAP32[20803]|0;
   $406 = (80488 + ($405<<4)|0);
   $407 = ((($406)) + 4|0);
   HEAP32[$407>>2] = 500;
   __Z8WcmdqIncv();
  }
  $0 = 0;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 return (0)|0;
}
function __ZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_($plist,$ph,$ph_prev,$ph_next,$name2,$split,$control) {
 $plist = $plist|0;
 $ph = $ph|0;
 $ph_prev = $ph_prev|0;
 $ph_next = $ph_next|0;
 $name2 = $name2|0;
 $split = $split|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found = 0, $other_ph = 0, $pr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $plist;
 $2 = $ph;
 $3 = $ph_prev;
 $4 = $ph_next;
 $5 = $name2;
 $6 = $split;
 $7 = $control;
 $found = 0;
 $8 = $5;
 HEAP32[$8>>2] = 0;
 $9 = $6;
 HEAP32[$9>>2] = 0;
 $10 = $7;
 HEAP32[$10>>2] = 0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[11132] = $12;
 $13 = HEAP32[11127]|0;
 $pr = $13;
 while(1) {
  $14 = $pr;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[11132]|0;
  $18 = $pr;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17|0)==($19|0);
  if ($20) {
   $21 = $pr;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   L6: do {
    if ($24) {
     $found = 1;
    } else {
     $25 = $pr;
     $26 = ((($25)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(58);
     if ($28) {
      $29 = $1;
      $30 = HEAP16[$29>>1]|0;
      $31 = $30&65535;
      $32 = $31 & 8;
      $33 = ($32|0)!=(0);
      if ($33) {
       $found = 1;
       break;
      }
     }
     $34 = $pr;
     $35 = ((($34)) + 20|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 & 2;
     $38 = ($37|0)!=(0);
     do {
      if ($38) {
       $39 = $3;
       $other_ph = $39;
      } else {
       $40 = $pr;
       $41 = ((($40)) + 20|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = $42 & 8;
       $44 = ($43|0)!=(0);
       if ($44) {
        $45 = $1;
        $46 = ((($45)) + 24|0);
        $47 = ((($46)) + 21|0);
        $48 = HEAP8[$47>>0]|0;
        $49 = ($48<<24>>24)!=(0);
        if ($49) {
         $50 = HEAP32[11138]|0;
         $other_ph = $50;
         break;
        }
       }
       $51 = $4;
       $other_ph = $51;
      }
     } while(0);
     $52 = $pr;
     $53 = ((($52)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $other_ph;
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     do {
      if (!($57)) {
       $58 = $pr;
       $59 = ((($58)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(2);
       if ($61) {
        $62 = $other_ph;
        $63 = ((($62)) + 11|0);
        $64 = HEAP8[$63>>0]|0;
        $65 = $64&255;
        $66 = ($65|0)==(2);
        if ($66) {
         break;
        }
       }
       $67 = $pr;
       $68 = ((($67)) + 4|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(95);
       if (!($70)) {
        break L6;
       }
       $71 = $other_ph;
       $72 = ((($71)) + 11|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&255;
       $75 = ($74|0)==(0);
       if (!($75)) {
        break L6;
       }
      }
     } while(0);
     $found = 1;
    }
   } while(0);
   $76 = $pr;
   $77 = ((($76)) + 20|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 & 4;
   $80 = ($79|0)!=(0);
   if ($80) {
    $81 = $1;
    $82 = ((($81)) + 21|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = ($84|0)==(0);
    if ($85) {
     $found = 0;
    }
   }
   $86 = $pr;
   $87 = ((($86)) + 20|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 & 64;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $1;
    $92 = ((($91)) + 24|0);
    $93 = ((($92)) + 21|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = ($95|0)==(0);
    if ($96) {
     $found = 0;
    }
   }
   $97 = $pr;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 & 32;
   $101 = ($100|0)!=(0);
   if ($101) {
    $102 = $1;
    $103 = ((($102)) + 3|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = $1;
    $107 = ((($106)) + 6|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = ($105|0)<($109|0);
    if ($110) {
     $found = 0;
    }
   }
   $111 = $found;
   $112 = ($111|0)!=(0);
   if ($112) {
    label = 31;
    break;
   }
  }
  $133 = $pr;
  $134 = ((($133)) + 24|0);
  $pr = $134;
 }
 do {
  if ((label|0) == 31) {
   $113 = $pr;
   $114 = ((($113)) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $5;
   HEAP32[$116>>2] = $115;
   $117 = $pr;
   $118 = ((($117)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $6;
   HEAP32[$120>>2] = $119;
   $121 = $pr;
   $122 = ((($121)) + 20|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $7;
   HEAP32[$124>>2] = $123;
   $125 = $pr;
   $126 = ((($125)) + 20|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 & 16;
   $129 = ($128|0)!=(0);
   $130 = $pr;
   $131 = ((($130)) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   if (!($129)) {
    HEAP32[11132] = $132;
    break;
   }
   HEAP32[11126] = $132;
   $0 = 0;
   $143 = $0;
   STACKTOP = sp;return ($143|0);
  }
 } while(0);
 $135 = HEAP32[11126]|0;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = HEAP32[11132]|0;
  $138 = $137 << 8;
  $139 = HEAP32[11126]|0;
  $140 = $139 & 255;
  $141 = $138 | $140;
  HEAP32[11132] = $141;
 }
 HEAP32[11126] = 0;
 $142 = HEAP32[11132]|0;
 $0 = $142;
 $143 = $0;
 STACKTOP = sp;return ($143|0);
}
function __ZL10WritePitchiiiii($env,$pitch1,$pitch2,$split,$final) {
 $env = $env|0;
 $pitch1 = $pitch1|0;
 $pitch2 = $pitch2|0;
 $split = $split|0;
 $final = $final|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $env100 = 0, $env_split = 0, $ix = 0, $max = 0;
 var $min = 0, $or$cond = 0, $or$cond3 = 0, $p1 = 0, $p2 = 0, $p_end = 0, $pitch_base = 0, $pitch_env = 0, $pitch_range = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr7 = 0, $x = 0, $y = 0, $y2 = 0;
 var $y_max = 0, $y_min = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $pitch_base = sp + 100|0;
 $pitch_range = sp + 96|0;
 $y = sp + 40|0;
 $buf = sp + 132|0;
 $0 = $env;
 $1 = $pitch1;
 $2 = $pitch2;
 $3 = $split;
 $4 = $final;
 $max = -1;
 $min = 999;
 $y_max = 0;
 $y_min = 0;
 $env100 = 80;
 HEAP8[119663] = 0;
 $5 = $0;
 $6 = (844 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $pitch_env = $7;
 $8 = HEAP32[1124]|0;
 $9 = $1;
 $10 = $2;
 __Z9SetPitch2P7voice_tiiPiS1_($8,$9,$10,$pitch_base,$pitch_range);
 $11 = $3;
 $12 = $11<<7;
 $13 = (($12|0) / 100)&-1;
 $env_split = $13;
 $14 = $env_split;
 $15 = ($14|0)<(0);
 if ($15) {
  $16 = $env_split;
  $17 = (0 - ($16))|0;
  $env_split = $17;
 }
 $x = 0;
 while(1) {
  $18 = $x;
  $19 = ($18|0)<(128);
  if (!($19)) {
   break;
  }
  $20 = $x;
  $21 = $pitch_env;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $max;
  $26 = ($24|0)>($25|0);
  if ($26) {
   $27 = $x;
   $28 = $pitch_env;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $max = $31;
   $32 = $x;
   $y_max = $32;
  }
  $33 = $x;
  $34 = $pitch_env;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $min;
  $39 = ($37|0)<($38|0);
  if ($39) {
   $40 = $x;
   $41 = $pitch_env;
   $42 = (($41) + ($40)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $min = $44;
   $45 = $x;
   $y_min = $45;
  }
  $46 = $x;
  $47 = (($46) + 1)|0;
  $x = $47;
 }
 $48 = ((($y)) + 8|0);
 HEAP32[$48>>2] = 64;
 $49 = $y_max;
 $50 = ($49|0)>(0);
 $51 = $y_max;
 $52 = ($51|0)<(127);
 $or$cond = $50 & $52;
 if ($or$cond) {
  $53 = $y_max;
  $54 = ((($y)) + 8|0);
  HEAP32[$54>>2] = $53;
 }
 $55 = $y_min;
 $56 = ($55|0)>(0);
 $57 = $y_min;
 $58 = ($57|0)<(127);
 $or$cond3 = $56 & $58;
 if ($or$cond3) {
  $59 = $y_min;
  $60 = ((($y)) + 8|0);
  HEAP32[$60>>2] = $59;
 }
 $61 = ((($y)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62|0) / 2)&-1;
 $64 = ((($y)) + 4|0);
 HEAP32[$64>>2] = $63;
 $65 = ((($y)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($y)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (127 - ($68))|0;
 $70 = (($69|0) / 2)&-1;
 $71 = (($66) + ($70))|0;
 $72 = ((($y)) + 12|0);
 HEAP32[$72>>2] = $71;
 $73 = $pitch_env;
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = HEAP32[$pitch_range>>2]|0;
 $77 = Math_imul($75, $76)|0;
 $78 = $77 >> 8;
 $79 = HEAP32[$pitch_base>>2]|0;
 $80 = (($78) + ($79))|0;
 $p1 = $80;
 $81 = $pitch_env;
 $82 = ((($81)) + 127|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = HEAP32[$pitch_range>>2]|0;
 $86 = Math_imul($84, $85)|0;
 $87 = $86 >> 8;
 $88 = HEAP32[$pitch_base>>2]|0;
 $89 = (($87) + ($88))|0;
 $p_end = $89;
 $90 = $3;
 $91 = ($90|0)>=(0);
 if ($91) {
  $92 = $p1;
  $93 = (($92|0) / 4096)&-1;
  HEAP32[$vararg_buffer>>2] = $93;
  (_sprintf($buf,22416,$vararg_buffer)|0);
  (_strcat(119663,$buf)|0);
 }
 $94 = $0;
 $95 = ($94|0)>(1);
 L23: do {
  if ($95) {
   $ix = 1;
   while(1) {
    $96 = $ix;
    $97 = ($96|0)<(4);
    if (!($97)) {
     break L23;
    }
    $98 = $ix;
    $99 = (($y) + ($98<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $pitch_env;
    $102 = (($101) + ($100)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = HEAP32[$pitch_range>>2]|0;
    $106 = Math_imul($104, $105)|0;
    $107 = $106 >> 8;
    $108 = HEAP32[$pitch_base>>2]|0;
    $109 = (($107) + ($108))|0;
    $p2 = $109;
    $110 = $3;
    $111 = ($110|0)>(0);
    do {
     if ($111) {
      $112 = $ix;
      $113 = (($y) + ($112<<2)|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $env100;
      $116 = Math_imul($114, $115)|0;
      $117 = $env_split;
      $118 = (($116|0) / ($117|0))&-1;
      $y2 = $118;
     } else {
      $119 = $3;
      $120 = ($119|0)<(0);
      $121 = $ix;
      $122 = (($y) + ($121<<2)|0);
      $123 = HEAP32[$122>>2]|0;
      if ($120) {
       $124 = $env_split;
       $125 = (($123) - ($124))|0;
       $126 = $env100;
       $127 = Math_imul($125, $126)|0;
       $128 = $env_split;
       $129 = (($127|0) / ($128|0))&-1;
       $y2 = $129;
       break;
      } else {
       $130 = $env100;
       $131 = Math_imul($123, $130)|0;
       $132 = (($131|0) / 128)&-1;
       $y2 = $132;
       break;
      }
     }
    } while(0);
    $133 = $y2;
    $134 = ($133|0)>(0);
    if ($134) {
     $135 = $y2;
     $136 = $env100;
     $137 = ($135|0)<=($136|0);
     if ($137) {
      $138 = $y2;
      $139 = $p2;
      $140 = (($139|0) / 4096)&-1;
      HEAP32[$vararg_buffer4>>2] = $138;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $140;
      (_sprintf($buf,22422,$vararg_buffer4)|0);
      (_strcat(119663,$buf)|0);
     }
    }
    $141 = $ix;
    $142 = (($141) + 1)|0;
    $ix = $142;
   }
  }
 } while(0);
 $143 = $p_end;
 $144 = (($143|0) / 4096)&-1;
 $p_end = $144;
 $145 = $3;
 $146 = ($145|0)<=(0);
 if ($146) {
  $147 = $env100;
  $148 = $p_end;
  HEAP32[$vararg_buffer8>>2] = $147;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $148;
  (_sprintf($buf,22422,$vararg_buffer8)|0);
  (_strcat(119663,$buf)|0);
 }
 $149 = $env100;
 $150 = ($149|0)<(100);
 if ($150) {
  $151 = $p_end;
  HEAP32[$vararg_buffer12>>2] = 100;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $151;
  (_sprintf($buf,22422,$vararg_buffer12)|0);
  (_strcat(119663,$buf)|0);
 }
 (_strcat(119663,22429)|0);
 $152 = $4;
 $153 = ($152|0)!=(0);
 if (!($153)) {
  STACKTOP = sp;return (119663|0);
 }
 $154 = $p_end;
 HEAP32[$vararg_buffer16>>2] = $154;
 (_sprintf(119663,22431,$vararg_buffer16)|0);
 STACKTOP = sp;return (119663|0);
}
function __Z14MbrolaGenerateP12PHONEME_LISTPii($phoneme_list,$n_ph,$resume) {
 $phoneme_list = $phoneme_list|0;
 $n_ph = $n_ph|0;
 $resume = $resume|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $again = 0, $f_mbrola = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $phoneme_list;
 $2 = $n_ph;
 $3 = $resume;
 $f_mbrola = 0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $7 = HEAP32[19040]|0;
 $8 = $7 & 16;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[19037]|0;
  $f_mbrola = $10;
 }
 $11 = $1;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = $f_mbrola;
 $16 = (__Z15MbrolaTranslateP12PHONEME_LISTiiP8_IO_FILE($11,$13,$14,$15)|0);
 $again = $16;
 $17 = $again;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $19 = $2;
  HEAP32[$19>>2] = 0;
 }
 $20 = $again;
 $0 = $20;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function __Z10MbrolaFilliii($length,$resume,$amplitude) {
 $length = $length|0;
 $resume = $resume|0;
 $amplitude = $amplitude|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $req_samples = 0, $result = 0, $value = 0, $value16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $length;
 $2 = $resume;
 $3 = $amplitude;
 $4 = $2;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = HEAP32[20097]|0;
  $7 = $1;
  $8 = Math_imul($6, $7)|0;
  $9 = (($8|0) / 1000)&-1;
  HEAP32[11133] = $9;
 }
 $10 = HEAP32[20120]|0;
 $11 = HEAP32[20118]|0;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 2)&-1;
 $req_samples = $15;
 $16 = $req_samples;
 $17 = HEAP32[11133]|0;
 $18 = ($16|0)>($17|0);
 if ($18) {
  $19 = HEAP32[11133]|0;
  $req_samples = $19;
 }
 $20 = HEAP32[20118]|0;
 $21 = $req_samples;
 $22 = (_read_MBR($20,$21)|0);
 $result = $22;
 $23 = $result;
 $24 = ($23|0)<=(0);
 if ($24) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $ix = 0;
 while(1) {
  $25 = $ix;
  $26 = $result;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[20118]|0;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = HEAP32[20118]|0;
  $32 = ((($31)) + 1|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = (($30) + ($35))|0;
  $37 = $36&65535;
  $value16 = $37;
  $38 = $value16;
  $39 = $38 << 16 >> 16;
  $40 = $3;
  $41 = Math_imul($39, $40)|0;
  $value = $41;
  $42 = $value;
  $43 = (($42|0) / 40)&-1;
  $value = $43;
  $44 = $value;
  $45 = ($44|0)>(32767);
  $$ = $45 ? 32767 : $43;
  $value = $$;
  $46 = $value;
  $47 = ($46|0)<(-32768);
  $$$ = $47 ? 32768 : $$;
  $value = $$$;
  $48 = $value;
  $49 = $48&255;
  $50 = HEAP32[20118]|0;
  HEAP8[$50>>0] = $49;
  $51 = $value;
  $52 = $51 >> 8;
  $53 = $52&255;
  $54 = HEAP32[20118]|0;
  $55 = ((($54)) + 1|0);
  HEAP8[$55>>0] = $53;
  $56 = HEAP32[20118]|0;
  $57 = ((($56)) + 2|0);
  HEAP32[20118] = $57;
  $58 = $ix;
  $59 = (($58) + 1)|0;
  $ix = $59;
 }
 $60 = $result;
 $61 = HEAP32[11133]|0;
 $62 = (($61) - ($60))|0;
 HEAP32[11133] = $62;
 $63 = HEAP32[11133]|0;
 $64 = ($63|0)!=(0);
 $65 = $64 ? 1 : 0;
 $0 = $65;
 $66 = $0;
 STACKTOP = sp;return ($66|0);
}
function __Z11MbrolaResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_reset_MBR()|0);
 return;
}
function __Z10LoadPhDataPi($srate) {
 $srate = $srate|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ix = 0, $length = 0, $n_phonemes = 0, $p = 0, $pw = 0, $rate = 0, $result = 0, $version = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $length = sp + 12|0;
 $1 = $srate;
 $result = 1;
 $2 = HEAP32[12606]|0;
 $3 = (__ZL10ReadPhFilePvPKcPi($2,22475,0)|0);
 HEAP32[12606] = $3;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $5 = HEAP32[11394]|0;
 $6 = (__ZL10ReadPhFilePvPKcPi($5,22514,0)|0);
 HEAP32[11394] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $8 = HEAP32[11395]|0;
 $9 = (__ZL10ReadPhFilePvPKcPi($8,22524,0)|0);
 HEAP32[11395] = $9;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $11 = HEAP32[10354]|0;
 $12 = (__ZL10ReadPhFilePvPKcPi($11,22533,$length)|0);
 HEAP32[10354] = $12;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $14 = HEAP32[11395]|0;
 HEAP32[11396] = $14;
 $15 = HEAP32[$length>>2]|0;
 $16 = (($15>>>0) / 68)&-1;
 HEAP32[10353] = $16;
 $version = 0;
 $rate = 0;
 $ix = 0;
 while(1) {
  $17 = $ix;
  $18 = ($17|0)<(4);
  if (!($18)) {
   break;
  }
  $19 = $ix;
  $20 = HEAP32[11396]|0;
  $21 = (($20) + ($19)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $ix;
  $25 = $24<<3;
  $26 = $23 << $25;
  $27 = $version;
  $28 = (($27) + ($26))|0;
  $version = $28;
  $29 = $ix;
  $30 = (($29) + 4)|0;
  $31 = HEAP32[11396]|0;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $ix;
  $36 = $35<<3;
  $37 = $34 << $36;
  $38 = $rate;
  $39 = (($38) + ($37))|0;
  $rate = $39;
  $40 = $ix;
  $41 = (($40) + 1)|0;
  $ix = $41;
 }
 $42 = $version;
 $43 = ($42|0)!=(83969);
 if ($43) {
  $44 = $version;
  $result = $44;
 }
 $45 = HEAP32[12606]|0;
 $p = $45;
 $46 = $p;
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 HEAP32[11397] = $48;
 $49 = $p;
 $50 = ((($49)) + 4|0);
 $p = $50;
 $ix = 0;
 while(1) {
  $51 = $ix;
  $52 = HEAP32[11397]|0;
  $53 = ($51|0)<($52|0);
  if (!($53)) {
   break;
  }
  $54 = $p;
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $n_phonemes = $56;
  $57 = $p;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $ix;
  $61 = (45592 + (($60*48)|0)|0);
  $62 = ((($61)) + 36|0);
  HEAP32[$62>>2] = $59;
  $63 = $p;
  $64 = ((($63)) + 1|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $ix;
  $68 = (45592 + (($67*48)|0)|0);
  $69 = ((($68)) + 40|0);
  HEAP32[$69>>2] = $66;
  $70 = $p;
  $pw = $70;
  $71 = $pw;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (__Z13Reverse4Bytesi($73)|0);
  $75 = $ix;
  $76 = (45592 + (($75*48)|0)|0);
  $77 = ((($76)) + 44|0);
  HEAP32[$77>>2] = $74;
  $78 = $p;
  $79 = ((($78)) + 8|0);
  $p = $79;
  $80 = $ix;
  $81 = (45592 + (($80*48)|0)|0);
  $82 = $p;
  dest=$81; src=$82; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $83 = $p;
  $84 = ((($83)) + 32|0);
  $p = $84;
  $85 = $p;
  $86 = $ix;
  $87 = (45592 + (($86*48)|0)|0);
  $88 = ((($87)) + 32|0);
  HEAP32[$88>>2] = $85;
  $89 = $n_phonemes;
  $90 = $89<<4;
  $91 = $p;
  $92 = (($91) + ($90)|0);
  $p = $92;
  $93 = $ix;
  $94 = (($93) + 1)|0;
  $ix = $94;
 }
 $95 = HEAP32[12598]|0;
 $96 = HEAP32[11397]|0;
 $97 = ($95|0)>=($96|0);
 if ($97) {
  HEAP32[12598] = 0;
 }
 $98 = $1;
 $99 = ($98|0)!=(0|0);
 if ($99) {
  $100 = $rate;
  $101 = $1;
  HEAP32[$101>>2] = $100;
 }
 $102 = $result;
 $0 = $102;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function __ZL10ReadPhFilePvPKcPi($ptr,$fname,$size) {
 $ptr = $ptr|0;
 $fname = $fname|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $f_in = 0, $length = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 48|0;
 $1 = $ptr;
 $2 = $fname;
 $3 = $size;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = 118980;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 47;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 (_sprintf($buf,26242,$vararg_buffer)|0);
 $5 = (__Z13GetFileLengthPKc($buf)|0);
 $length = $5;
 $6 = (_fopen($buf,22483)|0);
 $f_in = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = HEAP32[1295]|0;
  HEAP32[$vararg_buffer3>>2] = $buf;
  (_fprintf($8,22486,$vararg_buffer3)|0);
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  __Z4FreePv($11);
 }
 $12 = $length;
 $13 = (__Z5Alloci($12)|0);
 $p = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $f_in;
  (_fclose($15)|0);
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $p;
 $17 = $length;
 $18 = $f_in;
 $19 = (_fread($16,1,$17,$18)|0);
 $20 = $length;
 $21 = ($19|0)!=($20|0);
 $22 = $f_in;
 (_fclose($22)|0);
 if ($21) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $23 = $3;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $length;
  $26 = $3;
  HEAP32[$26>>2] = $25;
 }
 $27 = $p;
 $0 = $27;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function __Z11PhonemeCodej($mnem) {
 $mnem = $mnem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mnem;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[11136]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $ix;
  $6 = (44552 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $ix;
   $10 = (44552 + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = $1;
   $14 = ($12|0)==($13|0);
   if ($14) {
    label = 5;
    break;
   }
  }
  $21 = $ix;
  $22 = (($21) + 1)|0;
  $ix = $22;
 }
 if ((label|0) == 5) {
  $15 = $ix;
  $16 = (44552 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 10|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $0 = $20;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __Z19LookupPhonemeStringPKc($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $ix = 0, $mnem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $mnem = 0;
 $ix = 0;
 while(1) {
  $1 = $ix;
  $2 = ($1|0)<(4);
  if (!($2)) {
   label = 5;
   break;
  }
  $3 = $ix;
  $4 = $0;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 5;
   break;
  }
  $9 = $ix;
  $10 = $0;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $c = $12;
  $13 = $c;
  $14 = $13&255;
  $15 = $ix;
  $16 = $15<<3;
  $17 = $14 << $16;
  $18 = $mnem;
  $19 = $18 | $17;
  $mnem = $19;
  $20 = $ix;
  $21 = (($20) + 1)|0;
  $ix = $21;
 }
 if ((label|0) == 5) {
  $22 = $mnem;
  $23 = (__Z11PhonemeCodej($22)|0);
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __Z11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LIST($this_ph,$which,$fmt_params,$n_frames,$plist) {
 $this_ph = $this_ph|0;
 $which = $which|0;
 $fmt_params = $fmt_params|0;
 $n_frames = $n_frames|0;
 $plist = $plist|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frame = 0, $frames = 0, $ix = 0, $length1 = 0, $length_factor = 0, $length_std = 0, $nf = 0, $nf1 = 0, $seq = 0, $seq2 = 0;
 var $seq_break = 0, $seqk = 0, $seqk2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $nf = sp + 44|0;
 $0 = $this_ph;
 $1 = $which;
 $2 = $fmt_params;
 $3 = $n_frames;
 $4 = $plist;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[11395]|0;
 $9 = (($8) + ($7)|0);
 $seq = $9;
 $10 = $seq;
 $seqk = $10;
 $11 = $seq;
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 HEAP32[$nf>>2] = $14;
 $15 = HEAP32[$nf>>2]|0;
 $16 = ($15|0)>=(25);
 $$ = $16 ? 24 : $14;
 HEAP32[$nf>>2] = $$;
 $17 = $2;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19) + ($22))|0;
 HEAP32[12601] = $23;
 $seq_break = 0;
 $ix = 0;
 while(1) {
  $24 = $ix;
  $25 = HEAP32[$nf>>2]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $seq;
  $28 = ((($27)) + 4|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = $30 & 1;
  $32 = ($31|0)!=(0);
  $33 = $ix;
  if ($32) {
   $34 = $seqk;
   $35 = ((($34)) + 4|0);
   $36 = (($35) + ($33<<6)|0);
   $frame = $36;
  } else {
   $37 = $seq;
   $38 = ((($37)) + 4|0);
   $39 = (($38) + (($33*44)|0)|0);
   $frame = $39;
  }
  $40 = $frame;
  $41 = $ix;
  $42 = (50428 + ($41<<3)|0);
  $43 = ((($42)) + 4|0);
  HEAP32[$43>>2] = $40;
  $44 = $frame;
  $45 = HEAP16[$44>>1]|0;
  $46 = $ix;
  $47 = (50428 + ($46<<3)|0);
  $48 = ((($47)) + 2|0);
  HEAP16[$48>>1] = $45;
  $49 = $frame;
  $50 = ((($49)) + 16|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $ix;
  $54 = (50428 + ($53<<3)|0);
  HEAP16[$54>>1] = $52;
  $55 = $frame;
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $57 & 2;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $ix;
   $seq_break = $60;
  }
  $61 = $ix;
  $62 = (($61) + 1)|0;
  $ix = $62;
 }
 $frames = 50428;
 $63 = $seq_break;
 $64 = ($63|0)>(0);
 do {
  if ($64) {
   $65 = $1;
   $66 = ($65|0)==(1);
   $67 = $seq_break;
   if ($66) {
    $68 = (($67) + 1)|0;
    HEAP32[$nf>>2] = $68;
    break;
   } else {
    $69 = (50428 + ($67<<3)|0);
    $frames = $69;
    $70 = $seq_break;
    $71 = HEAP32[$nf>>2]|0;
    $72 = (($71) - ($70))|0;
    HEAP32[$nf>>2] = $72;
    break;
   }
  }
 } while(0);
 $73 = $0;
 $74 = ((($73)) + 11|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ($76|0)==(2);
 if ($77) {
  $78 = $2;
  $79 = ((($78)) + 20|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)==(0);
  if ($81) {
   $82 = $2;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)!=(0);
   if ($85) {
    $86 = $frames;
    $87 = $2;
    $88 = ((($87)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $2;
    $91 = ((($90)) + 40|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $1;
    $94 = (__Z18FormantTransition2P10frameref_tPijjP11PHONEME_TABi($86,$nf,$89,$92,0,$93)|0);
    $95 = HEAP32[12601]|0;
    $96 = (($95) + ($94))|0;
    HEAP32[12601] = $96;
   }
  }
 }
 $length1 = 0;
 $97 = HEAP32[$nf>>2]|0;
 $98 = (($97) - 1)|0;
 $nf1 = $98;
 $ix = 0;
 while(1) {
  $99 = $ix;
  $100 = $nf1;
  $101 = ($99|0)<($100|0);
  if (!($101)) {
   break;
  }
  $102 = $ix;
  $103 = $frames;
  $104 = (($103) + ($102<<3)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = $length1;
  $108 = (($107) + ($106))|0;
  $length1 = $108;
  $109 = $ix;
  $110 = (($109) + 1)|0;
  $ix = $110;
 }
 $111 = $2;
 $112 = ((($111)) + 20|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0);
 if ($114) {
  $115 = $2;
  $116 = ((($115)) + 20|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = HEAP32[11395]|0;
  $119 = (($118) + ($117)|0);
  $seq2 = $119;
  $120 = $seq2;
  $seqk2 = $120;
  $121 = HEAP32[$nf>>2]|0;
  $122 = (($121) + -1)|0;
  HEAP32[$nf>>2] = $122;
  $ix = 0;
  while(1) {
   $123 = $ix;
   $124 = $seq2;
   $125 = ((($124)) + 2|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($123|0)<($127|0);
   if (!($128)) {
    break;
   }
   $129 = $seq2;
   $130 = ((($129)) + 4|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131 << 16 >> 16;
   $133 = $132 & 1;
   $134 = ($133|0)!=(0);
   $135 = $ix;
   if ($134) {
    $136 = $seqk2;
    $137 = ((($136)) + 4|0);
    $138 = (($137) + ($135<<6)|0);
    $frame = $138;
   } else {
    $139 = $seq2;
    $140 = ((($139)) + 4|0);
    $141 = (($140) + (($135*44)|0)|0);
    $frame = $141;
   }
   $142 = $frame;
   $143 = ((($142)) + 16|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = HEAP32[$nf>>2]|0;
   $147 = $frames;
   $148 = (($147) + ($146<<3)|0);
   HEAP16[$148>>1] = $145;
   $149 = $ix;
   $150 = ($149|0)>(0);
   if ($150) {
    $151 = $frame;
    $152 = HEAP32[$nf>>2]|0;
    $153 = $frames;
    $154 = (($153) + ($152<<3)|0);
    $155 = ((($154)) + 4|0);
    HEAP32[$155>>2] = $151;
    $156 = $frame;
    $157 = HEAP16[$156>>1]|0;
    $158 = HEAP32[$nf>>2]|0;
    $159 = $frames;
    $160 = (($159) + ($158<<3)|0);
    $161 = ((($160)) + 2|0);
    HEAP16[$161>>1] = $157;
   }
   $162 = HEAP32[$nf>>2]|0;
   $163 = (($162) + 1)|0;
   HEAP32[$nf>>2] = $163;
   $164 = $ix;
   $165 = (($164) + 1)|0;
   $ix = $165;
  }
  HEAP32[12599] = 0;
 }
 $166 = $length1;
 $167 = ($166|0)>(0);
 if (!($167)) {
  $265 = HEAP32[$nf>>2]|0;
  $266 = $3;
  HEAP32[$266>>2] = $265;
  $267 = $frames;
  STACKTOP = sp;return ($267|0);
 }
 $168 = $1;
 $169 = ($168|0)==(2);
 if ($169) {
  $170 = $2;
  $171 = ((($170)) + 44|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = HEAP32[12601]|0;
  $174 = (($172) + ($173))|0;
  $175 = (($174) - 45)|0;
  $length_std = $175;
  $176 = $length_std;
  $177 = ($176|0)<(10);
  $$1 = $177 ? 10 : $175;
  $length_std = $$1;
  $178 = $4;
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = $180 & 8;
  $182 = ($181|0)!=(0);
  if ($182) {
   $183 = HEAP32[(44600)>>2]|0;
   $184 = ((($183)) + 14|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185&255;
   $187 = $186<<1;
   $188 = $length_std;
   $189 = (($188) + ($187))|0;
   $length_std = $189;
  }
  $190 = $length_std;
  $191 = $190<<8;
  $192 = $length1;
  $193 = (($191|0) / ($192|0))&-1;
  $length_factor = $193;
  $ix = 0;
  while(1) {
   $194 = $ix;
   $195 = $nf1;
   $196 = ($194|0)<($195|0);
   if (!($196)) {
    break;
   }
   $197 = $ix;
   $198 = $frames;
   $199 = (($198) + ($197<<3)|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = $200 << 16 >> 16;
   $202 = $length_factor;
   $203 = Math_imul($201, $202)|0;
   $204 = (($203|0) / 256)&-1;
   $205 = $204&65535;
   $206 = $ix;
   $207 = $frames;
   $208 = (($207) + ($206<<3)|0);
   HEAP16[$208>>1] = $205;
   $209 = $ix;
   $210 = (($209) + 1)|0;
   $ix = $210;
  }
  $265 = HEAP32[$nf>>2]|0;
  $266 = $3;
  HEAP32[$266>>2] = $265;
  $267 = $frames;
  STACKTOP = sp;return ($267|0);
 }
 $211 = $1;
 $212 = ($211|0)==(1);
 $213 = $2;
 if ($212) {
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)==(1);
  if ($215) {
   $216 = $2;
   $217 = ((($216)) + 44|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ($218|0)<(130);
   if ($219) {
    $220 = $frames;
    $221 = HEAP16[$220>>1]|0;
    $222 = $221 << 16 >> 16;
    $223 = $2;
    $224 = ((($223)) + 44|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = Math_imul($222, $225)|0;
    $227 = (($226|0) / 130)&-1;
    $228 = $227&65535;
    $229 = $frames;
    HEAP16[$229>>1] = $228;
   }
  }
 } else {
  $230 = ((($213)) + 44|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ($231|0)>(0);
  if ($232) {
   $233 = $2;
   $234 = ((($233)) + 44|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $length1;
   $237 = (($235) - ($236))|0;
   $238 = HEAP32[12601]|0;
   $239 = (($238) + ($237))|0;
   HEAP32[12601] = $239;
  }
 }
 $240 = HEAP32[12601]|0;
 $241 = ($240|0)!=(0);
 if (!($241)) {
  $265 = HEAP32[$nf>>2]|0;
  $266 = $3;
  HEAP32[$266>>2] = $265;
  $267 = $frames;
  STACKTOP = sp;return ($267|0);
 }
 $242 = $length1;
 $243 = HEAP32[12601]|0;
 $244 = (($242) + ($243))|0;
 $245 = $244<<8;
 $246 = $length1;
 $247 = (($245|0) / ($246|0))&-1;
 $length_factor = $247;
 $ix = 0;
 while(1) {
  $248 = $ix;
  $249 = $nf1;
  $250 = ($248|0)<($249|0);
  if (!($250)) {
   break;
  }
  $251 = $ix;
  $252 = $frames;
  $253 = (($252) + ($251<<3)|0);
  $254 = HEAP16[$253>>1]|0;
  $255 = $254 << 16 >> 16;
  $256 = $length_factor;
  $257 = Math_imul($255, $256)|0;
  $258 = (($257|0) / 256)&-1;
  $259 = $258&65535;
  $260 = $ix;
  $261 = $frames;
  $262 = (($261) + ($260<<3)|0);
  HEAP16[$262>>1] = $259;
  $263 = $ix;
  $264 = (($263) + 1)|0;
  $ix = $264;
 }
 $265 = HEAP32[$nf>>2]|0;
 $266 = $3;
 HEAP32[$266>>2] = $265;
 $267 = $frames;
 STACKTOP = sp;return ($267|0);
}
function __Z11GetEnvelopei($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $index;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[1295]|0;
  (_fprintf($4,22545,$vararg_buffer)|0);
  $5 = HEAP32[211]|0;
  $0 = $5;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = $1;
  $7 = HEAP32[11395]|0;
  $8 = (($7) + ($6)|0);
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __Z18SelectPhonemeTablei($number) {
 $number = $number|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $number;
 HEAP32[11136] = 0;
 $1 = $0;
 __ZL17SetUpPhonemeTableii($1,0);
 $2 = HEAP32[11136]|0;
 $3 = (($2) + 1)|0;
 HEAP32[11136] = $3;
 $4 = $0;
 HEAP32[11137] = $4;
 STACKTOP = sp;return;
}
function __ZL17SetUpPhonemeTableii($number,$recursing) {
 $number = $number|0;
 $recursing = $recursing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $includes = 0, $ix = 0, $ph_code = 0, $phtab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $number;
 $1 = $recursing;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  _memset((119713|0),0,256)|0;
 }
 $4 = $0;
 $5 = (45592 + (($4*48)|0)|0);
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $includes = $7;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = $includes;
  $10 = (($9) - 1)|0;
  __ZL17SetUpPhonemeTableii($10,1);
 }
 $11 = $0;
 $12 = (45592 + (($11*48)|0)|0);
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $phtab = $14;
 $ix = 0;
 while(1) {
  $15 = $ix;
  $16 = $0;
  $17 = (45592 + (($16*48)|0)|0);
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($15|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $ix;
  $22 = $phtab;
  $23 = (($22) + ($21<<4)|0);
  $24 = ((($23)) + 10|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $ph_code = $26;
  $27 = $ix;
  $28 = $phtab;
  $29 = (($28) + ($27<<4)|0);
  $30 = $ph_code;
  $31 = (44552 + ($30<<2)|0);
  HEAP32[$31>>2] = $29;
  $32 = $ph_code;
  $33 = HEAP32[11136]|0;
  $34 = ($32|0)>($33|0);
  if ($34) {
   $35 = $ph_code;
   HEAP32[11136] = $35;
  }
  $36 = $1;
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = $ph_code;
   $39 = (119713 + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 | 1;
   $43 = $42&255;
   HEAP8[$39>>0] = $43;
  }
  $44 = $ix;
  $45 = (($44) + 1)|0;
  $ix = $45;
 }
 STACKTOP = sp;return;
}
function __Z18LookupPhonemeTablePKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[11397]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = $ix;
  $7 = (45592 + (($6*48)|0)|0);
  $8 = (_strcmp($5,$7)|0);
  $9 = ($8|0)==(0);
  $10 = $ix;
  if ($9) {
   label = 4;
   break;
  }
  $11 = (($10) + 1)|0;
  $ix = $11;
 }
 if ((label|0) == 4) {
  HEAP32[12598] = $10;
 }
 $12 = $ix;
 $13 = HEAP32[11397]|0;
 $14 = ($12|0)==($13|0);
 if ($14) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $15 = $ix;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __Z22SelectPhonemeTableNamePKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (__Z18LookupPhonemeTablePKc($2)|0);
 $ix = $3;
 $4 = ($3|0)==(-1);
 if ($4) {
  $0 = -1;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $5 = $ix;
  __Z18SelectPhonemeTablei($5);
  $6 = $ix;
  $0 = $6;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __Z10LoadConfigv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $c1 = 0, $f = 0, $ix = 0, $p = 0, $string = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 258|0;
 $c1 = sp + 256|0;
 $string = sp + 56|0;
 HEAP32[11135] = 0;
 $ix = 0;
 while(1) {
  $0 = $ix;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = $ix;
  $3 = (74724 + ($2<<4)|0);
  $4 = ((($3)) + 12|0);
  HEAP32[$4>>2] = 0;
  $5 = $ix;
  $6 = (74724 + ($5<<4)|0);
  $7 = ((($6)) + 8|0);
  HEAP32[$7>>2] = 0;
  $8 = $ix;
  $9 = (($8) + 1)|0;
  $ix = $9;
 }
 HEAP32[$vararg_buffer>>2] = 118980;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 47;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 22566;
 (_sprintf($buf,26242,$vararg_buffer)|0);
 $10 = (_fopen($buf,25404)|0);
 $f = $10;
 $11 = ($10|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 while(1) {
  $12 = $f;
  $13 = (_fgets($buf,170,$12)|0);
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP8[$buf>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(47);
  if ($17) {
   continue;
  }
  $18 = (_memcmp($buf,22573,3)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = ((($buf)) + 4|0);
   HEAP32[$vararg_buffer3>>2] = 44540;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $string;
   $21 = (_sscanf($20,22577,$vararg_buffer3)|0);
   $22 = ($21|0)==(2);
   if (!($22)) {
    continue;
   }
   $23 = (_fopen($string,22583)|0);
   HEAP32[11134] = $23;
   continue;
  }
  $24 = (_memcmp($buf,25616,4)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = ((($buf)) + 5|0);
   __Z14ReadTonePointsPcPi($26,4436);
   continue;
  }
  $27 = (_memcmp($buf,22585,9)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = ((($buf)) + 10|0);
   HEAP32[$vararg_buffer7>>2] = 2916;
   (_sscanf($29,25972,$vararg_buffer7)|0);
   continue;
  }
  $30 = (_memcmp($buf,22595,9)|0);
  $31 = ($30|0)==(0);
  if (!($31)) {
   continue;
  }
  $32 = ((($buf)) + 10|0);
  HEAP32[$vararg_buffer10>>2] = $c1;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $string;
  $33 = (_sscanf($32,22605,$vararg_buffer10)|0);
  $ix = $33;
  $34 = $ix;
  $35 = ($34|0)==(2);
  if (!($35)) {
   continue;
  }
  $36 = HEAP8[$c1>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = HEAP32[734]|0;
  $39 = (74724 + ($38<<4)|0);
  HEAP32[$39>>2] = $37;
  $40 = (_strlen($string)|0);
  $41 = (($40) + 1)|0;
  $42 = (__Z5Alloci($41)|0);
  $p = $42;
  $43 = $p;
  (_strcpy($43,$string)|0);
  $44 = $p;
  $45 = HEAP32[734]|0;
  $46 = (74724 + ($45<<4)|0);
  $47 = ((($46)) + 12|0);
  HEAP32[$47>>2] = $44;
  $48 = HEAP32[734]|0;
  $49 = (($48) + 1)|0;
  HEAP32[734] = $49;
  $50 = (74724 + ($48<<4)|0);
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = 0;
 }
 $52 = $f;
 (_fclose($52)|0);
 STACKTOP = sp;return;
}
function __Z13NumInstnWordsPt($prog) {
 $prog = $prog|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $instn = 0, $instn2 = 0, $instn_type = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $prog;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $instn = $4;
 $5 = $instn;
 $6 = $5 >> 12;
 $instn_type = $6;
 $7 = $instn_type;
 $8 = (22612 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $n = $10;
 $11 = ($10|0)>(0);
 L1: do {
  if ($11) {
   $12 = $n;
   $0 = $12;
  } else {
   $13 = $instn_type;
   switch ($13|0) {
   case 0:  {
    $14 = $instn;
    $15 = $14 & 3840;
    $16 = $15 >> 8;
    $17 = ($16|0)==(13);
    if ($17) {
     $18 = $instn;
     $19 = $18 & 255;
     $20 = (($19) + 1)|0;
     $21 = (($20|0) / 2)&-1;
     $n = $21;
     $22 = $n;
     $23 = (($22) + 1)|0;
     $0 = $23;
     break L1;
    } else {
     $0 = 1;
     break L1;
    }
    break;
   }
   case 6:  {
    $24 = $instn;
    $25 = $24 & 3840;
    $26 = $25 >> 9;
    $type2 = $26;
    $27 = $type2;
    $28 = ($27|0)==(5);
    $29 = $type2;
    $30 = ($29|0)==(6);
    $or$cond = $28 | $30;
    if ($or$cond) {
     $0 = 12;
     break L1;
    } else {
     $0 = 1;
     break L1;
    }
    break;
   }
   case 3: case 2:  {
    $31 = $instn;
    $32 = $31 & 3840;
    $n = $32;
    $33 = ($32|0)==(1536);
    $34 = $n;
    $35 = ($34|0)==(3328);
    $or$cond3 = $33 | $35;
    if ($or$cond3) {
     $0 = 2;
     break L1;
    } else {
     $0 = 1;
     break L1;
    }
    break;
   }
   default: {
    $36 = $1;
    $37 = ((($36)) + 4|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38&65535;
    $instn2 = $39;
    $40 = $instn2;
    $41 = $40 >> 12;
    $42 = ($41|0)==(15);
    if ($42) {
     $0 = 4;
     break L1;
    }
    $43 = $instn2;
    $44 = ($43|0)==(2);
    if ($44) {
     $0 = 3;
     break L1;
    } else {
     $0 = 2;
     break L1;
    }
   }
   }
  }
 } while(0);
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($tr,$control,$plist,$phdata,$worddata) {
 $tr = $tr|0;
 $control = $control|0;
 $plist = $plist|0;
 $phdata = $phdata|0;
 $worddata = $worddata|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $end_flag = 0, $instn = 0, $instn2 = 0, $ix = 0, $n_return = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or_flag = 0, $param_sc = 0, $ph = 0, $prog = 0, $return_addr = 0, $truth = 0, $truth2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $prog = sp + 64|0;
 $return_addr = sp;
 $0 = $tr;
 $1 = $control;
 $2 = $plist;
 $3 = $phdata;
 $4 = $worddata;
 $n_return = 0;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $ph = $7;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)!=(0);
  if ($13) {
   $14 = $4;
   $15 = ((($14)) + 8|0);
   HEAP32[$15>>2] = 0;
  }
 }
 $16 = $3;
 _memset(($16|0),0,152)|0;
 $17 = $ph;
 $18 = ((($17)) + 14|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $3;
 $22 = ((($21)) + 4|0);
 $23 = ((($22)) + 40|0);
 HEAP32[$23>>2] = $20;
 $24 = $ph;
 $25 = ((($24)) + 15|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $3;
 $29 = ((($28)) + 4|0);
 $30 = ((($29)) + 36|0);
 HEAP32[$30>>2] = $27;
 $31 = $ph;
 $32 = ((($31)) + 8|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($34|0)==(0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $end_flag = 0;
 $36 = $ph;
 $37 = ((($36)) + 8|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = HEAP32[11394]|0;
 $41 = (($40) + ($39<<1)|0);
 HEAP32[$prog>>2] = $41;
 while(1) {
  $42 = $end_flag;
  $43 = ($42|0)!=(1);
  if (!($43)) {
   break;
  }
  $44 = HEAP32[$prog>>2]|0;
  $45 = HEAP16[$44>>1]|0;
  $instn = $45;
  $46 = $instn;
  $47 = $46&65535;
  $48 = $47 >> 8;
  $49 = $48 & 15;
  $instn2 = $49;
  $or_flag = 0;
  $50 = $instn;
  $51 = $50&65535;
  $52 = $51 >> 12;
  L11: do {
   switch ($52|0) {
   case 0:  {
    $53 = $instn;
    $54 = $53&65535;
    $55 = $54 & 255;
    $data = $55;
    $56 = $instn2;
    $57 = ($56|0)==(0);
    if ($57) {
     $58 = $data;
     switch ($58|0) {
     case 2:  {
      break L11;
      break;
     }
     case 1:  {
      $end_flag = 1;
      break L11;
      break;
     }
     default: {
      $59 = $ph;
      $60 = $instn;
      $61 = $60&65535;
      __ZL12InvalidInstnP11PHONEME_TABi($59,$61);
      break L11;
     }
     }
    }
    $62 = $instn2;
    $63 = ($62|0)==(5);
    if ($63) {
     $64 = $2;
     $65 = ((($64)) + 24|0);
     $66 = ((($65)) + 2|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = (44552 + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($70)) + 11|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = ($73|0)==(2);
     if (!($74)) {
      break L11;
     }
     $75 = $data;
     $76 = $3;
     $77 = ((($76)) + 4|0);
     $78 = ((($77)) + 16|0);
     HEAP32[$78>>2] = $75;
     break L11;
    }
    $79 = $instn2;
    $80 = ($79|0)==(12);
    if ($80) {
     $81 = $data;
     $82 = $81 & 128;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $data;
      $85 = (256 - ($84))|0;
      $86 = (0 - ($85))|0;
      $data = $86;
     }
     $87 = $data;
     $88 = $3;
     $89 = ((($88)) + 4|0);
     $90 = ((($89)) + 40|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($91) + ($87))|0;
     HEAP32[$90>>2] = $92;
     break L11;
    }
    $93 = $instn2;
    $94 = ($93|0)==(13);
    if ($94) {
     $ix = 0;
     while(1) {
      $95 = $ix;
      $96 = $data;
      $97 = ($95|0)<($96|0);
      $98 = $ix;
      $99 = ($98|0)<(16);
      $100 = $97 ? $99 : 0;
      if (!($100)) {
       break;
      }
      $101 = HEAP32[$prog>>2]|0;
      $102 = ((($101)) + 2|0);
      HEAP32[$prog>>2] = $102;
      $103 = HEAP32[$prog>>2]|0;
      $104 = HEAP16[$103>>1]|0;
      $105 = $104&65535;
      $106 = $105 >> 8;
      $107 = $106&255;
      $108 = $ix;
      $109 = $3;
      $110 = ((($109)) + 132|0);
      $111 = (($110) + ($108)|0);
      HEAP8[$111>>0] = $107;
      $112 = HEAP32[$prog>>2]|0;
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $115 = $114 & 255;
      $116 = $115&255;
      $117 = $ix;
      $118 = (($117) + 1)|0;
      $119 = $3;
      $120 = ((($119)) + 132|0);
      $121 = (($120) + ($118)|0);
      HEAP8[$121>>0] = $116;
      $122 = $ix;
      $123 = (($122) + 2)|0;
      $ix = $123;
     }
     $124 = $ix;
     $125 = $3;
     $126 = ((($125)) + 132|0);
     $127 = (($126) + ($124)|0);
     HEAP8[$127>>0] = 0;
     break L11;
    }
    $128 = $instn2;
    $129 = ($128|0)<(16);
    if (!($129)) {
     $146 = $ph;
     $147 = $instn;
     $148 = $147&65535;
     __ZL12InvalidInstnP11PHONEME_TABi($146,$148);
     break L11;
    }
    $130 = $instn2;
    $131 = ($130|0)==(12);
    if ($131) {
     $132 = $data;
     $133 = $3;
     $134 = ((($133)) + 4|0);
     $135 = ((($134)) + 4|0);
     HEAP32[$135>>2] = $132;
    }
    $136 = $data;
    $137 = $instn2;
    $138 = $3;
    $139 = ((($138)) + 4|0);
    $140 = (($139) + ($137<<2)|0);
    HEAP32[$140>>2] = $136;
    $141 = $instn2;
    $142 = ($141|0)==(1);
    if ($142) {
     $143 = $1;
     $144 = $143 & 256;
     $145 = ($144|0)!=(0);
     if ($145) {
      $end_flag = 1;
     }
    }
    break;
   }
   case 1:  {
    $149 = $0;
    $150 = ($149|0)!=(0|0);
    $151 = $instn2;
    $152 = ($151|0)<(8);
    $or$cond5 = $150 & $152;
    if ($or$cond5) {
     $153 = $0;
     $154 = $2;
     $155 = $instn2;
     $156 = $155 & 7;
     $157 = (__ZL15StressConditionP10TranslatorP12PHONEME_LISTii($153,$154,$156,1)|0);
     $158 = $157&1;
     $159 = ($158|0)==(1);
     if ($159) {
      $160 = $instn;
      $161 = $160&65535;
      $162 = $161 & 255;
      $163 = $3;
      $164 = ((($163)) + 4|0);
      $165 = ((($164)) + 4|0);
      HEAP32[$165>>2] = $162;
      $end_flag = 1;
     }
    }
    break;
   }
   case 3: case 2:  {
    $or_flag = 0;
    $truth = 1;
    while(1) {
     $166 = $instn;
     $167 = $166&65535;
     $168 = $167 & 57344;
     $169 = ($168|0)==(8192);
     if (!($169)) {
      break;
     }
     $170 = $0;
     $171 = $1;
     $172 = $2;
     $173 = HEAP32[$prog>>2]|0;
     $174 = $4;
     $175 = (__ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTPtP12WORD_PH_DATA($170,$171,$172,$173,$174)|0);
     $176 = $175&1;
     $truth2 = $176;
     $177 = HEAP32[$prog>>2]|0;
     $178 = (__Z13NumInstnWordsPt($177)|0);
     $179 = HEAP32[$prog>>2]|0;
     $180 = (($179) + ($178<<1)|0);
     HEAP32[$prog>>2] = $180;
     $181 = HEAP32[$prog>>2]|0;
     $182 = HEAP16[$181>>1]|0;
     $183 = $182&65535;
     $184 = ($183|0)==(3);
     if ($184) {
      $185 = $truth2;
      $186 = $185&1;
      $187 = $186&1;
      $188 = $187 ^ 1;
      $189 = ($188|0)!=(0);
      $190 = $189&1;
      $truth2 = $190;
      $191 = HEAP32[$prog>>2]|0;
      $192 = ((($191)) + 2|0);
      HEAP32[$prog>>2] = $192;
     }
     $193 = $or_flag;
     $194 = ($193|0)!=(0);
     $195 = $truth;
     $196 = $195&1;
     $197 = $truth2;
     $198 = $197&1;
     if ($194) {
      $199 = $196 ? 1 : $198;
      $200 = $199&1;
      $truth = $200;
     } else {
      $201 = $196 ? $198 : 0;
      $202 = $201&1;
      $truth = $202;
     }
     $203 = $instn;
     $204 = $203&65535;
     $205 = $204 & 4096;
     $or_flag = $205;
     $206 = HEAP32[$prog>>2]|0;
     $207 = HEAP16[$206>>1]|0;
     $instn = $207;
    }
    $208 = $truth;
    $209 = $208&1;
    $210 = $209&1;
    $211 = ($210|0)==(0);
    do {
     if ($211) {
      $212 = $instn;
      $213 = $212&65535;
      $214 = $213 & 63488;
      $215 = ($214|0)==(26624);
      if ($215) {
       $216 = $instn;
       $217 = $216&65535;
       $218 = $217 & 255;
       $219 = HEAP32[$prog>>2]|0;
       $220 = (($219) + ($218<<1)|0);
       HEAP32[$prog>>2] = $220;
       break;
      }
      $221 = HEAP32[$prog>>2]|0;
      $222 = (__Z13NumInstnWordsPt($221)|0);
      $223 = HEAP32[$prog>>2]|0;
      $224 = (($223) + ($222<<1)|0);
      HEAP32[$prog>>2] = $224;
      $225 = HEAP32[$prog>>2]|0;
      $226 = HEAP16[$225>>1]|0;
      $227 = $226&65535;
      $228 = $227 & 65024;
      $229 = ($228|0)==(24576);
      if ($229) {
       $230 = HEAP32[$prog>>2]|0;
       $231 = ((($230)) + 2|0);
       HEAP32[$prog>>2] = $231;
      }
     }
    } while(0);
    $232 = HEAP32[$prog>>2]|0;
    $233 = ((($232)) + -2|0);
    HEAP32[$prog>>2] = $233;
    break;
   }
   case 6:  {
    $234 = $instn2;
    $235 = $234 >> 1;
    switch ($235|0) {
    case 0:  {
     $236 = $instn;
     $237 = $236&65535;
     $238 = $237 & 255;
     $239 = (($238) - 1)|0;
     $240 = HEAP32[$prog>>2]|0;
     $241 = (($240) + ($239<<1)|0);
     HEAP32[$prog>>2] = $241;
     break L11;
     break;
    }
    case 6:  {
     $244 = $2;
     $245 = $3;
     __ZL17SwitchOnVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($244,$245,$prog,3);
     break L11;
     break;
    }
    case 5:  {
     $242 = $2;
     $243 = $3;
     __ZL17SwitchOnVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($242,$243,$prog,2);
     break L11;
     break;
    }
    default: {
     break L11;
    }
    }
    break;
   }
   case 9:  {
    $246 = $instn;
    $247 = $246&65535;
    $248 = $247 & 15;
    $249 = $248 << 16;
    $250 = HEAP32[$prog>>2]|0;
    $251 = ((($250)) + 2|0);
    $252 = HEAP16[$251>>1]|0;
    $253 = $252&65535;
    $254 = (($249) + ($253))|0;
    $data = $254;
    $255 = HEAP32[$prog>>2]|0;
    $256 = ((($255)) + 2|0);
    HEAP32[$prog>>2] = $256;
    $257 = $instn2;
    switch ($257|0) {
    case 1:  {
     $258 = $n_return;
     $259 = ($258|0)<(10);
     if (!($259)) {
      break L11;
     }
     $260 = HEAP32[$prog>>2]|0;
     $261 = $n_return;
     $262 = (($261) + 1)|0;
     $n_return = $262;
     $263 = (($return_addr) + ($261<<2)|0);
     HEAP32[$263>>2] = $260;
     $264 = $data;
     $265 = HEAP32[11394]|0;
     $266 = (($265) + ($264<<1)|0);
     $267 = ((($266)) + -2|0);
     HEAP32[$prog>>2] = $267;
     break L11;
     break;
    }
    case 2:  {
     $268 = $data;
     $269 = $3;
     $270 = ((($269)) + 124|0);
     HEAP32[$270>>2] = $268;
     break L11;
     break;
    }
    case 3:  {
     $271 = $data;
     $272 = $3;
     $273 = ((($272)) + 128|0);
     HEAP32[$273>>2] = $271;
     break L11;
     break;
    }
    default: {
     break L11;
    }
    }
    break;
   }
   case 10:  {
    $274 = $instn2;
    $275 = ($274|0)==(1);
    if ($275) {
     $ix = 0;
    } else {
     $ix = 2;
    }
    $276 = HEAP32[$prog>>2]|0;
    $277 = HEAP16[$276>>1]|0;
    $278 = $277&65535;
    $279 = $278 & 255;
    $280 = $279 << 16;
    $281 = HEAP32[$prog>>2]|0;
    $282 = ((($281)) + 2|0);
    $283 = HEAP16[$282>>1]|0;
    $284 = $283&65535;
    $285 = (($280) + ($284))|0;
    $286 = $ix;
    $287 = $3;
    $288 = ((($287)) + 108|0);
    $289 = (($288) + ($286<<2)|0);
    HEAP32[$289>>2] = $285;
    $290 = HEAP32[$prog>>2]|0;
    $291 = ((($290)) + 4|0);
    $292 = HEAP16[$291>>1]|0;
    $293 = $292&65535;
    $294 = $293 << 16;
    $295 = HEAP32[$prog>>2]|0;
    $296 = ((($295)) + 6|0);
    $297 = HEAP16[$296>>1]|0;
    $298 = $297&65535;
    $299 = (($294) + ($298))|0;
    $300 = $ix;
    $301 = (($300) + 1)|0;
    $302 = $3;
    $303 = ((($302)) + 108|0);
    $304 = (($303) + ($301<<2)|0);
    HEAP32[$304>>2] = $299;
    $305 = HEAP32[$prog>>2]|0;
    $306 = ((($305)) + 6|0);
    HEAP32[$prog>>2] = $306;
    break;
   }
   case 15: case 14: case 13: case 12: case 11:  {
    $307 = $instn;
    $308 = $307&65535;
    $309 = $308 >> 12;
    $310 = (($309) - 11)|0;
    $instn2 = $310;
    $311 = $instn;
    $312 = $311&65535;
    $313 = $312 & 15;
    $314 = $313 << 18;
    $315 = HEAP32[$prog>>2]|0;
    $316 = ((($315)) + 2|0);
    $317 = HEAP16[$316>>1]|0;
    $318 = $317&65535;
    $319 = $318 << 2;
    $320 = (($314) + ($319))|0;
    $321 = $instn2;
    $322 = $3;
    $323 = ((($322)) + 68|0);
    $324 = (($323) + ($321<<2)|0);
    HEAP32[$324>>2] = $320;
    $325 = $instn;
    $326 = $325&65535;
    $327 = $326 >> 4;
    $328 = $327 & 255;
    $329 = $instn2;
    $330 = $3;
    $331 = ((($330)) + 88|0);
    $332 = (($331) + ($329<<2)|0);
    HEAP32[$332>>2] = $328;
    $333 = $328&255;
    $param_sc = $333;
    $334 = HEAP32[$prog>>2]|0;
    $335 = ((($334)) + 2|0);
    HEAP32[$prog>>2] = $335;
    $336 = HEAP32[$prog>>2]|0;
    $337 = ((($336)) + 2|0);
    $338 = HEAP16[$337>>1]|0;
    $339 = $338&65535;
    $340 = ($339|0)!=(2);
    if ($340) {
     $341 = $instn2;
     $342 = ($341|0)<(2);
     if ($342) {
      $end_flag = 1;
      $343 = HEAP32[$prog>>2]|0;
      $344 = ((($343)) + 2|0);
      $345 = HEAP16[$344>>1]|0;
      $346 = $345&65535;
      $347 = $346 >> 12;
      $348 = ($347|0)==(15);
      $$ = $348 ? 2 : 1;
      $end_flag = $$;
     } else {
      $349 = $instn2;
      $350 = ($349|0)==(4);
      if ($350) {
       $351 = $end_flag;
       $352 = (($351) + -1)|0;
       $end_flag = $352;
      }
     }
     $353 = $instn2;
     $354 = ($353|0)==(2);
     $355 = $instn2;
     $356 = ($355|0)==(3);
     $or$cond = $354 | $356;
     if ($or$cond) {
      $357 = $param_sc;
      $358 = $357 << 24 >> 24;
      $359 = $instn2;
      $360 = $3;
      $361 = ((($360)) + 88|0);
      $362 = (($361) + ($359<<2)|0);
      HEAP32[$362>>2] = $358;
     }
    }
    break;
   }
   default: {
    $363 = $ph;
    $364 = $instn;
    $365 = $364&65535;
    __ZL12InvalidInstnP11PHONEME_TABi($363,$365);
   }
   }
  } while(0);
  $366 = $ph;
  $367 = ((($366)) + 4|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = $368 & 4096;
  $370 = ($369|0)!=(0);
  if ($370) {
   $end_flag = 1;
  }
  $371 = $end_flag;
  $372 = ($371|0)==(1);
  $373 = $n_return;
  $374 = ($373|0)>(0);
  $or$cond3 = $372 & $374;
  if ($or$cond3) {
   $end_flag = 0;
   $375 = $n_return;
   $376 = (($375) + -1)|0;
   $n_return = $376;
   $377 = (($return_addr) + ($376<<2)|0);
   $378 = HEAP32[$377>>2]|0;
   HEAP32[$prog>>2] = $378;
  }
  $379 = HEAP32[$prog>>2]|0;
  $380 = ((($379)) + 2|0);
  HEAP32[$prog>>2] = $380;
 }
 $381 = $4;
 $382 = ($381|0)!=(0|0);
 if (!($382)) {
  STACKTOP = sp;return;
 }
 $383 = $2;
 $384 = ((($383)) + 17|0);
 $385 = HEAP8[$384>>0]|0;
 $386 = $385&255;
 $387 = ($386|0)==(2);
 if (!($387)) {
  STACKTOP = sp;return;
 }
 $388 = $4;
 $389 = $2;
 ;HEAP32[$388>>2]=HEAP32[$389>>2]|0;HEAP32[$388+4>>2]=HEAP32[$389+4>>2]|0;HEAP32[$388+8>>2]=HEAP32[$389+8>>2]|0;HEAP32[$388+12>>2]=HEAP32[$389+12>>2]|0;HEAP32[$388+16>>2]=HEAP32[$389+16>>2]|0;HEAP32[$388+20>>2]=HEAP32[$389+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZL12InvalidInstnP11PHONEME_TABi($ph,$instn) {
 $ph = $ph|0;
 $instn = $instn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ph;
 $1 = $instn;
 $2 = HEAP32[1295]|0;
 $3 = $1;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (__Z12WordToStringj($5)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 (_fprintf($2,22628,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZL15StressConditionP10TranslatorP12PHONEME_LISTii($tr,$plist,$condition,$control) {
 $tr = $tr|0;
 $plist = $plist|0;
 $condition = $condition|0;
 $control = $control|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $pl = 0, $stress_level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = $tr;
 $2 = $plist;
 $3 = $condition;
 $4 = $control;
 $5 = $2;
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (44552 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(2);
 $15 = $2;
 do {
  if ($14) {
   $pl = $15;
   label = 6;
  } else {
   $16 = ((($15)) + 24|0);
   $17 = ((($16)) + 2|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (44552 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 11|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)==(2);
   if ($25) {
    $26 = $2;
    $27 = ((($26)) + 24|0);
    $pl = $27;
    label = 6;
    break;
   } else {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $28 = $pl;
   $29 = ((($28)) + 3|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 & 15;
   $stress_level = $32;
   $33 = $1;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = $4;
    $36 = $35 & 1;
    $37 = ($36|0)!=(0);
    if ($37) {
     $38 = $2;
     $39 = HEAP16[$38>>1]|0;
     $40 = $39&65535;
     $41 = $40 & 16;
     $42 = ($41|0)!=(0);
     if ($42) {
      $43 = $1;
      $44 = ((($43)) + 24|0);
      $45 = ((($44)) + 40|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = $46 & 1;
      $48 = ($47|0)==(0);
      if ($48) {
       $$expand_i1_val2 = 0;
       HEAP8[$0>>0] = $$expand_i1_val2;
       break;
      }
     }
    }
    $49 = $1;
    $50 = ((($49)) + 24|0);
    $51 = ((($50)) + 40|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & 2;
    $54 = ($53|0)!=(0);
    if ($54) {
     $55 = $stress_level;
     $56 = $pl;
     $57 = ((($56)) + 6|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($55|0)>=($59|0);
     if ($60) {
      $stress_level = 4;
     }
    }
   }
   $61 = $3;
   $62 = ($61|0)==(4);
   if ($62) {
    $63 = $stress_level;
    $64 = $pl;
    $65 = ((($64)) + 6|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = ($63|0)>=($67|0);
    $$expand_i1_val4 = $68&1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
   $69 = $3;
   $70 = ($69|0)==(3);
   $71 = $stress_level;
   if ($70) {
    $72 = ($71|0)>(3);
    if ($72) {
     $$expand_i1_val6 = 1;
     HEAP8[$0>>0] = $$expand_i1_val6;
     break;
    }
   } else {
    $73 = $3;
    $74 = (2920 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($71|0)<($75|0);
    if ($76) {
     $$expand_i1_val8 = 1;
     HEAP8[$0>>0] = $$expand_i1_val8;
     break;
    }
   }
   $$expand_i1_val10 = 0;
   HEAP8[$0>>0] = $$expand_i1_val10;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $77 = $$pre_trunc&1;
 STACKTOP = sp;return ($77|0);
}
function __ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTPtP12WORD_PH_DATA($tr,$control,$plist,$p_prog,$worddata) {
 $tr = $tr|0;
 $control = $control|0;
 $plist = $plist|0;
 $p_prog = $p_prog|0;
 $worddata = $worddata|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val15 = 0, $$expand_i1_val17 = 0, $$expand_i1_val19 = 0, $$expand_i1_val21 = 0, $$expand_i1_val23 = 0, $$expand_i1_val25 = 0, $$expand_i1_val27 = 0, $$expand_i1_val29 = 0, $$expand_i1_val3 = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$expand_i1_val37 = 0, $$expand_i1_val39 = 0, $$expand_i1_val41 = 0, $$expand_i1_val43 = 0, $$expand_i1_val45 = 0;
 var $$expand_i1_val47 = 0, $$expand_i1_val49 = 0, $$expand_i1_val5 = 0, $$expand_i1_val51 = 0, $$expand_i1_val53 = 0, $$expand_i1_val55 = 0, $$expand_i1_val57 = 0, $$expand_i1_val59 = 0, $$expand_i1_val61 = 0, $$expand_i1_val63 = 0, $$expand_i1_val65 = 0, $$expand_i1_val67 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $check_endtype = 0, $count = 0, $data = 0, $instn = 0, $instn2 = 0, $ix = 0, $or$cond = 0, $ph = 0;
 var $plist_this = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 56|0;
 $1 = $tr;
 $2 = $control;
 $3 = $plist;
 $4 = $p_prog;
 $5 = $worddata;
 $check_endtype = 0;
 $6 = $4;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 & 4095;
 $instn = $9;
 $10 = $instn;
 $11 = $10 & 255;
 $data = $11;
 $12 = $instn;
 $13 = $12 >> 8;
 $instn2 = $13;
 $14 = $instn2;
 $15 = ($14|0)<(14);
 L1: do {
  if ($15) {
   $16 = $3;
   $plist_this = $16;
   $17 = $instn2;
   $18 = (($17|0) % 7)&-1;
   $which = $18;
   $19 = $which;
   $20 = ($19|0)==(6);
   if ($20) {
    $21 = $4;
    $22 = ((($21)) + 2|0);
    $4 = $22;
    $23 = $4;
    $24 = HEAP16[$23>>1]|0;
    $25 = $24&65535;
    $which = $25;
   }
   $26 = $which;
   $27 = ($26|0)==(4);
   if ($27) {
    $28 = $3;
    $29 = ((($28)) + 24|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = ($31<<16>>16)!=(0);
    if ($32) {
     $$expand_i1_val = 0;
     HEAP8[$0>>0] = $$expand_i1_val;
     break;
    }
   }
   $33 = $which;
   $34 = ($33|0)==(5);
   if ($34) {
    $35 = $3;
    $36 = ((($35)) + 4|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = ($37<<16>>16)!=(0);
    if ($38) {
     $$expand_i1_val3 = 0;
     HEAP8[$0>>0] = $$expand_i1_val3;
     break;
    }
   }
   $39 = $which;
   $40 = ($39|0)==(6);
   do {
    if ($40) {
     $41 = $3;
     $42 = ((($41)) + 24|0);
     $43 = ((($42)) + 4|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = ($44<<16>>16)!=(0);
     if (!($45)) {
      $46 = $3;
      $47 = ((($46)) + 48|0);
      $48 = ((($47)) + 4|0);
      $49 = HEAP16[$48>>1]|0;
      $50 = ($49<<16>>16)!=(0);
      if (!($50)) {
       break;
      }
     }
     $$expand_i1_val5 = 0;
     HEAP8[$0>>0] = $$expand_i1_val5;
     break L1;
    }
   } while(0);
   $51 = $which;
   L20: do {
    switch ($51|0) {
    case 5: case 0:  {
     $52 = $3;
     $53 = ((($52)) + -24|0);
     $3 = $53;
     $check_endtype = 1;
     break;
    }
    case 10:  {
     $99 = $3;
     $100 = ((($99)) + 4|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = ($101<<16>>16)!=(0);
     if (!($102)) {
      $103 = $3;
      $104 = ((($103)) + -24|0);
      $105 = ((($104)) + 4|0);
      $106 = HEAP16[$105>>1]|0;
      $107 = ($106<<16>>16)!=(0);
      if (!($107)) {
       $108 = $3;
       $109 = ((($108)) + -48|0);
       $3 = $109;
       $check_endtype = 1;
       break L20;
      }
     }
     $$expand_i1_val13 = 0;
     HEAP8[$0>>0] = $$expand_i1_val13;
     break L1;
     break;
    }
    case 4: case 2:  {
     $54 = $3;
     $55 = ((($54)) + 24|0);
     $3 = $55;
     break;
    }
    case 6: case 3:  {
     $56 = $3;
     $57 = ((($56)) + 48|0);
     $3 = $57;
     break;
    }
    case 7:  {
     $which = 1;
     while(1) {
      $58 = $which;
      $59 = $3;
      $60 = (($59) + (($58*24)|0)|0);
      $61 = ((($60)) + 4|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = ($62<<16>>16)!=(0);
      if ($63) {
       label = 20;
       break;
      }
      $64 = $which;
      $65 = $3;
      $66 = (($65) + (($64*24)|0)|0);
      $67 = ((($66)) + 2|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68&255;
      $70 = (44552 + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($71)) + 11|0);
      $73 = HEAP8[$72>>0]|0;
      $74 = $73&255;
      $75 = ($74|0)==(2);
      $76 = $which;
      if ($75) {
       label = 22;
       break;
      }
      $79 = (($76) + 1)|0;
      $which = $79;
     }
     if ((label|0) == 20) {
      $$expand_i1_val7 = 0;
      HEAP8[$0>>0] = $$expand_i1_val7;
      break L1;
     }
     else if ((label|0) == 22) {
      $77 = $3;
      $78 = (($77) + (($76*24)|0)|0);
      $3 = $78;
      break L20;
     }
     break;
    }
    case 8:  {
     $80 = $5;
     $81 = ($80|0)==(0|0);
     if (!($81)) {
      $82 = $5;
      $83 = ((($82)) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==(0|0);
      if (!($85)) {
       $86 = $5;
       $3 = $86;
       $check_endtype = 1;
       break L20;
      }
     }
     $$expand_i1_val9 = 0;
     HEAP8[$0>>0] = $$expand_i1_val9;
     break L1;
     break;
    }
    case 9:  {
     $ix = 1;
     while(1) {
      $87 = $ix;
      $88 = ($87|0)<=(3);
      if (!($88)) {
       label = 33;
       break;
      }
      $89 = $ix;
      $90 = $3;
      $91 = (($90) + (($89*24)|0)|0);
      $92 = ((($91)) + 4|0);
      $93 = HEAP16[$92>>1]|0;
      $94 = ($93<<16>>16)!=(0);
      if ($94) {
       label = 31;
       break;
      }
      $95 = $ix;
      $96 = (($95) + 1)|0;
      $ix = $96;
     }
     if ((label|0) == 31) {
      $$expand_i1_val11 = 0;
      HEAP8[$0>>0] = $$expand_i1_val11;
      break L1;
     }
     else if ((label|0) == 33) {
      $97 = $3;
      $98 = ((($97)) + 72|0);
      $3 = $98;
      break L20;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $110 = $which;
   $111 = ($110|0)==(0);
   $112 = $which;
   $113 = ($112|0)==(5);
   $or$cond = $111 | $113;
   if ($or$cond) {
    $114 = $3;
    $115 = ((($114)) + 2|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = ($117|0)==(1);
    if ($118) {
     $119 = $3;
     $120 = ((($119)) + -24|0);
     $3 = $120;
    }
   }
   $121 = $2;
   $122 = $121 & 256;
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = $3;
    $125 = ((($124)) + 2|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = (44552 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $3;
    $131 = ((($130)) + 8|0);
    HEAP32[$131>>2] = $129;
   }
   $132 = $3;
   $133 = ((($132)) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $ph = $134;
   $135 = $instn2;
   $136 = ($135|0)<(7);
   if ($136) {
    $137 = $data;
    $138 = (44552 + ($137<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = HEAP32[$139>>2]|0;
    $141 = $ph;
    $142 = HEAP32[$141>>2]|0;
    $143 = ($140|0)==($142|0);
    $144 = $143&1;
    $145 = ($144|0)==(1);
    if ($145) {
     $$expand_i1_val15 = 1;
     HEAP8[$0>>0] = $$expand_i1_val15;
     break;
    }
    $146 = $check_endtype;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = $ph;
     $149 = ((($148)) + 11|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = ($151|0)==(2);
     if ($152) {
      $153 = $data;
      $154 = $ph;
      $155 = ((($154)) + 13|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $156&255;
      $158 = ($153|0)==($157|0);
      $$expand_i1_val17 = $158&1;
      HEAP8[$0>>0] = $$expand_i1_val17;
      break;
     }
    }
    $159 = $data;
    $160 = $ph;
    $161 = ((($160)) + 12|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = $162&255;
    $164 = ($159|0)==($163|0);
    $$expand_i1_val19 = $164&1;
    HEAP8[$0>>0] = $$expand_i1_val19;
    break;
   }
   $165 = $instn;
   $166 = $165 & 31;
   $data = $166;
   $167 = $instn;
   $168 = $167 & 224;
   L68: do {
    switch ($168|0) {
    case 0:  {
     $169 = $ph;
     $170 = ((($169)) + 11|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = $171&255;
     $173 = $data;
     $174 = ($172|0)==($173|0);
     $$expand_i1_val21 = $174&1;
     HEAP8[$0>>0] = $$expand_i1_val21;
     break L1;
     break;
    }
    case 32:  {
     $175 = $ph;
     $176 = ((($175)) + 4|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 >>> 16;
     $179 = $178 & 15;
     $180 = $data;
     $181 = ($179|0)==($180|0);
     $$expand_i1_val23 = $181&1;
     HEAP8[$0>>0] = $$expand_i1_val23;
     break L1;
     break;
    }
    case 64:  {
     $182 = $ph;
     $183 = ((($182)) + 4|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $data;
     $186 = 1 << $185;
     $187 = $184 & $186;
     $188 = ($187|0)!=(0);
     $$expand_i1_val25 = $188&1;
     HEAP8[$0>>0] = $$expand_i1_val25;
     break L1;
     break;
    }
    case 128:  {
     $189 = $data;
     do {
      switch ($189|0) {
      case 4: case 3: case 2: case 1: case 0:  {
       $190 = $1;
       $191 = $3;
       $192 = $data;
       $193 = (__ZL15StressConditionP10TranslatorP12PHONEME_LISTii($190,$191,$192,0)|0);
       $$expand_i1_val27 = $193&1;
       HEAP8[$0>>0] = $$expand_i1_val27;
       break L1;
       break;
      }
      case 5:  {
       $194 = $ph;
       $195 = ((($194)) + 11|0);
       $196 = HEAP8[$195>>0]|0;
       $197 = $196&255;
       $198 = ($197|0)==(0);
       if ($198) {
        $204 = 1;
       } else {
        $199 = $plist_this;
        $200 = HEAP16[$199>>1]|0;
        $201 = $200&65535;
        $202 = $201 & 8192;
        $203 = ($202|0)!=(0);
        $204 = $203;
       }
       $$expand_i1_val29 = $204&1;
       HEAP8[$0>>0] = $$expand_i1_val29;
       break L1;
       break;
      }
      case 6:  {
       $205 = $3;
       $206 = ((($205)) + 4|0);
       $207 = HEAP16[$206>>1]|0;
       $208 = $207&65535;
       $209 = ($208|0)!=(0);
       $$expand_i1_val31 = $209&1;
       HEAP8[$0>>0] = $$expand_i1_val31;
       break L1;
       break;
      }
      case 7:  {
       $210 = $3;
       $211 = ((($210)) + 4|0);
       $212 = HEAP16[$211>>1]|0;
       $213 = $212&65535;
       $214 = ($213|0)==(0);
       $$expand_i1_val33 = $214&1;
       HEAP8[$0>>0] = $$expand_i1_val33;
       break L1;
       break;
      }
      case 8:  {
       $215 = $3;
       $216 = ((($215)) + 24|0);
       $217 = ((($216)) + 4|0);
       $218 = HEAP16[$217>>1]|0;
       $219 = ($218<<16>>16)!=(0);
       if ($219) {
        $228 = 1;
       } else {
        $220 = $3;
        $221 = ((($220)) + 24|0);
        $222 = ((($221)) + 8|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = ((($223)) + 11|0);
        $225 = HEAP8[$224>>0]|0;
        $226 = $225&255;
        $227 = ($226|0)==(0);
        $228 = $227;
       }
       $$expand_i1_val35 = $228&1;
       HEAP8[$0>>0] = $$expand_i1_val35;
       break L1;
       break;
      }
      case 9:  {
       $229 = $3;
       $230 = ((($229)) + 4|0);
       $231 = HEAP16[$230>>1]|0;
       $232 = $231&65535;
       $233 = ($232|0)!=(0);
       if ($233) {
        $$expand_i1_val37 = 0;
        HEAP8[$0>>0] = $$expand_i1_val37;
        break L1;
       }
       while(1) {
        $234 = $3;
        $235 = ((($234)) + -24|0);
        $3 = $235;
        $236 = $3;
        $237 = ((($236)) + 3|0);
        $238 = HEAP8[$237>>0]|0;
        $239 = $238&255;
        $240 = $239 & 15;
        $241 = ($240|0)>=(4);
        if ($241) {
         break;
        }
        $242 = $3;
        $243 = ((($242)) + 4|0);
        $244 = HEAP16[$243>>1]|0;
        $245 = $244&65535;
        $246 = ($245|0)==(0);
        if (!($246)) {
         break L68;
        }
       }
       $$expand_i1_val39 = 1;
       HEAP8[$0>>0] = $$expand_i1_val39;
       break L1;
       break;
      }
      case 10:  {
       $247 = $ph;
       $248 = ((($247)) + 11|0);
       $249 = HEAP8[$248>>0]|0;
       $250 = $249&255;
       $251 = ($250|0)!=(2);
       $$expand_i1_val41 = $251&1;
       HEAP8[$0>>0] = $$expand_i1_val41;
       break L1;
       break;
      }
      case 11:  {
       while(1) {
        $252 = $3;
        $253 = ((($252)) + 24|0);
        $3 = $253;
        $254 = $3;
        $255 = ((($254)) + 4|0);
        $256 = HEAP16[$255>>1]|0;
        $257 = $256&65535;
        $258 = ($257|0)!=(0);
        if ($258) {
         label = 71;
         break;
        }
        $259 = $3;
        $260 = ((($259)) + 8|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = ((($261)) + 11|0);
        $263 = HEAP8[$262>>0]|0;
        $264 = $263&255;
        $265 = ($264|0)==(2);
        if ($265) {
         label = 73;
         break;
        }
       }
       if ((label|0) == 71) {
        $$expand_i1_val43 = 1;
        HEAP8[$0>>0] = $$expand_i1_val43;
        break L1;
       }
       else if ((label|0) == 73) {
        $$expand_i1_val45 = 0;
        HEAP8[$0>>0] = $$expand_i1_val45;
        break L1;
       }
       break;
      }
      case 12:  {
       $266 = $ph;
       $267 = ((($266)) + 11|0);
       $268 = HEAP8[$267>>0]|0;
       $269 = $268&255;
       $270 = ($269|0)==(2);
       if ($270) {
        $281 = 1;
       } else {
        $271 = $ph;
        $272 = ((($271)) + 11|0);
        $273 = HEAP8[$272>>0]|0;
        $274 = $273&255;
        $275 = ($274|0)==(3);
        if ($275) {
         $281 = 1;
        } else {
         $276 = $ph;
         $277 = ((($276)) + 4|0);
         $278 = HEAP32[$277>>2]|0;
         $279 = $278 & 16;
         $280 = ($279|0)!=(0);
         $281 = $280;
        }
       }
       $$expand_i1_val47 = $281&1;
       HEAP8[$0>>0] = $$expand_i1_val47;
       break L1;
       break;
      }
      case 13:  {
       $282 = $3;
       $283 = (__ZL18CountVowelPositionP12PHONEME_LIST($282)|0);
       $284 = ($283|0)==(1);
       $$expand_i1_val49 = $284&1;
       HEAP8[$0>>0] = $$expand_i1_val49;
       break L1;
       break;
      }
      case 14:  {
       $285 = $3;
       $286 = (__ZL18CountVowelPositionP12PHONEME_LIST($285)|0);
       $287 = ($286|0)==(2);
       $$expand_i1_val51 = $287&1;
       HEAP8[$0>>0] = $$expand_i1_val51;
       break L1;
       break;
      }
      case 15:  {
       $288 = $3;
       $289 = ((($288)) + 4|0);
       $290 = HEAP16[$289>>1]|0;
       $291 = $290&65535;
       $292 = ($291|0)!=(0);
       if ($292) {
        $$expand_i1_val53 = 0;
        HEAP8[$0>>0] = $$expand_i1_val53;
        break L1;
       }
       $count = 0;
       while(1) {
        $293 = $3;
        $294 = ((($293)) + -24|0);
        $3 = $294;
        $295 = $3;
        $296 = ((($295)) + 8|0);
        $297 = HEAP32[$296>>2]|0;
        $298 = ((($297)) + 11|0);
        $299 = HEAP8[$298>>0]|0;
        $300 = $299&255;
        $301 = ($300|0)==(2);
        if ($301) {
         $302 = $3;
         $303 = ((($302)) + 8|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = ((($304)) + 4|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = $306 & 268435456;
         $308 = ($307|0)!=(0);
         if (!($308)) {
          break;
         }
         $309 = $count;
         $310 = (($309) + 1)|0;
         $count = $310;
        }
        $311 = $3;
        $312 = ((($311)) + 4|0);
        $313 = HEAP16[$312>>1]|0;
        $314 = $313&65535;
        $315 = ($314|0)!=(0);
        if ($315) {
         break;
        }
       }
       $316 = $count;
       $317 = ($316|0)>(0);
       $$expand_i1_val55 = $317&1;
       HEAP8[$0>>0] = $$expand_i1_val55;
       break L1;
       break;
      }
      case 16:  {
       $318 = $3;
       $319 = HEAP16[$318>>1]|0;
       $320 = $319&65535;
       $321 = $320 & 16;
       $322 = ($321|0)!=(0);
       $$expand_i1_val57 = $322&1;
       HEAP8[$0>>0] = $$expand_i1_val57;
       break L1;
       break;
      }
      default: {
       break L68;
      }
      }
     } while(0);
     break;
    }
    default: {
    }
    }
   } while(0);
   $$expand_i1_val59 = 0;
   HEAP8[$0>>0] = $$expand_i1_val59;
  } else {
   $323 = $instn2;
   $324 = ($323|0)==(15);
   L120: do {
    if ($324) {
     $325 = $data;
     switch ($325|0) {
     case 1:  {
      $326 = $2;
      $327 = $326 & 1;
      $328 = ($327|0)!=(0);
      $$expand_i1_val61 = $328&1;
      HEAP8[$0>>0] = $$expand_i1_val61;
      break L1;
      break;
     }
     case 2:  {
      $329 = HEAP32[1124]|0;
      $330 = ((($329)) + 132|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = ($331|0)!=(0);
      $$expand_i1_val63 = $332&1;
      HEAP8[$0>>0] = $$expand_i1_val63;
      break L1;
      break;
     }
     case 3:  {
      $333 = HEAP8[119969]|0;
      $334 = $333 << 24 >> 24;
      $335 = ($334|0)!=(0);
      $$expand_i1_val65 = $335&1;
      HEAP8[$0>>0] = $$expand_i1_val65;
      break L1;
      break;
     }
     default: {
      break L120;
     }
     }
    }
   } while(0);
   $$expand_i1_val67 = 0;
   HEAP8[$0>>0] = $$expand_i1_val67;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $336 = $$pre_trunc&1;
 STACKTOP = sp;return ($336|0);
}
function __ZL18CountVowelPositionP12PHONEME_LIST($plist) {
 $plist = $plist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $plist;
 $count = 0;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 11|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)==(2);
  if ($7) {
   $8 = $count;
   $9 = (($8) + 1)|0;
   $count = $9;
  }
  $10 = $0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ($13|0)!=(0);
  if ($14) {
   break;
  }
  $15 = $0;
  $16 = ((($15)) + -24|0);
  $0 = $16;
 }
 $17 = $count;
 STACKTOP = sp;return ($17|0);
}
function __ZL17SwitchOnVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($plist,$phdata,$p_prog,$instn_type) {
 $plist = $plist|0;
 $phdata = $phdata|0;
 $p_prog = $p_prog|0;
 $instn_type = $instn_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $prog = 0, $voweltype = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $plist;
 $1 = $phdata;
 $2 = $p_prog;
 $3 = $instn_type;
 $4 = $3;
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 | 2;
  HEAP32[$6>>2] = $8;
  $9 = $0;
  $10 = ((($9)) + 24|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $voweltype = $15;
 } else {
  $16 = $0;
  $17 = ((($16)) + -24|0);
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 13|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $voweltype = $22;
 }
 $23 = $voweltype;
 $24 = (($23) - 28)|0;
 $voweltype = $24;
 $25 = $voweltype;
 $26 = ($25|0)>=(0);
 $27 = $voweltype;
 $28 = ($27|0)<(6);
 $or$cond = $26 & $28;
 if (!($or$cond)) {
  $63 = $2;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 24|0);
  HEAP32[$63>>2] = $65;
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = HEAP32[$29>>2]|0;
 $31 = $voweltype;
 $32 = $31<<1;
 $33 = (($30) + ($32<<1)|0);
 $prog = $33;
 $34 = $prog;
 $35 = ((($34)) + 2|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = $37 & 15;
 $39 = $38 << 16;
 $40 = $prog;
 $41 = ((($40)) + 4|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = (($39) + ($43))|0;
 $45 = $44<<2;
 $46 = $3;
 $47 = $1;
 $48 = ((($47)) + 68|0);
 $49 = (($48) + ($46<<2)|0);
 HEAP32[$49>>2] = $45;
 $50 = $prog;
 $51 = ((($50)) + 2|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 $54 = $53 >> 4;
 $55 = $54 & 255;
 $56 = $55&255;
 $x = $56;
 $57 = $x;
 $58 = $57 << 24 >> 24;
 $59 = $3;
 $60 = $1;
 $61 = ((($60)) + 88|0);
 $62 = (($61) + ($59<<2)|0);
 HEAP32[$62>>2] = $58;
 $63 = $2;
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 24|0);
 HEAP32[$63>>2] = $65;
 STACKTOP = sp;return;
}
function __Z17InterpretPhoneme2iP12PHONEME_DATA($phcode,$phdata) {
 $phcode = $phcode|0;
 $phdata = $phdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $plist = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $plist = sp;
 $0 = $phcode;
 $1 = $phdata;
 dest=$plist; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $ix;
  $5 = (($plist) + (($4*24)|0)|0);
  $6 = ((($5)) + 2|0);
  HEAP8[$6>>0] = 9;
  $7 = HEAP32[(44588)>>2]|0;
  $8 = $ix;
  $9 = (($plist) + (($8*24)|0)|0);
  $10 = ((($9)) + 8|0);
  HEAP32[$10>>2] = $7;
  $11 = $ix;
  $12 = (($11) + 1)|0;
  $ix = $12;
 }
 $13 = $0;
 $14 = $13&255;
 $15 = ((($plist)) + 24|0);
 $16 = ((($15)) + 2|0);
 HEAP8[$16>>0] = $14;
 $17 = $0;
 $18 = (44552 + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($plist)) + 24|0);
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = ((($plist)) + 48|0);
 $23 = ((($22)) + 4|0);
 HEAP16[$23>>1] = 1;
 $24 = ((($plist)) + 24|0);
 $25 = $1;
 __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$24,$25,0);
 STACKTOP = sp;return;
}
function __Z12WordToStringj($word) {
 $word = $word|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $word;
 $ix = 0;
 while(1) {
  $1 = $ix;
  $2 = ($1|0)<(4);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $ix;
  $5 = $4<<3;
  $6 = $3 >>> $5;
  $7 = $6&255;
  $8 = $ix;
  $9 = (119989 + ($8)|0);
  HEAP8[$9>>0] = $7;
  $10 = $ix;
  $11 = (($10) + 1)|0;
  $ix = $11;
 }
 HEAP8[(119993)>>0] = 0;
 STACKTOP = sp;return (119989|0);
}
function __Z14SynthesizeInitv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[19001] = 0;
 HEAP32[19002] = 0;
 HEAP32[19003] = 0;
 HEAP32[19004] = -1;
 HEAP8[(76037)>>0] = 0;
 HEAP8[(76041)>>0] = 0;
 return;
}
function __Z11PauseLengthii($pause,$control) {
 $pause = $pause|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pause;
 $1 = $control;
 $2 = $1;
 $3 = ($2|0)==(0);
 $4 = $0;
 do {
  if ($3) {
   $5 = ($4|0)>=(200);
   $6 = $0;
   if ($5) {
    $7 = HEAP32[(74664)>>2]|0;
    $8 = Math_imul($6, $7)|0;
    $9 = (($8|0) / 256)&-1;
    $len = $9;
    break;
   } else {
    $10 = HEAP32[18665]|0;
    $11 = Math_imul($6, $10)|0;
    $12 = (($11|0) / 256)&-1;
    $len = $12;
    break;
   }
  } else {
   $13 = HEAP32[(74672)>>2]|0;
   $14 = Math_imul($4, $13)|0;
   $15 = (($14|0) / 256)&-1;
   $len = $15;
  }
 } while(0);
 $16 = $len;
 $17 = HEAP32[(74668)>>2]|0;
 $18 = ($16>>>0)<($17>>>0);
 if (!($18)) {
  $20 = $len;
  STACKTOP = sp;return ($20|0);
 }
 $19 = HEAP32[(74668)>>2]|0;
 $len = $19;
 $20 = $len;
 STACKTOP = sp;return ($20|0);
}
function __Z9DoSample3P12PHONEME_DATAii($phdata,$length_mod,$amp) {
 $phdata = $phdata|0;
 $length_mod = $length_mod|0;
 $amp = $amp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp2 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $phdata;
 $1 = $length_mod;
 $2 = $amp;
 __ZL8EndPitchi(1);
 $3 = $2;
 $4 = ($3|0)==(-1);
 if ($4) {
  $5 = $2;
  $amp2 = $5;
 } else {
  $6 = $0;
  $7 = ((($6)) + 88|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $amp2 = $9;
  $10 = $amp2;
  $11 = ($10|0)==(0);
  $$ = $11 ? 100 : $9;
  $amp2 = $$;
  $12 = $amp2;
  $13 = $12<<5;
  $14 = (($13|0) / 100)&-1;
  $amp2 = $14;
 }
 HEAP32[12601] = 0;
 $15 = $0;
 $16 = ((($15)) + 68|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $len = 0;
  HEAP32[19003] = 0;
  $34 = $len;
  STACKTOP = sp;return ($34|0);
 } else {
  $20 = $0;
  $21 = ((($20)) + 68|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = ((($24)) + 4|0);
  $26 = ((($25)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27<<1;
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = $amp2;
  $33 = (__ZL9DoSample2iiiiii($23,2,$28,$30,$31,$32)|0);
  $len = $33;
  HEAP32[19003] = 0;
  $34 = $len;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function __ZL8EndPitchi($voice_break) {
 $voice_break = $voice_break|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $voice_break;
 $1 = HEAP32[19011]|0;
 $2 = ($1|0)>(0);
 $3 = HEAP32[19001]|0;
 $4 = ($3|0)>=(0);
 $or$cond = $2 & $4;
 if ($or$cond) {
  $5 = HEAP32[19001]|0;
  $6 = (80488 + ($5<<4)|0);
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[19011]|0;
   $11 = HEAP32[19001]|0;
   $12 = (80488 + ($11<<4)|0);
   $13 = ((($12)) + 4|0);
   HEAP32[$13>>2] = $10;
  }
  HEAP32[19011] = 0;
 }
 $14 = $0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 HEAP32[19012] = -1;
 HEAP32[19003] = 0;
 $16 = HEAP32[20803]|0;
 HEAP32[19013] = $16;
 __ZL11SmoothSpectv();
 HEAP32[19004] = -1;
 ;HEAP32[50408>>2]=0|0;HEAP32[50408+4>>2]=0|0;HEAP32[50408+8>>2]=0|0;HEAP32[50408+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZL11SmoothSpectv() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $allowed = 0, $diff = 0, $f1 = 0, $f11 = 0, $f2 = 0, $f22 = 0, $frame = 0, $frame1 = 0, $frame2 = 0, $frame_centre = 0, $ix = 0, $len = 0, $modified = 0, $or$cond = 0, $pk = 0, $q = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[19014]|0;
 $1 = HEAP32[19013]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[19004]|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = HEAP32[19004]|0;
  $6 = HEAP32[19014]|0;
  $7 = ($5|0)==($6|0);
  if (!($7)) {
   $9 = HEAP32[19004]|0;
   $10 = (80488 + ($9<<4)|0);
   $q = $10;
   $11 = $q;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
   $frame_centre = $14;
   $15 = HEAP32[19004]|0;
   $16 = (($15) - 1)|0;
   $ix = $16;
   $17 = $frame_centre;
   $frame2 = $17;
   $frame = $17;
   L7: while(1) {
    $18 = $ix;
    $19 = ($18|0)<(0);
    if ($19) {
     $ix = 169;
    }
    $20 = $ix;
    $21 = (80488 + ($20<<4)|0);
    $q = $21;
    $22 = $q;
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(5);
    if ($24) {
     break;
    }
    $25 = $q;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(6);
    if ($27) {
     break;
    }
    $28 = $q;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29>>>0)<=(4);
    L14: do {
     if ($30) {
      $31 = $q;
      $32 = ((($31)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 & 65535;
      $len = $34;
      $35 = $q;
      $36 = ((($35)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $37;
      $frame1 = $38;
      $39 = $frame1;
      $40 = $frame;
      $41 = ($39|0)==($40|0);
      if (!($41)) {
       break L7;
      }
      $42 = $frame2;
      $43 = $42;
      $44 = $q;
      $45 = ((($44)) + 12|0);
      HEAP32[$45>>2] = $43;
      $46 = $frame2;
      $frame1 = $46;
      $47 = $q;
      $48 = ((($47)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = $49;
      $frame2 = $50;
      $frame = $50;
      $modified = 0;
      $51 = $frame;
      $52 = HEAP16[$51>>1]|0;
      $53 = $52 << 16 >> 16;
      $54 = $53 & 16;
      $55 = ($54|0)!=(0);
      if ($55) {
       break L7;
      }
      $56 = $frame;
      $57 = HEAP16[$56>>1]|0;
      $58 = $57 << 16 >> 16;
      $59 = $58 & 32;
      $60 = ($59|0)!=(0);
      if ($60) {
       $61 = $len;
       $62 = ($61*12)|0;
       $63 = (($62|0) / 10)&-1;
       $len = $63;
      }
      $pk = 0;
      while(1) {
       $64 = $pk;
       $65 = ($64|0)<(6);
       if (!($65)) {
        break L14;
       }
       $66 = $frame;
       $67 = HEAP16[$66>>1]|0;
       $68 = $67 << 16 >> 16;
       $69 = $68 & 8;
       $70 = ($69|0)!=(0);
       $71 = $pk;
       $72 = ($71|0)<(3);
       $or$cond = $70 & $72;
       do {
        if (!($or$cond)) {
         $73 = $pk;
         $74 = $frame1;
         $75 = ((($74)) + 2|0);
         $76 = (($75) + ($73<<1)|0);
         $77 = HEAP16[$76>>1]|0;
         $78 = $77 << 16 >> 16;
         $f1 = $78;
         $79 = $pk;
         $80 = $frame;
         $81 = ((($80)) + 2|0);
         $82 = (($81) + ($79<<1)|0);
         $83 = HEAP16[$82>>1]|0;
         $84 = $83 << 16 >> 16;
         $f2 = $84;
         $85 = $f2;
         $86 = $f1;
         $87 = (($85) - ($86))|0;
         $diff = $87;
         $88 = ($87|0)>(0);
         $89 = $f1;
         if ($88) {
          $90 = $89<<1;
          $91 = $f2;
          $92 = (($90) + ($91))|0;
          $allowed = $92;
         } else {
          $93 = $f2;
          $94 = $93<<1;
          $95 = (($89) + ($94))|0;
          $allowed = $95;
         }
         $96 = $allowed;
         $97 = $pk;
         $98 = (77596 + ($97<<2)|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = Math_imul($96, $99)|0;
         $101 = (($100|0) / 3000)&-1;
         $allowed = $101;
         $102 = $allowed;
         $103 = $len;
         $104 = Math_imul($102, $103)|0;
         $105 = (($104|0) / 256)&-1;
         $allowed = $105;
         $106 = $diff;
         $107 = $allowed;
         $108 = ($106|0)>($107|0);
         if ($108) {
          $109 = $modified;
          $110 = ($109|0)==(0);
          if ($110) {
           $111 = $frame;
           $112 = (__ZL9CopyFrameP7frame_ti($111,0)|0);
           $frame2 = $112;
           $modified = 1;
          }
          $113 = $pk;
          $114 = $frame1;
          $115 = ((($114)) + 2|0);
          $116 = (($115) + ($113<<1)|0);
          $117 = HEAP16[$116>>1]|0;
          $118 = $117 << 16 >> 16;
          $119 = $allowed;
          $120 = (($118) + ($119))|0;
          $121 = $120&65535;
          $122 = $pk;
          $123 = $frame2;
          $124 = ((($123)) + 2|0);
          $125 = (($124) + ($122<<1)|0);
          HEAP16[$125>>1] = $121;
          $126 = $frame2;
          $127 = $126;
          $128 = $q;
          $129 = ((($128)) + 8|0);
          HEAP32[$129>>2] = $127;
          break;
         }
         $130 = $diff;
         $131 = $allowed;
         $132 = (0 - ($131))|0;
         $133 = ($130|0)<($132|0);
         if ($133) {
          $134 = $modified;
          $135 = ($134|0)==(0);
          if ($135) {
           $136 = $frame;
           $137 = (__ZL9CopyFrameP7frame_ti($136,0)|0);
           $frame2 = $137;
           $modified = 1;
          }
          $138 = $pk;
          $139 = $frame1;
          $140 = ((($139)) + 2|0);
          $141 = (($140) + ($138<<1)|0);
          $142 = HEAP16[$141>>1]|0;
          $143 = $142 << 16 >> 16;
          $144 = $allowed;
          $145 = (($143) - ($144))|0;
          $146 = $145&65535;
          $147 = $pk;
          $148 = $frame2;
          $149 = ((($148)) + 2|0);
          $150 = (($149) + ($147<<1)|0);
          HEAP16[$150>>1] = $146;
          $151 = $frame2;
          $152 = $151;
          $153 = $q;
          $154 = ((($153)) + 8|0);
          HEAP32[$154>>2] = $152;
         }
        }
       } while(0);
       $155 = $pk;
       $156 = (($155) + 1)|0;
       $pk = $156;
      }
     }
    } while(0);
    $157 = $ix;
    $158 = HEAP32[19014]|0;
    $159 = ($157|0)==($158|0);
    if ($159) {
     break;
    }
    $160 = $ix;
    $161 = (($160) + -1)|0;
    $ix = $161;
   }
   $162 = HEAP32[19004]|0;
   $ix = $162;
   $frame = 0;
   L44: while(1) {
    $163 = $ix;
    $164 = (80488 + ($163<<4)|0);
    $q = $164;
    $165 = $q;
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==(5);
    if ($167) {
     break;
    }
    $168 = $q;
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)==(6);
    if ($170) {
     break;
    }
    $171 = $q;
    $172 = HEAP32[$171>>2]|0;
    $173 = ($172>>>0)<=(4);
    L48: do {
     if ($173) {
      $174 = $q;
      $175 = ((($174)) + 4|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $176 & 65535;
      $len = $177;
      $178 = $q;
      $179 = ((($178)) + 8|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $180;
      $frame1 = $181;
      $182 = $frame;
      $183 = ($182|0)!=(0|0);
      if ($183) {
       $184 = $frame1;
       $185 = $frame;
       $186 = ($184|0)==($185|0);
       if (!($186)) {
        break L44;
       }
       $187 = $frame2;
       $188 = $187;
       $189 = $q;
       $190 = ((($189)) + 8|0);
       HEAP32[$190>>2] = $188;
       $191 = $frame2;
       $frame1 = $191;
      }
      $192 = $q;
      $193 = ((($192)) + 12|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = $194;
      $frame2 = $195;
      $frame = $195;
      $modified = 0;
      $196 = $frame1;
      $197 = HEAP16[$196>>1]|0;
      $198 = $197 << 16 >> 16;
      $199 = $198 & 16;
      $200 = ($199|0)!=(0);
      if ($200) {
       break L44;
      }
      $201 = $frame1;
      $202 = HEAP16[$201>>1]|0;
      $203 = $202 << 16 >> 16;
      $204 = $203 & 32;
      $205 = ($204|0)!=(0);
      if ($205) {
       $206 = $len;
       $207 = ($206*6)|0;
       $208 = (($207|0) / 5)&-1;
       $len = $208;
      }
      $pk = 0;
      while(1) {
       $209 = $pk;
       $210 = ($209|0)<(6);
       if (!($210)) {
        break L48;
       }
       $211 = $pk;
       $212 = $frame1;
       $213 = ((($212)) + 2|0);
       $214 = (($213) + ($211<<1)|0);
       $215 = HEAP16[$214>>1]|0;
       $216 = $215 << 16 >> 16;
       $f11 = $216;
       $217 = $pk;
       $218 = $frame;
       $219 = ((($218)) + 2|0);
       $220 = (($219) + ($217<<1)|0);
       $221 = HEAP16[$220>>1]|0;
       $222 = $221 << 16 >> 16;
       $f22 = $222;
       $223 = $f22;
       $224 = $f11;
       $225 = (($223) - ($224))|0;
       $diff = $225;
       $226 = ($225|0)>(0);
       $227 = $f11;
       if ($226) {
        $228 = $227<<1;
        $229 = $f22;
        $230 = (($228) + ($229))|0;
        $allowed = $230;
       } else {
        $231 = $f22;
        $232 = $231<<1;
        $233 = (($227) + ($232))|0;
        $allowed = $233;
       }
       $234 = $allowed;
       $235 = $pk;
       $236 = (77596 + ($235<<2)|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = Math_imul($234, $237)|0;
       $239 = (($238|0) / 3000)&-1;
       $allowed = $239;
       $240 = $allowed;
       $241 = $len;
       $242 = Math_imul($240, $241)|0;
       $243 = (($242|0) / 256)&-1;
       $allowed = $243;
       $244 = $diff;
       $245 = $allowed;
       $246 = ($244|0)>($245|0);
       if ($246) {
        $247 = $modified;
        $248 = ($247|0)==(0);
        if ($248) {
         $249 = $frame;
         $250 = (__ZL9CopyFrameP7frame_ti($249,0)|0);
         $frame2 = $250;
         $modified = 1;
        }
        $251 = $pk;
        $252 = $frame1;
        $253 = ((($252)) + 2|0);
        $254 = (($253) + ($251<<1)|0);
        $255 = HEAP16[$254>>1]|0;
        $256 = $255 << 16 >> 16;
        $257 = $allowed;
        $258 = (($256) + ($257))|0;
        $259 = $258&65535;
        $260 = $pk;
        $261 = $frame2;
        $262 = ((($261)) + 2|0);
        $263 = (($262) + ($260<<1)|0);
        HEAP16[$263>>1] = $259;
        $264 = $frame2;
        $265 = $264;
        $266 = $q;
        $267 = ((($266)) + 12|0);
        HEAP32[$267>>2] = $265;
       } else {
        $268 = $diff;
        $269 = $allowed;
        $270 = (0 - ($269))|0;
        $271 = ($268|0)<($270|0);
        if ($271) {
         $272 = $modified;
         $273 = ($272|0)==(0);
         if ($273) {
          $274 = $frame;
          $275 = (__ZL9CopyFrameP7frame_ti($274,0)|0);
          $frame2 = $275;
          $modified = 1;
         }
         $276 = $pk;
         $277 = $frame1;
         $278 = ((($277)) + 2|0);
         $279 = (($278) + ($276<<1)|0);
         $280 = HEAP16[$279>>1]|0;
         $281 = $280 << 16 >> 16;
         $282 = $allowed;
         $283 = (($281) - ($282))|0;
         $284 = $283&65535;
         $285 = $pk;
         $286 = $frame2;
         $287 = ((($286)) + 2|0);
         $288 = (($287) + ($285<<1)|0);
         HEAP16[$288>>1] = $284;
         $289 = $frame2;
         $290 = $289;
         $291 = $q;
         $292 = ((($291)) + 12|0);
         HEAP32[$292>>2] = $290;
        }
       }
       $293 = $pk;
       $294 = (($293) + 1)|0;
       $pk = $294;
      }
     }
    } while(0);
    $295 = $ix;
    $296 = (($295) + 1)|0;
    $ix = $296;
    $297 = $ix;
    $298 = ($297|0)>=(170);
    $$ = $298 ? 0 : $296;
    $ix = $$;
    $299 = $ix;
    $300 = HEAP32[19013]|0;
    $301 = ($299|0)==($300|0);
    if ($301) {
     break;
    }
   }
   $302 = HEAP32[19013]|0;
   HEAP32[19014] = $302;
   STACKTOP = sp;return;
  }
 }
 $8 = HEAP32[19013]|0;
 HEAP32[19014] = $8;
 STACKTOP = sp;return;
}
function __ZL9CopyFrameP7frame_ti($frame1,$copy) {
 $frame1 = $frame1|0;
 $copy = $copy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frame2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $frame1;
 $2 = $copy;
 $3 = $2;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $1;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = $7 & 32768;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $1;
   $0 = $10;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $11 = (__ZL10AllocFramev()|0);
 $frame2 = $11;
 $12 = $frame2;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $frame2;
  $15 = $1;
  dest=$14; src=$15; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  $16 = $frame2;
  $17 = ((($16)) + 16|0);
  HEAP8[$17>>0] = 0;
  $18 = $frame2;
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = $20 | 32768;
  $22 = $21&65535;
  HEAP16[$18>>1] = $22;
 }
 $23 = $frame2;
 $0 = $23;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZL10AllocFramev() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19015]|0;
 $1 = (($0) + 1)|0;
 HEAP32[19015] = $1;
 $2 = HEAP32[19015]|0;
 $3 = ($2|0)>=(170);
 $$ = $3 ? 0 : $1;
 HEAP32[19015] = $$;
 $4 = HEAP32[19015]|0;
 $5 = (89036 + ($4<<6)|0);
 return ($5|0);
}
function __ZL9DoSample2iiiiii($index,$which,$std_length,$control,$length_mod,$amp) {
 $index = $index|0;
 $which = $which|0;
 $std_length = $std_length|0;
 $control = $control|0;
 $length_mod = $length_mod|0;
 $amp = $amp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len4 = 0, $length = 0, $min_length = 0, $p = 0, $q = 0, $wav_length = 0, $wav_scale = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $2 = $which;
 $3 = $std_length;
 $4 = $control;
 $5 = $length_mod;
 $6 = $amp;
 $7 = $1;
 $8 = $7 & 8388607;
 $1 = $8;
 $9 = $1;
 $10 = HEAP32[11396]|0;
 $11 = (($10) + ($9)|0);
 $p = $11;
 $12 = $p;
 $13 = ((($12)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $wav_scale = $15;
 $16 = $p;
 $17 = ((($16)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19<<8;
 $wav_length = $20;
 $21 = $p;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $wav_length;
 $25 = (($24) + ($23))|0;
 $wav_length = $25;
 $26 = $wav_length;
 $27 = ($26|0)==(0);
 if ($27) {
  $0 = 0;
  $207 = $0;
  STACKTOP = sp;return ($207|0);
 }
 $28 = HEAP32[(74684)>>2]|0;
 $min_length = $28;
 $29 = $wav_scale;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $min_length;
  $32 = $31<<1;
  $min_length = $32;
 }
 $33 = $3;
 $34 = ($33|0)>(0);
 if ($34) {
  $35 = $3;
  $36 = HEAP32[20097]|0;
  $37 = Math_imul($35, $36)|0;
  $38 = (($37|0) / 1000)&-1;
  $3 = $38;
  $39 = $wav_scale;
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = $3;
   $42 = $41<<1;
   $3 = $42;
  }
  $43 = $min_length;
  $44 = $3;
  $45 = Math_imul($43, $44)|0;
  $46 = $wav_length;
  $47 = (($45|0) / ($46|0))&-1;
  $x = $47;
  $48 = $x;
  $49 = $min_length;
  $50 = ($48|0)>($49|0);
  if ($50) {
   $51 = $x;
   $min_length = $51;
  }
 } else {
  $52 = $wav_length;
  $3 = $52;
 }
 $53 = $5;
 $54 = ($53|0)>(0);
 if ($54) {
  $55 = $3;
  $56 = $5;
  $57 = Math_imul($55, $56)|0;
  $58 = (($57|0) / 256)&-1;
  $3 = $58;
 }
 $59 = $3;
 $60 = HEAP32[(74672)>>2]|0;
 $61 = Math_imul($59, $60)|0;
 $62 = (($61|0) / 256)&-1;
 $length = $62;
 $63 = $4;
 $64 = $63 & 4;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $length;
  $67 = $3;
  $68 = ($66|0)>($67|0);
  if ($68) {
   $69 = $3;
   $length = $69;
  }
 }
 $70 = $length;
 $71 = $min_length;
 $72 = ($70|0)<($71|0);
 if ($72) {
  $73 = $min_length;
  $length = $73;
 }
 $74 = $wav_scale;
 $75 = ($74|0)==(0);
 if ($75) {
  $76 = $length;
  $77 = (($76|0) / 2)&-1;
  $length = $77;
  $78 = $wav_length;
  $79 = (($78|0) / 2)&-1;
  $wav_length = $79;
 }
 $80 = $6;
 $81 = ($80|0)<(0);
 if ($81) {
  $82 = $length;
  $0 = $82;
  $207 = $0;
  STACKTOP = sp;return ($207|0);
 }
 $83 = $wav_length;
 $84 = (($83|0) / 4)&-1;
 $len4 = $84;
 $85 = $1;
 $86 = (($85) + 4)|0;
 $1 = $86;
 $87 = $2;
 $88 = $87 & 256;
 $89 = ($88|0)!=(0);
 if ($89) {
  $90 = HEAP32[20803]|0;
  HEAP32[19012] = $90;
  $91 = HEAP32[20803]|0;
  $92 = (80488 + ($91<<4)|0);
  $q = $92;
  $93 = $q;
  HEAP32[$93>>2] = 7;
  $94 = $length;
  $95 = $wav_length;
  $96 = $95 << 16;
  $97 = $94 | $96;
  $98 = $q;
  $99 = ((($98)) + 4|0);
  HEAP32[$99>>2] = $97;
  $100 = $1;
  $101 = HEAP32[11396]|0;
  $102 = (($101) + ($100)|0);
  $103 = $102;
  $104 = $q;
  $105 = ((($104)) + 8|0);
  HEAP32[$105>>2] = $103;
  $106 = $wav_scale;
  $107 = $6;
  $108 = $107 << 8;
  $109 = (($106) + ($108))|0;
  $110 = $q;
  $111 = ((($110)) + 12|0);
  HEAP32[$111>>2] = $109;
  __Z8WcmdqIncv();
  $112 = $length;
  $0 = $112;
  $207 = $0;
  STACKTOP = sp;return ($207|0);
 }
 $113 = $length;
 $114 = $wav_length;
 $115 = ($113|0)>($114|0);
 if ($115) {
  $116 = $len4;
  $117 = ($116*3)|0;
  $x = $117;
  $118 = $x;
  $119 = $length;
  $120 = (($119) - ($118))|0;
  $length = $120;
 } else {
  $121 = $length;
  $x = $121;
  $length = 0;
 }
 $122 = HEAP32[20803]|0;
 HEAP32[19012] = $122;
 $123 = HEAP32[20803]|0;
 $124 = (80488 + ($123<<4)|0);
 $q = $124;
 $125 = $q;
 HEAP32[$125>>2] = 6;
 $126 = $x;
 $127 = $q;
 $128 = ((($127)) + 4|0);
 HEAP32[$128>>2] = $126;
 $129 = $1;
 $130 = HEAP32[11396]|0;
 $131 = (($130) + ($129)|0);
 $132 = $131;
 $133 = $q;
 $134 = ((($133)) + 8|0);
 HEAP32[$134>>2] = $132;
 $135 = $wav_scale;
 $136 = $6;
 $137 = $136 << 8;
 $138 = (($135) + ($137))|0;
 $139 = $q;
 $140 = ((($139)) + 12|0);
 HEAP32[$140>>2] = $138;
 __Z8WcmdqIncv();
 while(1) {
  $141 = $length;
  $142 = $len4;
  $143 = ($142*3)|0;
  $144 = ($141|0)>($143|0);
  if (!($144)) {
   break;
  }
  $145 = $len4;
  $x = $145;
  $146 = $wav_scale;
  $147 = ($146|0)==(0);
  if ($147) {
   $148 = $x;
   $149 = $148<<1;
   $x = $149;
  }
  $150 = HEAP32[20803]|0;
  HEAP32[19012] = $150;
  $151 = HEAP32[20803]|0;
  $152 = (80488 + ($151<<4)|0);
  $q = $152;
  $153 = $q;
  HEAP32[$153>>2] = 6;
  $154 = $len4;
  $155 = $154<<1;
  $156 = $q;
  $157 = ((($156)) + 4|0);
  HEAP32[$157>>2] = $155;
  $158 = $1;
  $159 = $x;
  $160 = (($158) + ($159))|0;
  $161 = HEAP32[11396]|0;
  $162 = (($161) + ($160)|0);
  $163 = $162;
  $164 = $q;
  $165 = ((($164)) + 8|0);
  HEAP32[$165>>2] = $163;
  $166 = $wav_scale;
  $167 = $6;
  $168 = $167 << 8;
  $169 = (($166) + ($168))|0;
  $170 = $q;
  $171 = ((($170)) + 12|0);
  HEAP32[$171>>2] = $169;
  __Z8WcmdqIncv();
  $172 = $len4;
  $173 = $172<<1;
  $174 = $length;
  $175 = (($174) - ($173))|0;
  $length = $175;
 }
 $176 = $length;
 $177 = ($176|0)>(0);
 if ($177) {
  $178 = $wav_length;
  $179 = $length;
  $180 = (($178) - ($179))|0;
  $x = $180;
  $181 = $wav_scale;
  $182 = ($181|0)==(0);
  if ($182) {
   $183 = $x;
   $184 = $183<<1;
   $x = $184;
  }
  $185 = HEAP32[20803]|0;
  HEAP32[19012] = $185;
  $186 = HEAP32[20803]|0;
  $187 = (80488 + ($186<<4)|0);
  $q = $187;
  $188 = $q;
  HEAP32[$188>>2] = 6;
  $189 = $length;
  $190 = $q;
  $191 = ((($190)) + 4|0);
  HEAP32[$191>>2] = $189;
  $192 = $1;
  $193 = $x;
  $194 = (($192) + ($193))|0;
  $195 = HEAP32[11396]|0;
  $196 = (($195) + ($194)|0);
  $197 = $196;
  $198 = $q;
  $199 = ((($198)) + 8|0);
  HEAP32[$199>>2] = $197;
  $200 = $wav_scale;
  $201 = $6;
  $202 = $201 << 8;
  $203 = (($200) + ($202))|0;
  $204 = $q;
  $205 = ((($204)) + 12|0);
  HEAP32[$205>>2] = $203;
  __Z8WcmdqIncv();
 }
 $206 = $length;
 $0 = $206;
 $207 = $0;
 STACKTOP = sp;return ($207|0);
}
function __Z18FormantTransition2P10frameref_tPijjP11PHONEME_TABi($seq,$n_frames,$data1,$data2,$other_ph,$which) {
 $seq = $seq|0;
 $n_frames = $n_frames|0;
 $data1 = $data1|0;
 $data2 = $data2|0;
 $other_ph = $other_ph|0;
 $which = $which|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f1 = 0, $f2 = 0, $f2_max = 0, $f2_min = 0, $f3_adj = 0, $f3_amp = 0, $flags = 0, $formant = 0, $fr = 0, $ix = 0, $len = 0, $next_rms = 0, $or$cond = 0, $or$cond3 = 0, $rms = 0, $vcolour = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $seq;
 $2 = $n_frames;
 $3 = $data1;
 $4 = $data2;
 $5 = $other_ph;
 $6 = $which;
 $fr = 0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(2);
 if ($9) {
  $0 = 0;
  $263 = $0;
  STACKTOP = sp;return ($263|0);
 }
 $10 = $3;
 $11 = $10 & 63;
 $12 = $11<<1;
 $len = $12;
 $13 = $3;
 $14 = $13 >>> 6;
 $15 = $14 & 63;
 $rms = $15;
 $16 = $3;
 $17 = $16 >>> 12;
 $flags = $17;
 $18 = $4;
 $19 = $18 & 63;
 $20 = ($19*50)|0;
 $f2 = $20;
 $21 = $4;
 $22 = $21 >>> 6;
 $23 = $22 & 31;
 $24 = (($23) - 15)|0;
 $25 = ($24*50)|0;
 $f2_min = $25;
 $26 = $4;
 $27 = $26 >>> 11;
 $28 = $27 & 31;
 $29 = (($28) - 15)|0;
 $30 = ($29*50)|0;
 $f2_max = $30;
 $31 = $4;
 $32 = $31 >>> 16;
 $33 = $32 & 31;
 $34 = (($33) - 15)|0;
 $35 = ($34*50)|0;
 $f3_adj = $35;
 $36 = $4;
 $37 = $36 >>> 21;
 $38 = $37 & 31;
 $39 = $38<<3;
 $f3_amp = $39;
 $40 = $4;
 $41 = $40 >>> 26;
 $42 = $41 & 7;
 $f1 = $42;
 $43 = $4;
 $44 = $43 >>> 29;
 $vcolour = $44;
 $45 = $5;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $5;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(63);
  if ($49) {
   $50 = $flags;
   $51 = $50 | 8;
   $flags = $51;
  }
 }
 $52 = $6;
 $53 = ($52|0)==(1);
 L9: do {
  if ($53) {
   $54 = $1;
   $55 = ((($54)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (__ZL9CopyFrameP7frame_ti($56,0)|0);
   $fr = $57;
   $58 = $fr;
   $59 = $1;
   $60 = ((($59)) + 4|0);
   HEAP32[$60>>2] = $58;
   $61 = $1;
   HEAP16[$61>>1] = 50;
   $62 = $len;
   $63 = ($62|0)>(0);
   if ($63) {
    $64 = $len;
    $65 = $64&65535;
    $66 = $1;
    HEAP16[$66>>1] = $65;
   }
   $67 = $1;
   $68 = ((($67)) + 2|0);
   $69 = HEAP16[$68>>1]|0;
   $70 = $69 << 16 >> 16;
   $71 = $70 | 16384;
   $72 = $71&65535;
   HEAP16[$68>>1] = $72;
   $73 = $fr;
   $74 = HEAP16[$73>>1]|0;
   $75 = $74 << 16 >> 16;
   $76 = $75 | 16384;
   $77 = $76&65535;
   HEAP16[$73>>1] = $77;
   $78 = $1;
   $79 = ((($78)) + 8|0);
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($81)) + 17|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $next_rms = $84;
   $85 = HEAP32[1124]|0;
   $86 = ((($85)) + 132|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $1;
    $90 = ((($89)) + 8|0);
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 39|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = (($95) - 4)|0;
    $97 = $96&255;
    $98 = $fr;
    $99 = ((($98)) + 39|0);
    HEAP8[$99>>0] = $97;
   }
   $100 = $f2;
   $101 = ($100|0)!=(0);
   do {
    if ($101) {
     $102 = $rms;
     $103 = $102 & 32;
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = $fr;
      $106 = $next_rms;
      $107 = $rms;
      $108 = $107 & 31;
      $109 = Math_imul($106, $108)|0;
      $110 = (($109|0) / 30)&-1;
      __ZL13set_frame_rmsP7frame_ti($105,$110);
     }
     $111 = $fr;
     $112 = $f2;
     $113 = $f2_min;
     $114 = $f2_max;
     $115 = $f1;
     $116 = $f3_adj;
     $117 = $f3_amp;
     $118 = $flags;
     __ZL14AdjustFormantsP7frame_tiiiiiii($111,$112,$113,$114,$115,$116,$117,$118);
     $119 = $rms;
     $120 = $119 & 32;
     $121 = ($120|0)==(0);
     if ($121) {
      $122 = $fr;
      $123 = $rms;
      $124 = $123<<1;
      __ZL13set_frame_rmsP7frame_ti($122,$124);
     }
    } else {
     $125 = $flags;
     $126 = $125 & 8;
     $127 = ($126|0)!=(0);
     $128 = $fr;
     if ($127) {
      $129 = $next_rms;
      $130 = ($129*24)|0;
      $131 = (($130|0) / 32)&-1;
      __ZL13set_frame_rmsP7frame_ti($128,$131);
      break;
     } else {
      __ZL13set_frame_rmsP7frame_ti($128,28);
      break;
     }
    }
   } while(0);
   $132 = $flags;
   $133 = $132 & 8;
   $134 = ($133|0)!=(0);
   if ($134) {
    $135 = $fr;
    $136 = (__ZL14VowelClosenessP7frame_t($135)|0);
    $137 = $136 << 8;
    $138 = (2048 + ($137))|0;
    HEAP32[19016] = $138;
   }
  } else {
   $139 = $rms;
   $140 = $139<<1;
   $rms = $140;
   $141 = $f2;
   $142 = ($141|0)!=(0);
   $143 = $flags;
   $144 = ($143|0)!=(0);
   $or$cond = $142 | $144;
   if ($or$cond) {
    $145 = $flags;
    $146 = $145 & 8;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = $2;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($149) - 1)|0;
     $151 = $1;
     $152 = (($151) + ($150<<3)|0);
     $153 = ((($152)) + 4|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (__ZL9CopyFrameP7frame_ti($154,0)|0);
     $fr = $155;
     $156 = $fr;
     $157 = $2;
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) - 1)|0;
     $160 = $1;
     $161 = (($160) + ($159<<3)|0);
     $162 = ((($161)) + 4|0);
     HEAP32[$162>>2] = $156;
     $rms = 35;
     $163 = $fr;
     $164 = (__ZL14VowelClosenessP7frame_t($163)|0);
     $165 = $164 << 8;
     $166 = (1024 + ($165))|0;
     HEAP32[19016] = $166;
    } else {
     $167 = $1;
     $168 = $2;
     $169 = HEAP32[$168>>2]|0;
     $170 = (($169) + 1)|0;
     HEAP32[$168>>2] = $170;
     $171 = $len;
     $172 = (__ZL18DuplicateLastFrameP10frameref_tii($167,$169,$171)|0);
     $fr = $172;
     $173 = $len;
     $174 = ($173|0)>(36);
     if ($174) {
      $175 = $len;
      $176 = (($175) - 36)|0;
      $177 = HEAP32[12601]|0;
      $178 = (($177) + ($176))|0;
      HEAP32[12601] = $178;
     }
     $179 = $f2;
     $180 = ($179|0)!=(0);
     if ($180) {
      $181 = $fr;
      $182 = $f2;
      $183 = $f2_min;
      $184 = $f2_max;
      $185 = $f1;
      $186 = $f3_adj;
      $187 = $f3_amp;
      $188 = $flags;
      __ZL14AdjustFormantsP7frame_tiiiiiii($181,$182,$183,$184,$185,$186,$187,$188);
     }
    }
    $189 = $fr;
    $190 = $rms;
    __ZL13set_frame_rmsP7frame_ti($189,$190);
    $191 = $vcolour;
    $192 = ($191|0)>(0);
    $193 = $vcolour;
    $194 = ($193|0)<=(2);
    $or$cond3 = $192 & $194;
    if ($or$cond3) {
     $ix = 0;
     while(1) {
      $195 = $ix;
      $196 = $2;
      $197 = HEAP32[$196>>2]|0;
      $198 = ($195|0)<($197|0);
      if (!($198)) {
       break L9;
      }
      $199 = $ix;
      $200 = $1;
      $201 = (($200) + ($199<<3)|0);
      $202 = ((($201)) + 4|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = (__ZL9CopyFrameP7frame_ti($203,0)|0);
      $fr = $204;
      $205 = $fr;
      $206 = $ix;
      $207 = $1;
      $208 = (($207) + ($206<<3)|0);
      $209 = ((($208)) + 4|0);
      HEAP32[$209>>2] = $205;
      $formant = 1;
      while(1) {
       $210 = $formant;
       $211 = ($210|0)<=(5);
       if (!($211)) {
        break;
       }
       $212 = $formant;
       $213 = $fr;
       $214 = ((($213)) + 2|0);
       $215 = (($214) + ($212<<1)|0);
       $216 = HEAP16[$215>>1]|0;
       $217 = $216 << 16 >> 16;
       $218 = $formant;
       $219 = (($218) - 1)|0;
       $220 = $vcolour;
       $221 = (($220) - 1)|0;
       $222 = (7532 + (($221*10)|0)|0);
       $223 = (($222) + ($219<<1)|0);
       $224 = HEAP16[$223>>1]|0;
       $225 = $224 << 16 >> 16;
       $226 = Math_imul($217, $225)|0;
       $x = $226;
       $227 = $x;
       $228 = (($227|0) / 256)&-1;
       $229 = $228&65535;
       $230 = $formant;
       $231 = $fr;
       $232 = ((($231)) + 2|0);
       $233 = (($232) + ($230<<1)|0);
       HEAP16[$233>>1] = $229;
       $234 = $formant;
       $235 = (($234) + 1)|0;
       $formant = $235;
      }
      $236 = $ix;
      $237 = (($236) + 1)|0;
      $ix = $237;
     }
    }
   }
  }
 } while(0);
 $238 = $fr;
 $239 = ($238|0)!=(0|0);
 if ($239) {
  $240 = $flags;
  $241 = $240 & 4;
  $242 = ($241|0)!=(0);
  if ($242) {
   $243 = $fr;
   $244 = HEAP16[$243>>1]|0;
   $245 = $244 << 16 >> 16;
   $246 = $245 | 32;
   $247 = $246&65535;
   HEAP16[$243>>1] = $247;
  }
  $248 = $flags;
  $249 = $248 & 2;
  $250 = ($249|0)!=(0);
  if ($250) {
   $251 = $fr;
   $252 = HEAP16[$251>>1]|0;
   $253 = $252 << 16 >> 16;
   $254 = $253 | 16;
   $255 = $254&65535;
   HEAP16[$251>>1] = $255;
  }
 }
 $256 = $flags;
 $257 = $256 & 64;
 $258 = ($257|0)!=(0);
 if ($258) {
  __ZL7DoPauseii(20,0);
 }
 $259 = $flags;
 $260 = $259 & 16;
 $261 = ($260|0)!=(0);
 if ($261) {
  $262 = $len;
  $0 = $262;
  $263 = $0;
  STACKTOP = sp;return ($263|0);
 } else {
  $0 = 0;
  $263 = $0;
  STACKTOP = sp;return ($263|0);
 }
 return (0)|0;
}
function __ZL13set_frame_rmsP7frame_ti($fr,$new_rms) {
 $fr = $fr|0;
 $new_rms = $new_rms|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $ix = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $new_rms;
 $2 = HEAP32[1124]|0;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = ($6|0)==(-1);
  if (!($7)) {
   STACKTOP = sp;return;
  }
  $8 = $0;
  $9 = ((($8)) + 39|0);
  HEAP8[$9>>0] = 50;
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = ((($10)) + 17|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $1;
 $16 = $15<<6;
 $17 = $0;
 $18 = ((($17)) + 17|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($16|0) / ($20|0))&-1;
 $x = $21;
 $22 = $x;
 $23 = ($22|0)>=(200);
 $$ = $23 ? 199 : $21;
 $x = $$;
 $24 = $x;
 $25 = (7132 + ($24<<1)|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 $x = $27;
 $ix = 0;
 while(1) {
  $28 = $ix;
  $29 = ($28|0)<(8);
  if (!($29)) {
   break;
  }
  $30 = $ix;
  $31 = $0;
  $32 = ((($31)) + 18|0);
  $33 = (($32) + ($30)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $x;
  $37 = Math_imul($35, $36)|0;
  $h = $37;
  $38 = $h;
  $39 = (($38|0) / 512)&-1;
  $40 = $39&255;
  $41 = $ix;
  $42 = $0;
  $43 = ((($42)) + 18|0);
  $44 = (($43) + ($41)|0);
  HEAP8[$44>>0] = $40;
  $45 = $ix;
  $46 = (($45) + 1)|0;
  $ix = $46;
 }
 STACKTOP = sp;return;
}
function __ZL14AdjustFormantsP7frame_tiiiiiii($fr,$target,$min,$max,$f1_adj,$f3_adj,$hf_reduce,$flags) {
 $fr = $fr|0;
 $target = $target|0;
 $min = $min|0;
 $max = $max|0;
 $f1_adj = $f1_adj|0;
 $f3_adj = $f3_adj|0;
 $hf_reduce = $hf_reduce|0;
 $flags = $flags|0;
 var $$ = 0, $$$ = 0, $$$1 = 0, $$$2 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $target;
 $2 = $min;
 $3 = $max;
 $4 = $f1_adj;
 $5 = $f3_adj;
 $6 = $hf_reduce;
 $7 = $flags;
 $8 = $1;
 $9 = HEAP32[1124]|0;
 $10 = ((($9)) + 116|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $13 = (($12|0) / 256)&-1;
 $1 = $13;
 $14 = $1;
 $15 = $0;
 $16 = ((($15)) + 2|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($14) - ($19))|0;
 $21 = (($20|0) / 2)&-1;
 $x = $21;
 $22 = $x;
 $23 = $3;
 $24 = ($22|0)>($23|0);
 if ($24) {
  $25 = $3;
  $x = $25;
 }
 $26 = $x;
 $27 = $2;
 $28 = ($26|0)<($27|0);
 if ($28) {
  $29 = $2;
  $x = $29;
 }
 $30 = $x;
 $31 = $0;
 $32 = ((($31)) + 2|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = (($35) + ($30))|0;
 $37 = $36&65535;
 HEAP16[$33>>1] = $37;
 $38 = $5;
 $39 = $0;
 $40 = ((($39)) + 2|0);
 $41 = ((($40)) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42 << 16 >> 16;
 $44 = (($43) + ($38))|0;
 $45 = $44&65535;
 HEAP16[$41>>1] = $45;
 $46 = $7;
 $47 = $46 & 32;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $5;
  $50 = (0 - ($49))|0;
  $5 = $50;
 }
 $51 = $5;
 $52 = $0;
 $53 = ((($52)) + 2|0);
 $54 = ((($53)) + 8|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55 << 16 >> 16;
 $57 = (($56) + ($51))|0;
 $58 = $57&65535;
 HEAP16[$54>>1] = $58;
 $59 = $5;
 $60 = $0;
 $61 = ((($60)) + 2|0);
 $62 = ((($61)) + 10|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63 << 16 >> 16;
 $65 = (($64) + ($59))|0;
 $66 = $65&65535;
 HEAP16[$62>>1] = $66;
 $67 = $4;
 $68 = ($67|0)==(1);
 if ($68) {
  $69 = $0;
  $70 = ((($69)) + 2|0);
  $71 = ((($70)) + 2|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = (235 - ($73))|0;
  $x = $74;
  $75 = $x;
  $76 = ($75|0)<(-100);
  $$ = $76 ? -100 : $74;
  $x = $$;
  $77 = $x;
  $78 = ($77|0)>(-60);
  $$$ = $78 ? -60 : $$;
  $x = $$$;
  $79 = $x;
  $80 = $0;
  $81 = ((($80)) + 2|0);
  $82 = ((($81)) + 2|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = (($84) + ($79))|0;
  $86 = $85&65535;
  HEAP16[$82>>1] = $86;
 }
 $87 = $4;
 $88 = ($87|0)==(2);
 if ($88) {
  $89 = $0;
  $90 = ((($89)) + 2|0);
  $91 = ((($90)) + 2|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = (235 - ($93))|0;
  $x = $94;
  $95 = $x;
  $96 = ($95|0)<(-300);
  $$1 = $96 ? -300 : $94;
  $x = $$1;
  $97 = $x;
  $98 = ($97|0)>(-150);
  $$$1 = $98 ? -150 : $$1;
  $x = $$$1;
  $99 = $x;
  $100 = $0;
  $101 = ((($100)) + 2|0);
  $102 = ((($101)) + 2|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = (($104) + ($99))|0;
  $106 = $105&65535;
  HEAP16[$102>>1] = $106;
  $107 = $x;
  $108 = $0;
  $109 = ((($108)) + 2|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110 << 16 >> 16;
  $112 = (($111) + ($107))|0;
  $113 = $112&65535;
  HEAP16[$109>>1] = $113;
 }
 $114 = $4;
 $115 = ($114|0)==(3);
 if (!($115)) {
  $141 = $0;
  $142 = $6;
  __ZL18formants_reduce_hfP7frame_ti($141,$142);
  STACKTOP = sp;return;
 }
 $116 = $0;
 $117 = ((($116)) + 2|0);
 $118 = ((($117)) + 2|0);
 $119 = HEAP16[$118>>1]|0;
 $120 = $119 << 16 >> 16;
 $121 = (100 - ($120))|0;
 $x = $121;
 $122 = $x;
 $123 = ($122|0)<(-400);
 $$2 = $123 ? -400 : $121;
 $x = $$2;
 $124 = $x;
 $125 = ($124|0)>(-300);
 $$$2 = $125 ? -400 : $$2;
 $x = $$$2;
 $126 = $x;
 $127 = $0;
 $128 = ((($127)) + 2|0);
 $129 = ((($128)) + 2|0);
 $130 = HEAP16[$129>>1]|0;
 $131 = $130 << 16 >> 16;
 $132 = (($131) + ($126))|0;
 $133 = $132&65535;
 HEAP16[$129>>1] = $133;
 $134 = $x;
 $135 = $0;
 $136 = ((($135)) + 2|0);
 $137 = HEAP16[$136>>1]|0;
 $138 = $137 << 16 >> 16;
 $139 = (($138) + ($134))|0;
 $140 = $139&65535;
 HEAP16[$136>>1] = $140;
 $141 = $0;
 $142 = $6;
 __ZL18formants_reduce_hfP7frame_ti($141,$142);
 STACKTOP = sp;return;
}
function __ZL18formants_reduce_hfP7frame_ti($fr,$level) {
 $fr = $fr|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $level;
 $2 = HEAP32[1124]|0;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $ix = 2;
 while(1) {
  $6 = $ix;
  $7 = ($6|0)<(8);
  if (!($7)) {
   break;
  }
  $8 = $ix;
  $9 = $0;
  $10 = ((($9)) + 18|0);
  $11 = (($10) + ($8)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $1;
  $15 = Math_imul($13, $14)|0;
  $x = $15;
  $16 = $x;
  $17 = (($16|0) / 100)&-1;
  $18 = $17&255;
  $19 = $ix;
  $20 = $0;
  $21 = ((($20)) + 18|0);
  $22 = (($21) + ($19)|0);
  HEAP8[$22>>0] = $18;
  $23 = $ix;
  $24 = (($23) + 1)|0;
  $ix = $24;
 }
 STACKTOP = sp;return;
}
function __ZL14VowelClosenessP7frame_t($fr) {
 $fr = $fr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fr;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = ((($3)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $f1 = $6;
 $7 = ($6|0)<(300);
 do {
  if ($7) {
   $0 = 3;
  } else {
   $8 = $f1;
   $9 = ($8|0)<(400);
   if ($9) {
    $0 = 2;
    break;
   }
   $10 = $f1;
   $11 = ($10|0)<(500);
   if ($11) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __ZL18DuplicateLastFrameP10frameref_tii($seq,$n_frames,$length) {
 $seq = $seq|0;
 $n_frames = $n_frames|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $seq;
 $1 = $n_frames;
 $2 = $length;
 $3 = $2;
 $4 = $3&65535;
 $5 = $1;
 $6 = (($5) - 1)|0;
 $7 = $0;
 $8 = (($7) + ($6<<3)|0);
 HEAP16[$8>>1] = $4;
 $9 = $1;
 $10 = (($9) - 1)|0;
 $11 = $0;
 $12 = (($11) + ($10<<3)|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZL9CopyFrameP7frame_ti($14,1)|0);
 $fr = $15;
 $16 = $fr;
 $17 = $1;
 $18 = $0;
 $19 = (($18) + ($17<<3)|0);
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $16;
 $21 = $1;
 $22 = $0;
 $23 = (($22) + ($21<<3)|0);
 HEAP16[$23>>1] = 0;
 $24 = $fr;
 STACKTOP = sp;return ($24|0);
}
function __ZL7DoPauseii($length,$control) {
 $length = $length|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $srate2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $control;
 $2 = $0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $len = 0;
  } else {
   $4 = $0;
   $5 = $1;
   $6 = (__Z11PauseLengthii($4,$5)|0);
   $len = $6;
   $7 = $len;
   $8 = ($7>>>0)<(90000);
   if ($8) {
    $9 = $len;
    $10 = HEAP32[20097]|0;
    $11 = Math_imul($9, $10)|0;
    $12 = (($11>>>0) / 1000)&-1;
    $len = $12;
    break;
   } else {
    $13 = HEAP32[20097]|0;
    $14 = (($13|0) / 25)&-1;
    $srate2 = $14;
    $15 = $len;
    $16 = $srate2;
    $17 = Math_imul($15, $16)|0;
    $18 = (($17>>>0) / 40)&-1;
    $len = $18;
    break;
   }
  }
 } while(0);
 __ZL8EndPitchi(1);
 $19 = HEAP32[20803]|0;
 $20 = (80488 + ($19<<4)|0);
 HEAP32[$20>>2] = 5;
 $21 = $len;
 $22 = HEAP32[20803]|0;
 $23 = (80488 + ($22<<4)|0);
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $21;
 __Z8WcmdqIncv();
 HEAP32[19003] = 0;
 $25 = HEAP32[19017]|0;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[20803]|0;
 $28 = (80488 + ($27<<4)|0);
 HEAP32[$28>>2] = 14;
 HEAP32[19017] = 0;
 $29 = HEAP32[20803]|0;
 $30 = (80488 + ($29<<4)|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($this_ph,$which,$fmt_params,$plist,$modulation) {
 $this_ph = $this_ph|0;
 $which = $which|0;
 $fmt_params = $fmt_params|0;
 $plist = $plist|0;
 $modulation = $modulation|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fr = 0, $frame1 = 0, $frame2 = 0, $frame_length = 0, $frame_lengths = 0, $frameix = 0, $frames = 0, $ix = 0, $len = 0, $length_factor = 0, $length_min = 0, $length_mod = 0, $length_sum = 0, $n_frames = 0, $or$cond = 0, $or$cond5 = 0;
 var $q = 0, $total_len = 0, $wcmd_spect = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n_frames = sp + 160|0;
 $frame_lengths = sp;
 $1 = $this_ph;
 $2 = $which;
 $3 = $fmt_params;
 $4 = $plist;
 $5 = $modulation;
 $total_len = 0;
 $wcmd_spect = 3;
 $6 = $3;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $0 = 0;
  $360 = $0;
  STACKTOP = sp;return ($360|0);
 }
 $10 = $4;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $length_mod = $12;
 $13 = $length_mod;
 $14 = ($13|0)==(0);
 $$ = $14 ? 256 : $12;
 $length_mod = $$;
 $15 = HEAP32[20097]|0;
 $16 = (($15|0) / 70)&-1;
 $length_min = $16;
 $17 = $2;
 $18 = ($17|0)==(2);
 do {
  if ($18) {
   $19 = HEAP32[19035]|0;
   $20 = ((($19)) + 24|0);
   $21 = ((($20)) + 72|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)>(0);
   if ($23) {
    $24 = $1;
    $25 = ((($24)) + 14|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = HEAP32[19035]|0;
    $29 = ((($28)) + 24|0);
    $30 = ((($29)) + 72|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($27|0)>=($31|0);
    if (!($32)) {
     $33 = $4;
     $34 = HEAP16[$33>>1]|0;
     $35 = $34&65535;
     $36 = $35 & 8;
     $37 = ($36|0)!=(0);
     if (!($37)) {
      $38 = $1;
      $39 = ((($38)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $40 & 2097152;
      $42 = ($41|0)!=(0);
      if (!($42)) {
       break;
      }
     }
    }
    $43 = $length_min;
    $44 = $43<<1;
    $length_min = $44;
   }
  }
 } while(0);
 $45 = $2;
 $46 = ($45|0)==(1);
 do {
  if ($46) {
   $47 = $1;
   $48 = ((($47)) + 11|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==(3);
   if (!($51)) {
    $52 = $4;
    $53 = ((($52)) + -24|0);
    $54 = ((($53)) + 17|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)==(3);
    if (!($57)) {
     $58 = $4;
     $59 = ((($58)) + -24|0);
     $60 = ((($59)) + 17|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62|0)==(8);
     if (!($63)) {
      break;
     }
    }
   }
   $64 = $length_mod;
   $65 = HEAP32[19035]|0;
   $66 = ((($65)) + 24|0);
   $67 = ((($66)) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $len = $68;
   $69 = ($64|0)<($68|0);
   if ($69) {
    $70 = $len;
    $length_mod = $70;
   }
  }
 } while(0);
 HEAP32[19016] = 0;
 $71 = $1;
 $72 = $2;
 $73 = $3;
 $74 = $4;
 $75 = (__Z11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LIST($71,$72,$73,$n_frames,$74)|0);
 $frames = $75;
 $76 = $frames;
 $77 = ($76|0)==(0|0);
 if ($77) {
  $0 = 0;
  $360 = $0;
  STACKTOP = sp;return ($360|0);
 }
 $78 = $3;
 $79 = ((($78)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[19017]|0;
 $82 = ($80|0)!=($81|0);
 if ($82) {
  $83 = HEAP32[20803]|0;
  $84 = (80488 + ($83<<4)|0);
  $q = $84;
  $85 = $q;
  HEAP32[$85>>2] = 14;
  $86 = $3;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  HEAP32[19017] = $88;
  $89 = $q;
  $90 = ((($89)) + 4|0);
  HEAP32[$90>>2] = $88;
  __Z8WcmdqIncv();
 }
 $91 = $frames;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $frame1 = $93;
 $94 = HEAP32[1124]|0;
 $95 = ((($94)) + 132|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0);
 if ($97) {
  $wcmd_spect = 1;
 }
 $98 = $3;
 $99 = ((($98)) + 28|0);
 $100 = HEAP32[$99>>2]|0;
 HEAP32[12599] = $100;
 $101 = $3;
 $102 = ((($101)) + 32|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(0);
 if ($104) {
  HEAP32[12600] = 32;
 } else {
  $105 = $3;
  $106 = ((($105)) + 32|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $107<<5;
  $109 = (($108|0) / 100)&-1;
  HEAP32[12600] = $109;
 }
 $110 = HEAP32[12599]|0;
 $111 = ($110|0)==(0);
 do {
  if ($111) {
   $112 = HEAP32[19018]|0;
   $113 = ($112|0)!=(0);
   if ($113) {
    $wcmd_spect = 4;
    $114 = HEAP32[1124]|0;
    $115 = ((($114)) + 132|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)!=(0);
    $$1 = $117 ? 2 : 4;
    $wcmd_spect = $$1;
    HEAP32[19018] = 0;
    break;
   } else {
    $wcmd_spect = 3;
    $118 = HEAP32[1124]|0;
    $119 = ((($118)) + 132|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120|0)!=(0);
    $$2 = $121 ? 1 : 3;
    $wcmd_spect = $$2;
    break;
   }
  }
 } while(0);
 $122 = HEAP32[19003]|0;
 $123 = ($122|0)!=(0|0);
 do {
  if ($123) {
   $124 = HEAP32[19003]|0;
   $125 = ((($124)) + 16|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)<(2);
   if (!($128)) {
    $129 = HEAP32[19003]|0;
    $130 = HEAP16[$129>>1]|0;
    $131 = $130 << 16 >> 16;
    $132 = $131 & 2;
    $133 = ($132|0)!=(0);
    if (!($133)) {
     break;
    }
   }
   $134 = HEAP32[19003]|0;
   $135 = HEAP16[$134>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = $136 & 16;
   $138 = ($137|0)!=(0);
   if (!($138)) {
    $139 = $frame1;
    $140 = $139;
    $141 = HEAP32[19012]|0;
    $142 = (80488 + ($141<<4)|0);
    $143 = ((($142)) + 12|0);
    HEAP32[$143>>2] = $140;
    $144 = HEAP32[19003]|0;
    $145 = HEAP16[$144>>1]|0;
    $146 = $145 << 16 >> 16;
    $147 = $146 & 8;
    $148 = ($147|0)!=(0);
    if ($148) {
     $149 = $frame1;
     $150 = (__ZL9CopyFrameP7frame_ti($149,1)|0);
     $fr = $150;
     $ix = 3;
     while(1) {
      $151 = $ix;
      $152 = ($151|0)<(8);
      if (!($152)) {
       break;
      }
      $153 = $ix;
      $154 = ($153|0)<(7);
      if ($154) {
       $155 = $ix;
       $156 = HEAP32[19003]|0;
       $157 = ((($156)) + 2|0);
       $158 = (($157) + ($155<<1)|0);
       $159 = HEAP16[$158>>1]|0;
       $160 = $ix;
       $161 = $fr;
       $162 = ((($161)) + 2|0);
       $163 = (($162) + ($160<<1)|0);
       HEAP16[$163>>1] = $159;
      }
      $164 = $ix;
      $165 = HEAP32[19003]|0;
      $166 = ((($165)) + 18|0);
      $167 = (($166) + ($164)|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $ix;
      $170 = $fr;
      $171 = ((($170)) + 18|0);
      $172 = (($171) + ($169)|0);
      HEAP8[$172>>0] = $168;
      $173 = $ix;
      $174 = (($173) + 1)|0;
      $ix = $174;
     }
     $175 = $fr;
     $176 = $175;
     $177 = HEAP32[19012]|0;
     $178 = (80488 + ($177<<4)|0);
     $179 = ((($178)) + 12|0);
     HEAP32[$179>>2] = $176;
    }
   }
  }
 } while(0);
 $180 = $1;
 $181 = ((($180)) + 11|0);
 $182 = HEAP8[$181>>0]|0;
 $183 = $182&255;
 $184 = ($183|0)==(2);
 $185 = $2;
 $186 = ($185|0)==(2);
 $or$cond = $184 & $186;
 if ($or$cond) {
  __ZL11SmoothSpectv();
  $187 = HEAP32[20803]|0;
  HEAP32[19004] = $187;
 }
 $length_sum = 0;
 $frameix = 1;
 while(1) {
  $188 = $frameix;
  $189 = HEAP32[$n_frames>>2]|0;
  $190 = ($188|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $length_mod;
  $length_factor = $191;
  $192 = $frameix;
  $193 = (($192) - 1)|0;
  $194 = $frames;
  $195 = (($194) + ($193<<3)|0);
  $196 = ((($195)) + 2|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197 << 16 >> 16;
  $199 = $198 & 4;
  $200 = ($199|0)!=(0);
  if ($200) {
   $201 = $length_mod;
   $202 = HEAP32[(74676)>>2]|0;
   $203 = (256 - ($202))|0;
   $204 = Math_imul($201, $203)|0;
   $205 = HEAP32[(74676)>>2]|0;
   $206 = $205<<8;
   $207 = (($204) + ($206))|0;
   $208 = (($207|0) / 256)&-1;
   $length_factor = $208;
  } else {
   $209 = $frameix;
   $210 = (($209) - 1)|0;
   $211 = $frames;
   $212 = (($211) + ($210<<3)|0);
   $213 = ((($212)) + 2|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214 << 16 >> 16;
   $216 = $215 & 16384;
   $217 = ($216|0)!=(0);
   if ($217) {
    $218 = $length_mod;
    $219 = HEAP32[(74680)>>2]|0;
    $220 = (256 - ($219))|0;
    $221 = Math_imul($218, $220)|0;
    $222 = HEAP32[(74680)>>2]|0;
    $223 = $222<<8;
    $224 = (($221) + ($223))|0;
    $225 = (($224|0) / 256)&-1;
    $length_factor = $225;
   }
  }
  $226 = $frameix;
  $227 = (($226) - 1)|0;
  $228 = $frames;
  $229 = (($228) + ($227<<3)|0);
  $230 = HEAP16[$229>>1]|0;
  $231 = $230 << 16 >> 16;
  $frame_length = $231;
  $232 = $frame_length;
  $233 = HEAP32[20097]|0;
  $234 = Math_imul($232, $233)|0;
  $235 = (($234|0) / 1000)&-1;
  $len = $235;
  $236 = $len;
  $237 = $length_factor;
  $238 = Math_imul($236, $237)|0;
  $239 = (($238|0) / 256)&-1;
  $len = $239;
  $240 = $len;
  $241 = $length_sum;
  $242 = (($241) + ($240))|0;
  $length_sum = $242;
  $243 = $len;
  $244 = $frameix;
  $245 = (($frame_lengths) + ($244<<2)|0);
  HEAP32[$245>>2] = $243;
  $246 = $frameix;
  $247 = (($246) + 1)|0;
  $frameix = $247;
 }
 $248 = $length_sum;
 $249 = ($248|0)>(0);
 L68: do {
  if ($249) {
   $250 = $length_sum;
   $251 = $length_min;
   $252 = ($250|0)<($251|0);
   if ($252) {
    $frameix = 1;
    while(1) {
     $253 = $frameix;
     $254 = HEAP32[$n_frames>>2]|0;
     $255 = ($253|0)<($254|0);
     if (!($255)) {
      break L68;
     }
     $256 = $frameix;
     $257 = (($frame_lengths) + ($256<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $length_min;
     $260 = Math_imul($258, $259)|0;
     $261 = $length_sum;
     $262 = (($260|0) / ($261|0))&-1;
     $263 = $frameix;
     $264 = (($frame_lengths) + ($263<<2)|0);
     HEAP32[$264>>2] = $262;
     $265 = $frameix;
     $266 = (($265) + 1)|0;
     $frameix = $266;
    }
   }
  }
 } while(0);
 $frameix = 1;
 while(1) {
  $267 = $frameix;
  $268 = HEAP32[$n_frames>>2]|0;
  $269 = ($267|0)<($268|0);
  if (!($269)) {
   break;
  }
  $270 = $frameix;
  $271 = $frames;
  $272 = (($271) + ($270<<3)|0);
  $273 = ((($272)) + 4|0);
  $274 = HEAP32[$273>>2]|0;
  $frame2 = $274;
  $275 = $3;
  $276 = ((($275)) + 28|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($277|0)!=(0);
  if ($278) {
   $279 = $frame1;
   $280 = HEAP16[$279>>1]|0;
   $281 = $280 << 16 >> 16;
   $282 = $281 & 128;
   $283 = ($282|0)==(0);
   if ($283) {
    HEAP32[12601] = 0;
    $284 = $3;
    $285 = ((($284)) + 28|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $2;
    $288 = (($287) + 256)|0;
    $289 = $3;
    $290 = HEAP32[$289>>2]|0;
    $291 = HEAP32[12600]|0;
    (__ZL9DoSample2iiiiii($286,$288,0,$290,0,$291)|0);
    HEAP32[19018] = 1;
    HEAP32[12599] = 0;
    $292 = $3;
    $293 = ((($292)) + 28|0);
    HEAP32[$293>>2] = 0;
   }
  }
  $294 = $5;
  $295 = ($294|0)>=(0);
  if ($295) {
   $296 = $frame1;
   $297 = HEAP16[$296>>1]|0;
   $298 = $297 << 16 >> 16;
   $299 = $298 & 64;
   $300 = ($299|0)!=(0);
   if ($300) {
    $5 = 6;
   }
   $301 = $frameix;
   $302 = HEAP32[$n_frames>>2]|0;
   $303 = (($302) - 1)|0;
   $304 = ($301|0)==($303|0);
   if ($304) {
    $305 = HEAP32[19016]|0;
    $306 = $305 & 3840;
    $307 = ($306|0)!=(0);
    if ($307) {
     $308 = HEAP32[19016]|0;
     $309 = $5;
     $310 = $309 | $308;
     $5 = $310;
    }
   }
  }
  $311 = $frameix;
  $312 = (($frame_lengths) + ($311<<2)|0);
  $313 = HEAP32[$312>>2]|0;
  $len = $313;
  $314 = $len;
  $315 = HEAP32[19011]|0;
  $316 = (($315) + ($314))|0;
  HEAP32[19011] = $316;
  $317 = $len;
  $318 = HEAP32[19019]|0;
  $319 = (($318) + ($317))|0;
  HEAP32[19019] = $319;
  $320 = $len;
  $321 = ($320|0)==(0);
  if ($321) {
   HEAP32[19003] = 0;
   $322 = $frame2;
   $frame1 = $322;
  } else {
   $323 = HEAP32[20803]|0;
   HEAP32[19012] = $323;
   $324 = $5;
   $325 = ($324|0)>=(0);
   if ($325) {
    $326 = HEAP32[20803]|0;
    $327 = (80488 + ($326<<4)|0);
    $q = $327;
    $328 = $wcmd_spect;
    $329 = $q;
    HEAP32[$329>>2] = $328;
    $330 = $len;
    $331 = $5;
    $332 = $331 << 16;
    $333 = (($330) + ($332))|0;
    $334 = $q;
    $335 = ((($334)) + 4|0);
    HEAP32[$335>>2] = $333;
    $336 = $frame1;
    $337 = $336;
    $338 = $q;
    $339 = ((($338)) + 8|0);
    HEAP32[$339>>2] = $337;
    $340 = $frame2;
    $341 = $340;
    $342 = $q;
    $343 = ((($342)) + 12|0);
    HEAP32[$343>>2] = $341;
    __Z8WcmdqIncv();
   }
   $344 = $frame2;
   $frame1 = $344;
   HEAP32[19003] = $344;
   $345 = $len;
   $346 = $total_len;
   $347 = (($346) + ($345))|0;
   $total_len = $347;
  }
  $348 = $frameix;
  $349 = (($348) + 1)|0;
  $frameix = $349;
 }
 $350 = $2;
 $351 = ($350|0)!=(1);
 $352 = HEAP32[19017]|0;
 $353 = ($352|0)!=(0);
 $or$cond5 = $351 & $353;
 if ($or$cond5) {
  $354 = HEAP32[20803]|0;
  $355 = (80488 + ($354<<4)|0);
  $q = $355;
  $356 = $q;
  HEAP32[$356>>2] = 14;
  HEAP32[19017] = 0;
  $357 = $q;
  $358 = ((($357)) + 4|0);
  HEAP32[$358>>2] = 0;
  __Z8WcmdqIncv();
 }
 $359 = $total_len;
 $0 = $359;
 $360 = $0;
 STACKTOP = sp;return ($360|0);
}
function __Z8DoMarkeriiii($type,$char_posn,$length,$value) {
 $type = $type|0;
 $char_posn = $char_posn|0;
 $length = $length|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $char_posn;
 $2 = $length;
 $3 = $value;
 $4 = (__Z9WcmdqFreev()|0);
 $5 = ($4|0)>(5);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $6 << 8;
 $8 = (10 + ($7))|0;
 $9 = HEAP32[20803]|0;
 $10 = (80488 + ($9<<4)|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = $11 & 16777215;
 $13 = $2;
 $14 = $13 << 24;
 $15 = $12 | $14;
 $16 = HEAP32[20803]|0;
 $17 = (80488 + ($16<<4)|0);
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $15;
 $19 = $3;
 $20 = HEAP32[20803]|0;
 $21 = (80488 + ($20<<4)|0);
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $19;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z15DoPhonemeMarkeriiiPc($type,$char_posn,$length,$name) {
 $type = $type|0;
 $char_posn = $char_posn|0;
 $length = $length|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $char_posn;
 $2 = $length;
 $3 = $name;
 $4 = (__Z9WcmdqFreev()|0);
 $5 = ($4|0)>(5);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $6 << 8;
 $8 = (10 + ($7))|0;
 $9 = HEAP32[20803]|0;
 $10 = (80488 + ($9<<4)|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = $11 & 16777215;
 $13 = $2;
 $14 = $13 << 24;
 $15 = $12 | $14;
 $16 = HEAP32[20803]|0;
 $17 = (80488 + ($16<<4)|0);
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $15;
 $19 = $3;
 $p = $19;
 $20 = $p;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[20803]|0;
 $23 = (80488 + ($22<<4)|0);
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $21;
 $25 = $p;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[20803]|0;
 $29 = (80488 + ($28<<4)|0);
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = $27;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z12DoSonicSpeedi($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = HEAP32[20803]|0;
 $2 = (80488 + ($1<<4)|0);
 HEAP32[$2>>2] = 15;
 $3 = $0;
 $4 = HEAP32[20803]|0;
 $5 = (80488 + ($4<<4)|0);
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $3;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z13DoVoiceChangeP7voice_t($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = (_malloc(1364)|0);
 $v2 = $1;
 $2 = $v2;
 $3 = $0;
 _memcpy(($2|0),($3|0),1364)|0;
 $4 = HEAP32[20803]|0;
 $5 = (80488 + ($4<<4)|0);
 HEAP32[$5>>2] = 11;
 $6 = $v2;
 $7 = $6;
 $8 = HEAP32[20803]|0;
 $9 = (80488 + ($8<<4)|0);
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $7;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __Z10DoEmbeddedPii($embix,$sourceix) {
 $embix = $embix|0;
 $sourceix = $sourceix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $command = 0, $value = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $embix;
 $1 = $sourceix;
 while(1) {
  $2 = $0;
  $3 = HEAP32[$2>>2]|0;
  $4 = (76504 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $word = $5;
  $6 = $word;
  $7 = $6 >>> 8;
  $value = $7;
  $8 = $word;
  $9 = $8 & 127;
  $command = $9;
  $10 = $command;
  $11 = ($10|0)==(0);
  if ($11) {
   label = 12;
   break;
  }
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = $command;
  $16 = $15 & 31;
  switch ($16|0) {
  case 2:  {
   $17 = $command;
   $18 = $17 & 96;
   $19 = (($18) + 8)|0;
   $20 = $value;
   __Z11SetEmbeddedii($19,$20);
   __Z8SetSpeedi(2);
   break;
  }
  case 7:  {
   $21 = $value;
   $22 = HEAP32[734]|0;
   $23 = ($21|0)<($22|0);
   if ($23) {
    $24 = $value;
    $25 = (74724 + ($24<<4)|0);
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(0);
    if ($28) {
     __ZL7DoPauseii(10,0);
     $29 = HEAP32[20803]|0;
     $30 = (80488 + ($29<<4)|0);
     HEAP32[$30>>2] = 6;
     $31 = $value;
     $32 = (74724 + ($31<<4)|0);
     $33 = ((($32)) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = HEAP32[20803]|0;
     $36 = (80488 + ($35<<4)|0);
     $37 = ((($36)) + 4|0);
     HEAP32[$37>>2] = $34;
     $38 = $value;
     $39 = (74724 + ($38<<4)|0);
     $40 = ((($39)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $41;
     $43 = (($42) + 44)|0;
     $44 = HEAP32[20803]|0;
     $45 = (80488 + ($44<<4)|0);
     $46 = ((($45)) + 8|0);
     HEAP32[$46>>2] = $43;
     $47 = HEAP32[20803]|0;
     $48 = (80488 + ($47<<4)|0);
     $49 = ((($48)) + 12|0);
     HEAP32[$49>>2] = 5376;
     __Z8WcmdqIncv();
    }
   }
   break;
  }
  case 10:  {
   $50 = $1;
   $51 = $50 & 2047;
   $52 = HEAP32[19058]|0;
   $53 = (($51) + ($52))|0;
   $54 = $value;
   __Z8DoMarkeriiii(3,$53,0,$54);
   break;
  }
  case 11:  {
   $55 = HEAP32[10367]|0;
   $56 = (($55) + 1)|0;
   $57 = $value;
   __Z8DoMarkeriiii(4,$56,0,$57);
   break;
  }
  default: {
   __ZL7DoPauseii(10,0);
   $58 = HEAP32[20803]|0;
   $59 = (80488 + ($58<<4)|0);
   HEAP32[$59>>2] = 12;
   $60 = $command;
   $61 = HEAP32[20803]|0;
   $62 = (80488 + ($61<<4)|0);
   $63 = ((($62)) + 4|0);
   HEAP32[$63>>2] = $60;
   $64 = $value;
   $65 = HEAP32[20803]|0;
   $66 = (80488 + ($65<<4)|0);
   $67 = ((($66)) + 8|0);
   HEAP32[$67>>2] = $64;
   __Z8WcmdqIncv();
  }
  }
  $68 = $word;
  $69 = $68 & 128;
  $70 = ($69|0)==(0);
  if (!($70)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function __Z8GenerateP12PHONEME_LISTPii($phoneme_list,$n_ph,$resume) {
 $phoneme_list = $phoneme_list|0;
 $n_ph = $n_ph|0;
 $resume = $resume|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $amp_env = 0;
 var $done_phoneme_marker = 0, $fmtp = 0, $free_min = 0, $modulation = 0, $next = 0, $next2 = 0, $or$cond = 0, $p = 0, $ph = 0, $phdata = 0, $phdata_next = 0, $phdata_prev = 0, $phdata_tone = 0, $phoneme_name = 0, $pitch_env = 0, $pre_voiced = 0, $prev = 0, $released = 0, $stress = 0, $use_ipa = 0;
 var $value = 0, $vowelstart_prev = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $phoneme_name = sp + 736|0;
 $phdata = sp + 504|0;
 $phdata_prev = sp + 352|0;
 $phdata_next = sp + 200|0;
 $phdata_tone = sp + 48|0;
 $fmtp = sp;
 $1 = $phoneme_list;
 $2 = $n_ph;
 $3 = $resume;
 $pitch_env = 0;
 $use_ipa = 0;
 $4 = HEAP32[19042]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $0 = 0;
  $917 = $0;
  STACKTOP = sp;return ($917|0);
 }
 $6 = HEAP32[19041]|0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $use_ipa = 1;
 }
 $9 = HEAP8[119969]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = (__Z14MbrolaGenerateP12PHONEME_LISTPii($12,$13,$14)|0);
  $0 = $15;
  $917 = $0;
  STACKTOP = sp;return ($917|0);
 }
 $16 = $3;
 $17 = ($16|0)==(0);
 if ($17) {
  HEAP32[19020] = 1;
  HEAP32[19021] = 0;
  HEAP32[19022] = 0;
  HEAP32[19011] = 0;
  HEAP32[19019] = 0;
  HEAP32[19003] = 0;
  HEAP32[19012] = -1;
  $18 = HEAP32[20803]|0;
  HEAP32[19014] = $18;
  $19 = HEAP32[20803]|0;
  HEAP32[19013] = $19;
  HEAP32[19004] = -1;
  HEAP32[19001] = -1;
  ;HEAP32[50408>>2]=0|0;HEAP32[50408+4>>2]=0|0;HEAP32[50408+8>>2]=0|0;HEAP32[50408+12>>2]=0|0;
  ;HEAP32[76092>>2]=0|0;HEAP32[76092+4>>2]=0|0;HEAP32[76092+8>>2]=0|0;HEAP32[76092+12>>2]=0|0;HEAP32[76092+16>>2]=0|0;HEAP32[76092+20>>2]=0|0;
  __ZL7DoPauseii(0,0);
 }
 while(1) {
  $20 = HEAP32[19020]|0;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($20|0)<($22|0);
  $24 = HEAP32[19020]|0;
  $25 = ($24|0)<(998);
  $26 = $23 ? $25 : 0;
  if (!($26)) {
   break;
  }
  $27 = HEAP32[19020]|0;
  $28 = $1;
  $29 = (($28) + (($27*24)|0)|0);
  $p = $29;
  $30 = $p;
  $31 = ((($30)) + 17|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(0);
  do {
   if ($34) {
    $free_min = 10;
   } else {
    $35 = $p;
    $36 = ((($35)) + 17|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)!=(2);
    if ($39) {
     $free_min = 15;
     break;
    } else {
     $free_min = 25;
     break;
    }
   }
  } while(0);
  $40 = (__Z9WcmdqFreev()|0);
  $41 = $free_min;
  $42 = ($40|0)<=($41|0);
  if ($42) {
   label = 16;
   break;
  }
  $43 = HEAP32[19020]|0;
  $44 = (($43) - 1)|0;
  $45 = $1;
  $46 = (($45) + (($44*24)|0)|0);
  $prev = $46;
  $47 = HEAP32[19020]|0;
  $48 = (($47) + 1)|0;
  $49 = $1;
  $50 = (($49) + (($48*24)|0)|0);
  $next = $50;
  $51 = HEAP32[19020]|0;
  $52 = (($51) + 2)|0;
  $53 = $1;
  $54 = (($53) + (($52*24)|0)|0);
  $next2 = $54;
  $55 = $p;
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = $57 & 2;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $p;
   $61 = ((($60)) + 4|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $62&65535;
   __Z10DoEmbeddedPii(76084,$63);
  }
  $64 = $p;
  $65 = ((($64)) + 21|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = ($66<<24>>24)!=(0);
  if ($67) {
   $68 = $p;
   $69 = ((($68)) + 17|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = ($71|0)==(2);
   if ($72) {
    $73 = HEAP32[19035]|0;
    $74 = ((($73)) + 24|0);
    $75 = ((($74)) + 32|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 1;
    $78 = ($77|0)!=(0);
    if (!($78)) {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $79 = $p;
    $80 = ((($79)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $83 & 16777216;
    $85 = ($84|0)!=(0);
    if (!($85)) {
     HEAP32[19003] = 0;
    }
   }
   $86 = $p;
   $87 = ((($86)) + 4|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88&65535;
   $90 = $89 & 2047;
   $91 = HEAP32[19058]|0;
   $92 = (($90) + ($91))|0;
   HEAP32[19029] = $92;
   $93 = $p;
   $94 = ((($93)) + 21|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = $96 & 4;
   $98 = ($97|0)!=(0);
   if ($98) {
    $99 = HEAP32[19029]|0;
    $100 = HEAP32[19056]|0;
    __Z8DoMarkeriiii(2,$99,0,$100);
   }
   $101 = $p;
   $102 = ((($101)) + 21|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $104 & 1;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = HEAP32[19029]|0;
    $108 = $p;
    $109 = ((($108)) + 4|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110&65535;
    $112 = $111 >> 11;
    $113 = HEAP32[19059]|0;
    $114 = HEAP32[19022]|0;
    $115 = (($114) + 1)|0;
    HEAP32[19022] = $115;
    $116 = (($113) + ($114))|0;
    __Z8DoMarkeriiii(1,$107,$112,$116);
   }
  }
  __ZL12EndAmplitudev();
  $117 = $p;
  $118 = ((($117)) + 18|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = ($120|0)>(0);
  if ($121) {
   $122 = $p;
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((($124)) + 4|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 & 33554432;
   $128 = ($127|0)!=(0);
   if (!($128)) {
    $129 = $p;
    $130 = ((($129)) + 18|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    __ZL7DoPauseii($132,1);
   }
  }
  $done_phoneme_marker = 0;
  $133 = HEAP32[19041]|0;
  $134 = ($133|0)!=(0);
  do {
   if ($134) {
    $135 = $p;
    $136 = ((($135)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($137)) + 10|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139&255;
    $141 = ($140|0)!=(15);
    if ($141) {
     $142 = $p;
     $143 = ((($142)) + 17|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = ($145|0)==(2);
     if ($146) {
      $147 = $prev;
      $148 = ((($147)) + 17|0);
      $149 = HEAP8[$148>>0]|0;
      $150 = $149&255;
      $151 = ($150|0)==(3);
      if ($151) {
       break;
      }
      $152 = $prev;
      $153 = ((($152)) + 17|0);
      $154 = HEAP8[$153>>0]|0;
      $155 = $154&255;
      $156 = ($155|0)==(8);
      if ($156) {
       break;
      }
     }
     $157 = $p;
     $158 = ((($157)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $p;
     $161 = $use_ipa;
     (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($phoneme_name,$159,$160,$161,0)|0);
     $162 = HEAP32[19029]|0;
     __Z15DoPhonemeMarkeriiiPc(7,$162,0,$phoneme_name);
     $done_phoneme_marker = 1;
    }
   }
  } while(0);
  $163 = $p;
  $164 = ((($163)) + 17|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  L53: do {
   switch ($166|0) {
   case 0:  {
    $167 = $p;
    $168 = ((($167)) + 12|0);
    $169 = HEAP32[$168>>2]|0;
    __ZL7DoPauseii($169,0);
    break;
   }
   case 4:  {
    $released = 0;
    $170 = $p;
    $171 = ((($170)) + 8|0);
    $172 = HEAP32[$171>>2]|0;
    $ph = $172;
    $173 = $next;
    $174 = ((($173)) + 17|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175&255;
    $177 = ($176|0)==(2);
    if ($177) {
     $released = 1;
    } else {
     $178 = $next;
     $179 = ((($178)) + 21|0);
     $180 = HEAP8[$179>>0]|0;
     $181 = ($180<<24>>24)!=(0);
     if (!($181)) {
      $182 = $next;
      $183 = ((($182)) + 17|0);
      $184 = HEAP8[$183>>0]|0;
      $185 = $184&255;
      $186 = ($185|0)==(3);
      if ($186) {
       $released = 1;
      }
     }
    }
    $187 = $released;
    $188 = ($187|0)==(0);
    if ($188) {
     $189 = $p;
     $190 = HEAP16[$189>>1]|0;
     $191 = $190&65535;
     $192 = $191 | 8192;
     $193 = $192&65535;
     HEAP16[$189>>1] = $193;
    }
    $194 = $ph;
    $195 = ((($194)) + 4|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $196 & 33554432;
    $198 = ($197|0)!=(0);
    if ($198) {
     dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $199 = $p;
     __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,1,$199,$phdata,76092);
     $200 = ((($phdata)) + 68|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ((($fmtp)) + 8|0);
     HEAP32[$202>>2] = $201;
     $203 = ((($phdata)) + 88|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ((($fmtp)) + 16|0);
     HEAP32[$205>>2] = $204;
     $206 = HEAP32[19001]|0;
     $207 = ($206|0)<(0);
     if ($207) {
      $208 = $next;
      $209 = ((($208)) + 20|0);
      $210 = HEAP8[$209>>0]|0;
      $211 = $210&255;
      __ZL11DoAmplitudeiPh($211,0);
      $212 = $p;
      $213 = ((($212)) + 16|0);
      $214 = HEAP8[$213>>0]|0;
      $215 = $214&255;
      $216 = (844 + ($215<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = $next;
      $219 = ((($218)) + 22|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $next;
      $223 = ((($222)) + 23|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      __ZL7DoPitchPhii($217,$221,$225);
     }
     $226 = $ph;
     $227 = $p;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($226,0,$fmtp,$227,0)|0);
    }
    $228 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$228,$phdata,76092);
    $229 = HEAP32[$phdata>>2]|0;
    $230 = $229 | 4;
    HEAP32[$phdata>>2] = $230;
    (__Z9DoSample3P12PHONEME_DATAii($phdata,0,0)|0);
    break;
   }
   case 6:  {
    $231 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$231,$phdata,76092);
    $232 = $p;
    $233 = HEAP16[$232>>1]|0;
    $234 = $233&65535;
    $235 = $234 & 8;
    $236 = ($235|0)!=(0);
    if ($236) {
     $237 = $p;
     $238 = ((($237)) + 12|0);
     $239 = HEAP32[$238>>2]|0;
     (__Z9DoSample3P12PHONEME_DATAii($phdata,$239,0)|0);
    }
    $240 = $p;
    $241 = ((($240)) + 12|0);
    $242 = HEAP32[$241>>2]|0;
    (__Z9DoSample3P12PHONEME_DATAii($phdata,$242,0)|0);
    break;
   }
   case 5:  {
    $243 = $p;
    $244 = ((($243)) + 8|0);
    $245 = HEAP32[$244>>2]|0;
    $ph = $245;
    dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$fmtp>>2] = 4;
    $pre_voiced = 0;
    $246 = $next;
    $247 = ((($246)) + 17|0);
    $248 = HEAP8[$247>>0]|0;
    $249 = $248&255;
    $250 = ($249|0)==(2);
    do {
     if ($250) {
      $251 = $p;
      $252 = ((($251)) + 20|0);
      $253 = HEAP8[$252>>0]|0;
      $254 = $253&255;
      __ZL11DoAmplitudeiPh($254,0);
      $255 = $p;
      $256 = ((($255)) + 16|0);
      $257 = HEAP8[$256>>0]|0;
      $258 = $257&255;
      $259 = (844 + ($258<<2)|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = $p;
      $262 = ((($261)) + 22|0);
      $263 = HEAP8[$262>>0]|0;
      $264 = $263&255;
      $265 = $p;
      $266 = ((($265)) + 23|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = $267&255;
      __ZL7DoPitchPhii($260,$264,$268);
      $pre_voiced = 1;
     } else {
      $269 = $next;
      $270 = ((($269)) + 17|0);
      $271 = HEAP8[$270>>0]|0;
      $272 = $271&255;
      $273 = ($272|0)==(3);
      if ($273) {
       $274 = $next;
       $275 = ((($274)) + 21|0);
       $276 = HEAP8[$275>>0]|0;
       $277 = ($276<<24>>24)!=(0);
       if (!($277)) {
        $278 = $next;
        $279 = ((($278)) + 20|0);
        $280 = HEAP8[$279>>0]|0;
        $281 = $280&255;
        __ZL11DoAmplitudeiPh($281,0);
        $282 = $next;
        $283 = ((($282)) + 16|0);
        $284 = HEAP8[$283>>0]|0;
        $285 = $284&255;
        $286 = (844 + ($285<<2)|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $next;
        $289 = ((($288)) + 22|0);
        $290 = HEAP8[$289>>0]|0;
        $291 = $290&255;
        $292 = $next;
        $293 = ((($292)) + 23|0);
        $294 = HEAP8[$293>>0]|0;
        $295 = $294&255;
        __ZL7DoPitchPhii($287,$291,$295);
        $pre_voiced = 1;
        break;
       }
      }
      $296 = HEAP32[19001]|0;
      $297 = ($296|0)<(0);
      if ($297) {
       $298 = $next;
       $299 = ((($298)) + 20|0);
       $300 = HEAP8[$299>>0]|0;
       $301 = $300&255;
       __ZL11DoAmplitudeiPh($301,0);
       $302 = $p;
       $303 = ((($302)) + 16|0);
       $304 = HEAP8[$303>>0]|0;
       $305 = $304&255;
       $306 = (844 + ($305<<2)|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = $p;
       $309 = ((($308)) + 22|0);
       $310 = HEAP8[$309>>0]|0;
       $311 = $310&255;
       $312 = $p;
       $313 = ((($312)) + 23|0);
       $314 = HEAP8[$313>>0]|0;
       $315 = $314&255;
       __ZL7DoPitchPhii($307,$311,$315);
      }
     }
    } while(0);
    $316 = $prev;
    $317 = ((($316)) + 17|0);
    $318 = HEAP8[$317>>0]|0;
    $319 = $318&255;
    $320 = ($319|0)==(2);
    if ($320) {
     label = 64;
    } else {
     $321 = $prev;
     $322 = ((($321)) + 8|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ((($323)) + 4|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $325 & 256;
     $327 = ($326|0)!=(0);
     if ($327) {
      label = 64;
     } else {
      $328 = $ph;
      $329 = ((($328)) + 4|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = $330 & 33554432;
      $332 = ($331|0)!=(0);
      if ($332) {
       label = 64;
      } else {
       $349 = $p;
       $350 = HEAP16[$349>>1]|0;
       $351 = $350&65535;
       $352 = $351 & 8;
       $353 = ($352|0)!=(0);
       if ($353) {
        __ZL7DoPauseii(50,0);
       }
      }
     }
    }
    if ((label|0) == 64) {
     label = 0;
     $333 = $p;
     __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,1,$333,$phdata,76092);
     $334 = ((($phdata)) + 68|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = ((($fmtp)) + 8|0);
     HEAP32[$336>>2] = $335;
     $337 = ((($phdata)) + 88|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = ((($fmtp)) + 16|0);
     HEAP32[$339>>2] = $338;
     $340 = $ph;
     $341 = $p;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($340,0,$fmtp,$341,0)|0);
     $342 = $p;
     $343 = HEAP16[$342>>1]|0;
     $344 = $343&65535;
     $345 = $344 & 8;
     $346 = ($345|0)!=(0);
     if ($346) {
      __ZL7DoPauseii(25,1);
      $347 = $ph;
      $348 = $p;
      (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($347,0,$fmtp,$348,0)|0);
     }
    }
    $354 = $pre_voiced;
    $355 = ($354|0)!=(0);
    if ($355) {
     __ZL13StartSyllablev();
    } else {
     $356 = $p;
     $357 = HEAP16[$356>>1]|0;
     $358 = $357&65535;
     $359 = $358 | 8192;
     $360 = $359&65535;
     HEAP16[$356>>1] = $360;
    }
    $361 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$361,$phdata,76092);
    $362 = ((($phdata)) + 68|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ((($fmtp)) + 8|0);
    HEAP32[$364>>2] = $363;
    $365 = ((($phdata)) + 88|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = ((($fmtp)) + 16|0);
    HEAP32[$367>>2] = $366;
    $368 = ((($phdata)) + 68|0);
    $369 = ((($368)) + 16|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = ((($fmtp)) + 28|0);
    HEAP32[$371>>2] = $370;
    $372 = ((($phdata)) + 88|0);
    $373 = ((($372)) + 16|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = ((($fmtp)) + 32|0);
    HEAP32[$375>>2] = $374;
    $376 = $ph;
    $377 = $p;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($376,0,$fmtp,$377,0)|0);
    $378 = $p;
    $379 = ((($378)) + 21|0);
    $380 = HEAP8[$379>>0]|0;
    $381 = $380&255;
    $382 = ($381|0)==(0);
    if ($382) {
     $383 = $next2;
     $384 = ((($383)) + 21|0);
     $385 = HEAP8[$384>>0]|0;
     $386 = $385&255;
     $387 = ($386|0)==(0);
     if ($387) {
      $388 = $next;
      $389 = ((($388)) + 17|0);
      $390 = HEAP8[$389>>0]|0;
      $391 = $390&255;
      $392 = ($391|0)==(7);
      if ($392) {
       __ZL7DoPauseii(20,0);
      }
      $393 = $next;
      $394 = ((($393)) + 17|0);
      $395 = HEAP8[$394>>0]|0;
      $396 = $395&255;
      $397 = ($396|0)==(6);
      if ($397) {
       __ZL7DoPauseii(12,0);
      }
     }
    }
    break;
   }
   case 7:  {
    $398 = $next;
    $399 = ((($398)) + 17|0);
    $400 = HEAP8[$399>>0]|0;
    $401 = $400&255;
    $402 = ($401|0)==(2);
    do {
     if ($402) {
      $403 = $p;
      $404 = ((($403)) + 20|0);
      $405 = HEAP8[$404>>0]|0;
      $406 = $405&255;
      __ZL11DoAmplitudeiPh($406,0);
      $407 = $p;
      $408 = ((($407)) + 16|0);
      $409 = HEAP8[$408>>0]|0;
      $410 = $409&255;
      $411 = (844 + ($410<<2)|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = $p;
      $414 = ((($413)) + 22|0);
      $415 = HEAP8[$414>>0]|0;
      $416 = $415&255;
      $417 = $p;
      $418 = ((($417)) + 23|0);
      $419 = HEAP8[$418>>0]|0;
      $420 = $419&255;
      __ZL7DoPitchPhii($412,$416,$420);
     } else {
      $421 = $next;
      $422 = ((($421)) + 17|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = $423&255;
      $425 = ($424|0)==(3);
      if ($425) {
       $426 = $next;
       $427 = ((($426)) + 20|0);
       $428 = HEAP8[$427>>0]|0;
       $429 = $428&255;
       __ZL11DoAmplitudeiPh($429,0);
       $430 = $next;
       $431 = ((($430)) + 16|0);
       $432 = HEAP8[$431>>0]|0;
       $433 = $432&255;
       $434 = (844 + ($433<<2)|0);
       $435 = HEAP32[$434>>2]|0;
       $436 = $next;
       $437 = ((($436)) + 22|0);
       $438 = HEAP8[$437>>0]|0;
       $439 = $438&255;
       $440 = $next;
       $441 = ((($440)) + 23|0);
       $442 = HEAP8[$441>>0]|0;
       $443 = $442&255;
       __ZL7DoPitchPhii($435,$439,$443);
       break;
      }
      $444 = HEAP32[19001]|0;
      $445 = ($444|0)<(0);
      if ($445) {
       $446 = $p;
       $447 = ((($446)) + 20|0);
       $448 = HEAP8[$447>>0]|0;
       $449 = $448&255;
       __ZL11DoAmplitudeiPh($449,0);
       $450 = $p;
       $451 = ((($450)) + 16|0);
       $452 = HEAP8[$451>>0]|0;
       $453 = $452&255;
       $454 = (844 + ($453<<2)|0);
       $455 = HEAP32[$454>>2]|0;
       $456 = $p;
       $457 = ((($456)) + 22|0);
       $458 = HEAP8[$457>>0]|0;
       $459 = $458&255;
       $460 = $p;
       $461 = ((($460)) + 23|0);
       $462 = HEAP8[$461>>0]|0;
       $463 = $462&255;
       __ZL7DoPitchPhii($455,$459,$463);
      }
     }
    } while(0);
    $464 = $next;
    $465 = ((($464)) + 17|0);
    $466 = HEAP8[$465>>0]|0;
    $467 = $466&255;
    $468 = ($467|0)==(2);
    do {
     if ($468) {
      label = 86;
     } else {
      $469 = $next;
      $470 = ((($469)) + 17|0);
      $471 = HEAP8[$470>>0]|0;
      $472 = $471&255;
      $473 = ($472|0)==(3);
      if ($473) {
       $474 = $next;
       $475 = ((($474)) + 21|0);
       $476 = HEAP8[$475>>0]|0;
       $477 = $476&255;
       $478 = ($477|0)==(0);
       if ($478) {
        label = 86;
        break;
       }
      }
      $479 = $p;
      $480 = HEAP16[$479>>1]|0;
      $481 = $480&65535;
      $482 = $481 | 8192;
      $483 = $482&65535;
      HEAP16[$479>>1] = $483;
     }
    } while(0);
    if ((label|0) == 86) {
     label = 0;
     __ZL13StartSyllablev();
    }
    $484 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$484,$phdata,76092);
    dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $485 = ((($phdata)) + 4|0);
    $486 = ((($485)) + 40|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = $487<<1;
    $489 = ((($fmtp)) + 44|0);
    HEAP32[$489>>2] = $488;
    $490 = ((($phdata)) + 68|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = ((($fmtp)) + 8|0);
    HEAP32[$492>>2] = $491;
    $493 = ((($phdata)) + 88|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ((($fmtp)) + 16|0);
    HEAP32[$495>>2] = $494;
    $496 = ((($phdata)) + 68|0);
    $497 = ((($496)) + 16|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = ((($fmtp)) + 28|0);
    HEAP32[$499>>2] = $498;
    $500 = ((($phdata)) + 88|0);
    $501 = ((($500)) + 16|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = ((($fmtp)) + 32|0);
    HEAP32[$503>>2] = $502;
    $504 = $p;
    $505 = HEAP16[$504>>1]|0;
    $506 = $505&65535;
    $507 = $506 & 8;
    $508 = ($507|0)!=(0);
    if ($508) {
     $509 = $p;
     $510 = ((($509)) + 8|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $p;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($511,0,$fmtp,$512,0)|0);
    }
    $513 = $p;
    $514 = ((($513)) + 8|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = $p;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($515,0,$fmtp,$516,0)|0);
    break;
   }
   case 8:  {
    dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $517 = $p;
    $518 = HEAP16[$517>>1]|0;
    $519 = $518&65535;
    $520 = $519 & 1;
    $521 = ($520|0)!=(0);
    if (!($521)) {
     $522 = $p;
     $523 = ((($522)) + 20|0);
     $524 = HEAP8[$523>>0]|0;
     $525 = $524&255;
     __ZL11DoAmplitudeiPh($525,0);
     $526 = $p;
     $527 = ((($526)) + 16|0);
     $528 = HEAP8[$527>>0]|0;
     $529 = $528&255;
     $530 = (844 + ($529<<2)|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = $p;
     $533 = ((($532)) + 22|0);
     $534 = HEAP8[$533>>0]|0;
     $535 = $534&255;
     $536 = $p;
     $537 = ((($536)) + 23|0);
     $538 = HEAP8[$537>>0]|0;
     $539 = $538&255;
     __ZL7DoPitchPhii($531,$535,$539);
    }
    $540 = $prev;
    $541 = ((($540)) + 17|0);
    $542 = HEAP8[$541>>0]|0;
    $543 = $542&255;
    $544 = ($543|0)==(8);
    if ($544) {
     HEAP32[19003] = 0;
    }
    $545 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$545,$phdata,76092);
    $546 = ((($phdata)) + 4|0);
    $547 = ((($546)) + 40|0);
    $548 = HEAP32[$547>>2]|0;
    $549 = $548<<1;
    $550 = ((($fmtp)) + 44|0);
    HEAP32[$550>>2] = $549;
    $551 = ((($phdata)) + 68|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = ((($fmtp)) + 8|0);
    HEAP32[$553>>2] = $552;
    $554 = ((($phdata)) + 88|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = ((($fmtp)) + 16|0);
    HEAP32[$556>>2] = $555;
    $557 = $next;
    $558 = ((($557)) + 17|0);
    $559 = HEAP8[$558>>0]|0;
    $560 = $559&255;
    $561 = ($560|0)==(2);
    if ($561) {
     __ZL13StartSyllablev();
     $562 = $p;
     $563 = ((($562)) + 8|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = $p;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($564,0,$fmtp,$565,0)|0);
     break L53;
    }
    $566 = $prev;
    $567 = ((($566)) + 17|0);
    $568 = HEAP8[$567>>0]|0;
    $569 = $568&255;
    $570 = ($569|0)==(2);
    if ($570) {
     $571 = $p;
     $572 = HEAP16[$571>>1]|0;
     $573 = $572&65535;
     $574 = $573 & 1;
     $575 = ($574|0)!=(0);
     if ($575) {
      $576 = $p;
      $577 = ((($576)) + 8|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = $p;
      (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($578,0,$fmtp,$579,0)|0);
      break L53;
     }
    }
    HEAP32[19003] = 0;
    $580 = $p;
    $581 = ((($580)) + 8|0);
    $582 = HEAP32[$581>>2]|0;
    $583 = $p;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($582,0,$fmtp,$583,0)|0);
    HEAP32[19003] = 0;
    break;
   }
   case 3:  {
    dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $modulation = 0;
    $584 = $p;
    $585 = ((($584)) + 8|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = ((($586)) + 4|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = $588 & 128;
    $590 = ($589|0)!=(0);
    $$ = $590 ? 5 : 0;
    $modulation = $$;
    $591 = $p;
    $592 = HEAP16[$591>>1]|0;
    $593 = $592&65535;
    $594 = $593 & 1;
    $595 = ($594|0)!=(0);
    if (!($595)) {
     $596 = $p;
     $597 = ((($596)) + 20|0);
     $598 = HEAP8[$597>>0]|0;
     $599 = $598&255;
     __ZL11DoAmplitudeiPh($599,0);
     $600 = $p;
     $601 = ((($600)) + 16|0);
     $602 = HEAP8[$601>>0]|0;
     $603 = $602&255;
     $604 = (844 + ($603<<2)|0);
     $605 = HEAP32[$604>>2]|0;
     $606 = $p;
     $607 = ((($606)) + 22|0);
     $608 = HEAP8[$607>>0]|0;
     $609 = $608&255;
     $610 = $p;
     $611 = ((($610)) + 23|0);
     $612 = HEAP8[$611>>0]|0;
     $613 = $612&255;
     __ZL7DoPitchPhii($605,$609,$613);
    }
    $614 = $prev;
    $615 = ((($614)) + 17|0);
    $616 = HEAP8[$615>>0]|0;
    $617 = $616&255;
    $618 = ($617|0)==(8);
    if ($618) {
     HEAP32[19003] = 0;
    }
    $619 = $next;
    $620 = ((($619)) + 17|0);
    $621 = HEAP8[$620>>0]|0;
    $622 = $621&255;
    $623 = ($622|0)==(2);
    if ($623) {
     __ZL13StartSyllablev();
    }
    $624 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$624,$phdata,76092);
    $625 = ((($phdata)) + 4|0);
    $626 = ((($625)) + 28|0);
    $627 = HEAP32[$626>>2]|0;
    $628 = $p;
    $629 = ((($628)) + 18|0);
    $630 = HEAP8[$629>>0]|0;
    $631 = $630&255;
    $632 = (($627) - ($631))|0;
    $value = $632;
    $633 = ($632|0)>(0);
    if ($633) {
     $634 = $value;
     __ZL7DoPauseii($634,1);
    }
    $635 = ((($phdata)) + 4|0);
    $636 = ((($635)) + 40|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = $637<<1;
    $639 = ((($fmtp)) + 44|0);
    HEAP32[$639>>2] = $638;
    $640 = ((($phdata)) + 68|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = ((($fmtp)) + 8|0);
    HEAP32[$642>>2] = $641;
    $643 = ((($phdata)) + 88|0);
    $644 = HEAP32[$643>>2]|0;
    $645 = ((($fmtp)) + 16|0);
    HEAP32[$645>>2] = $644;
    $646 = ((($phdata)) + 68|0);
    $647 = ((($646)) + 16|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = ((($fmtp)) + 28|0);
    HEAP32[$649>>2] = $648;
    $650 = ((($phdata)) + 88|0);
    $651 = ((($650)) + 16|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = ((($fmtp)) + 32|0);
    HEAP32[$653>>2] = $652;
    $654 = $p;
    $655 = ((($654)) + 8|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = $p;
    $658 = $modulation;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($656,0,$fmtp,$657,$658)|0);
    break;
   }
   case 2:  {
    $659 = $p;
    $660 = ((($659)) + 8|0);
    $661 = HEAP32[$660>>2]|0;
    $ph = $661;
    $662 = $p;
    $663 = ((($662)) + 3|0);
    $664 = HEAP8[$663>>0]|0;
    $665 = $664&255;
    $666 = $665 & 15;
    $stress = $666;
    dest=$fmtp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $667 = $p;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$667,$phdata,76092);
    $668 = ((($phdata)) + 4|0);
    $669 = ((($668)) + 40|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = $670<<1;
    $672 = ((($fmtp)) + 44|0);
    HEAP32[$672>>2] = $671;
    $vowelstart_prev = 0;
    $673 = ((($phdata)) + 68|0);
    $674 = ((($673)) + 8|0);
    $675 = HEAP32[$674>>2]|0;
    $676 = ((($fmtp)) + 8|0);
    HEAP32[$676>>2] = $675;
    $677 = ($675|0)!=(0);
    if ($677) {
     $678 = HEAP32[$phdata>>2]|0;
     $679 = $678 & 2;
     $680 = ($679|0)==(0);
     if ($680) {
      $681 = ((($phdata)) + 88|0);
      $682 = ((($681)) + 8|0);
      $683 = HEAP32[$682>>2]|0;
      $684 = ((($fmtp)) + 12|0);
      HEAP32[$684>>2] = $683;
     } else {
      label = 113;
     }
    } else {
     label = 113;
    }
    if ((label|0) == 113) {
     label = 0;
     $685 = $prev;
     $686 = ((($685)) + 17|0);
     $687 = HEAP8[$686>>0]|0;
     $688 = $687&255;
     $689 = ($688|0)!=(0);
     if ($689) {
      $690 = $prev;
      __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$690,$phdata_prev,0);
      $691 = ((($phdata_prev)) + 68|0);
      $692 = ((($691)) + 8|0);
      $693 = HEAP32[$692>>2]|0;
      $694 = ((($fmtp)) + 8|0);
      HEAP32[$694>>2] = $693;
      $695 = ($693|0)!=(0);
      if ($695) {
       $696 = HEAP32[$phdata_prev>>2]|0;
       $697 = $696 & 2;
       $698 = ($697|0)!=(0);
       if ($698) {
        $vowelstart_prev = 1;
        $699 = ((($phdata_prev)) + 88|0);
        $700 = ((($699)) + 8|0);
        $701 = HEAP32[$700>>2]|0;
        $702 = ((($fmtp)) + 24|0);
        HEAP32[$702>>2] = $701;
       }
      }
      $703 = ((($phdata_prev)) + 108|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = ((($fmtp)) + 36|0);
      HEAP32[$705>>2] = $704;
      $706 = ((($phdata_prev)) + 108|0);
      $707 = ((($706)) + 4|0);
      $708 = HEAP32[$707>>2]|0;
      $709 = ((($fmtp)) + 40|0);
      HEAP32[$709>>2] = $708;
     }
    }
    $710 = ((($fmtp)) + 8|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = ($711|0)==(0);
    if ($712) {
     $713 = ((($fmtp)) + 4|0);
     HEAP32[$713>>2] = 1;
     HEAP32[$fmtp>>2] = 1;
     $714 = ((($phdata)) + 68|0);
     $715 = HEAP32[$714>>2]|0;
     $716 = ((($fmtp)) + 8|0);
     HEAP32[$716>>2] = $715;
    }
    $717 = ((($phdata)) + 88|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = ((($fmtp)) + 16|0);
    HEAP32[$719>>2] = $718;
    $720 = $p;
    $721 = ((($720)) + 16|0);
    $722 = HEAP8[$721>>0]|0;
    $723 = $722&255;
    $724 = (844 + ($723<<2)|0);
    $725 = HEAP32[$724>>2]|0;
    $pitch_env = $725;
    $amp_env = 0;
    $726 = $p;
    $727 = ((($726)) + 7|0);
    $728 = HEAP8[$727>>0]|0;
    $729 = $728&255;
    $730 = ($729|0)!=(0);
    if ($730) {
     $731 = $p;
     $732 = ((($731)) + 7|0);
     $733 = HEAP8[$732>>0]|0;
     $734 = $733&255;
     __Z17InterpretPhoneme2iP12PHONEME_DATA($734,$phdata_tone);
     $735 = ((($phdata_tone)) + 124|0);
     $736 = HEAP32[$735>>2]|0;
     $737 = (__Z11GetEnvelopei($736)|0);
     $pitch_env = $737;
     $738 = ((($phdata_tone)) + 128|0);
     $739 = HEAP32[$738>>2]|0;
     $740 = ($739|0)>(0);
     if ($740) {
      $741 = ((($phdata_tone)) + 128|0);
      $742 = HEAP32[$741>>2]|0;
      $743 = (__Z11GetEnvelopei($742)|0);
      $amp_env = $743;
     }
    }
    __ZL13StartSyllablev();
    $modulation = 2;
    $744 = $stress;
    $745 = ($744|0)<=(1);
    if ($745) {
     $modulation = 1;
    } else {
     $746 = $stress;
     $747 = ($746|0)>=(7);
     if ($747) {
      $modulation = 3;
     }
    }
    $748 = $prev;
    $749 = ((($748)) + 17|0);
    $750 = HEAP8[$749>>0]|0;
    $751 = $750&255;
    $752 = ($751|0)==(5);
    L175: do {
     if ($752) {
      label = 129;
     } else {
      $753 = $prev;
      $754 = ((($753)) + 17|0);
      $755 = HEAP8[$754>>0]|0;
      $756 = $755&255;
      $757 = ($756|0)==(7);
      if ($757) {
       label = 129;
      } else {
       $775 = $prev;
       $776 = ((($775)) + 17|0);
       $777 = HEAP8[$776>>0]|0;
       $778 = $777&255;
       $779 = ($778|0)==(3);
       do {
        if (!($779)) {
         $780 = $prev;
         $781 = ((($780)) + 17|0);
         $782 = HEAP8[$781>>0]|0;
         $783 = $782&255;
         $784 = ($783|0)==(8);
         if ($784) {
          break;
         }
         $802 = $vowelstart_prev;
         $803 = ($802|0)!=(0);
         if ($803) {
          $804 = HEAP32[(852)>>2]|0;
          $805 = $p;
          $806 = ((($805)) + 23|0);
          $807 = HEAP8[$806>>0]|0;
          $808 = $807&255;
          $809 = (($808) - 15)|0;
          $810 = $p;
          $811 = ((($810)) + 23|0);
          $812 = HEAP8[$811>>0]|0;
          $813 = $812&255;
          __ZL7DoPitchPhii($804,$809,$813);
          $814 = $p;
          $815 = ((($814)) + 20|0);
          $816 = HEAP8[$815>>0]|0;
          $817 = $816&255;
          $818 = (($817) - 1)|0;
          $819 = $amp_env;
          __ZL11DoAmplitudeiPh($818,$819);
          $820 = $ph;
          $821 = $p;
          $822 = $modulation;
          (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($820,1,$fmtp,$821,$822)|0);
          $823 = $pitch_env;
          $824 = $p;
          $825 = ((($824)) + 22|0);
          $826 = HEAP8[$825>>0]|0;
          $827 = $826&255;
          $828 = $p;
          $829 = ((($828)) + 23|0);
          $830 = HEAP8[$829>>0]|0;
          $831 = $830&255;
          __ZL7DoPitchPhii($823,$827,$831);
          break L175;
         }
         $832 = $p;
         $833 = HEAP16[$832>>1]|0;
         $834 = $833&65535;
         $835 = $834 & 1;
         $836 = ($835|0)!=(0);
         if (!($836)) {
          $837 = $p;
          $838 = ((($837)) + 20|0);
          $839 = HEAP8[$838>>0]|0;
          $840 = $839&255;
          $841 = $amp_env;
          __ZL11DoAmplitudeiPh($840,$841);
          $842 = $pitch_env;
          $843 = $p;
          $844 = ((($843)) + 22|0);
          $845 = HEAP8[$844>>0]|0;
          $846 = $845&255;
          $847 = $p;
          $848 = ((($847)) + 23|0);
          $849 = HEAP8[$848>>0]|0;
          $850 = $849&255;
          __ZL7DoPitchPhii($842,$846,$850);
         }
         $851 = $ph;
         $852 = $p;
         $853 = $modulation;
         (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($851,1,$fmtp,$852,$853)|0);
         break L175;
        }
       } while(0);
       $785 = $p;
       $786 = ((($785)) + 20|0);
       $787 = HEAP8[$786>>0]|0;
       $788 = $787&255;
       $789 = $amp_env;
       __ZL11DoAmplitudeiPh($788,$789);
       $790 = $ph;
       $791 = $p;
       $792 = $modulation;
       (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($790,1,$fmtp,$791,$792)|0);
       $793 = $pitch_env;
       $794 = $p;
       $795 = ((($794)) + 22|0);
       $796 = HEAP8[$795>>0]|0;
       $797 = $796&255;
       $798 = $p;
       $799 = ((($798)) + 23|0);
       $800 = HEAP8[$799>>0]|0;
       $801 = $800&255;
       __ZL7DoPitchPhii($793,$797,$801);
      }
     }
    } while(0);
    if ((label|0) == 129) {
     label = 0;
     $758 = $p;
     $759 = ((($758)) + 20|0);
     $760 = HEAP8[$759>>0]|0;
     $761 = $760&255;
     $762 = $amp_env;
     __ZL11DoAmplitudeiPh($761,$762);
     $763 = $pitch_env;
     $764 = $p;
     $765 = ((($764)) + 22|0);
     $766 = HEAP8[$765>>0]|0;
     $767 = $766&255;
     $768 = $p;
     $769 = ((($768)) + 23|0);
     $770 = HEAP8[$769>>0]|0;
     $771 = $770&255;
     __ZL7DoPitchPhii($763,$767,$771);
     $772 = $ph;
     $773 = $p;
     $774 = $modulation;
     (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($772,1,$fmtp,$773,$774)|0);
    }
    $854 = HEAP32[19041]|0;
    $855 = ($854|0)!=(0);
    $856 = $done_phoneme_marker;
    $857 = ($856|0)==(0);
    $or$cond = $855 & $857;
    if ($or$cond) {
     $858 = $p;
     $859 = ((($858)) + 8|0);
     $860 = HEAP32[$859>>2]|0;
     $861 = $p;
     $862 = $use_ipa;
     (__Z15WritePhMnemonicPcP11PHONEME_TABP12PHONEME_LISTiPi($phoneme_name,$860,$861,$862,0)|0);
     $863 = HEAP32[19029]|0;
     __Z15DoPhonemeMarkeriiiPc(7,$863,0,$phoneme_name);
    }
    $864 = ((($phdata)) + 68|0);
    $865 = HEAP32[$864>>2]|0;
    $866 = ((($fmtp)) + 8|0);
    HEAP32[$866>>2] = $865;
    $867 = ((($phdata)) + 88|0);
    $868 = HEAP32[$867>>2]|0;
    $869 = ((($fmtp)) + 16|0);
    HEAP32[$869>>2] = $868;
    $870 = ((($fmtp)) + 36|0);
    HEAP32[$870>>2] = 0;
    $871 = ((($fmtp)) + 40|0);
    HEAP32[$871>>2] = 0;
    $872 = ((($phdata)) + 68|0);
    $873 = ((($872)) + 12|0);
    $874 = HEAP32[$873>>2]|0;
    $875 = ((($fmtp)) + 20|0);
    HEAP32[$875>>2] = $874;
    $876 = ($874|0)!=(0);
    do {
     if ($876) {
      $877 = ((($phdata)) + 88|0);
      $878 = ((($877)) + 12|0);
      $879 = HEAP32[$878>>2]|0;
      $880 = ((($fmtp)) + 24|0);
      HEAP32[$880>>2] = $879;
     } else {
      $881 = $next;
      $882 = ((($881)) + 17|0);
      $883 = HEAP8[$882>>0]|0;
      $884 = $883&255;
      $885 = ($884|0)!=(0);
      if (!($885)) {
       break;
      }
      $886 = ((($fmtp)) + 24|0);
      HEAP32[$886>>2] = 0;
      $887 = $next;
      __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA(0,0,$887,$phdata_next,0);
      $888 = ((($fmtp)) + 4|0);
      HEAP32[$888>>2] = 1;
      $889 = ((($phdata_next)) + 108|0);
      $890 = ((($889)) + 8|0);
      $891 = HEAP32[$890>>2]|0;
      $892 = ((($fmtp)) + 36|0);
      HEAP32[$892>>2] = $891;
      $893 = ((($phdata_next)) + 108|0);
      $894 = ((($893)) + 12|0);
      $895 = HEAP32[$894>>2]|0;
      $896 = ((($fmtp)) + 40|0);
      HEAP32[$896>>2] = $895;
      $897 = ((($phdata_next)) + 68|0);
      $898 = ((($897)) + 12|0);
      $899 = HEAP32[$898>>2]|0;
      $900 = ((($fmtp)) + 20|0);
      HEAP32[$900>>2] = $899;
      $901 = ($899|0)!=(0);
      if (!($901)) {
       break;
      }
      $902 = ((($phdata_next)) + 88|0);
      $903 = ((($902)) + 12|0);
      $904 = HEAP32[$903>>2]|0;
      $905 = ((($fmtp)) + 24|0);
      HEAP32[$905>>2] = $904;
     }
    } while(0);
    $906 = $ph;
    $907 = $p;
    $908 = $modulation;
    (__Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($906,2,$fmtp,$907,$908)|0);
    break;
   }
   default: {
   }
   }
  } while(0);
  $909 = HEAP32[19020]|0;
  $910 = (($909) + 1)|0;
  HEAP32[19020] = $910;
 }
 if ((label|0) == 16) {
  $0 = 1;
  $917 = $0;
  STACKTOP = sp;return ($917|0);
 }
 __ZL8EndPitchi(1);
 $911 = $2;
 $912 = HEAP32[$911>>2]|0;
 $913 = ($912|0)>(0);
 if ($913) {
  $914 = HEAP32[10367]|0;
  $915 = HEAP32[19056]|0;
  __Z8DoMarkeriiii(5,$914,0,$915);
  $916 = $2;
  HEAP32[$916>>2] = 0;
 }
 $0 = 0;
 $917 = $0;
 STACKTOP = sp;return ($917|0);
}
function __ZL12EndAmplitudev() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19019]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[19002]|0;
 $3 = (80488 + ($2<<4)|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[19019]|0;
  $8 = HEAP32[19002]|0;
  $9 = (80488 + ($8<<4)|0);
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = $7;
 }
 HEAP32[19019] = 0;
 return;
}
function __ZL11DoAmplitudeiPh($amp,$amp_env) {
 $amp = $amp|0;
 $amp_env = $amp_env|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $amp;
 $1 = $amp_env;
 $2 = HEAP32[20803]|0;
 HEAP32[19002] = $2;
 HEAP32[19019] = 0;
 $3 = HEAP32[20803]|0;
 $4 = (80488 + ($3<<4)|0);
 $q = $4;
 $5 = $q;
 HEAP32[$5>>2] = 8;
 $6 = $q;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = $8;
 $10 = $q;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = $q;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $12;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __ZL7DoPitchPhii($env,$pitch1,$pitch2) {
 $env = $env|0;
 $pitch1 = $pitch1|0;
 $pitch2 = $pitch2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $env;
 $1 = $pitch1;
 $2 = $pitch2;
 __ZL8EndPitchi(0);
 $3 = $1;
 $4 = ($3|0)==(255);
 if ($4) {
  $1 = 55;
  $2 = 76;
  $5 = HEAP32[211]|0;
  $0 = $5;
 }
 $6 = HEAP32[20803]|0;
 HEAP32[19001] = $6;
 HEAP32[19011] = 0;
 $7 = $2;
 $8 = ($7|0)<(0);
 if ($8) {
  $2 = 0;
 }
 $9 = HEAP32[20803]|0;
 $10 = (80488 + ($9<<4)|0);
 $q = $10;
 $11 = $q;
 HEAP32[$11>>2] = 9;
 $12 = $q;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = $0;
 $15 = $14;
 $16 = $q;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = $18 << 16;
 $20 = $2;
 $21 = (($19) + ($20))|0;
 $22 = $q;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = $21;
 __Z8WcmdqIncv();
 STACKTOP = sp;return;
}
function __ZL13StartSyllablev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19013]|0;
 $1 = HEAP32[19014]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[20803]|0;
 HEAP32[19013] = $3;
 return;
}
function __Z12SynthOnTimerv() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[19030]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  $3 = (__Z17WavegenCloseSoundv()|0);
  $0 = $3;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 while(1) {
  $4 = (__Z9WcmdqUsedv()|0);
  $5 = ($4|0)>(0);
  if ($5) {
   (__Z16WavegenOpenSoundv()|0);
  }
  $6 = (__Z8GenerateP12PHONEME_LISTPii(50632,50628,1)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   (__Z15SpeakNextClauseP8_IO_FILEPKvi(0,0,1)|0);
  }
  $8 = HEAP32[19054]|0;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
 }
 $0 = 0;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function __Z15SpeakNextClauseP8_IO_FILEPKvi($f_in,$text_in,$control) {
 $f_in = $f_in|0;
 $text_in = $text_in|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $clause_tone = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $phon_out = 0, $vararg_buffer = 0, $voice_change = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $clause_tone = sp + 12|0;
 $voice_change = sp + 8|0;
 $1 = $f_in;
 $2 = $text_in;
 $3 = $control;
 $4 = $3;
 $5 = ($4|0)==(4);
 if ($5) {
  $6 = HEAP32[19031]|0;
  $7 = ($6|0)==(0|0);
  $8 = HEAP32[19032]|0;
  $9 = ($8|0)==(0|0);
  $or$cond = $7 & $9;
  if ($or$cond) {
   $0 = 0;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  } else {
   $0 = 1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 }
 $10 = $3;
 $11 = ($10|0)==(2);
 if ($11) {
  HEAP32[19030] = 0;
  HEAP32[19032] = 0;
  $12 = HEAP32[19031]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = HEAP32[19031]|0;
   (_fclose($14)|0);
   HEAP32[19031] = 0;
  }
  HEAP32[12657] = 0;
  __Z9WcmdqStopv();
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $15 = $3;
 $16 = ($15|0)==(3);
 if ($16) {
  $17 = HEAP32[19033]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   HEAP32[19030] = 0;
   HEAP32[19033] = 2;
  } else {
   (__Z16WavegenOpenSoundv()|0);
   HEAP32[19030] = 1;
   HEAP32[19033] = 0;
   (__Z8GenerateP12PHONEME_LISTPii(50632,50628,0)|0);
  }
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $19 = $3;
 $20 = ($19|0)==(5);
 if ($20) {
  HEAP32[12657] = 0;
  __Z9WcmdqStopv();
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $21 = $1;
 $22 = ($21|0)!=(0|0);
 $23 = $2;
 $24 = ($23|0)!=(0|0);
 $or$cond3 = $22 | $24;
 if ($or$cond3) {
  $25 = $1;
  HEAP32[19031] = $25;
  $26 = $2;
  HEAP32[19032] = $26;
  HEAP32[19030] = 1;
  HEAP32[19033] = 0;
 }
 $27 = HEAP32[19031]|0;
 $28 = ($27|0)==(0|0);
 $29 = HEAP32[19032]|0;
 $30 = ($29|0)==(0|0);
 $or$cond5 = $28 & $30;
 if ($or$cond5) {
  HEAP32[19054] = 0;
  HEAP32[19030] = 0;
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $31 = HEAP32[19031]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = HEAP32[19031]|0;
  $34 = (_feof($33)|0);
  $35 = ($34|0)!=(0);
  if ($35) {
   HEAP32[19030] = 0;
   $36 = HEAP32[19031]|0;
   (_fclose($36)|0);
   HEAP32[19031] = 0;
   $0 = 0;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 }
 $37 = HEAP32[11137]|0;
 $38 = HEAP32[1124]|0;
 $39 = ((($38)) + 60|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($37|0)!=($40|0);
 if ($41) {
  $42 = HEAP32[1124]|0;
  $43 = ((($42)) + 60|0);
  $44 = HEAP32[$43>>2]|0;
  __Z18SelectPhonemeTablei($44);
 }
 $45 = HEAP32[19035]|0;
 $46 = HEAP32[19031]|0;
 $47 = HEAP32[19032]|0;
 $48 = (__Z15TranslateClauseP10TranslatorP8_IO_FILEPKvPiPPc($45,$46,$47,$clause_tone,$voice_change)|0);
 HEAP32[19032] = $48;
 $49 = HEAP32[19035]|0;
 $50 = HEAP32[$clause_tone>>2]|0;
 __Z11CalcPitchesP10Translatori($49,$50);
 $51 = HEAP32[19035]|0;
 __Z11CalcLengthsP10Translator($51);
 $52 = HEAP32[19040]|0;
 $53 = $52 & 15;
 $54 = ($53|0)!=(0);
 $55 = HEAP32[10338]|0;
 $56 = ($55|0)!=(0|0);
 $or$cond7 = $54 | $56;
 if ($or$cond7) {
  $57 = HEAP32[19040]|0;
  $58 = (__Z26GetTranslatedPhonemeStringi($57)|0);
  $phon_out = $58;
  $59 = HEAP32[19040]|0;
  $60 = $59 & 15;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = HEAP32[19037]|0;
   $63 = $phon_out;
   HEAP32[$vararg_buffer>>2] = $63;
   (_fprintf($62,22671,$vararg_buffer)|0);
  }
  $64 = HEAP32[10338]|0;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   $66 = HEAP32[10338]|0;
   $67 = $phon_out;
   (FUNCTION_TABLE_ii[$66 & 31]($67)|0);
  }
 }
 $68 = HEAP32[19054]|0;
 $69 = ($68|0)!=(0);
 if ($69) {
  HEAP32[12657] = 0;
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 (__Z8GenerateP12PHONEME_LISTPii(50632,50628,0)|0);
 (__Z16WavegenOpenSoundv()|0);
 $70 = HEAP32[$voice_change>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $72 = HEAP32[$voice_change>>2]|0;
  $73 = (__Z16LoadVoiceVariantPKci($72,0)|0);
  HEAP32[19034] = $73;
 }
 $74 = HEAP32[19034]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = HEAP32[1124]|0;
  __Z13DoVoiceChangeP7voice_t($76);
  HEAP32[19034] = 0;
 }
 $0 = 1;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function __Z13SetLengthModsP10Translatori($tr,$value) {
 $tr = $tr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $value;
 $2 = $1;
 $3 = (($2|0) % 100)&-1;
 $4 = (3020 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 192|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = ((($8)) + 196|0);
 HEAP32[$9>>2] = $5;
 $10 = $1;
 $11 = (($10|0) / 100)&-1;
 $value2 = $11;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $value2;
 $14 = (3020 + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = ((($16)) + 196|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function __Z7IsAlphaj($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0;
 var $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = (__Z9iswalpha2i($2)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $0 = 1;
  } else {
   $5 = $1;
   $6 = ($5>>>0)<(768);
   if ($6) {
    $0 = 0;
    break;
   }
   $7 = $1;
   $8 = ($7>>>0)>=(2305);
   $9 = $1;
   $10 = ($9>>>0)<=(3575);
   $or$cond = $8 & $10;
   $11 = $1;
   if ($or$cond) {
    $12 = $11 & 127;
    $13 = ($12>>>0)<(100);
    if ($13) {
     $0 = 1;
     break;
    }
    $14 = $1;
    $15 = (__Z11lookupwcharPKti(9472,$14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     $0 = 1;
     break;
    }
    $17 = $1;
    $18 = ($17>>>0)>=(3450);
    $19 = $1;
    $20 = ($19>>>0)<=(3455);
    $or$cond3 = $18 & $20;
    if ($or$cond3) {
     $0 = 1;
     break;
    } else {
     $0 = 0;
     break;
    }
   }
   $21 = ($11>>>0)>=(1456);
   $22 = $1;
   $23 = ($22>>>0)<=(1474);
   $or$cond5 = $21 & $23;
   if ($or$cond5) {
    $0 = 1;
    break;
   }
   $24 = $1;
   $25 = ($24|0)==(1541);
   if ($25) {
    $0 = 1;
    break;
   }
   $26 = $1;
   $27 = ($26|0)==(1648);
   if (!($27)) {
    $28 = $1;
    $29 = ($28>>>0)>=(1611);
    $30 = $1;
    $31 = ($30>>>0)<=(1630);
    $or$cond7 = $29 & $31;
    if (!($or$cond7)) {
     $32 = $1;
     $33 = ($32>>>0)>=(768);
     $34 = $1;
     $35 = ($34>>>0)<=(879);
     $or$cond9 = $33 & $35;
     if ($or$cond9) {
      $0 = 1;
      break;
     }
     $36 = $1;
     $37 = ($36>>>0)>=(1920);
     $38 = $1;
     $39 = ($38>>>0)<=(1969);
     $or$cond11 = $37 & $39;
     if ($or$cond11) {
      $0 = 1;
      break;
     }
     $40 = $1;
     $41 = ($40>>>0)>=(3904);
     $42 = $1;
     $43 = ($42>>>0)<=(4028);
     $or$cond13 = $41 & $43;
     if ($or$cond13) {
      $0 = 1;
      break;
     }
     $44 = $1;
     $45 = ($44>>>0)>=(4352);
     $46 = $1;
     $47 = ($46>>>0)<=(4607);
     $or$cond15 = $45 & $47;
     if ($or$cond15) {
      $0 = 1;
      break;
     }
     $48 = $1;
     $49 = ($48>>>0)>=(10240);
     $50 = $1;
     $51 = ($50>>>0)<=(10495);
     $or$cond17 = $49 & $51;
     if ($or$cond17) {
      $0 = 1;
      break;
     }
     $52 = $1;
     $53 = ($52>>>0)>(12352);
     $54 = $1;
     $55 = ($54>>>0)<=(42752);
     $or$cond19 = $53 & $55;
     if ($or$cond19) {
      $0 = 1;
      break;
     } else {
      $0 = 0;
      break;
     }
    }
   }
   $0 = 1;
  }
 } while(0);
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function __Z11lookupwcharPKti($list,$c) {
 $list = $list|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $list;
 $2 = $c;
 $ix = 0;
 while(1) {
  $3 = $ix;
  $4 = $1;
  $5 = (($4) + ($3<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6&65535;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $ix;
  $10 = $1;
  $11 = (($10) + ($9<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  $16 = $ix;
  $17 = (($16) + 1)|0;
  if ($15) {
   label = 4;
   break;
  }
  $ix = $17;
 }
 if ((label|0) == 4) {
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __Z9IsDigit09j($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2>>>0)>=(48);
 $4 = $1;
 $5 = ($4>>>0)<=(57);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $0 = 1;
 } else {
  $0 = 0;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function __Z7IsDigitj($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = (_iswdigit($2)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $0 = 1;
  } else {
   $5 = $1;
   $6 = ($5>>>0)>=(2406);
   $7 = $1;
   $8 = ($7>>>0)<=(2415);
   $or$cond = $6 & $8;
   if ($or$cond) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function __Z7IsSpacej($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $0 = 0;
  } else {
   $4 = $1;
   $5 = ($4>>>0)>=(9472);
   $6 = $1;
   $7 = ($6>>>0)<(9632);
   $or$cond = $5 & $7;
   if ($or$cond) {
    $0 = 1;
    break;
   }
   $8 = $1;
   $9 = ($8>>>0)>=(65529);
   $10 = $1;
   $11 = ($10>>>0)<=(65535);
   $or$cond3 = $9 & $11;
   if ($or$cond3) {
    $0 = 1;
    break;
   } else {
    $12 = $1;
    $13 = (_iswspace($12)|0);
    $0 = $13;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function __Z16DeleteTranslatorP10Translator($tr) {
 $tr = $tr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $0;
 $2 = ((($1)) + 808|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 808|0);
  $7 = HEAP32[$6>>2]|0;
  __Z4FreePv($7);
 }
 $8 = $0;
 __Z4FreePv($8);
 STACKTOP = sp;return;
}
function __Z12lookupwchar2PKti($list,$c) {
 $list = $list|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $list;
 $2 = $c;
 $ix = 0;
 while(1) {
  $3 = $ix;
  $4 = $1;
  $5 = (($4) + ($3<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6&65535;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $ix;
  $10 = $1;
  $11 = (($10) + ($9<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  $16 = $ix;
  if ($15) {
   label = 4;
   break;
  }
  $22 = (($16) + 2)|0;
  $ix = $22;
 }
 if ((label|0) == 4) {
  $17 = (($16) + 1)|0;
  $18 = $1;
  $19 = (($18) + ($17<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $0 = $21;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __Z9IsBracketi($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)>=(8212);
 $4 = $1;
 $5 = ($4|0)<=(8223);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $0 = 1;
  $8 = $0;
  STACKTOP = sp;return ($8|0);
 } else {
  $6 = $1;
  $7 = (__Z11lookupwcharPKti(9478,$6)|0);
  $0 = $7;
  $8 = $0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __Z8utf8_outjPc($c,$buf) {
 $c = $c|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $n_bytes = 0, $shift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $buf;
 $3 = $1;
 $4 = ($3>>>0)<(128);
 $5 = $1;
 if ($4) {
  $6 = $5&255;
  $7 = $2;
  HEAP8[$7>>0] = $6;
  $0 = 1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $8 = ($5>>>0)>=(1114112);
 if ($8) {
  $9 = $2;
  HEAP8[$9>>0] = 32;
  $0 = 1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $10 = $1;
 $11 = ($10>>>0)<(2048);
 do {
  if ($11) {
   $n_bytes = 1;
  } else {
   $12 = $1;
   $13 = ($12>>>0)<(65536);
   if ($13) {
    $n_bytes = 2;
    break;
   } else {
    $n_bytes = 3;
    break;
   }
  }
 } while(0);
 $14 = $n_bytes;
 $15 = ($14*6)|0;
 $shift = $15;
 $16 = $n_bytes;
 $17 = (22976 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $1;
 $21 = $shift;
 $22 = $20 >>> $21;
 $23 = $19 | $22;
 $24 = $23&255;
 $25 = $2;
 HEAP8[$25>>0] = $24;
 $j = 0;
 while(1) {
  $26 = $j;
  $27 = $n_bytes;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $shift;
  $30 = (($29) - 6)|0;
  $shift = $30;
  $31 = $1;
  $32 = $shift;
  $33 = $31 >>> $32;
  $34 = $33 & 63;
  $35 = (128 + ($34))|0;
  $36 = $35&255;
  $37 = $j;
  $38 = (($37) + 1)|0;
  $39 = $2;
  $40 = (($39) + ($38)|0);
  HEAP8[$40>>0] = $36;
  $41 = $j;
  $42 = (($41) + 1)|0;
  $j = $42;
 }
 $43 = $n_bytes;
 $44 = (($43) + 1)|0;
 $0 = $44;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function __Z11utf8_nbytesPKc($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $c = $3;
 $4 = $c;
 $5 = $4&255;
 $6 = ($5|0)<(128);
 do {
  if ($6) {
   $0 = 1;
  } else {
   $7 = $c;
   $8 = $7&255;
   $9 = ($8|0)<(224);
   if ($9) {
    $0 = 2;
    break;
   }
   $10 = $c;
   $11 = $10&255;
   $12 = ($11|0)<(240);
   if ($12) {
    $0 = 3;
    break;
   } else {
    $0 = 4;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function __Z8utf8_in2PiPKci($c,$buf,$backwards) {
 $c = $c|0;
 $buf = $buf|0;
 $backwards = $backwards|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1 = 0, $ix = 0, $n_bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $buf;
 $2 = $backwards;
 while(1) {
  $3 = $1;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = $5 & 192;
  $7 = ($6|0)==(128);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = ($8|0)!=(0);
  $10 = $1;
  if ($9) {
   $11 = ((($10)) + -1|0);
   $1 = $11;
   continue;
  } else {
   $12 = ((($10)) + 1|0);
   $1 = $12;
   continue;
  }
 }
 $n_bytes = 0;
 $13 = $1;
 $14 = ((($13)) + 1|0);
 $1 = $14;
 $15 = HEAP8[$13>>0]|0;
 $16 = $15 << 24 >> 24;
 $c1 = $16;
 $17 = $16 & 128;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $47 = $c1;
  $48 = $0;
  HEAP32[$48>>2] = $47;
  $49 = $n_bytes;
  $50 = (($49) + 1)|0;
  STACKTOP = sp;return ($50|0);
 }
 $19 = $c1;
 $20 = $19 & 224;
 $21 = ($20|0)==(192);
 do {
  if ($21) {
   $n_bytes = 1;
  } else {
   $22 = $c1;
   $23 = $22 & 240;
   $24 = ($23|0)==(224);
   if ($24) {
    $n_bytes = 2;
    break;
   }
   $25 = $c1;
   $26 = $25 & 248;
   $27 = ($26|0)==(240);
   if ($27) {
    $n_bytes = 3;
   }
  }
 } while(0);
 $28 = $n_bytes;
 $29 = (22980 + ($28)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $c1;
 $33 = $32 & $31;
 $c1 = $33;
 $ix = 0;
 while(1) {
  $34 = $ix;
  $35 = $n_bytes;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $c1;
  $38 = $37 << 6;
  $39 = $1;
  $40 = ((($39)) + 1|0);
  $1 = $40;
  $41 = HEAP8[$39>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = $42 & 63;
  $44 = (($38) + ($43))|0;
  $c1 = $44;
  $45 = $ix;
  $46 = (($45) + 1)|0;
  $ix = $46;
 }
 $47 = $c1;
 $48 = $0;
 HEAP32[$48>>2] = $47;
 $49 = $n_bytes;
 $50 = (($49) + 1)|0;
 STACKTOP = sp;return ($50|0);
}
function __Z7utf8_inPiPKc($c,$buf) {
 $c = $c|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $buf;
 $2 = $0;
 $3 = $1;
 $4 = (__Z8utf8_in2PiPKci($2,$3,0)|0);
 STACKTOP = sp;return ($4|0);
}
function __Z8strchr_wPKci($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $c;
 $3 = $2;
 $4 = ($3|0)>=(128);
 if ($4) {
  $0 = 0;
 } else {
  $5 = $1;
  $6 = $2;
  $7 = (_strchr($5,$6)|0);
  $0 = $7;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __Z24ChangeEquivalentPhonemesP10TranslatoriPc($tr,$lang2,$phonemes) {
 $tr = $tr|0;
 $lang2 = $lang2|0;
 $phonemes = $phonemes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eqlist = 0, $ix = 0, $len = 0, $p = 0, $p_in = 0, $p_out = 0, $pb = 0, $phon = 0, $phonbuf = 0, $remove_stress = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $phonbuf = sp + 72|0;
 $1 = $tr;
 $2 = $lang2;
 $3 = $phonemes;
 $remove_stress = 0;
 $4 = $1;
 $5 = ((($4)) + 404|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (45592 + (($6*48)|0)|0);
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $ix = $9;
 $10 = ($9|0)==(0);
 if ($10) {
  $0 = 0;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $11 = $ix;
 $12 = HEAP32[11395]|0;
 $13 = (($12) + ($11)|0);
 $pb = $13;
 while(1) {
  $14 = $pb;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)==(0);
  if ($17) {
   label = 5;
   break;
  }
  $18 = $pb;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $2;
  $22 = ($20|0)==($21|0);
  $23 = $pb;
  if ($22) {
   break;
  }
  $24 = ((($23)) + 2|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 8;
  $28 = $pb;
  $29 = ((($28)) + 3|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($27) + ($31))|0;
  $len = $32;
  $33 = $len;
  $34 = $33<<2;
  $35 = $pb;
  $36 = (($35) + ($34)|0);
  $pb = $36;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $37 = ((($23)) + 1|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $remove_stress = $39;
 $40 = HEAP32[19040]|0;
 $41 = $40 & 8;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $3;
  __Z14DecodePhonemesPKcPc($43,$phonbuf);
  $44 = HEAP32[19037]|0;
  $45 = $2;
  $46 = (45592 + (($45*48)|0)|0);
  $47 = $1;
  $48 = ((($47)) + 404|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (45592 + (($49*48)|0)|0);
  HEAP32[$vararg_buffer>>2] = $46;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $phonbuf;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $50;
  (_fprintf($44,22984,$vararg_buffer)|0);
 }
 $51 = $3;
 $p_in = $51;
 $52 = $pb;
 $53 = ((($52)) + 8|0);
 $eqlist = $53;
 $p_out = $phonbuf;
 while(1) {
  $54 = $p_in;
  $55 = ((($54)) + 1|0);
  $p_in = $55;
  $56 = HEAP8[$54>>0]|0;
  $phon = $56;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)!=(0);
  if (!($58)) {
   break;
  }
  $59 = $remove_stress;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $phon;
   $62 = $61 << 24 >> 24;
   $63 = $62 & 255;
   $64 = ($63|0)<(8);
   if ($64) {
    continue;
   }
  }
  $65 = $eqlist;
  $p = $65;
  while(1) {
   $66 = $p;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = ($68|0)!=(0);
   if (!($69)) {
    break;
   }
   $70 = $p;
   $71 = ((($70)) + 1|0);
   $72 = (_strlen($71)|0);
   $len = $72;
   $73 = $p;
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = $phon;
   $77 = $76 << 24 >> 24;
   $78 = ($75|0)==($77|0);
   if ($78) {
    label = 17;
    break;
   }
   $85 = $len;
   $86 = (($85) + 2)|0;
   $87 = $p;
   $88 = (($87) + ($86)|0);
   $p = $88;
  }
  if ((label|0) == 17) {
   label = 0;
   $79 = $p_out;
   $80 = $p;
   $81 = ((($80)) + 1|0);
   (_strcpy($79,$81)|0);
   $82 = $len;
   $83 = $p_out;
   $84 = (($83) + ($82)|0);
   $p_out = $84;
  }
  $89 = $p;
  $90 = HEAP8[$89>>0]|0;
  $91 = $90 << 24 >> 24;
  $92 = ($91|0)==(0);
  if (!($92)) {
   continue;
  }
  $93 = $phon;
  $94 = $p_out;
  $95 = ((($94)) + 1|0);
  $p_out = $95;
  HEAP8[$94>>0] = $93;
 }
 $96 = $p_out;
 HEAP8[$96>>0] = 0;
 $97 = $remove_stress;
 $98 = ($97|0)!=(0);
 if ($98) {
  $99 = $1;
  __Z13SetWordStressP10TranslatorPcPjii($99,$phonbuf,0,-1,0);
 }
 $100 = $3;
 (_strcpy($100,$phonbuf)|0);
 $101 = HEAP32[19040]|0;
 $102 = $101 & 8;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = $1;
  $105 = ((($104)) + 404|0);
  $106 = HEAP32[$105>>2]|0;
  __Z18SelectPhonemeTablei($106);
  $107 = $3;
  __Z14DecodePhonemesPKcPc($107,$phonbuf);
  $108 = HEAP32[19037]|0;
  HEAP32[$vararg_buffer3>>2] = $phonbuf;
  (_fprintf($108,23002,$vararg_buffer3)|0);
 }
 $0 = 1;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function __Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($tr,$word_start,$next_pause,$wtab,$word_out) {
 $tr = $tr|0;
 $word_start = $word_start|0;
 $next_pause = $next_pause|0;
 $wtab = $wtab|0;
 $word_out = $word_out|0;
 var $$ = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add_plural_suffix = 0, $add_suffix_phonemes = 0, $c_temp = 0, $confirm_prefix = 0, $dictionary_flags = 0, $dictionary_flags2 = 0, $emphasize_allcaps = 0, $end2 = 0, $end_flags = 0, $end_phonemes = 0, $end_phonemes2 = 0, $end_phonemes21 = 0;
 var $end_type = 0, $end_type1 = 0, $first_char = 0, $found = 0, $ix = 0, $last_char = 0, $length = 0, $loopcount = 0, $more_suffixes = 0, $n_chars = 0, $non_initial = 0, $or$cond = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0;
 var $p2 = 0, $pfix = 0, $phonemes = 0, $phonemes2 = 0, $posn = 0, $prefix_chars = 0, $prefix_flags = 0, $prefix_phonemes = 0, $prefix_phonemes2 = 0, $prefix_stress = 0, $prefix_type = 0, $spell_word = 0, $stress_bits = 0, $unpron_phonemes = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_ptr25 = 0;
 var $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $was_unpronouncable = 0, $wc = 0, $wflags = 0, $wmark = 0, $word1 = 0, $word_copy = 0, $word_copy2 = 0, $word_copy_length = 0, $word_length = 0, $wordpf = 0, $wordx = 0, $wtab_null = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer32 = sp + 48|0;
 $vararg_buffer27 = sp + 32|0;
 $vararg_buffer22 = sp + 16|0;
 $vararg_buffer19 = sp + 8|0;
 $vararg_buffer = sp;
 $word1 = sp + 316|0;
 $dictionary_flags = sp + 288|0;
 $dictionary_flags2 = sp + 280|0;
 $wordx = sp + 256|0;
 $phonemes = sp + 1952|0;
 $phonemes2 = sp + 1752|0;
 $prefix_phonemes = sp + 1552|0;
 $unpron_phonemes = sp + 1352|0;
 $end_phonemes = sp + 1152|0;
 $end_phonemes2 = sp + 952|0;
 $word_copy = sp + 792|0;
 $word_copy2 = sp + 632|0;
 $prefix_chars = sp + 560|0;
 $c_temp = sp + 240|0;
 $first_char = sp + 236|0;
 $last_char = sp + 232|0;
 $wtab_null = sp + 88|0;
 $wc = sp + 72|0;
 $end_phonemes21 = sp + 360|0;
 $wordpf = sp + 64|0;
 $prefix_phonemes2 = sp + 344|0;
 $1 = $tr;
 $2 = $word_start;
 $3 = $next_pause;
 $4 = $wtab;
 $5 = $word_out;
 $end_type = 0;
 $end_type1 = 0;
 $prefix_type = 0;
 $found = 0;
 HEAP32[$last_char>>2] = 0;
 $add_plural_suffix = 0;
 $prefix_flags = 0;
 $emphasize_allcaps = 0;
 $was_unpronouncable = 0;
 $add_suffix_phonemes = 0;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 if ($7) {
  dest=$wtab_null; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $4 = $wtab_null;
 }
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $wflags = $9;
 $10 = $4;
 $11 = ((($10)) + 7|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $wmark = $13;
 HEAP32[$dictionary_flags>>2] = 0;
 $14 = ((($dictionary_flags)) + 4|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$dictionary_flags2>>2] = 0;
 $15 = ((($dictionary_flags2)) + 4|0);
 HEAP32[$15>>2] = 0;
 HEAP32[10344] = 0;
 HEAP8[$phonemes>>0] = 0;
 HEAP8[$unpron_phonemes>>0] = 0;
 HEAP8[$prefix_phonemes>>0] = 0;
 HEAP8[$end_phonemes>>0] = 0;
 $16 = $1;
 $17 = ((($16)) + 808|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP8[120044] = 0;
  $0 = 0;
  $844 = $0;
  STACKTOP = sp;return ($844|0);
 }
 $20 = $2;
 HEAP32[$word1>>2] = $20;
 $21 = HEAP32[$word1>>2]|0;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)==(32);
 if ($24) {
  $25 = HEAP32[$word1>>2]|0;
  $26 = ((($25)) + 1|0);
  HEAP32[$word1>>2] = $26;
 }
 $27 = HEAP32[$word1>>2]|0;
 HEAP32[$wordx>>2] = $27;
 $28 = HEAP32[$wordx>>2]|0;
 (__Z7utf8_inPiPKc($first_char,$28)|0);
 $word_length = 0;
 while(1) {
  $29 = HEAP32[$wordx>>2]|0;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = HEAP32[$wordx>>2]|0;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)!=(32);
   $845 = $36;
  } else {
   $845 = 0;
  }
  $37 = HEAP32[$wordx>>2]|0;
  if (!($845)) {
   break;
  }
  $38 = (__Z7utf8_inPiPKc($last_char,$37)|0);
  $39 = HEAP32[$wordx>>2]|0;
  $40 = (($39) + ($38)|0);
  HEAP32[$wordx>>2] = $40;
  $41 = $word_length;
  $42 = (($41) + 1)|0;
  $word_length = $42;
 }
 $43 = $2;
 $44 = $37;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $word_copy_length = $46;
 $47 = $word_copy_length;
 $48 = ($47|0)>=(160);
 $$ = $48 ? 159 : $46;
 $word_copy_length = $$;
 $49 = $2;
 $50 = $word_copy_length;
 _memcpy(($word_copy2|0),($49|0),($50|0))|0;
 $spell_word = 0;
 $51 = $word_length;
 $52 = ($51|0)==(1);
 do {
  if ($52) {
   $53 = $wflags;
   $54 = $53 & 4194304;
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = HEAP32[$wordx>>2]|0;
    $57 = ((($56)) + 1|0);
    (__Z7utf8_inPiPKc($c_temp,$57)|0);
    $58 = HEAP32[$c_temp>>2]|0;
    $59 = (__Z7IsAlphaj($58)|0);
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = HEAP32[$last_char>>2]|0;
     $62 = (__Z16AlphabetFromChari($61)|0);
     $63 = HEAP32[$c_temp>>2]|0;
     $64 = (__Z16AlphabetFromChari($63)|0);
     $65 = ($62|0)!=($64|0);
     if (!($65)) {
      break;
     }
    }
    $spell_word = 1;
   }
  }
 } while(0);
 $66 = HEAP32[19046]|0;
 $67 = ($66|0)==(36);
 do {
  if ($67) {
   $68 = $word_length;
   $69 = ($68|0)==(1);
   if ($69) {
    $spell_word = 4;
    break;
   } else {
    $70 = HEAP32[$word1>>2]|0;
    $71 = ((($70)) + -1|0);
    HEAP32[$word1>>2] = $71;
    $72 = HEAP32[$word1>>2]|0;
    HEAP8[$72>>0] = 95;
    $73 = $1;
    $74 = $4;
    $75 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($73,$word1,$phonemes,$dictionary_flags,0,$74)|0);
    $found = $75;
    break;
   }
  }
 } while(0);
 $76 = HEAP32[19046]|0;
 $77 = $76 & 16;
 $78 = ($77|0)!=(0);
 L31: do {
  if ($78) {
   $79 = HEAP32[19046]|0;
   $80 = $79 & 15;
   $spell_word = $80;
  } else {
   $81 = $found;
   $82 = ($81|0)!=(0);
   if (!($82)) {
    $83 = $1;
    $84 = $4;
    $85 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($83,$word1,$phonemes,$dictionary_flags,2,$84)|0);
    $found = $85;
   }
   $86 = HEAP32[$dictionary_flags>>2]|0;
   $87 = $86 & 50331648;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = HEAP32[$wordx>>2]|0;
    $90 = ((($89)) + 1|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91 << 24 >> 24;
    $93 = ($92|0)==(46);
    if ($93) {
     $94 = HEAP32[$wordx>>2]|0;
     $95 = ((($94)) + 1|0);
     HEAP8[$95>>0] = 32;
    }
   }
   $96 = HEAP32[$dictionary_flags>>2]|0;
   $97 = $96 & 536870912;
   $98 = ($97|0)!=(0);
   L41: do {
    if ($98) {
     $99 = $5;
     $100 = ($99|0)!=(0|0);
     if ($100) {
      $101 = $5;
      $102 = HEAP32[$word1>>2]|0;
      (_strcpy($101,$102)|0);
     }
     $103 = HEAP32[$word1>>2]|0;
     $104 = HEAP8[$103>>0]|0;
     $105 = $104 << 24 >> 24;
     HEAP32[$first_char>>2] = $105;
     $106 = HEAP32[$dictionary_flags>>2]|0;
     $107 = $106 & 127;
     $stress_bits = $107;
     $108 = $1;
     $109 = $4;
     $110 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($108,$word1,$phonemes,$dictionary_flags2,0,$109)|0);
     $found = $110;
     $111 = HEAP32[$dictionary_flags2>>2]|0;
     $112 = ($111|0)!=(0);
     if ($112) {
      $113 = HEAP32[$dictionary_flags2>>2]|0;
      HEAP32[$dictionary_flags>>2] = $113;
      $114 = ((($dictionary_flags2)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($dictionary_flags)) + 4|0);
      HEAP32[$116>>2] = $115;
      $117 = $stress_bits;
      $118 = ($117|0)!=(0);
      if ($118) {
       $119 = HEAP32[$dictionary_flags>>2]|0;
       $120 = $119 & -128;
       $121 = $stress_bits;
       $122 = $120 | $121;
       HEAP32[$dictionary_flags>>2] = $122;
      }
     }
    } else {
     $123 = $found;
     $124 = ($123|0)==(0);
     if ($124) {
      $125 = HEAP32[$dictionary_flags>>2]|0;
      $126 = $125 & 128;
      $127 = ($126|0)!=(0);
      if ($127) {
       $128 = HEAP32[$dictionary_flags>>2]|0;
       $129 = $128 & 8192;
       $130 = ($129|0)!=(0);
       if (!($130)) {
        $131 = HEAP32[$word1>>2]|0;
        HEAP32[$wordx>>2] = $131;
        $ix = 0;
        while(1) {
         $132 = $ix;
         $133 = HEAP32[10344]|0;
         $134 = ($132|0)<($133|0);
         if (!($134)) {
          break L41;
         }
         $135 = HEAP32[$wordx>>2]|0;
         $136 = HEAP8[$135>>0]|0;
         $137 = $136 << 24 >> 24;
         $138 = ($137|0)==(32);
         if ($138) {
          $139 = HEAP32[$wordx>>2]|0;
          HEAP8[$139>>0] = 45;
          $140 = $ix;
          $141 = (($140) + 1)|0;
          $ix = $141;
         }
         $142 = HEAP32[$wordx>>2]|0;
         $143 = ((($142)) + 1|0);
         HEAP32[$wordx>>2] = $143;
        }
       }
      }
     }
    }
   } while(0);
   $144 = $word_length;
   $145 = ($144|0)==(1);
   $146 = HEAP32[10344]|0;
   $147 = ($146|0)==(0);
   $or$cond = $145 & $147;
   if ($or$cond) {
    $148 = HEAP32[$word1>>2]|0;
    $149 = $4;
    $150 = (__ZL17CheckDottedAbbrevPcP8WORD_TAB($148,$149)|0);
    $151 = ($150|0)!=(0);
    if ($151) {
     HEAP32[$dictionary_flags>>2] = 0;
     $152 = ((($dictionary_flags)) + 4|0);
     HEAP32[$152>>2] = 0;
     $spell_word = 1;
     $153 = HEAP32[10344]|0;
     $154 = ($153|0)!=(0);
     if ($154) {
      HEAP32[$dictionary_flags>>2] = 128;
     }
    }
   }
   $155 = HEAP8[$phonemes>>0]|0;
   $156 = $155 << 24 >> 24;
   $157 = ($156|0)==(21);
   if ($157) {
    (_strcpy(120044,$phonemes)|0);
    $0 = 0;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   }
   $158 = $wmark;
   $159 = ($158|0)>(0);
   $160 = $wmark;
   $161 = ($160|0)<(8);
   $or$cond3 = $159 & $161;
   if ($or$cond3) {
    $162 = HEAP32[$dictionary_flags>>2]|0;
    $163 = $162 & -16;
    $164 = $wmark;
    $165 = $163 | $164;
    HEAP32[$dictionary_flags>>2] = $165;
   }
   $166 = $found;
   $167 = ($166|0)!=(0);
   if (!($167)) {
    $168 = HEAP32[$dictionary_flags>>2]|0;
    $169 = $168 & 8192;
    $170 = ($169|0)!=(0);
    if ($170) {
     $spell_word = 1;
    }
   }
   $171 = $found;
   $172 = ($171|0)!=(0);
   if (!($172)) {
    $173 = HEAP32[$first_char>>2]|0;
    $174 = (_iswdigit($173)|0);
    $175 = ($174|0)!=(0);
    if ($175) {
     $176 = $1;
     (__Z6LookupP10TranslatorPKcPc($176,23007,120044)|0);
     $177 = HEAP8[120044]|0;
     $178 = $177 << 24 >> 24;
     $179 = ($178|0)==(21);
     if ($179) {
      $0 = 0;
      $844 = $0;
      STACKTOP = sp;return ($844|0);
     }
     $180 = $1;
     $181 = ((($180)) + 204|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $182 & 32768;
     $184 = ($183|0)!=(0);
     do {
      if ($184) {
       $185 = $4;
       $186 = HEAP32[$185>>2]|0;
       $187 = $186 & 2097152;
       $188 = ($187|0)!=(0);
       if ($188) {
        break;
       }
       HEAP32[$vararg_buffer>>2] = 21;
       (_sprintf(120044,23014,$vararg_buffer)|0);
       $0 = 0;
       $844 = $0;
       STACKTOP = sp;return ($844|0);
      }
     } while(0);
     $189 = $1;
     $190 = HEAP32[$word1>>2]|0;
     $191 = $4;
     $192 = (__Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($189,$190,$phonemes,$dictionary_flags,$191,0)|0);
     $found = $192;
    }
   }
   $193 = $found;
   $194 = ($193|0)!=(0);
   do {
    if (!($194)) {
     $195 = $wflags;
     $196 = $195 & 3;
     $197 = ($196|0)!=(2);
     if ($197) {
      $198 = $1;
      $199 = ((($198)) + 200|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $200 & 16777216;
      $202 = ($201|0)!=(0);
      if (!($202)) {
       $203 = $1;
       $204 = ((($203)) + 200|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205 & 33554432;
       $207 = ($206|0)!=(0);
       if (!($207)) {
        break;
       }
       $208 = $wflags;
       $209 = $208 & 1;
       $210 = ($209|0)!=(0);
       if (!($210)) {
        break;
       }
      }
      $211 = $wflags;
      $212 = $211 & 16;
      $213 = ($212|0)!=(0);
      if (!($213)) {
       $214 = $4;
       $215 = ((($214)) + 12|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = $216 & 256;
       $218 = ($217|0)!=(0);
       if ($218) {
        break;
       }
      }
      $219 = $1;
      $220 = HEAP32[$word1>>2]|0;
      $221 = $4;
      $222 = (__Z14TranslateRomanP10TranslatorPcS1_P8WORD_TAB($219,$220,$phonemes,$221)|0);
      $found = $222;
      $223 = ($222|0)!=(0);
      if (!($223)) {
       break;
      }
      $224 = HEAP32[$dictionary_flags>>2]|0;
      $225 = $224 | 8192;
      HEAP32[$dictionary_flags>>2] = $225;
     }
    }
   } while(0);
   $226 = $wflags;
   $227 = $226 & 1;
   $228 = ($227|0)!=(0);
   $229 = $word_length;
   $230 = ($229|0)>(1);
   $or$cond5 = $228 & $230;
   if ($or$cond5) {
    $231 = HEAP32[$first_char>>2]|0;
    $232 = (__Z9iswalpha2i($231)|0);
    $233 = ($232|0)!=(0);
    if ($233) {
     $234 = HEAP32[19039]|0;
     $235 = $234 & 256;
     $236 = ($235|0)!=(0);
     do {
      if ($236) {
       $237 = HEAP32[$dictionary_flags>>2]|0;
       $238 = $237 & 8192;
       $239 = ($238|0)!=(0);
       if ($239) {
        break;
       }
       $emphasize_allcaps = 2048;
       break L31;
      }
     } while(0);
     $240 = $found;
     $241 = ($240|0)!=(0);
     if (!($241)) {
      $242 = HEAP32[$dictionary_flags>>2]|0;
      $243 = $242 & 128;
      $244 = ($243|0)==(0);
      $245 = $word_length;
      $246 = ($245|0)<(4);
      $or$cond7 = $244 & $246;
      if (!($or$cond7)) {
       break;
      }
      $247 = $1;
      $248 = ((($247)) + 8340|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = ($249|0)>(3);
      if (!($250)) {
       break;
      }
      $251 = $1;
      $252 = ((($251)) + 8336|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = $1;
      $255 = ((($254)) + 8340|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = ($253|0)<=($256|0);
      if (!($257)) {
       break;
      }
      $spell_word = 1;
     }
    }
   }
  }
 } while(0);
 $258 = $spell_word;
 $259 = ($258|0)>(0);
 if ($259) {
  HEAP8[$phonemes>>0] = 0;
  $end_type = 0;
  $260 = $1;
  $261 = HEAP32[$word1>>2]|0;
  $262 = $spell_word;
  $263 = (__ZL22SpeakIndividualLettersP10TranslatorPcS1_i($260,$261,$phonemes,$262)|0);
  $264 = ($263|0)==(0|0);
  if ($264) {
   $265 = $word_length;
   $266 = ($265|0)>(1);
   if ($266) {
    $0 = 4096;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   } else {
    $0 = 0;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   }
  } else {
   (_strcpy(120044,$phonemes)|0);
   $267 = $wflags;
   $268 = $267 & 4194304;
   $269 = ($268|0)!=(0);
   if ($269) {
    $0 = 0;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   } else {
    $270 = HEAP32[$dictionary_flags>>2]|0;
    $271 = $270 & 128;
    $0 = $271;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   }
  }
 }
 $272 = $found;
 $273 = ($272|0)==(0);
 if ($273) {
  $posn = 0;
  $non_initial = 0;
  $length = 999;
  $274 = HEAP32[$word1>>2]|0;
  HEAP32[$wordx>>2] = $274;
  L129: while(1) {
   $275 = $length;
   $276 = ($275|0)<(3);
   $277 = $length;
   $278 = ($277|0)>(0);
   $or$cond9 = $276 & $278;
   if (!($or$cond9)) {
    $279 = $word_length;
    $280 = ($279|0)>(1);
    if (!($280)) {
     break;
    }
    $281 = $1;
    $282 = HEAP32[$wordx>>2]|0;
    $283 = $posn;
    $284 = (__Z14UnpronouncableP10TranslatorPci($281,$282,$283)|0);
    $285 = ($284|0)!=(0);
    if (!($285)) {
     break;
    }
   }
   $was_unpronouncable = 67108864;
   $emphasize_allcaps = 0;
   $286 = HEAP32[$wordx>>2]|0;
   $287 = HEAP8[$286>>0]|0;
   $288 = $287 << 24 >> 24;
   $289 = ($288|0)==(39);
   if ($289) {
    break;
   }
   $290 = $posn;
   $291 = ($290|0)>(0);
   if ($291) {
    $non_initial = 1;
   }
   $292 = $1;
   $293 = HEAP32[$wordx>>2]|0;
   $294 = $non_initial;
   $295 = (__Z15TranslateLetterP10TranslatorPcS1_i($292,$293,$unpron_phonemes,$294)|0);
   $296 = HEAP32[$wordx>>2]|0;
   $297 = (($296) + ($295)|0);
   HEAP32[$wordx>>2] = $297;
   $298 = $posn;
   $299 = (($298) + 1)|0;
   $posn = $299;
   $300 = HEAP8[$unpron_phonemes>>0]|0;
   $301 = $300 << 24 >> 24;
   $302 = ($301|0)==(21);
   if ($302) {
    label = 97;
    break;
   }
   $length = 0;
   while(1) {
    $306 = $length;
    $307 = HEAP32[$wordx>>2]|0;
    $308 = (($307) + ($306)|0);
    $309 = HEAP8[$308>>0]|0;
    $310 = $309 << 24 >> 24;
    $311 = ($310|0)!=(32);
    if (!($311)) {
     continue L129;
    }
    $312 = $length;
    $313 = (($312) + 1)|0;
    $length = $313;
   }
  }
  if ((label|0) == 97) {
   (_strcpy(120044,$unpron_phonemes)|0);
   $303 = ((($unpron_phonemes)) + 1|0);
   $304 = (_strcmp($303,25406)|0);
   $305 = ($304|0)==(0);
   if ($305) {
    $0 = 4096;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   } else {
    $0 = 0;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   }
  }
  $314 = $1;
  $315 = $posn;
  __Z17SetSpellingStressP10TranslatorPcii($314,$unpron_phonemes,0,$315);
  $316 = HEAP32[$wordx>>2]|0;
  $317 = HEAP8[$316>>0]|0;
  $318 = $317 << 24 >> 24;
  $319 = ($318|0)!=(32);
  if ($319) {
   $320 = HEAP8[$unpron_phonemes>>0]|0;
   $321 = $320 << 24 >> 24;
   $322 = ($321|0)!=(0);
   if ($322) {
    $323 = HEAP32[$wordx>>2]|0;
    $324 = HEAP8[$323>>0]|0;
    $325 = $324 << 24 >> 24;
    $326 = ($325|0)!=(39);
    if ($326) {
     $327 = HEAP32[$wordx>>2]|0;
     $328 = ((($327)) + -1|0);
     HEAP8[$328>>0] = 32;
    }
   }
   $329 = $1;
   $330 = HEAP32[$wordx>>2]|0;
   $331 = $wflags;
   $332 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($329,$330,$phonemes,200,$end_phonemes,$331,$dictionary_flags)|0);
   $end_type = $332;
   $333 = HEAP8[$phonemes>>0]|0;
   $334 = $333 << 24 >> 24;
   $335 = ($334|0)==(21);
   if ($335) {
    (_strcpy(120044,$phonemes)|0);
    $0 = 0;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   }
   $336 = HEAP8[$phonemes>>0]|0;
   $337 = $336 << 24 >> 24;
   $338 = ($337|0)==(0);
   do {
    if ($338) {
     $339 = HEAP8[$end_phonemes>>0]|0;
     $340 = $339 << 24 >> 24;
     $341 = ($340|0)==(0);
     if ($341) {
      $342 = HEAP32[$wordx>>2]|0;
      (__Z7utf8_inPiPKc($wc,$342)|0);
      $343 = $word_length;
      $344 = ($343|0)==(1);
      if ($344) {
       $345 = HEAP32[$wc>>2]|0;
       $346 = (__Z7IsAlphaj($345)|0);
       $347 = ($346|0)!=(0);
       if (!($347)) {
        $348 = HEAP32[$wc>>2]|0;
        $349 = (__Z13IsSuperscripti($348)|0);
        $350 = ($349|0)!=(0);
        if (!($350)) {
         break;
        }
       }
       $351 = $1;
       $352 = HEAP32[$wordx>>2]|0;
       $353 = $spell_word;
       $354 = (__ZL22SpeakIndividualLettersP10TranslatorPcS1_i($351,$352,$phonemes,$353)|0);
       HEAP32[$wordx>>2] = $354;
       $355 = ($354|0)==(0|0);
       if ($355) {
        $0 = 0;
        $844 = $0;
        STACKTOP = sp;return ($844|0);
       } else {
        (_strcpy(120044,$phonemes)|0);
        $0 = 0;
        $844 = $0;
        STACKTOP = sp;return ($844|0);
       }
      }
     }
    }
   } while(0);
   $356 = HEAP32[$wordx>>2]|0;
   $357 = ((($356)) + -1|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358 << 24 >> 24;
   HEAP32[$c_temp>>2] = $359;
   $found = 0;
   $confirm_prefix = 1;
   $loopcount = 0;
   L173: while(1) {
    $360 = $loopcount;
    $361 = ($360|0)<(50);
    if (!($361)) {
     break;
    }
    $362 = $end_type;
    $363 = $362 & 1024;
    $364 = ($363|0)!=(0);
    if (!($364)) {
     break;
    }
    $365 = $confirm_prefix;
    $366 = ($365|0)!=(0);
    if ($366) {
     $367 = $end_type;
     $368 = $367 & 131072;
     $369 = ($368|0)!=(0);
     if ($369) {
      label = 127;
     } else {
      HEAP8[$phonemes2>>0] = 0;
      $370 = $1;
      $371 = HEAP32[$wordx>>2]|0;
      $372 = $wflags;
      $373 = $372 | 536870912;
      $374 = $373 | 268435456;
      $375 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($370,$371,$phonemes2,200,$end_phonemes21,$374,$dictionary_flags)|0);
      $end2 = $375;
      $376 = $end2;
      $377 = ($376|0)!=(0);
      if ($377) {
       $378 = $1;
       $379 = HEAP32[$wordx>>2]|0;
       $380 = $end2;
       (__Z12RemoveEndingP10TranslatorPciS1_($378,$379,$380,$word_copy)|0);
       $381 = $1;
       $382 = HEAP32[$wordx>>2]|0;
       $383 = $wflags;
       $384 = $383 | 268435456;
       $385 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($381,$382,$phonemes,200,$end_phonemes,$384,$dictionary_flags)|0);
       $end_type = $385;
       $386 = HEAP32[$wordx>>2]|0;
       $387 = (_strlen($word_copy)|0);
       _memcpy(($386|0),($word_copy|0),($387|0))|0;
       $388 = $end_type;
       $389 = $388 & 1024;
       $390 = ($389|0)==(0);
       do {
        if ($390) {
         $391 = $end2;
         $end_type = $391;
         (_strcpy($phonemes,$phonemes2)|0);
         (_strcpy($end_phonemes,$end_phonemes21)|0);
         $392 = HEAP32[19040]|0;
         $393 = $392 & 8;
         $394 = ($393|0)!=(0);
         if (!($394)) {
          break;
         }
         __Z14DecodePhonemesPKcPc($end_phonemes,$end_phonemes21);
         $395 = HEAP32[19037]|0;
         HEAP32[$vararg_buffer19>>2] = $end_phonemes21;
         (_fprintf($395,23017,$vararg_buffer19)|0);
        }
       } while(0);
       $confirm_prefix = 0;
      } else {
       label = 127;
      }
     }
    } else {
     label = 127;
    }
    do {
     if ((label|0) == 127) {
      label = 0;
      $396 = $end_type;
      $prefix_type = $396;
      $397 = $prefix_type;
      $398 = $397 & 2048;
      $399 = ($398|0)!=(0);
      if ($399) {
       $400 = $1;
       $401 = ((($400)) + 8304|0);
       HEAP32[$401>>2] = 1;
      }
      $402 = HEAP32[$c_temp>>2]|0;
      $403 = $402&255;
      $404 = HEAP32[$wordx>>2]|0;
      $405 = ((($404)) + -1|0);
      HEAP8[$405>>0] = $403;
      $406 = $prefix_type;
      $407 = $406 & 131072;
      $408 = ($407|0)==(0);
      L190: do {
       if ($408) {
        $409 = $prefix_type;
        $410 = $409 & 15;
        $ix = $410;
        while(1) {
         $411 = $ix;
         $412 = ($411|0)>(0);
         if (!($412)) {
          break L190;
         }
         $413 = HEAP32[$wordx>>2]|0;
         $414 = ((($413)) + 1|0);
         HEAP32[$wordx>>2] = $414;
         while(1) {
          $415 = HEAP32[$wordx>>2]|0;
          $416 = HEAP8[$415>>0]|0;
          $417 = $416 << 24 >> 24;
          $418 = $417 & 192;
          $419 = ($418|0)==(128);
          if (!($419)) {
           break;
          }
          $420 = HEAP32[$wordx>>2]|0;
          $421 = ((($420)) + 1|0);
          HEAP32[$wordx>>2] = $421;
         }
         $422 = $ix;
         $423 = (($422) + -1)|0;
         $ix = $423;
        }
       } else {
        $pfix = 1;
        HEAP8[$prefix_chars>>0] = 0;
        $424 = $prefix_type;
        $425 = $424 & 63;
        $n_chars = $425;
        $ix = 0;
        while(1) {
         $426 = $ix;
         $427 = $n_chars;
         $428 = ($426|0)<($427|0);
         if (!($428)) {
          break;
         }
         $429 = HEAP32[$wordx>>2]|0;
         $430 = ((($429)) + 1|0);
         HEAP32[$wordx>>2] = $430;
         $431 = HEAP8[$429>>0]|0;
         $432 = $pfix;
         $433 = (($432) + 1)|0;
         $pfix = $433;
         $434 = (($prefix_chars) + ($432)|0);
         HEAP8[$434>>0] = $431;
         $435 = $prefix_type;
         $436 = $435 & 131072;
         $437 = ($436|0)!=(0);
         do {
          if ($437) {
           $438 = $ix;
           $439 = $n_chars;
           $440 = (($439) - 1)|0;
           $441 = ($438|0)==($440|0);
           if (!($441)) {
            break;
           }
           $442 = $pfix;
           $443 = (($442) - 1)|0;
           $444 = (($prefix_chars) + ($443)|0);
           HEAP8[$444>>0] = 0;
          }
         } while(0);
         $445 = $ix;
         $446 = (($445) + 1)|0;
         $ix = $446;
        }
        $447 = $pfix;
        $448 = (($prefix_chars) + ($447)|0);
        HEAP8[$448>>0] = 0;
       }
      } while(0);
      $449 = HEAP32[$wordx>>2]|0;
      $450 = ((($449)) + -1|0);
      $451 = HEAP8[$450>>0]|0;
      $452 = $451 << 24 >> 24;
      HEAP32[$c_temp>>2] = $452;
      $453 = HEAP32[$wordx>>2]|0;
      $454 = ((($453)) + -1|0);
      HEAP8[$454>>0] = 32;
      $confirm_prefix = 1;
      $455 = $wflags;
      $456 = $455 | 8388608;
      $wflags = $456;
      $457 = $prefix_type;
      $458 = $457 & 131072;
      $459 = ($458|0)!=(0);
      do {
       if ($459) {
        __Z8strncpy0PcPKci($prefix_phonemes2,$end_phonemes,12);
        $460 = ((($prefix_chars)) + 1|0);
        HEAP32[$wordpf>>2] = $460;
        (_strcpy($prefix_phonemes,$phonemes)|0);
        $461 = $1;
        $462 = $4;
        $463 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($461,$wordpf,$phonemes,$dictionary_flags,0,$462)|0);
        $found = $463;
        $464 = $found;
        $465 = ($464|0)!=(0);
        if ($465) {
         (_strcpy($prefix_phonemes,$phonemes)|0);
        }
        $466 = HEAP32[$dictionary_flags>>2]|0;
        $467 = $466 & 8192;
        $468 = ($467|0)!=(0);
        if (!($468)) {
         break;
        }
        HEAP8[$prefix_phonemes>>0] = 0;
        $469 = $1;
        $470 = HEAP32[$wordpf>>2]|0;
        (__ZL22SpeakIndividualLettersP10TranslatorPcS1_i($469,$470,$prefix_phonemes,1)|0);
       } else {
        (_strcat($prefix_phonemes,$end_phonemes)|0);
       }
      } while(0);
      HEAP8[$end_phonemes>>0] = 0;
      $end_type = 0;
      $471 = $1;
      $472 = $4;
      $473 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($471,$wordx,$phonemes,$dictionary_flags2,1024,$472)|0);
      $found = $473;
      $474 = HEAP32[$dictionary_flags>>2]|0;
      $475 = ($474|0)==(0);
      if ($475) {
       $476 = HEAP32[$dictionary_flags2>>2]|0;
       HEAP32[$dictionary_flags>>2] = $476;
       $477 = ((($dictionary_flags2)) + 4|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = ((($dictionary_flags)) + 4|0);
       HEAP32[$479>>2] = $478;
      } else {
       $prefix_flags = 1;
      }
      $480 = $found;
      $481 = ($480|0)==(0);
      if (!($481)) {
       break;
      }
      $482 = $1;
      $483 = HEAP32[$wordx>>2]|0;
      $484 = $wflags;
      $485 = $484 & 8404992;
      $486 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($482,$483,$phonemes,200,$end_phonemes,$485,$dictionary_flags)|0);
      $end_type = $486;
      $487 = HEAP8[$phonemes>>0]|0;
      $488 = $487 << 24 >> 24;
      $489 = ($488|0)==(21);
      if ($489) {
       label = 154;
       break L173;
      }
     }
    } while(0);
    $494 = $loopcount;
    $495 = (($494) + 1)|0;
    $loopcount = $495;
   }
   if ((label|0) == 154) {
    $490 = HEAP32[$c_temp>>2]|0;
    $491 = $490&255;
    $492 = HEAP32[$wordx>>2]|0;
    $493 = ((($492)) + -1|0);
    HEAP8[$493>>0] = $491;
    (_strcpy(120044,$phonemes)|0);
    $0 = 0;
    $844 = $0;
    STACKTOP = sp;return ($844|0);
   }
   $496 = $end_type;
   $497 = ($496|0)!=(0);
   do {
    if ($497) {
     $498 = $end_type;
     $499 = $498 & 1024;
     $500 = ($499|0)!=(0);
     if (!($500)) {
      $501 = $end_type;
      $end_type1 = $501;
      (_strcpy($phonemes2,$phonemes)|0);
      $502 = $1;
      $503 = HEAP32[$wordx>>2]|0;
      $504 = $end_type;
      $505 = (__Z12RemoveEndingP10TranslatorPciS1_($502,$503,$504,$word_copy)|0);
      $end_flags = $505;
      $more_suffixes = 1;
      L230: while(1) {
       $506 = $more_suffixes;
       $507 = ($506|0)!=(0);
       if (!($507)) {
        label = 189;
        break;
       }
       $more_suffixes = 0;
       HEAP8[$phonemes>>0] = 0;
       $508 = HEAP8[$prefix_phonemes>>0]|0;
       $509 = $508 << 24 >> 24;
       $510 = ($509|0)!=(0);
       do {
        if ($510) {
         $511 = HEAP32[$c_temp>>2]|0;
         $512 = $511&255;
         $513 = HEAP32[$wordx>>2]|0;
         $514 = ((($513)) + -1|0);
         HEAP8[$514>>0] = $512;
         $515 = $1;
         $516 = $end_flags;
         $517 = $4;
         $518 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($515,$word1,$phonemes,$dictionary_flags2,$516,$517)|0);
         $found = $518;
         $519 = HEAP32[$wordx>>2]|0;
         $520 = ((($519)) + -1|0);
         HEAP8[$520>>0] = 32;
         $521 = HEAP8[$phonemes>>0]|0;
         $522 = $521 << 24 >> 24;
         $523 = ($522|0)==(21);
         if ($523) {
          label = 162;
          break L230;
         }
         $526 = HEAP32[$dictionary_flags>>2]|0;
         $527 = ($526|0)==(0);
         if ($527) {
          $528 = HEAP32[$dictionary_flags2>>2]|0;
          HEAP32[$dictionary_flags>>2] = $528;
          $529 = ((($dictionary_flags2)) + 4|0);
          $530 = HEAP32[$529>>2]|0;
          $531 = ((($dictionary_flags)) + 4|0);
          HEAP32[$531>>2] = $530;
         }
         $532 = $found;
         $533 = ($532|0)!=(0);
         if ($533) {
          HEAP8[$prefix_phonemes>>0] = 0;
         }
         $534 = $found;
         $535 = ($534|0)==(0);
         if (!($535)) {
          break;
         }
         $536 = HEAP32[$dictionary_flags2>>2]|0;
         $537 = ($536|0)!=(0);
         if (!($537)) {
          break;
         }
         $prefix_flags = 1;
        }
       } while(0);
       $538 = $found;
       $539 = ($538|0)==(0);
       do {
        if ($539) {
         $540 = $1;
         $541 = $end_flags;
         $542 = $4;
         $543 = (__Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($540,$wordx,$phonemes,$dictionary_flags2,$541,$542)|0);
         $found = $543;
         $544 = HEAP8[$phonemes>>0]|0;
         $545 = $544 << 24 >> 24;
         $546 = ($545|0)==(21);
         if ($546) {
          label = 172;
          break L230;
         }
         $549 = HEAP32[$dictionary_flags>>2]|0;
         $550 = ($549|0)==(0);
         if (!($550)) {
          break;
         }
         $551 = HEAP32[$dictionary_flags2>>2]|0;
         HEAP32[$dictionary_flags>>2] = $551;
         $552 = ((($dictionary_flags2)) + 4|0);
         $553 = HEAP32[$552>>2]|0;
         $554 = ((($dictionary_flags)) + 4|0);
         HEAP32[$554>>2] = $553;
        }
       } while(0);
       $555 = $found;
       $556 = ($555|0)==(0);
       if (!($556)) {
        continue;
       }
       $557 = $end_type;
       $558 = $557 & 16384;
       $559 = ($558|0)!=(0);
       if ($559) {
        (_strcpy($phonemes,$phonemes2)|0);
        continue;
       }
       $560 = $end_flags;
       $561 = $560 & 4;
       $562 = ($561|0)!=(0);
       if ($562) {
        $563 = $wflags;
        $564 = $563 | 8192;
        $wflags = $564;
       }
       $565 = $end_type;
       $566 = $565 & 262144;
       $567 = ($566|0)!=(0);
       if ($567) {
        $568 = $wflags;
        $569 = $568 | 134217728;
        $wflags = $569;
       }
       $570 = $end_type;
       $571 = $570 & 524288;
       $572 = ($571|0)!=(0);
       do {
        if ($572) {
         (_strcpy($end_phonemes2,$end_phonemes)|0);
         $573 = $1;
         $574 = HEAP32[$wordx>>2]|0;
         $575 = $wflags;
         $576 = (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($573,$574,$phonemes,200,$end_phonemes,$575,$dictionary_flags)|0);
         $end_type = $576;
         (_strcat($end_phonemes,$end_phonemes2)|0);
         $577 = $end_type;
         $578 = ($577|0)!=(0);
         if (!($578)) {
          break;
         }
         $579 = $end_type;
         $580 = $579 & 1024;
         $581 = ($580|0)!=(0);
         if ($581) {
          break;
         }
         $582 = $1;
         $583 = HEAP32[$wordx>>2]|0;
         $584 = $end_type;
         $585 = (__Z12RemoveEndingP10TranslatorPciS1_($582,$583,$584,0)|0);
         $end_flags = $585;
         $more_suffixes = 1;
        } else {
         $586 = $1;
         $587 = HEAP32[$wordx>>2]|0;
         $588 = $wflags;
         (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($586,$587,$phonemes,200,0,$588,$dictionary_flags)|0);
         $end_type = 0;
        }
       } while(0);
       $589 = HEAP8[$phonemes>>0]|0;
       $590 = $589 << 24 >> 24;
       $591 = ($590|0)==(21);
       if ($591) {
        label = 188;
        break;
       }
      }
      if ((label|0) == 162) {
       $524 = HEAP32[$wordx>>2]|0;
       $525 = (_strlen($word_copy)|0);
       _memcpy(($524|0),($word_copy|0),($525|0))|0;
       (_strcpy(120044,$phonemes)|0);
       $0 = 0;
       $844 = $0;
       STACKTOP = sp;return ($844|0);
      }
      else if ((label|0) == 172) {
       $547 = HEAP32[$wordx>>2]|0;
       $548 = (_strlen($word_copy)|0);
       _memcpy(($547|0),($word_copy|0),($548|0))|0;
       (_strcpy(120044,$phonemes)|0);
       $0 = 0;
       $844 = $0;
       STACKTOP = sp;return ($844|0);
      }
      else if ((label|0) == 188) {
       (_strcpy(120044,$phonemes)|0);
       $592 = HEAP32[$wordx>>2]|0;
       $593 = (_strlen($word_copy)|0);
       _memcpy(($592|0),($word_copy|0),($593|0))|0;
       $594 = HEAP32[$c_temp>>2]|0;
       $595 = $594&255;
       $596 = HEAP32[$wordx>>2]|0;
       $597 = ((($596)) + -1|0);
       HEAP8[$597>>0] = $595;
       $0 = 0;
       $844 = $0;
       STACKTOP = sp;return ($844|0);
      }
      else if ((label|0) == 189) {
       $598 = $end_type1;
       $599 = $598 & 65536;
       $600 = ($599|0)==(0);
       if ($600) {
        $601 = $1;
        __Z14AppendPhonemesP10TranslatorPciPKc($601,$phonemes,200,$end_phonemes);
        HEAP8[$end_phonemes>>0] = 0;
       }
       $602 = HEAP32[$wordx>>2]|0;
       $603 = (_strlen($word_copy)|0);
       _memcpy(($602|0),($word_copy|0),($603|0))|0;
       break;
      }
     }
    }
   } while(0);
   $604 = HEAP32[$c_temp>>2]|0;
   $605 = $604&255;
   $606 = HEAP32[$wordx>>2]|0;
   $607 = ((($606)) + -1|0);
   HEAP8[$607>>0] = $605;
  }
 }
 $608 = $add_plural_suffix;
 $609 = ($608|0)!=(0);
 if ($609) {
  label = 195;
 } else {
  $610 = $wflags;
  $611 = $610 & 4;
  $612 = ($611|0)!=(0);
  if ($612) {
   label = 195;
  }
 }
 do {
  if ((label|0) == 195) {
   $613 = HEAP32[$last_char>>2]|0;
   $614 = ($613|0)==(102);
   if ($614) {
    $615 = $1;
    (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($615,(23034),$phonemes,200,0,0,0)|0);
    break;
   }
   $616 = HEAP32[$last_char>>2]|0;
   $617 = ($616|0)==(0);
   if (!($617)) {
    $618 = HEAP32[$last_char>>2]|0;
    $619 = (__Z8strchr_wPKci(23037,$618)|0);
    $620 = ($619|0)==(0|0);
    if (!($620)) {
     $622 = $1;
     (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($622,(23046),$phonemes,200,0,0,0)|0);
     break;
    }
   }
   $621 = $1;
   (__Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($621,(23042),$phonemes,200,0,0,0)|0);
  }
 } while(0);
 $623 = $emphasize_allcaps;
 $624 = $wflags;
 $625 = $624 | $623;
 $wflags = $625;
 $add_suffix_phonemes = 0;
 $626 = HEAP8[$end_phonemes>>0]|0;
 $627 = $626 << 24 >> 24;
 $628 = ($627|0)!=(0);
 $$12 = $628 ? 2 : 0;
 $add_suffix_phonemes = $$12;
 $prefix_stress = 0;
 $p = $prefix_phonemes;
 while(1) {
  $629 = $p;
  $630 = HEAP8[$629>>0]|0;
  $631 = $630 << 24 >> 24;
  $632 = ($631|0)!=(0);
  if (!($632)) {
   break;
  }
  $633 = $p;
  $634 = HEAP8[$633>>0]|0;
  $635 = $634 << 24 >> 24;
  $636 = ($635|0)==(6);
  if ($636) {
   label = 205;
  } else {
   $637 = $p;
   $638 = HEAP8[$637>>0]|0;
   $639 = $638 << 24 >> 24;
   $640 = ($639|0)==(7);
   if ($640) {
    label = 205;
   }
  }
  if ((label|0) == 205) {
   label = 0;
   $641 = $p;
   $642 = HEAP8[$641>>0]|0;
   $643 = $642 << 24 >> 24;
   $prefix_stress = $643;
  }
  $644 = $p;
  $645 = ((($644)) + 1|0);
  $p = $645;
 }
 $646 = $prefix_flags;
 $647 = ($646|0)!=(0);
 $648 = $prefix_stress;
 $649 = ($648|0)!=(0);
 $or$cond14 = $647 | $649;
 $650 = $1;
 do {
  if ($or$cond14) {
   $651 = ((($650)) + 24|0);
   $652 = ((($651)) + 12|0);
   $653 = HEAP32[$652>>2]|0;
   $654 = ($653|0)!=(0);
   if (!($654)) {
    $655 = $prefix_type;
    $656 = $655 & 65536;
    $657 = ($656|0)!=(0);
    if (!($657)) {
     HEAP32[$vararg_buffer27>>2] = $unpron_phonemes;
     $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
     HEAP32[$vararg_ptr30>>2] = $prefix_phonemes;
     $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
     HEAP32[$vararg_ptr31>>2] = $phonemes;
     (_snprintf(120044,200,23049,$vararg_buffer27)|0);
     HEAP8[(120243)>>0] = 0;
     $673 = $1;
     __Z13SetWordStressP10TranslatorPcPjii($673,120044,$dictionary_flags,-1,0);
     break;
    }
   }
   $658 = $1;
   __Z13SetWordStressP10TranslatorPcPjii($658,$phonemes,$dictionary_flags,3,0);
   $ix = 0;
   $p2 = $prefix_phonemes;
   while(1) {
    $659 = $p2;
    $660 = HEAP8[$659>>0]|0;
    $661 = $660 << 24 >> 24;
    $662 = ($661|0)!=(0);
    if (!($662)) {
     break;
    }
    $663 = $p2;
    $664 = HEAP8[$663>>0]|0;
    $665 = $664 << 24 >> 24;
    $666 = ($665|0)==(6);
    do {
     if ($666) {
      $667 = $ix;
      $668 = ($667|0)==(0);
      if ($668) {
       $ix = 1;
       break;
      } else {
       $669 = $p2;
       HEAP8[$669>>0] = 5;
       break;
      }
     }
    } while(0);
    $670 = $p2;
    $671 = ((($670)) + 1|0);
    $p2 = $671;
   }
   HEAP32[$vararg_buffer22>>2] = $unpron_phonemes;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $prefix_phonemes;
   $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
   HEAP32[$vararg_ptr26>>2] = $phonemes;
   (_snprintf(120044,200,23049,$vararg_buffer22)|0);
   HEAP8[(120243)>>0] = 0;
   $672 = $1;
   __Z13SetWordStressP10TranslatorPcPjii($672,120044,$dictionary_flags,-1,0);
  } else {
   $674 = $add_suffix_phonemes;
   __Z13SetWordStressP10TranslatorPcPjii($650,$phonemes,$dictionary_flags,-1,$674);
   HEAP32[$vararg_buffer32>>2] = $unpron_phonemes;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $prefix_phonemes;
   $vararg_ptr36 = ((($vararg_buffer32)) + 8|0);
   HEAP32[$vararg_ptr36>>2] = $phonemes;
   (_snprintf(120044,200,23049,$vararg_buffer32)|0);
   HEAP8[(120243)>>0] = 0;
  }
 } while(0);
 $675 = HEAP8[$end_phonemes>>0]|0;
 $676 = $675 << 24 >> 24;
 $677 = ($676|0)!=(0);
 if ($677) {
  $678 = (_strlen(120044)|0);
  $ix = $678;
  $679 = $ix;
  $680 = (199 - ($679))|0;
  $681 = (($end_phonemes) + ($680)|0);
  HEAP8[$681>>0] = 0;
  $682 = $ix;
  $683 = (120044 + ($682)|0);
  (_strcpy($683,$end_phonemes)|0);
 }
 $684 = $wflags;
 $685 = $684 & 16;
 $686 = ($685|0)!=(0);
 if ($686) {
  $687 = HEAP32[$dictionary_flags>>2]|0;
  $688 = $687 & -268435457;
  HEAP32[$dictionary_flags>>2] = $688;
 }
 $689 = $wflags;
 $690 = $689 & 128;
 $691 = ($690|0)!=(0);
 if ($691) {
  $692 = $1;
  $693 = ((($692)) + 12|0);
  $694 = HEAP32[$693>>2]|0;
  $695 = $694 & 1048576;
  $696 = ($695|0)!=(0);
  if ($696) {
   $697 = $1;
   __Z16ChangeWordStressP10TranslatorPci($697,120044,3);
  } else {
   label = 227;
  }
 } else {
  label = 227;
 }
 do {
  if ((label|0) == 227) {
   $698 = $wflags;
   $699 = $698 & 3072;
   $700 = ($699|0)!=(0);
   if ($700) {
    $701 = $1;
    __Z16ChangeWordStressP10TranslatorPci($701,120044,6);
    $702 = $wflags;
    $703 = $702 & 2048;
    $704 = ($703|0)!=(0);
    if (!($704)) {
     break;
    }
    $705 = HEAP32[$dictionary_flags>>2]|0;
    $706 = $705 | 268435456;
    HEAP32[$dictionary_flags>>2] = $706;
    break;
   }
   $707 = HEAP32[10344]|0;
   $708 = $4;
   $709 = (($708) + (($707*12)|0)|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = $710 & 16;
   $712 = ($711|0)!=(0);
   if ($712) {
    $713 = HEAP32[$dictionary_flags>>2]|0;
    $714 = $713 & 1536;
    $715 = ($714|0)!=(0);
    if ($715) {
     $716 = $1;
     __Z16ChangeWordStressP10TranslatorPci($716,120044,4);
     break;
    }
    $717 = HEAP32[$dictionary_flags>>2]|0;
    $718 = $717 & 2048;
    $719 = ($718|0)!=(0);
    $720 = HEAP32[19377]|0;
    $721 = ($720|0)!=(0);
    $or$cond16 = $719 & $721;
    if ($or$cond16) {
     $722 = $1;
     __Z16ChangeWordStressP10TranslatorPci($722,120044,3);
    }
   }
  }
 } while(0);
 $723 = $end_type1;
 $724 = $723 & 8192;
 $725 = ($724|0)!=(0);
 if ($725) {
  $726 = $1;
  $727 = ((($726)) + 8304|0);
  HEAP32[$727>>2] = 2;
  $728 = $1;
  $729 = ((($728)) + 8312|0);
  HEAP32[$729>>2] = 2;
 }
 $730 = ((($dictionary_flags)) + 4|0);
 $731 = HEAP32[$730>>2]|0;
 $732 = $731 & 8;
 $733 = ($732|0)!=(0);
 do {
  if ($733) {
   $734 = $1;
   $735 = ((($734)) + 8308|0);
   HEAP32[$735>>2] = 3;
   $736 = $1;
   $737 = ((($736)) + 8304|0);
   HEAP32[$737>>2] = 0;
   $738 = $1;
   $739 = ((($738)) + 8316|0);
   HEAP32[$739>>2] = 0;
  } else {
   $740 = ((($dictionary_flags)) + 4|0);
   $741 = HEAP32[$740>>2]|0;
   $742 = $741 & 1;
   $743 = ($742|0)!=(0);
   if ($743) {
    $744 = $1;
    $745 = ((($744)) + 8304|0);
    HEAP32[$745>>2] = 2;
    $746 = $1;
    $747 = ((($746)) + 8312|0);
    HEAP32[$747>>2] = 0;
    $748 = $1;
    $749 = ((($748)) + 8316|0);
    HEAP32[$749>>2] = 0;
    break;
   }
   $750 = ((($dictionary_flags)) + 4|0);
   $751 = HEAP32[$750>>2]|0;
   $752 = $751 & 2;
   $753 = ($752|0)!=(0);
   if ($753) {
    $754 = $1;
    $755 = ((($754)) + 8304|0);
    HEAP32[$755>>2] = 0;
    $756 = $1;
    $757 = ((($756)) + 8312|0);
    HEAP32[$757>>2] = 2;
    $758 = $1;
    $759 = ((($758)) + 8308|0);
    HEAP32[$759>>2] = 0;
    $760 = $1;
    $761 = ((($760)) + 8316|0);
    HEAP32[$761>>2] = 0;
    break;
   }
   $762 = ((($dictionary_flags)) + 4|0);
   $763 = HEAP32[$762>>2]|0;
   $764 = $763 & 4;
   $765 = ($764|0)!=(0);
   if ($765) {
    $766 = $1;
    $767 = ((($766)) + 8316|0);
    HEAP32[$767>>2] = 2;
    $768 = $1;
    $769 = ((($768)) + 8304|0);
    HEAP32[$769>>2] = 0;
    $770 = $1;
    $771 = ((($770)) + 8312|0);
    HEAP32[$771>>2] = 0;
    $772 = $1;
    $773 = ((($772)) + 8308|0);
    HEAP32[$773>>2] = 0;
   }
  }
 } while(0);
 $774 = HEAP32[$wordx>>2]|0;
 $775 = HEAP8[$774>>0]|0;
 $776 = $775 << 24 >> 24;
 $777 = ($776|0)!=(0);
 do {
  if ($777) {
   $778 = ((($dictionary_flags)) + 4|0);
   $779 = HEAP32[$778>>2]|0;
   $780 = $779 & 256;
   $781 = ($780|0)!=(0);
   if (!($781)) {
    $782 = $1;
    $783 = ((($782)) + 8304|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = ($784|0)>(0);
    if ($785) {
     $786 = $1;
     $787 = ((($786)) + 8304|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = (($788) + -1)|0;
     HEAP32[$787>>2] = $789;
    }
    $790 = $1;
    $791 = ((($790)) + 8312|0);
    $792 = HEAP32[$791>>2]|0;
    $793 = ($792|0)>(0);
    if ($793) {
     $794 = $1;
     $795 = ((($794)) + 8312|0);
     $796 = HEAP32[$795>>2]|0;
     $797 = (($796) + -1)|0;
     HEAP32[$795>>2] = $797;
    }
    $798 = $1;
    $799 = ((($798)) + 8316|0);
    $800 = HEAP32[$799>>2]|0;
    $801 = ($800|0)>(0);
    if ($801) {
     $802 = $1;
     $803 = ((($802)) + 8316|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = (($804) + -1)|0;
     HEAP32[$803>>2] = $805;
    }
    $806 = $1;
    $807 = ((($806)) + 8308|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = ($808|0)>(0);
    if (!($809)) {
     break;
    }
    $810 = $1;
    $811 = ((($810)) + 8308|0);
    $812 = HEAP32[$811>>2]|0;
    $813 = (($812) + -1)|0;
    HEAP32[$811>>2] = $813;
   }
  }
 } while(0);
 $814 = $word_length;
 $815 = ($814|0)==(1);
 if ($815) {
  $816 = $1;
  $817 = ((($816)) + 324|0);
  $818 = HEAP32[$817>>2]|0;
  $819 = ($818|0)==(25966);
  if ($819) {
   $820 = HEAP32[$first_char>>2]|0;
   $821 = (__Z9iswalpha2i($820)|0);
   $822 = ($821|0)!=(0);
   $823 = HEAP32[$first_char>>2]|0;
   $824 = ($823|0)!=(105);
   $or$cond18 = $822 & $824;
   if ($or$cond18) {
    $825 = HEAP32[$dictionary_flags>>2]|0;
    $826 = $825 | 16777216;
    HEAP32[$dictionary_flags>>2] = $826;
   }
  }
 }
 $827 = $1;
 $828 = ((($827)) + 24|0);
 $829 = ((($828)) + 60|0);
 $830 = HEAP32[$829>>2]|0;
 $831 = $830 & 2;
 $832 = ($831|0)!=(0);
 if ($832) {
  $833 = HEAP32[$dictionary_flags>>2]|0;
  $834 = $833 & 98304;
  $835 = ($834|0)!=(0);
  if ($835) {
   $836 = $1;
   $837 = HEAP32[$dictionary_flags>>2]|0;
   __Z22ApplySpecialAttribute2P10TranslatorPci($836,120044,$837);
  }
 }
 $838 = $was_unpronouncable;
 $839 = HEAP32[$dictionary_flags>>2]|0;
 $840 = $839 | $838;
 HEAP32[$dictionary_flags>>2] = $840;
 $841 = $2;
 $842 = $word_copy_length;
 _memcpy(($841|0),($word_copy2|0),($842|0))|0;
 $843 = HEAP32[$dictionary_flags>>2]|0;
 $0 = $843;
 $844 = $0;
 STACKTOP = sp;return ($844|0);
}
function __ZL17CheckDottedAbbrevPcP8WORD_TAB($word1,$wtab) {
 $word1 = $word1|0;
 $wtab = $wtab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $count = 0, $ix = 0, $nbytes = 0, $ok = 0, $wbuf = 0, $wc = 0, $word = 0, $word_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp + 24|0;
 $word_buf = sp + 40|0;
 $0 = $word1;
 $1 = $wtab;
 $count = 0;
 $2 = $0;
 $word = $2;
 $wbuf = $word_buf;
 $ix = 0;
 while(1) {
  $ok = 0;
  $3 = $word;
  $4 = (__Z7utf8_inPiPKc($wc,$3)|0);
  $nbytes = $4;
  $5 = $nbytes;
  $6 = $word;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)==(32);
  do {
   if ($10) {
    $11 = HEAP32[$wc>>2]|0;
    $12 = (__Z7IsAlphaj($11)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $14 = $nbytes;
     $15 = (($14) + 1)|0;
     $16 = $word;
     $17 = (($16) + ($15)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)==(46);
     if (!($20)) {
      $37 = $count;
      $38 = ($37|0)>(0);
      if (!($38)) {
       break;
      }
      $39 = $nbytes;
      $40 = $word;
      $41 = (($40) + ($39)|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42 << 24 >> 24;
      $44 = ($43|0)==(32);
      if (!($44)) {
       break;
      }
      $ok = 2;
      break;
     }
     $21 = $nbytes;
     $22 = (($21) + 2)|0;
     $23 = $word;
     $24 = (($23) + ($22)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = ($26|0)==(32);
     if ($27) {
      $ok = 1;
      break;
     }
     $28 = $nbytes;
     $29 = (($28) + 2)|0;
     $30 = $word;
     $31 = (($30) + ($29)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($33|0)==(39);
     if ($34) {
      $35 = $nbytes;
      $36 = (($35) + 2)|0;
      $nbytes = $36;
      $ok = 2;
     }
    }
   }
  } while(0);
  $45 = $ok;
  $46 = ($45|0)==(0);
  if ($46) {
   break;
  }
  $ix = 0;
  while(1) {
   $47 = $ix;
   $48 = $nbytes;
   $49 = ($47|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $ix;
   $51 = $word;
   $52 = (($51) + ($50)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $wbuf;
   $55 = ((($54)) + 1|0);
   $wbuf = $55;
   HEAP8[$54>>0] = $53;
   $56 = $ix;
   $57 = (($56) + 1)|0;
   $ix = $57;
  }
  $58 = $count;
  $59 = (($58) + 1)|0;
  $count = $59;
  $60 = $ok;
  $61 = ($60|0)==(2);
  $62 = $nbytes;
  if ($61) {
   label = 17;
   break;
  }
  $65 = (($62) + 3)|0;
  $66 = $word;
  $67 = (($66) + ($65)|0);
  $word = $67;
 }
 if ((label|0) == 17) {
  $63 = $word;
  $64 = (($63) + ($62)|0);
  $word = $64;
 }
 $68 = $count;
 $69 = ($68|0)>(1);
 if (!($69)) {
  $88 = $count;
  STACKTOP = sp;return ($88|0);
 }
 $70 = $wbuf;
 $71 = $70;
 $72 = $word_buf;
 $73 = (($71) - ($72))|0;
 $ix = $73;
 $74 = $0;
 $75 = $ix;
 _memcpy(($74|0),($word_buf|0),($75|0))|0;
 while(1) {
  $76 = $ix;
  $77 = $0;
  $78 = (($77) + ($76)|0);
  $79 = $word;
  $80 = ($78>>>0)<($79>>>0);
  if (!($80)) {
   break;
  }
  $81 = $ix;
  $82 = (($81) + 1)|0;
  $ix = $82;
  $83 = $0;
  $84 = (($83) + ($81)|0);
  HEAP8[$84>>0] = 32;
 }
 $85 = $count;
 $86 = (($85) - 1)|0;
 $87 = $86<<1;
 HEAP32[10344] = $87;
 $88 = $count;
 STACKTOP = sp;return ($88|0);
}
function __ZL22SpeakIndividualLettersP10TranslatorPcS1_i($tr,$word,$phonemes,$spell_word) {
 $tr = $tr|0;
 $word = $word|0;
 $phonemes = $phonemes|0;
 $spell_word = $spell_word|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $capitals = 0, $non_initial = 0, $posn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tr;
 $2 = $word;
 $3 = $phonemes;
 $4 = $spell_word;
 $posn = 0;
 $capitals = 0;
 $non_initial = 0;
 $5 = $4;
 $6 = ($5|0)>(2);
 if ($6) {
  $capitals = 2;
 }
 $7 = $4;
 $8 = ($7|0)>(1);
 if ($8) {
  $9 = $capitals;
  $10 = $9 | 4;
  $capitals = $10;
 }
 while(1) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(32);
  if ($14) {
   $15 = $2;
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)!=(0);
   $40 = $18;
  } else {
   $40 = 0;
  }
  $19 = $1;
  if (!($40)) {
   label = 10;
   break;
  }
  $20 = $2;
  $21 = $3;
  $22 = $capitals;
  $23 = $non_initial;
  $24 = $22 | $23;
  $25 = (__Z15TranslateLetterP10TranslatorPcS1_i($19,$20,$21,$24)|0);
  $26 = $2;
  $27 = (($26) + ($25)|0);
  $2 = $27;
  $28 = $posn;
  $29 = (($28) + 1)|0;
  $posn = $29;
  $non_initial = 1;
  $30 = $3;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(21);
  if ($33) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $34 = $3;
  (_strcpy(120044,$34)|0);
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 10) {
  $35 = $3;
  $36 = $4;
  $37 = $posn;
  __Z17SetSpellingStressP10TranslatorPcii($19,$35,$36,$37);
  $38 = $2;
  $0 = $38;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __Z16Word_EmbeddedCmdv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $embedded_cmd = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 while(1) {
  $0 = HEAP32[19378]|0;
  $1 = (($0) + 1)|0;
  HEAP32[19378] = $1;
  $2 = (76504 + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $embedded_cmd = $3;
  $4 = $embedded_cmd;
  $5 = $4 >> 8;
  $value = $5;
  $6 = $embedded_cmd;
  $7 = $6 & 31;
  L3: do {
   switch ($7|0) {
   case 9:  {
    $8 = $value;
    HEAP32[19046] = $8;
    break;
   }
   case 13:  {
    $9 = $value;
    HEAP32[19379] = $9;
    break;
   }
   case 12:  {
    $10 = $value;
    $11 = ($10|0)==(0);
    if ($11) {
     HEAP32[19061] = 0;
     break L3;
    } else {
     $12 = $value;
     $13 = HEAP32[19061]|0;
     $14 = (($13) + ($12))|0;
     HEAP32[19061] = $14;
     break L3;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $15 = $embedded_cmd;
  $16 = $15 & 128;
  $17 = ($16|0)==(0);
  if (!($17)) {
   label = 10;
   break;
  }
  $18 = HEAP32[19378]|0;
  $19 = HEAP32[19380]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function __Z14SetTranslator2PKc($new_language) {
 $new_language = $new_language|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitmap = 0;
 var $dialect = 0, $new_phoneme_tab = 0, $new_phtab_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $new_language;
 $dialect = 0;
 $1 = $0;
 $new_phtab_name = $1;
 $2 = HEAP32[19035]|0;
 $3 = ((($2)) + 320|0);
 $4 = HEAP32[$3>>2]|0;
 $bitmap = $4;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $bitmap;
  $7 = $6 & 2;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $0;
   $10 = (_strcmp($9,25406)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $new_phtab_name = 26110;
    $dialect = 1;
   }
  }
  $12 = $bitmap;
  $13 = $12 & 4;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $0;
   $16 = (_strcmp($15,23056)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $new_phtab_name = 26116;
    $dialect = 2;
   }
  }
 }
 $18 = $new_phtab_name;
 $19 = (__Z22SelectPhonemeTableNamePKc($18)|0);
 $new_phoneme_tab = $19;
 $20 = ($19|0)>=(0);
 if ($20) {
  $21 = HEAP32[19036]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $0;
   $24 = (_strcmp($23,120424)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = HEAP32[19036]|0;
    __Z16DeleteTranslatorP10Translator($26);
    HEAP32[19036] = 0;
   }
  }
  $27 = HEAP32[19036]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = $0;
   $30 = (__Z16SelectTranslatorPKc($29)|0);
   HEAP32[19036] = $30;
   $31 = $0;
   (_strcpy(120424,$31)|0);
   $32 = HEAP32[19036]|0;
   $33 = HEAP32[19036]|0;
   $34 = ((($33)) + 340|0);
   $35 = (__Z14LoadDictionaryP10TranslatorPKci($32,$34,0)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = HEAP32[1124]|0;
    $38 = ((($37)) + 60|0);
    $39 = HEAP32[$38>>2]|0;
    __Z18SelectPhonemeTablei($39);
    $new_phoneme_tab = -1;
    HEAP8[120424] = 0;
   } else {
    $40 = $dialect;
    $41 = ($40|0)==(1);
    if ($41) {
     $42 = HEAP32[19036]|0;
     $43 = ((($42)) + 440|0);
     HEAP32[$43>>2] = 72;
     $44 = HEAP32[19036]|0;
     $45 = ((($44)) + 24|0);
     $46 = ((($45)) + 48|0);
     HEAP32[$46>>2] = 1;
    }
    $47 = $dialect;
    $48 = ($47|0)==(2);
    if ($48) {
     $49 = HEAP32[19036]|0;
     $50 = ((($49)) + 440|0);
     HEAP32[$50>>2] = 4;
    }
   }
   $51 = $new_phoneme_tab;
   $52 = HEAP32[19036]|0;
   $53 = ((($52)) + 404|0);
   HEAP32[$53>>2] = $51;
  }
 }
 $54 = HEAP32[19036]|0;
 $55 = ($54|0)!=(0|0);
 if (!($55)) {
  $58 = $new_phoneme_tab;
  STACKTOP = sp;return ($58|0);
 }
 $56 = HEAP32[19036]|0;
 $57 = ((($56)) + 380|0);
 HEAP8[$57>>0] = 0;
 $58 = $new_phoneme_tab;
 STACKTOP = sp;return ($58|0);
}
function __Z15UpperCaseInWordP10TranslatorPci($tr,$word,$c) {
 $tr = $tr|0;
 $word = $word|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tr;
 $2 = $word;
 $3 = $c;
 $4 = $1;
 $5 = ((($4)) + 324|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(26465);
 L1: do {
  if ($7) {
   $ix = 0;
   while(1) {
    $8 = $ix;
    $9 = (3044 + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $p = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     break L1;
    }
    $12 = $p;
    $13 = (_strlen($12)|0);
    $len = $13;
    $14 = $len;
    $15 = (0 - ($14))|0;
    $16 = $2;
    $17 = (($16) + ($15)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = ($19|0)==(32);
    if ($20) {
     $21 = $len;
     $22 = (0 - ($21))|0;
     $23 = (($22) + 1)|0;
     $24 = $2;
     $25 = (($24) + ($23)|0);
     $26 = $p;
     $27 = $len;
     $28 = (($27) - 1)|0;
     $29 = (_memcmp($25,$26,$28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $31 = $3;
      $32 = $len;
      $33 = (($32) - 1)|0;
      $34 = $p;
      $35 = (($34) + ($33)|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = ($31|0)==($37|0);
      if ($38) {
       break;
      }
      $39 = $len;
      $40 = (($39) - 1)|0;
      $41 = $p;
      $42 = (($41) + ($40)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43 << 24 >> 24;
      $45 = ($44|0)==(65);
      if ($45) {
       $46 = $1;
       $47 = $3;
       $48 = (__Z7IsVowelP10Translatori($46,$47)|0);
       $49 = ($48|0)!=(0);
       if ($49) {
        break;
       }
      }
     }
    }
    $50 = $ix;
    $51 = (($50) + 1)|0;
    $ix = $51;
   }
   $0 = 1;
   $52 = $0;
   STACKTOP = sp;return ($52|0);
  }
 } while(0);
 $0 = 0;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function __Z15TranslateClauseP10TranslatorP8_IO_FILEPKvPiPPc($tr,$f_text,$vp_input,$tone_out,$voice_change) {
 $tr = $tr|0;
 $f_text = $f_text|0;
 $vp_input = $vp_input|0;
 $tone_out = $tone_out|0;
 $voice_change = $voice_change|0;
 var $$ = 0, $$1 = 0, $$58 = 0, $$old = 0, $$old63 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0;
 var $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0;
 var $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0;
 var $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0;
 var $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0;
 var $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0;
 var $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0;
 var $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0;
 var $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0;
 var $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0;
 var $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0;
 var $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $all_upper_case = 0, $c = 0, $c_temp = 0, $cc = 0, $char_inserted = 0;
 var $charix = 0, $charix_top = 0, $clause_pause = 0, $decimal_sep_count = 0, $dict_flags = 0, $embedded_count = 0, $finished = 0, $ix = 0, $j = 0, $k = 0, $letter_count = 0, $n_digits = 0, $new_sentence2 = 0, $next2_in = 0, $next_in = 0, $next_in_nbytes = 0, $next_word_flags = 0, $num_wtab = 0, $number_buf = 0, $nw = 0;
 var $nx = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond34 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond4 = 0, $or$cond40 = 0, $or$cond42 = 0;
 var $or$cond44 = 0, $or$cond46 = 0, $or$cond48 = 0, $or$cond50 = 0, $or$cond52 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond6 = 0, $or$cond60 = 0, $or$cond62 = 0, $or$cond64 = 0, $or$cond8 = 0, $p = 0, $p2 = 0, $phoneme_mode = 0, $pn = 0, $pre_pause_add = 0, $prev_in = 0, $prev_in_save = 0, $prev_out = 0;
 var $prev_out2 = 0, $prev_source_index = 0, $pw = 0, $sbuf = 0, $single_quoted = 0, $source_index = 0, $source_index_word = 0, $space_inserted = 0, $srcix = 0, $syllable_marked = 0, $terminator = 0, $tone = 0, $tone2 = 0, $vararg_buffer = 0, $vararg_buffer65 = 0, $word = 0, $word_count = 0, $word_flags = 0, $word_mark = 0, $words = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer65 = sp + 8|0;
 $vararg_buffer = sp;
 $cc = sp + 4392|0;
 $source_index = sp + 4388|0;
 $prev_in = sp + 4376|0;
 $prev_out = sp + 4372|0;
 $next_in = sp + 4360|0;
 $char_inserted = sp + 4352|0;
 $word_flags = sp + 4316|0;
 $charix_top = sp + 4264|0;
 $charix = sp + 4432|0;
 $words = sp + 664|0;
 $sbuf = sp + 6192|0;
 $tone2 = sp + 644|0;
 $next2_in = sp + 636|0;
 $c_temp = sp + 628|0;
 $number_buf = sp + 6040|0;
 $num_wtab = sp + 16|0;
 $1 = $tr;
 $2 = $f_text;
 $3 = $vp_input;
 $4 = $tone_out;
 $5 = $voice_change;
 HEAP32[$source_index>>2] = 0;
 $prev_source_index = 0;
 $source_index_word = 0;
 HEAP32[$prev_out>>2] = 32;
 $prev_in_save = 0;
 HEAP32[$char_inserted>>2] = 0;
 $pre_pause_add = 0;
 $word_mark = 0;
 $all_upper_case = 1;
 $phoneme_mode = 0;
 $dict_flags = 0;
 $embedded_count = 0;
 $letter_count = 0;
 $space_inserted = 0;
 $syllable_marked = 0;
 $decimal_sep_count = 0;
 HEAP32[$charix_top>>2] = 0;
 $word_count = 0;
 $6 = $1;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $1268 = $0;
  STACKTOP = sp;return ($1268|0);
 }
 $8 = $3;
 HEAP32[10365] = $8;
 $9 = $3;
 HEAP32[10366] = $9;
 HEAP32[19380] = 0;
 HEAP32[19378] = 0;
 HEAP32[19061] = 0;
 HEAP32[19377] = 0;
 $10 = HEAP32[10367]|0;
 HEAP32[19058] = $10;
 $11 = ($10|0)<(0);
 $$ = $11 ? 0 : $10;
 HEAP32[19058] = $$;
 $12 = HEAP32[19057]|0;
 $13 = (($12) + 1)|0;
 HEAP32[19059] = $13;
 $ix = 0;
 while(1) {
  $14 = $ix;
  $15 = ($14|0)<(800);
  if (!($15)) {
   break;
  }
  $16 = $ix;
  $17 = (($charix) + ($16<<1)|0);
  HEAP16[$17>>1] = 0;
  $18 = $ix;
  $19 = (($18) + 1)|0;
  $ix = $19;
 }
 $20 = $1;
 $21 = $2;
 $22 = (__Z10ReadClauseP10TranslatorP8_IO_FILEPcPsPiiS5_S3_($20,$21,120444,$charix,$charix_top,800,$tone2,121284)|0);
 $terminator = $22;
 $23 = HEAP32[11134]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = HEAP32[11135]|0;
  $26 = $25 & 4;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = HEAP32[11134]|0;
   $29 = $terminator;
   HEAP32[$vararg_buffer>>2] = $29;
   (_fprintf($28,23090,$vararg_buffer)|0);
   $p = 120444;
   while(1) {
    $30 = $p;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)!=(0);
    if (!($33)) {
     break;
    }
    $34 = $p;
    $35 = HEAP8[$34>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = HEAP32[11134]|0;
    (_fputc($36,$37)|0);
    $38 = $p;
    $39 = ((($38)) + 1|0);
    $p = $39;
   }
   $40 = HEAP32[11134]|0;
   (_fprintf($40,23102,$vararg_buffer65)|0);
   $41 = HEAP32[11134]|0;
   (_fflush($41)|0);
  }
 }
 $p = 120444;
 $42 = HEAP32[$charix_top>>2]|0;
 $43 = (($42) + 1)|0;
 $44 = (($charix) + ($43<<1)|0);
 HEAP16[$44>>1] = 0;
 $45 = HEAP32[$charix_top>>2]|0;
 $46 = (($45) + 2)|0;
 $47 = (($charix) + ($46<<1)|0);
 HEAP16[$47>>1] = 32767;
 $48 = HEAP32[$charix_top>>2]|0;
 $49 = (($48) + 3)|0;
 $50 = (($charix) + ($49<<1)|0);
 HEAP16[$50>>1] = 0;
 $51 = $terminator;
 $52 = $51 & 4095;
 $53 = ($52*10)|0;
 $clause_pause = $53;
 $54 = $terminator;
 $55 = $54 & 8388608;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $clause_pause;
  $58 = $57<<5;
  $clause_pause = $58;
 }
 $59 = $terminator;
 $60 = $59 >> 12;
 $61 = $60 & 7;
 $tone = $61;
 $62 = HEAP32[$tone2>>2]|0;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = HEAP32[$tone2>>2]|0;
  $tone = $64;
 }
 $p = 120444;
 while(1) {
  $65 = $p;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($67|0)!=(0);
  if (!($68)) {
   break;
  }
  $69 = $p;
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = (__Z8isspace2j($71)|0);
  $73 = ($72|0)!=(0);
  if (!($73)) {
   break;
  }
  $74 = $p;
  $75 = ((($74)) + 1|0);
  $p = $75;
 }
 $76 = $p;
 $77 = HEAP8[$76>>0]|0;
 $78 = $77 << 24 >> 24;
 $79 = ($78|0)==(0);
 if ($79) {
  $80 = HEAP32[19381]|0;
  $81 = $clause_pause;
  $82 = (($81) - ($80))|0;
  $clause_pause = $82;
  $83 = $clause_pause;
  $84 = ($83|0)<(0);
  $$1 = $84 ? 0 : $82;
  $clause_pause = $$1;
  $85 = HEAP32[19060]|0;
  $86 = ($85|0)!=(0);
  if ($86) {
   $87 = $terminator;
   $88 = $87 | 524288;
   $terminator = $88;
  }
  $89 = $clause_pause;
  $90 = HEAP32[19381]|0;
  $91 = (($90) + ($89))|0;
  HEAP32[19381] = $91;
  $new_sentence2 = 0;
 } else {
  $92 = $clause_pause;
  HEAP32[19381] = $92;
  $93 = HEAP32[19060]|0;
  $new_sentence2 = $93;
 }
 $94 = $terminator;
 $95 = $1;
 $96 = ((($95)) + 8360|0);
 HEAP32[$96>>2] = $94;
 $97 = $new_sentence2;
 $98 = ($97|0)!=(0);
 if ($98) {
  $99 = HEAP32[19056]|0;
  $100 = (($99) + 1)|0;
  HEAP32[19056] = $100;
  $101 = HEAP32[19051]|0;
  $102 = ($101|0)>(0);
  if ($102) {
   $103 = HEAP32[19051]|0;
   $104 = (($103) + -1)|0;
   HEAP32[19051] = $104;
   $105 = HEAP32[19051]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    HEAP32[19054] = 0;
   }
  }
 }
 ;HEAP16[99916>>1]=0|0;HEAP16[99916+2>>1]=0|0;HEAP16[99916+4>>1]=0|0;HEAP16[99916+6>>1]=0|0;
 HEAP8[(99918)>>0] = 10;
 HEAP32[19063] = 1;
 $107 = $1;
 $108 = ((($107)) + 8320|0);
 HEAP32[$108>>2] = 0;
 $109 = $1;
 $110 = ((($109)) + 8344|0);
 HEAP32[$110>>2] = 0;
 $111 = $1;
 $112 = ((($111)) + 8304|0);
 HEAP32[$112>>2] = 0;
 $113 = $1;
 $114 = ((($113)) + 8316|0);
 HEAP32[$114>>2] = 0;
 $115 = $1;
 $116 = ((($115)) + 8308|0);
 HEAP32[$116>>2] = 0;
 $117 = $1;
 $118 = ((($117)) + 8312|0);
 HEAP32[$118>>2] = 0;
 $119 = $1;
 $120 = ((($119)) + 400|0);
 HEAP32[$120>>2] = 0;
 $121 = $1;
 $122 = ((($121)) + 8348|0);
 HEAP32[$122>>2] = 0;
 $123 = $1;
 $124 = ((($123)) + 8352|0);
 HEAP32[$124>>2] = 0;
 $125 = $1;
 $126 = ((($125)) + 8352|0);
 $127 = ((($126)) + 4|0);
 HEAP32[$127>>2] = 0;
 $word_count = 0;
 $single_quoted = 0;
 HEAP32[$word_flags>>2] = 0;
 $next_word_flags = 0;
 HEAP8[$sbuf>>0] = 0;
 $128 = ((($sbuf)) + 1|0);
 HEAP8[$128>>0] = 32;
 $129 = ((($sbuf)) + 2|0);
 HEAP8[$129>>0] = 32;
 $ix = 3;
 HEAP32[$prev_in>>2] = 32;
 $130 = $ix;
 $131 = $130&65535;
 $132 = ((($words)) + 4|0);
 HEAP16[$132>>1] = $131;
 HEAP32[$words>>2] = 0;
 $finished = 0;
 $j = 0;
 while(1) {
  $133 = $j;
  $134 = (($charix) + ($133<<1)|0);
  $135 = HEAP16[$134>>1]|0;
  $136 = $135 << 16 >> 16;
  $137 = ($136|0)<=(0);
  $138 = $j;
  if (!($137)) {
   break;
  }
  $139 = (($138) + 1)|0;
  $j = $139;
 }
 $140 = (($charix) + ($138<<1)|0);
 $141 = HEAP16[$140>>1]|0;
 $142 = ((($words)) + 8|0);
 HEAP16[$142>>1] = $141;
 $k = 0;
 while(1) {
  $143 = $j;
  $144 = (($charix) + ($143<<1)|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145 << 16 >> 16;
  $147 = ($146|0)!=(0);
  if (!($147)) {
   break;
  }
  $148 = $j;
  $149 = (($148) + 1)|0;
  $j = $149;
  $150 = (($charix) + ($148<<1)|0);
  $151 = HEAP16[$150>>1]|0;
  $152 = $151 << 16 >> 16;
  $153 = ($152|0)!=(-1);
  if (!($153)) {
   continue;
  }
  $154 = $k;
  $155 = (($154) + 1)|0;
  $k = $155;
 }
 $156 = $k;
 $157 = $156&255;
 $158 = ((($words)) + 10|0);
 HEAP8[$158>>0] = $157;
 L49: while(1) {
  $159 = $finished;
  $160 = ($159|0)==(0);
  $161 = $ix;
  $162 = ($161|0)<(800);
  $or$cond = $160 & $162;
  $163 = HEAP32[19063]|0;
  $164 = ($163|0)<(996);
  $or$cond62 = $or$cond & $164;
  if (!($or$cond62)) {
   break;
  }
  $165 = HEAP32[$prev_out>>2]|0;
  $prev_out2 = $165;
  $166 = $ix;
  $167 = (($166) - 1)|0;
  $168 = (($sbuf) + ($167)|0);
  (__Z8utf8_in2PiPKci($prev_out,$168,1)|0);
  $169 = $1;
  $170 = ((($169)) + 270|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = ($171<<24>>24)!=(0);
  if ($172) {
   $173 = HEAP32[$prev_out>>2]|0;
   $174 = (__Z9IsDigit09j($173)|0);
   $175 = ($174|0)!=(0);
   if ($175) {
    $176 = $prev_out2;
    $177 = (__Z7IsAlphaj($176)|0);
    $178 = ($177|0)!=(0);
    if ($178) {
     HEAP32[$prev_out>>2] = 97;
    }
   }
  }
  $179 = $prev_in_save;
  $180 = ($179|0)!=(0);
  if ($180) {
   $181 = $prev_in_save;
   HEAP32[$prev_in>>2] = $181;
   $prev_in_save = 0;
  } else {
   $182 = HEAP32[$source_index>>2]|0;
   $183 = ($182>>>0)>(0);
   if ($183) {
    $184 = HEAP32[$source_index>>2]|0;
    $185 = (($184) - 1)|0;
    $186 = (120444 + ($185)|0);
    (__Z8utf8_in2PiPKci($prev_in,$186,1)|0);
   }
  }
  $187 = HEAP32[$source_index>>2]|0;
  $prev_source_index = $187;
  $188 = HEAP32[$char_inserted>>2]|0;
  $189 = ($188|0)!=(0);
  if ($189) {
   $190 = HEAP32[$char_inserted>>2]|0;
   $c = $190;
   HEAP32[$char_inserted>>2] = 0;
  } else {
   $191 = HEAP32[$source_index>>2]|0;
   $192 = (120444 + ($191)|0);
   $193 = (__Z7utf8_inPiPKc($cc,$192)|0);
   $194 = HEAP32[$source_index>>2]|0;
   $195 = (($194) + ($193))|0;
   HEAP32[$source_index>>2] = $195;
   $196 = HEAP32[$cc>>2]|0;
   $c = $196;
  }
  $197 = HEAP32[$source_index>>2]|0;
  $198 = (120444 + ($197)|0);
  $199 = (__Z7utf8_inPiPKc($next_in,$198)|0);
  $next_in_nbytes = $199;
  $200 = $c;
  $201 = ($200|0)==(0);
  if ($201) {
   $finished = 1;
   $c = 32;
  }
  $202 = $c;
  $203 = ($202|0)==(1);
  if ($203) {
   label = 53;
  } else {
   $204 = $c;
   $205 = HEAP8[22675]|0;
   $206 = $205 << 24 >> 24;
   $207 = ($204|0)==($206|0);
   if ($207) {
    label = 53;
   }
  }
  do {
   if ((label|0) == 53) {
    label = 0;
    $208 = HEAP32[$source_index>>2]|0;
    $209 = (($208) - 1)|0;
    $srcix = $209;
    $210 = HEAP32[$prev_in>>2]|0;
    $211 = ($210|0)!=(32);
    if ($211) {
     $c = 32;
     $212 = $c;
     $prev_in_save = $212;
     $213 = HEAP32[$source_index>>2]|0;
     $214 = (($213) + -1)|0;
     HEAP32[$source_index>>2] = $214;
     break;
    } else {
     $215 = (__ZL15EmbeddedCommandPj($source_index)|0);
     $216 = $embedded_count;
     $217 = (($216) + ($215))|0;
     $embedded_count = $217;
     $218 = HEAP32[$prev_in>>2]|0;
     $prev_in_save = $218;
     $219 = $srcix;
     $220 = (120444 + ($219)|0);
     $221 = HEAP32[$source_index>>2]|0;
     $222 = $srcix;
     $223 = (($221) - ($222))|0;
     _memset(($220|0),32,($223|0))|0;
     $224 = $srcix;
     HEAP32[$source_index>>2] = $224;
     continue L49;
    }
   }
  } while(0);
  $225 = HEAP32[19382]|0;
  $226 = ($225|0)==(36);
  $227 = $c;
  $228 = ($227|0)!=(32);
  $or$cond4 = $226 & $228;
  if ($or$cond4) {
   $229 = HEAP32[$prev_in>>2]|0;
   $230 = ($229|0)==(32);
   $231 = HEAP32[$next_in>>2]|0;
   $232 = ($231|0)==(32);
   $or$cond6 = $230 & $232;
   if ($or$cond6) {
    HEAP32[19382] = 20;
   }
   $233 = $c;
   $234 = (__Z9towlower2j($233)|0);
   $c = $234;
  }
  $235 = $phoneme_mode;
  $236 = ($235|0)!=(0);
  L83: do {
   if ($236) {
    $all_upper_case = 8;
    $237 = $c;
    $238 = ($237|0)==(93);
    $239 = HEAP32[$next_in>>2]|0;
    $240 = ($239|0)==(93);
    $or$cond8 = $238 & $240;
    if ($or$cond8) {
     $phoneme_mode = 0;
     $241 = HEAP32[$source_index>>2]|0;
     $242 = (($241) + 1)|0;
     HEAP32[$source_index>>2] = $242;
     $c = 32;
    }
   } else {
    $243 = HEAP32[19382]|0;
    $244 = $243 & 240;
    $245 = ($244|0)==(64);
    if ($245) {
     $246 = $c;
     $247 = (_iswdigit($246)|0);
     $248 = ($247|0)!=(0);
     if ($248) {
      $249 = HEAP32[19383]|0;
      $250 = (($249) + 1)|0;
      HEAP32[19383] = $250;
      $251 = HEAP32[19383]|0;
      $252 = HEAP32[19382]|0;
      $253 = $252 & 15;
      $254 = ($251|0)>($253|0);
      if (!($254)) {
       break;
      }
      $c = 32;
      $space_inserted = 1;
      HEAP32[19383] = 0;
      break;
     } else {
      HEAP32[19383] = 0;
      $255 = HEAP32[$prev_out>>2]|0;
      $256 = (_iswdigit($255)|0);
      $257 = ($256|0)!=(0);
      if (!($257)) {
       break;
      }
      $c = 32;
      $space_inserted = 1;
      break;
     }
    }
    $258 = HEAP32[19382]|0;
    $259 = $258 & 16;
    $260 = ($259|0)==(0);
    if ($260) {
     $261 = $c;
     $262 = ($261|0)==(146);
     $263 = $c;
     $264 = ($263|0)==(180);
     $or$cond10 = $262 | $264;
     $265 = $c;
     $266 = ($265|0)==(8217);
     $or$cond12 = $or$cond10 | $266;
     $267 = $c;
     $268 = ($267|0)==(8242);
     $or$cond14 = $or$cond12 | $268;
     if ($or$cond14) {
      $c = 39;
     }
     $269 = $c;
     $270 = ($269|0)==(8216);
     $271 = $c;
     $272 = ($271|0)==(63);
     $or$cond16 = $270 | $272;
     do {
      if ($or$cond16) {
       $273 = HEAP32[$prev_out>>2]|0;
       $274 = (__Z7IsAlphaj($273)|0);
       $275 = ($274|0)!=(0);
       if (!($275)) {
        break;
       }
       $276 = HEAP32[$next_in>>2]|0;
       $277 = (__Z7IsAlphaj($276)|0);
       $278 = ($277|0)!=(0);
       if (!($278)) {
        break;
       }
       $c = 39;
      }
     } while(0);
     $279 = $c;
     $280 = ($279|0)==(1328);
     if ($280) {
      $c = 32;
      $281 = HEAP32[$word_flags>>2]|0;
      $282 = $281 | 1024;
      HEAP32[$word_flags>>2] = $282;
     }
     $283 = $c;
     $284 = ($283|0)==(1367);
     if ($284) {
      $c = 32;
      $285 = HEAP32[$word_flags>>2]|0;
      $286 = $285 | 131072;
      HEAP32[$word_flags>>2] = $286;
     }
     $287 = $1;
     $288 = HEAP32[$source_index>>2]|0;
     $289 = (120444 + ($288)|0);
     $290 = HEAP32[$prev_in>>2]|0;
     $291 = $c;
     $292 = HEAP32[$next_in>>2]|0;
     $293 = (__ZL13TranslateCharP10TranslatorPcijjPiS2_($287,$289,$290,$291,$292,$char_inserted,$word_flags)|0);
     $c = $293;
     $294 = $c;
     $295 = ($294|0)==(8);
     if ($295) {
      continue L49;
     }
     $296 = HEAP32[$char_inserted>>2]|0;
     $297 = ($296|0)!=(0);
     if ($297) {
      $298 = HEAP32[$char_inserted>>2]|0;
      HEAP32[$next_in>>2] = $298;
     }
     $299 = $c;
     $300 = (__Z7IsAlphaj($299)|0);
     $301 = ($300|0)!=(0);
     L114: do {
      if (!($301)) {
       $302 = $c;
       $303 = (__Z7IsSpacej($302)|0);
       $304 = ($303|0)!=(0);
       if ($304) {
        break;
       }
       $305 = $1;
       $306 = ((($305)) + 456|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = $c;
       $309 = (_wcschr($307,$308)|0);
       $310 = ($309|0)==(0|0);
       if (!($310)) {
        break;
       }
       $311 = HEAP32[$prev_out>>2]|0;
       $312 = (__Z7IsAlphaj($311)|0);
       $313 = ($312|0)!=(0);
       if (!($313)) {
        break;
       }
       $314 = $1;
       $315 = ((($314)) + 270|0);
       $316 = HEAP8[$315>>0]|0;
       $317 = ($316<<24>>24)!=(0);
       do {
        if ($317) {
         $318 = $c;
         $319 = (__Z9IsDigit09j($318)|0);
         $320 = ($319|0)!=(0);
         if (!($320)) {
          break;
         }
         $321 = HEAP32[$next_in>>2]|0;
         $322 = (__Z9IsDigit09j($321)|0);
         $323 = ($322|0)!=(0);
         if (!($323)) {
          break L114;
         }
        }
       } while(0);
       $c = 32;
       $space_inserted = 1;
      }
     } while(0);
     $324 = HEAP32[$prev_out>>2]|0;
     $325 = (_iswdigit($324)|0);
     $326 = ($325|0)!=(0);
     do {
      if ($326) {
       $327 = $c;
       $328 = (_iswdigit($327)|0);
       $329 = ($328|0)==(0);
       $330 = $c;
       $331 = ($330|0)!=(46);
       $or$cond18 = $329 & $331;
       $332 = $c;
       $333 = ($332|0)!=(44);
       $or$cond20 = $or$cond18 & $333;
       $334 = $c;
       $335 = ($334|0)!=(32);
       $or$cond22 = $or$cond20 & $335;
       if (!($or$cond22)) {
        break;
       }
       $c = 32;
       $space_inserted = 1;
      } else {
       $336 = HEAP32[$prev_in>>2]|0;
       $337 = ($336|0)!=(44);
       if (!($337)) {
        break;
       }
       $decimal_sep_count = 0;
      }
     } while(0);
     $338 = $c;
     $339 = ($338|0)==(91);
     do {
      if ($339) {
       $340 = HEAP32[$next_in>>2]|0;
       $341 = ($340|0)==(2);
       if (!($341)) {
        $342 = HEAP32[$next_in>>2]|0;
        $343 = ($342|0)==(91);
        $344 = HEAP32[19048]|0;
        $345 = ($344|0)!=(0);
        $or$cond24 = $343 & $345;
        if (!($or$cond24)) {
         break;
        }
       }
       $phoneme_mode = 8;
       $346 = HEAP32[$source_index>>2]|0;
       $347 = (($346) + 1)|0;
       HEAP32[$source_index>>2] = $347;
       continue L49;
      }
     } while(0);
     $348 = $c;
     $349 = (__Z7IsAlphaj($348)|0);
     $350 = ($349|0)!=(0);
     if ($350) {
      $351 = HEAP32[$prev_out>>2]|0;
      $352 = (__Z7IsAlphaj($351)|0);
      $353 = ($352|0)!=(0);
      do {
       if ($353) {
        $354 = $1;
        $355 = ((($354)) + 271|0);
        $356 = HEAP8[$355>>0]|0;
        $357 = ($356<<24>>24)!=(0);
        if (!($357)) {
         break;
        }
        $358 = $c;
        $359 = ($358|0)>(12352);
        $360 = HEAP32[$prev_out>>2]|0;
        $361 = ($360|0)>(12352);
        $or$cond26 = $359 | $361;
        if ($or$cond26) {
         label = 104;
        }
       } else {
        label = 104;
       }
      } while(0);
      L141: do {
       if ((label|0) == 104) {
        label = 0;
        $362 = $1;
        $363 = ((($362)) + 456|0);
        $364 = HEAP32[$363>>2]|0;
        $365 = HEAP32[$prev_out>>2]|0;
        $366 = (_wcschr($364,$365)|0);
        $367 = ($366|0)==(0|0);
        if ($367) {
         $letter_count = 0;
        }
        $368 = HEAP32[$prev_out>>2]|0;
        $369 = ($368|0)!=(32);
        do {
         if ($369) {
          $370 = $1;
          $371 = ((($370)) + 456|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = HEAP32[$prev_out>>2]|0;
          $374 = (_wcschr($372,$373)|0);
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           break;
          }
          $c = 32;
          $space_inserted = 1;
          $376 = HEAP32[$prev_out>>2]|0;
          $377 = (__Z9IsBracketi($376)|0);
          $378 = ($377|0)!=(0);
          if ($378) {
           break L141;
          }
          $379 = $next_word_flags;
          $380 = $379 | 256;
          $next_word_flags = $380;
          break L141;
         }
        } while(0);
        $381 = $c;
        $382 = (__Z9iswupper2i($381)|0);
        $383 = ($382|0)!=(0);
        if ($383) {
         $384 = HEAP32[$word_flags>>2]|0;
         $385 = $384 | 2;
         HEAP32[$word_flags>>2] = $385;
        }
        $386 = HEAP32[$prev_out>>2]|0;
        $387 = ($386|0)==(32);
        if (!($387)) {
         break;
        }
        $388 = $ix;
        $389 = (($388) - 2)|0;
        $390 = (($sbuf) + ($389)|0);
        $391 = HEAP8[$390>>0]|0;
        $392 = $391 << 24 >> 24;
        $393 = (_iswdigit($392)|0);
        $394 = ($393|0)!=(0);
        if (!($394)) {
         break;
        }
        $395 = HEAP32[$prev_in>>2]|0;
        $396 = (_iswdigit($395)|0);
        $397 = ($396|0)!=(0);
        if ($397) {
         break;
        }
        $398 = $ix;
        $399 = (($398) + 1)|0;
        $ix = $399;
        $400 = (($sbuf) + ($398)|0);
        HEAP8[$400>>0] = 32;
        $401 = $word_count;
        $402 = (($words) + (($401*12)|0)|0);
        $403 = ((($402)) + 4|0);
        $404 = HEAP16[$403>>1]|0;
        $405 = (($404) + 1)<<16>>16;
        HEAP16[$403>>1] = $405;
       }
      } while(0);
      $406 = $c;
      $407 = ($406|0)!=(32);
      do {
       if ($407) {
        $408 = $letter_count;
        $409 = (($408) + 1)|0;
        $letter_count = $409;
        $410 = $1;
        $411 = ((($410)) + 720|0);
        $412 = HEAP32[$411>>2]|0;
        $413 = ($412|0)>(0);
        if (!($413)) {
         break;
        }
        $414 = $c;
        $415 = ($414|0)<(592);
        if ($415) {
         $416 = HEAP32[$prev_out>>2]|0;
         $417 = $1;
         $418 = ((($417)) + 720|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = ($416|0)>=($419|0);
         if (!($420)) {
          label = 120;
         }
        } else {
         label = 120;
        }
        if ((label|0) == 120) {
         label = 0;
         $421 = $c;
         $422 = $1;
         $423 = ((($422)) + 720|0);
         $424 = HEAP32[$423>>2]|0;
         $425 = ($421|0)>=($424|0);
         $426 = $letter_count;
         $427 = ($426|0)>(1);
         $or$cond28 = $425 & $427;
         $428 = HEAP32[$prev_out>>2]|0;
         $429 = ($428|0)<(592);
         $or$cond30 = $or$cond28 & $429;
         if (!($or$cond30)) {
          break;
         }
        }
        $430 = HEAP32[$prev_out>>2]|0;
        $431 = (__Z7IsAlphaj($430)|0);
        $432 = ($431|0)!=(0);
        if (!($432)) {
         break;
        }
        $c = 32;
        $space_inserted = 1;
        $433 = HEAP32[$word_flags>>2]|0;
        $434 = $433 | 16384;
        HEAP32[$word_flags>>2] = $434;
        $435 = $next_word_flags;
        $436 = $435 | 128;
        $next_word_flags = $436;
       }
      } while(0);
      $437 = $c;
      $438 = (__Z9iswupper2i($437)|0);
      $439 = ($438|0)!=(0);
      if (!($439)) {
       $492 = $all_upper_case;
       $493 = ($492|0)!=(0);
       $494 = $letter_count;
       $495 = ($494|0)>(2);
       $or$cond40 = $493 & $495;
       if (!($or$cond40)) {
        $all_upper_case = 0;
        break;
       }
       $496 = $c;
       $497 = ($496|0)==(115);
       $498 = HEAP32[$next_in>>2]|0;
       $499 = ($498|0)==(32);
       $or$cond42 = $497 & $499;
       if (!($or$cond42)) {
        $all_upper_case = 0;
        break;
       }
       $c = 32;
       $500 = $all_upper_case;
       $501 = $500 | 4;
       $all_upper_case = $501;
       $502 = $ix;
       $503 = (($502) - 1)|0;
       $504 = (($sbuf) + ($503)|0);
       $505 = HEAP8[$504>>0]|0;
       $506 = $505 << 24 >> 24;
       $507 = ($506|0)==(39);
       if (!($507)) {
        break;
       }
       $508 = $ix;
       $509 = (($508) - 1)|0;
       $510 = (($sbuf) + ($509)|0);
       HEAP8[$510>>0] = 32;
       break;
      }
      $440 = $c;
      $441 = (__Z9towlower2j($440)|0);
      $c = $441;
      $442 = $1;
      $443 = ((($442)) + 24|0);
      $444 = ((($443)) + 52|0);
      $445 = HEAP32[$444>>2]|0;
      $j = $445;
      $446 = ($445|0)>(0);
      if ($446) {
       $447 = $j;
       $448 = ($447|0)==(2);
       $449 = $syllable_marked;
       $450 = ($449|0)==(0);
       $or$cond32 = $448 & $450;
       if (!($or$cond32)) {
        break;
       }
       $451 = $c;
       HEAP32[$char_inserted>>2] = $451;
       $c = 712;
       $syllable_marked = 1;
       break;
      }
      $452 = HEAP32[$prev_in>>2]|0;
      $453 = (__Z9iswlower2i($452)|0);
      $454 = ($453|0)!=(0);
      if ($454) {
       $455 = $1;
       $456 = $ix;
       $457 = (($sbuf) + ($456)|0);
       $458 = $c;
       $459 = (__Z15UpperCaseInWordP10TranslatorPci($455,$457,$458)|0);
       $460 = ($459|0)==(1);
       if ($460) {
        $461 = $c;
        $462 = (__Z9towlower2j($461)|0);
        $c = $462;
        break;
       } else {
        $c = 32;
        $space_inserted = 1;
        $463 = $c;
        $prev_in_save = $463;
        break;
       }
      }
      $464 = $c;
      $465 = ($464|0)!=(32);
      if (!($465)) {
       break;
      }
      $466 = HEAP32[$prev_in>>2]|0;
      $467 = (__Z9iswupper2i($466)|0);
      $468 = ($467|0)!=(0);
      if (!($468)) {
       break;
      }
      $469 = HEAP32[$next_in>>2]|0;
      $470 = (__Z9iswlower2i($469)|0);
      $471 = ($470|0)!=(0);
      if (!($471)) {
       break;
      }
      $472 = HEAP32[$source_index>>2]|0;
      $473 = $next_in_nbytes;
      $474 = (($472) + ($473))|0;
      $475 = (120444 + ($474)|0);
      (__Z7utf8_inPiPKc($next2_in,$475)|0);
      $476 = $1;
      $477 = ((($476)) + 324|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($478|0)==(28268);
      $480 = $letter_count;
      $481 = ($480|0)==(2);
      $or$cond34 = $479 & $481;
      $482 = $c;
      $483 = ($482|0)==(106);
      $or$cond36 = $or$cond34 & $483;
      $484 = HEAP32[$prev_in>>2]|0;
      $485 = ($484|0)==(73);
      $or$cond38 = $or$cond36 & $485;
      if ($or$cond38) {
       break;
      }
      $486 = HEAP32[$next2_in>>2]|0;
      $487 = (__Z7IsAlphaj($486)|0);
      $488 = ($487|0)!=(0);
      if (!($488)) {
       break;
      }
      $c = 32;
      $space_inserted = 1;
      $489 = $c;
      $prev_in_save = $489;
      $490 = $next_word_flags;
      $491 = $490 | 256;
      $next_word_flags = $491;
      break;
     }
     $511 = $c;
     $512 = ($511|0)==(45);
     if ($512) {
      $513 = HEAP32[$prev_in>>2]|0;
      $514 = (__Z7IsSpacej($513)|0);
      $515 = ($514|0)!=(0);
      do {
       if (!($515)) {
        $516 = HEAP32[$next_in>>2]|0;
        $517 = (__Z7IsAlphaj($516)|0);
        $518 = ($517|0)!=(0);
        if (!($518)) {
         break;
        }
        $519 = HEAP32[$prev_out>>2]|0;
        $520 = ($519|0)!=(32);
        if ($520) {
         $c = 32;
         $space_inserted = 1;
         break L83;
        }
        $521 = HEAP32[$word_flags>>2]|0;
        $522 = $521 | 128;
        HEAP32[$word_flags>>2] = $522;
        $523 = $word_count;
        $524 = ($523|0)>(0);
        if ($524) {
         $525 = $word_count;
         $526 = (($525) - 1)|0;
         $527 = (($words) + (($526*12)|0)|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = $528 | 16384;
         HEAP32[$527>>2] = $529;
        }
        $c = 32;
        break L83;
       }
      } while(0);
      $530 = HEAP32[$prev_in>>2]|0;
      $531 = ($530|0)==(32);
      $532 = HEAP32[$next_in>>2]|0;
      $533 = ($532|0)==(32);
      $or$cond44 = $531 & $533;
      if ($or$cond44) {
       $c = 32;
       $pre_pause_add = 4;
       break;
      }
      $534 = HEAP32[$next_in>>2]|0;
      $535 = ($534|0)==(45);
      if ($535) {
       $536 = HEAP32[$source_index>>2]|0;
       $537 = (($536) + 1)|0;
       HEAP32[$source_index>>2] = $537;
       $c = 32;
       $pre_pause_add = 4;
       break;
      }
      $538 = HEAP32[$prev_out>>2]|0;
      $539 = ($538|0)==(32);
      if (!($539)) {
       break;
      }
      $540 = $prev_out2;
      $541 = (__Z7IsAlphaj($540)|0);
      $542 = ($541|0)!=(0);
      if (!($542)) {
       break;
      }
      $543 = HEAP32[$prev_in>>2]|0;
      $544 = (__Z7IsAlphaj($543)|0);
      $545 = ($544|0)!=(0);
      if ($545) {
       break;
      }
      $546 = $ix;
      $547 = (($546) + 1)|0;
      $ix = $547;
      $548 = (($sbuf) + ($546)|0);
      HEAP8[$548>>0] = 32;
      $549 = $word_count;
      $550 = (($words) + (($549*12)|0)|0);
      $551 = ((($550)) + 4|0);
      $552 = HEAP16[$551>>1]|0;
      $553 = (($552) + 1)<<16>>16;
      HEAP16[$551>>1] = $553;
      break;
     }
     $554 = $c;
     $555 = ($554|0)==(46);
     if ($555) {
      $556 = HEAP32[$prev_out>>2]|0;
      $557 = ($556|0)==(46);
      if ($557) {
       $c = 32;
       $space_inserted = 1;
       break;
      }
      $558 = $word_count;
      $559 = ($558|0)>(0);
      if (!($559)) {
       break;
      }
      $560 = $word_count;
      $561 = (($560) - 1)|0;
      $562 = (($words) + (($561*12)|0)|0);
      $563 = HEAP32[$562>>2]|0;
      $564 = $563 & 256;
      $565 = ($564|0)!=(0);
      if ($565) {
       break;
      }
      $566 = HEAP32[$prev_in>>2]|0;
      $567 = (__Z7IsAlphaj($566)|0);
      $568 = ($567|0)!=(0);
      if (!($568)) {
       break;
      }
      $569 = $word_count;
      $570 = (($569) - 1)|0;
      $571 = (($words) + (($570*12)|0)|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = $572 | 65536;
      HEAP32[$571>>2] = $573;
      $574 = HEAP32[$next_in>>2]|0;
      $575 = (__Z7IsSpacej($574)|0);
      $576 = ($575|0)!=(0);
      $577 = HEAP32[$next_in>>2]|0;
      $578 = ($577|0)==(45);
      $or$cond46 = $576 | $578;
      if (!($or$cond46)) {
       break;
      }
      $c = 32;
      break;
     }
     $579 = $c;
     $580 = ($579|0)==(39);
     if (!($580)) {
      $626 = $c;
      $627 = (__Z11lookupwcharPKti(9512,$626)|0);
      $628 = ($627|0)!=(0);
      if ($628) {
       $c = 32;
       break;
      }
      $629 = $c;
      $630 = (_iswdigit($629)|0);
      $631 = ($630|0)!=(0);
      if (!($631)) {
       break;
      }
      $632 = $1;
      $633 = ((($632)) + 270|0);
      $634 = HEAP8[$633>>0]|0;
      $635 = ($634<<24>>24)!=(0);
      do {
       if ($635) {
        $636 = HEAP32[$prev_out>>2]|0;
        $637 = (__Z7IsAlphaj($636)|0);
        $638 = ($637|0)!=(0);
        if (!($638)) {
         break;
        }
        $639 = HEAP32[$next_in>>2]|0;
        $640 = (__Z7IsDigitj($639)|0);
        $641 = ($640|0)!=(0);
        if (!($641)) {
         break L83;
        }
       }
      } while(0);
      $642 = HEAP32[$prev_out>>2]|0;
      $643 = ($642|0)!=(32);
      do {
       if ($643) {
        $644 = HEAP32[$prev_out>>2]|0;
        $645 = (_iswdigit($644)|0);
        $646 = ($645|0)!=(0);
        if ($646) {
         break;
        }
        $647 = HEAP32[$prev_out>>2]|0;
        $648 = $1;
        $649 = ((($648)) + 224|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ($647|0)!=($650|0);
        do {
         if (!($651)) {
          $652 = $decimal_sep_count;
          $653 = ($652|0)>(0);
          if ($653) {
           $654 = $1;
           $655 = ((($654)) + 224|0);
           $656 = HEAP32[$655>>2]|0;
           $657 = ($656|0)==(44);
           if ($657) {
            break;
           }
          }
          $decimal_sep_count = 1;
          break L83;
         }
        } while(0);
        $c = 32;
        $space_inserted = 1;
        break L83;
       }
      } while(0);
      $658 = HEAP32[$prev_out>>2]|0;
      $659 = ($658|0)==(32);
      if (!($659)) {
       break;
      }
      $660 = $prev_out2;
      $661 = (__Z7IsAlphaj($660)|0);
      $662 = ($661|0)!=(0);
      if (!($662)) {
       break;
      }
      $663 = HEAP32[$prev_in>>2]|0;
      $664 = (__Z7IsAlphaj($663)|0);
      $665 = ($664|0)!=(0);
      if ($665) {
       break;
      }
      $666 = $ix;
      $667 = (($666) + 1)|0;
      $ix = $667;
      $668 = (($sbuf) + ($666)|0);
      HEAP8[$668>>0] = 32;
      $669 = $word_count;
      $670 = (($words) + (($669*12)|0)|0);
      $671 = ((($670)) + 4|0);
      $672 = HEAP16[$671>>1]|0;
      $673 = (($672) + 1)<<16>>16;
      HEAP16[$671>>1] = $673;
      break;
     }
     $581 = HEAP32[$prev_in>>2]|0;
     $582 = ($581|0)==(46);
     if ($582) {
      label = 170;
     } else {
      $583 = HEAP32[$prev_in>>2]|0;
      $584 = (_iswalnum($583)|0);
      $585 = ($584|0)!=(0);
      if ($585) {
       label = 170;
      }
     }
     do {
      if ((label|0) == 170) {
       label = 0;
       $586 = HEAP32[$next_in>>2]|0;
       $587 = (__Z7IsAlphaj($586)|0);
       $588 = ($587|0)!=(0);
       if (!($588)) {
        break;
       }
       $single_quoted = 0;
       break L83;
      }
     } while(0);
     $589 = $1;
     $590 = ((($589)) + 24|0);
     $591 = ((($590)) + 80|0);
     $592 = HEAP32[$591>>2]|0;
     $593 = $592 & 1;
     $594 = ($593|0)!=(0);
     do {
      if ($594) {
       $595 = HEAP32[$next_in>>2]|0;
       $596 = (__Z7IsAlphaj($595)|0);
       $597 = ($596|0)!=(0);
       if (!($597)) {
        break;
       }
       $single_quoted = 0;
       break L83;
      }
     } while(0);
     $598 = $1;
     $599 = ((($598)) + 24|0);
     $600 = ((($599)) + 80|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = $601 & 2;
     $603 = ($602|0)!=(0);
     do {
      if ($603) {
       $604 = HEAP32[$prev_in>>2]|0;
       $605 = (__Z7IsAlphaj($604)|0);
       $606 = ($605|0)!=(0);
       if (!($606)) {
        break;
       }
       $single_quoted = 0;
       break L83;
      }
     } while(0);
     $607 = $1;
     $608 = ((($607)) + 452|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = HEAP32[$prev_in>>2]|0;
     $611 = (_wcschr($609,$610)|0);
     $612 = ($611|0)!=(0|0);
     $613 = $prev_out2;
     $614 = ($613|0)==(32);
     $or$cond48 = $612 & $614;
     if ($or$cond48) {
      $single_quoted = 0;
      $615 = HEAP32[$next_in>>2]|0;
      $616 = ($615|0)==(32);
      if (!($616)) {
       break;
      }
      $617 = HEAP32[$source_index>>2]|0;
      $618 = (($617) + 1)|0;
      HEAP32[$source_index>>2] = $618;
      break;
     }
     $619 = HEAP32[$prev_out>>2]|0;
     $620 = ($619|0)==(115);
     $621 = $single_quoted;
     $622 = ($621|0)==(0);
     $or$cond50 = $620 & $622;
     if ($or$cond50) {
      $c = 32;
      break;
     }
     $623 = HEAP32[$prev_out>>2]|0;
     $624 = (__Z7IsSpacej($623)|0);
     $625 = ($624|0)!=(0);
     if ($625) {
      $single_quoted = 1;
     } else {
      $single_quoted = 0;
     }
     $pre_pause_add = 4;
     $c = 32;
    }
   }
  } while(0);
  $674 = $c;
  $675 = (__Z7IsSpacej($674)|0);
  $676 = ($675|0)!=(0);
  do {
   if ($676) {
    $677 = HEAP32[$prev_out>>2]|0;
    $678 = ($677|0)==(32);
    if ($678) {
     $679 = HEAP32[$word_flags>>2]|0;
     $680 = $679 | 262144;
     HEAP32[$word_flags>>2] = $680;
     continue L49;
    }
    $681 = HEAP32[$cc>>2]|0;
    $682 = ($681|0)==(9);
    $683 = HEAP32[$cc>>2]|0;
    $684 = ($683|0)==(10);
    $or$cond52 = $682 | $684;
    if ($or$cond52) {
     $685 = $next_word_flags;
     $686 = $685 | 262144;
     $next_word_flags = $686;
    }
    $687 = $space_inserted;
    $688 = ($687|0)!=(0);
    if ($688) {
     $j = 0;
     $689 = HEAP32[$source_index>>2]|0;
     $690 = (($689) - 1)|0;
     $k = $690;
     while(1) {
      $691 = $k;
      $692 = $source_index_word;
      $693 = ($691|0)>=($692|0);
      if (!($693)) {
       break;
      }
      $694 = $k;
      $695 = (($charix) + ($694<<1)|0);
      $696 = HEAP16[$695>>1]|0;
      $697 = $696 << 16 >> 16;
      $698 = ($697|0)!=(0);
      if (!($698)) {
       break;
      }
      $699 = $k;
      $700 = (($charix) + ($699<<1)|0);
      $701 = HEAP16[$700>>1]|0;
      $702 = $701 << 16 >> 16;
      $703 = ($702|0)>(0);
      if ($703) {
       $704 = $j;
       $705 = (($704) + 1)|0;
       $j = $705;
      }
      $706 = $k;
      $707 = (($706) + -1)|0;
      $k = $707;
     }
     $708 = $j;
     $709 = $708&255;
     $710 = $word_count;
     $711 = (($words) + (($710*12)|0)|0);
     $712 = ((($711)) + 10|0);
     HEAP8[$712>>0] = $709;
    }
    $713 = HEAP32[$source_index>>2]|0;
    $source_index_word = $713;
    $714 = $ix;
    $715 = (($714) + 1)|0;
    $ix = $715;
    $716 = (($sbuf) + ($714)|0);
    HEAP8[$716>>0] = 32;
    $717 = $word_count;
    $718 = ($717|0)<(299);
    do {
     if ($718) {
      $719 = $ix;
      $720 = $word_count;
      $721 = (($words) + (($720*12)|0)|0);
      $722 = ((($721)) + 4|0);
      $723 = HEAP16[$722>>1]|0;
      $724 = $723&65535;
      $725 = ($719|0)>($724|0);
      if (!($725)) {
       break;
      }
      $726 = $embedded_count;
      $727 = ($726|0)>(0);
      if ($727) {
       $728 = HEAP32[19380]|0;
       $729 = (($728) - 1)|0;
       $730 = (76504 + ($729<<2)|0);
       $731 = HEAP32[$730>>2]|0;
       $732 = $731 | 128;
       HEAP32[$730>>2] = $732;
       $733 = $word_count;
       $734 = (($words) + (($733*12)|0)|0);
       $735 = HEAP32[$734>>2]|0;
       $736 = $735 | 64;
       HEAP32[$734>>2] = $736;
       $embedded_count = 0;
      }
      $737 = HEAP32[19061]|0;
      $738 = $737&255;
      $739 = $word_count;
      $740 = (($words) + (($739*12)|0)|0);
      $741 = ((($740)) + 6|0);
      HEAP8[$741>>0] = $738;
      $742 = $all_upper_case;
      $743 = HEAP32[$word_flags>>2]|0;
      $744 = $742 | $743;
      $745 = HEAP32[19384]|0;
      $746 = $744 | $745;
      $747 = $word_count;
      $748 = (($words) + (($747*12)|0)|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = $749 | $746;
      HEAP32[$748>>2] = $750;
      $751 = $word_mark;
      $752 = $751&255;
      $753 = $word_count;
      $754 = (($words) + (($753*12)|0)|0);
      $755 = ((($754)) + 7|0);
      HEAP8[$755>>0] = $752;
      $756 = HEAP32[19061]|0;
      $757 = ($756|0)>(0);
      if ($757) {
       $758 = $ix;
       $j = $758;
       while(1) {
        $759 = $j;
        $760 = $word_count;
        $761 = (($words) + (($760*12)|0)|0);
        $762 = ((($761)) + 4|0);
        $763 = HEAP16[$762>>1]|0;
        $764 = $763&65535;
        $765 = ($759|0)>($764|0);
        $766 = $j;
        if (!($765)) {
         break;
        }
        $767 = (($766) - 1)|0;
        $768 = (($sbuf) + ($767)|0);
        $769 = HEAP8[$768>>0]|0;
        $770 = $j;
        $771 = (($sbuf) + ($770)|0);
        HEAP8[$771>>0] = $769;
        $772 = $j;
        $773 = (($772) + -1)|0;
        $j = $773;
       }
       $774 = (($sbuf) + ($766)|0);
       HEAP8[$774>>0] = 32;
       $775 = $word_count;
       $776 = (($words) + (($775*12)|0)|0);
       $777 = ((($776)) + 4|0);
       $778 = HEAP16[$777>>1]|0;
       $779 = (($778) + 1)<<16>>16;
       HEAP16[$777>>1] = $779;
       $780 = $ix;
       $781 = (($780) + 1)|0;
       $ix = $781;
      }
      $782 = $word_count;
      $783 = (($782) + 1)|0;
      $word_count = $783;
      $784 = $ix;
      $785 = $784&65535;
      $786 = $word_count;
      $787 = (($words) + (($786*12)|0)|0);
      $788 = ((($787)) + 4|0);
      HEAP16[$788>>1] = $785;
      $789 = $word_count;
      $790 = (($words) + (($789*12)|0)|0);
      HEAP32[$790>>2] = 0;
      $791 = HEAP32[$source_index>>2]|0;
      $j = $791;
      while(1) {
       $792 = $j;
       $793 = (($charix) + ($792<<1)|0);
       $794 = HEAP16[$793>>1]|0;
       $795 = $794 << 16 >> 16;
       $796 = ($795|0)<=(0);
       $797 = $j;
       if (!($796)) {
        break;
       }
       $798 = (($797) + 1)|0;
       $j = $798;
      }
      $799 = (($charix) + ($797<<1)|0);
      $800 = HEAP16[$799>>1]|0;
      $801 = $word_count;
      $802 = (($words) + (($801*12)|0)|0);
      $803 = ((($802)) + 8|0);
      HEAP16[$803>>1] = $800;
      $k = 0;
      while(1) {
       $804 = $j;
       $805 = (($charix) + ($804<<1)|0);
       $806 = HEAP16[$805>>1]|0;
       $807 = $806 << 16 >> 16;
       $808 = ($807|0)!=(0);
       if (!($808)) {
        break;
       }
       $809 = $j;
       $810 = (($809) + 1)|0;
       $j = $810;
       $811 = (($charix) + ($809<<1)|0);
       $812 = HEAP16[$811>>1]|0;
       $813 = $812 << 16 >> 16;
       $814 = ($813|0)!=(-1);
       if (!($814)) {
        continue;
       }
       $815 = $k;
       $816 = (($815) + 1)|0;
       $k = $816;
      }
      $817 = $k;
      $818 = $817&255;
      $819 = $word_count;
      $820 = (($words) + (($819*12)|0)|0);
      $821 = ((($820)) + 10|0);
      HEAP8[$821>>0] = $818;
      $822 = $next_word_flags;
      HEAP32[$word_flags>>2] = $822;
      $next_word_flags = 0;
      HEAP32[19061] = 0;
      $word_mark = 0;
      $all_upper_case = 1;
      $syllable_marked = 0;
     }
    } while(0);
    $823 = $space_inserted;
    $824 = ($823|0)!=(0);
    if (!($824)) {
     break;
    }
    $825 = $prev_source_index;
    HEAP32[$source_index>>2] = $825;
    HEAP32[$char_inserted>>2] = 0;
    $space_inserted = 0;
   } else {
    $826 = $ix;
    $827 = ($826|0)<(796);
    if ($827) {
     $828 = $c;
     $829 = $ix;
     $830 = (($sbuf) + ($829)|0);
     $831 = (__Z8utf8_outjPc($828,$830)|0);
     $832 = $ix;
     $833 = (($832) + ($831))|0;
     $ix = $833;
    }
   }
  } while(0);
  $834 = $pre_pause_add;
  $835 = HEAP32[19061]|0;
  $836 = ($834|0)>($835|0);
  if ($836) {
   $837 = $pre_pause_add;
   HEAP32[19061] = $837;
  }
  $pre_pause_add = 0;
 }
 $838 = $word_count;
 $839 = ($838|0)==(0);
 $840 = $embedded_count;
 $841 = ($840|0)>(0);
 $or$cond55 = $839 & $841;
 if ($or$cond55) {
  $842 = HEAP32[19380]|0;
  $843 = (($842) - 1)|0;
  $844 = (76504 + ($843<<2)|0);
  $845 = HEAP32[$844>>2]|0;
  $846 = $845 | 128;
  HEAP32[$844>>2] = $846;
  $847 = $word_count;
  $848 = (($words) + (($847*12)|0)|0);
  $849 = HEAP32[$848>>2]|0;
  $850 = $849 | 64;
  HEAP32[$848>>2] = $850;
  $word_count = 1;
 }
 $851 = $ix;
 $852 = (($851) - 1)|0;
 $853 = (($sbuf) + ($852)|0);
 $854 = $1;
 $855 = ((($854)) + 8324|0);
 HEAP32[$855>>2] = $853;
 $856 = $ix;
 $857 = (($sbuf) + ($856)|0);
 HEAP8[$857>>0] = 0;
 $858 = ((($words)) + 6|0);
 HEAP8[$858>>0] = 0;
 $859 = $word_count;
 $860 = (($words) + (($859*12)|0)|0);
 $861 = ((($860)) + 6|0);
 HEAP8[$861>>0] = 8;
 $862 = $word_count;
 $863 = ($862|0)>(0);
 if ($863) {
  $864 = $word_count;
  $865 = (($864) - 1)|0;
  $ix = $865;
  while(1) {
   $866 = $ix;
   $867 = ($866|0)>(0);
   if ($867) {
    $868 = $ix;
    $869 = (($words) + (($868*12)|0)|0);
    $870 = ((($869)) + 4|0);
    $871 = HEAP16[$870>>1]|0;
    $872 = $871&65535;
    $873 = (($sbuf) + ($872)|0);
    $874 = HEAP8[$873>>0]|0;
    $875 = $874 << 24 >> 24;
    $876 = (__Z9IsBracketi($875)|0);
    $877 = ($876|0)!=(0);
    $1269 = $877;
   } else {
    $1269 = 0;
   }
   $878 = $ix;
   if (!($1269)) {
    break;
   }
   $879 = (($878) + -1)|0;
   $ix = $879;
  }
  $880 = (($words) + (($878*12)|0)|0);
  $881 = HEAP32[$880>>2]|0;
  $882 = $881 | 16;
  HEAP32[$880>>2] = $882;
  $883 = $terminator;
  $884 = $883 & 4194304;
  $885 = ($884|0)!=(0);
  if ($885) {
   $886 = $word_count;
   $887 = (($886) - 1)|0;
   $888 = (($words) + (($887*12)|0)|0);
   $889 = HEAP32[$888>>2]|0;
   $890 = $889 & 256;
   $891 = ($890|0)!=(0);
   if (!($891)) {
    $892 = $word_count;
    $893 = (($892) - 1)|0;
    $894 = (($words) + (($893*12)|0)|0);
    $895 = HEAP32[$894>>2]|0;
    $896 = $895 | 65536;
    HEAP32[$894>>2] = $896;
   }
  }
 }
 $897 = HEAP32[$words>>2]|0;
 $898 = $897 | 512;
 HEAP32[$words>>2] = $898;
 $ix = 0;
 while(1) {
  $899 = $ix;
  $900 = $word_count;
  $901 = ($899|0)<($900|0);
  if (!($901)) {
   break;
  }
  $902 = HEAP32[19057]|0;
  $903 = (($902) + 1)|0;
  HEAP32[19057] = $903;
  $904 = HEAP32[19052]|0;
  $905 = ($904|0)>(0);
  if ($905) {
   $906 = HEAP32[19052]|0;
   $907 = (($906) + -1)|0;
   HEAP32[19052] = $907;
   $908 = HEAP32[19052]|0;
   $909 = ($908|0)==(0);
   if ($909) {
    HEAP32[19054] = 0;
   }
  }
  $910 = HEAP32[19054]|0;
  $911 = ($910|0)!=(0);
  if (!($911)) {
   HEAP32[19062] = 0;
   $912 = $ix;
   $913 = (($words) + (($912*12)|0)|0);
   $914 = ((($913)) + 4|0);
   $915 = HEAP16[$914>>1]|0;
   $916 = $915&65535;
   $917 = (($sbuf) + ($916)|0);
   $pw = $917;
   $word = $917;
   $918 = $word;
   $919 = HEAP8[$918>>0]|0;
   $920 = $919 << 24 >> 24;
   $921 = (_iswdigit($920)|0);
   $922 = ($921|0)!=(0);
   if ($922) {
    $923 = $1;
    $924 = ((($923)) + 208|0);
    $925 = HEAP32[$924>>2]|0;
    $926 = ($925|0)!=(1227133512);
    if ($926) {
     $pn = $number_buf;
     while(1) {
      $927 = $pn;
      $928 = ((($number_buf)) + 130|0);
      $929 = ($927>>>0)<($928>>>0);
      if (!($929)) {
       break;
      }
      $930 = $pw;
      $931 = HEAP8[$930>>0]|0;
      $932 = $931 << 24 >> 24;
      $933 = (_iswdigit($932)|0);
      $934 = ($933|0)!=(0);
      $935 = $pw;
      if ($934) {
       $936 = ((($935)) + 1|0);
       $pw = $936;
       $937 = HEAP8[$935>>0]|0;
       $938 = $pn;
       $939 = ((($938)) + 1|0);
       $pn = $939;
       HEAP8[$938>>0] = $937;
       continue;
      }
      $940 = HEAP8[$935>>0]|0;
      $941 = $940 << 24 >> 24;
      $942 = $1;
      $943 = ((($942)) + 220|0);
      $944 = HEAP32[$943>>2]|0;
      $945 = ($941|0)==($944|0);
      if (!($945)) {
       label = 270;
       break;
      }
      $946 = $pw;
      $947 = ((($946)) + 1|0);
      $948 = HEAP8[$947>>0]|0;
      $949 = $948 << 24 >> 24;
      $950 = ($949|0)==(32);
      if (!($950)) {
       label = 270;
       break;
      }
      $951 = $pw;
      $952 = ((($951)) + 2|0);
      $953 = HEAP8[$952>>0]|0;
      $954 = $953 << 24 >> 24;
      $955 = (_iswdigit($954)|0);
      $956 = ($955|0)!=(0);
      if (!($956)) {
       label = 270;
       break;
      }
      $957 = $pw;
      $958 = ((($957)) + 3|0);
      $959 = HEAP8[$958>>0]|0;
      $960 = $959 << 24 >> 24;
      $961 = ($960|0)!=(32);
      if (!($961)) {
       label = 270;
       break;
      }
      $962 = $pw;
      $963 = ((($962)) + 4|0);
      $964 = HEAP8[$963>>0]|0;
      $965 = $964 << 24 >> 24;
      $966 = ($965|0)!=(32);
      if (!($966)) {
       label = 270;
       break;
      }
      $967 = $pw;
      $968 = ((($967)) + 2|0);
      $pw = $968;
      $969 = $ix;
      $970 = (($969) + 1)|0;
      $ix = $970;
     }
     if ((label|0) == 270) {
      label = 0;
      $971 = $pw;
      $972 = $word;
      $973 = $971;
      $974 = $972;
      $975 = (($973) - ($974))|0;
      $nx = $975;
      $976 = $word;
      $977 = $nx;
      _memset(($976|0),32,($977|0))|0;
      $978 = $pn;
      $979 = $978;
      $980 = $number_buf;
      $981 = (($979) - ($980))|0;
      $nx = $981;
      $982 = $word;
      $983 = $nx;
      _memcpy(($982|0),($number_buf|0),($983|0))|0;
     }
     $984 = $word;
     $pw = $984;
    }
   }
   $n_digits = 0;
   while(1) {
    $985 = $n_digits;
    $986 = $word;
    $987 = (($986) + ($985)|0);
    $988 = HEAP8[$987>>0]|0;
    $989 = $988 << 24 >> 24;
    $990 = (_iswdigit($989)|0);
    $991 = ($990|0)!=(0);
    $992 = $n_digits;
    if (!($991)) {
     break;
    }
    $993 = (($992) + 1)|0;
    $n_digits = $993;
   }
   $994 = ($992|0)>(4);
   L372: do {
    if ($994) {
     HEAP8[$number_buf>>0] = 32;
     $995 = ((($number_buf)) + 1|0);
     $pn = $995;
     $996 = $n_digits;
     $nx = $996;
     $nw = 0;
     $997 = $n_digits;
     $998 = $1;
     $999 = ((($998)) + 228|0);
     $1000 = HEAP32[$999>>2]|0;
     $1001 = ($997|0)>($1000|0);
     if ($1001) {
      label = 278;
     } else {
      $1002 = $word;
      $1003 = HEAP8[$1002>>0]|0;
      $1004 = $1003 << 24 >> 24;
      $1005 = ($1004|0)==(48);
      if ($1005) {
       label = 278;
      }
     }
     if ((label|0) == 278) {
      label = 0;
      $1006 = $ix;
      $1007 = (($words) + (($1006*12)|0)|0);
      $1008 = HEAP32[$1007>>2]|0;
      $1009 = $1008 | 524288;
      HEAP32[$1007>>2] = $1009;
     }
     while(1) {
      $1010 = $pn;
      $1011 = ((($number_buf)) + 130|0);
      $1012 = ($1010>>>0)<($1011>>>0);
      if (!($1012)) {
       break;
      }
      $1013 = $pw;
      $1014 = ((($1013)) + 1|0);
      $pw = $1014;
      $1015 = HEAP8[$1013>>0]|0;
      $1016 = $1015 << 24 >> 24;
      $c = $1016;
      $1017 = (__Z9IsDigit09j($1016)|0);
      $1018 = ($1017|0)!=(0);
      if (!($1018)) {
       $1019 = $c;
       $1020 = $1;
       $1021 = ((($1020)) + 224|0);
       $1022 = HEAP32[$1021>>2]|0;
       $1023 = ($1019|0)!=($1022|0);
       if ($1023) {
        break;
       }
      }
      $1024 = $c;
      $1025 = $1024&255;
      $1026 = $pn;
      $1027 = ((($1026)) + 1|0);
      $pn = $1027;
      HEAP8[$1026>>0] = $1025;
      $1028 = $nx;
      $1029 = (($1028) + -1)|0;
      $nx = $1029;
      $1030 = $nx;
      $1031 = ($1030|0)>(0);
      if (!($1031)) {
       continue;
      }
      $1032 = $1;
      $1033 = ((($1032)) + 208|0);
      $1034 = HEAP32[$1033>>2]|0;
      $1035 = $nx;
      $1036 = 1 << $1035;
      $1037 = $1034 & $1036;
      $1038 = ($1037|0)!=(0);
      if (!($1038)) {
       continue;
      }
      $1039 = $nw;
      $1040 = (($1039) + 1)|0;
      $nw = $1040;
      $1041 = (($num_wtab) + (($1039*12)|0)|0);
      $1042 = $ix;
      $1043 = (($words) + (($1042*12)|0)|0);
      ;HEAP32[$1041>>2]=HEAP32[$1043>>2]|0;HEAP32[$1041+4>>2]=HEAP32[$1043+4>>2]|0;HEAP32[$1041+8>>2]=HEAP32[$1043+8>>2]|0;
      $1044 = $1;
      $1045 = ((($1044)) + 220|0);
      $1046 = HEAP32[$1045>>2]|0;
      $1047 = ($1046|0)!=(32);
      if ($1047) {
       $1048 = $1;
       $1049 = ((($1048)) + 220|0);
       $1050 = HEAP32[$1049>>2]|0;
       $1051 = $1050&255;
       $1052 = $pn;
       $1053 = ((($1052)) + 1|0);
       $pn = $1053;
       HEAP8[$1052>>0] = $1051;
      }
      $1054 = $pn;
      $1055 = ((($1054)) + 1|0);
      $pn = $1055;
      HEAP8[$1054>>0] = 32;
      $1056 = $ix;
      $1057 = (($words) + (($1056*12)|0)|0);
      $1058 = HEAP32[$1057>>2]|0;
      $1059 = $1058 & 524288;
      $1060 = ($1059|0)==(0);
      if (!($1060)) {
       continue;
      }
      $1061 = $1;
      $1062 = ((($1061)) + 208|0);
      $1063 = HEAP32[$1062>>2]|0;
      $1064 = $nx;
      $1065 = (($1064) - 1)|0;
      $1066 = 1 << $1065;
      $1067 = $1063 & $1066;
      $1068 = ($1067|0)!=(0);
      if ($1068) {
       $1069 = $pn;
       $1070 = ((($1069)) + 1|0);
       $pn = $1070;
       HEAP8[$1069>>0] = 48;
       $1071 = $pn;
       $1072 = ((($1071)) + 1|0);
       $pn = $1072;
       HEAP8[$1071>>0] = 48;
      }
      $1073 = $1;
      $1074 = ((($1073)) + 208|0);
      $1075 = HEAP32[$1074>>2]|0;
      $1076 = $nx;
      $1077 = (($1076) - 2)|0;
      $1078 = 1 << $1077;
      $1079 = $1075 & $1078;
      $1080 = ($1079|0)!=(0);
      if (!($1080)) {
       continue;
      }
      $1081 = $pn;
      $1082 = ((($1081)) + 1|0);
      $pn = $1082;
      HEAP8[$1081>>0] = 48;
     }
     $1083 = $pw;
     $1084 = ((($1083)) + -1|0);
     $pw = $1084;
     $1085 = $nw;
     $1086 = (($num_wtab) + (($1085*12)|0)|0);
     $1087 = $ix;
     $1088 = (($words) + (($1087*12)|0)|0);
     ;HEAP32[$1086>>2]=HEAP32[$1088>>2]|0;HEAP32[$1086+4>>2]=HEAP32[$1088+4>>2]|0;HEAP32[$1086+8>>2]=HEAP32[$1088+8>>2]|0;HEAP32[$1086+12>>2]=HEAP32[$1088+12>>2]|0;HEAP32[$1086+16>>2]=HEAP32[$1088+16>>2]|0;HEAP32[$1086+20>>2]=HEAP32[$1088+20>>2]|0;
     $j = 1;
     while(1) {
      $1089 = $j;
      $1090 = $nw;
      $1091 = ($1089|0)<=($1090|0);
      if (!($1091)) {
       break;
      }
      $1092 = $j;
      $1093 = (($num_wtab) + (($1092*12)|0)|0);
      $1094 = HEAP32[$1093>>2]|0;
      $1095 = $1094 & -262209;
      HEAP32[$1093>>2] = $1095;
      $1096 = $j;
      $1097 = (($1096) + 1)|0;
      $j = $1097;
     }
     $1098 = $pn;
     $1099 = $pw;
     dest=$1098; src=$1099; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $1100 = $pn;
     $1101 = ((($1100)) + 16|0);
     HEAP8[$1101>>0] = 0;
     $nw = 0;
     $1102 = ((($number_buf)) + 1|0);
     $pw = $1102;
     while(1) {
      $1103 = $pw;
      $1104 = $pn;
      $1105 = ($1103>>>0)<($1104>>>0);
      if (!($1105)) {
       break L372;
      }
      $1106 = $1;
      $1107 = $pw;
      $1108 = $nw;
      $1109 = (($1108) + 1)|0;
      $nw = $1109;
      $1110 = (($num_wtab) + (($1108*12)|0)|0);
      $1111 = $ix;
      $1112 = (($words) + (($1111*12)|0)|0);
      $1113 = ((($1112)) + 6|0);
      $1114 = HEAP8[$1113>>0]|0;
      $1115 = $1114&255;
      $1116 = (__ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($1106,$1107,$1110,$1115,0)|0);
      $dict_flags = $1116;
      while(1) {
       $1117 = $pw;
       $1118 = ((($1117)) + 1|0);
       $pw = $1118;
       $1119 = HEAP8[$1117>>0]|0;
       $1120 = $1119 << 24 >> 24;
       $1121 = ($1120|0)!=(32);
       if (!($1121)) {
        break;
       }
      }
      $1122 = $ix;
      $1123 = (($words) + (($1122*12)|0)|0);
      $1124 = ((($1123)) + 6|0);
      HEAP8[$1124>>0] = 0;
     }
    } else {
     HEAP32[19061] = 0;
     $1125 = $1;
     $1126 = $word;
     $1127 = $ix;
     $1128 = (($words) + (($1127*12)|0)|0);
     $1129 = $ix;
     $1130 = (($words) + (($1129*12)|0)|0);
     $1131 = ((($1130)) + 6|0);
     $1132 = HEAP8[$1131>>0]|0;
     $1133 = $1132&255;
     $1134 = $ix;
     $1135 = (($1134) + 1)|0;
     $1136 = (($words) + (($1135*12)|0)|0);
     $1137 = ((($1136)) + 6|0);
     $1138 = HEAP8[$1137>>0]|0;
     $1139 = $1138&255;
     $1140 = (__ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($1125,$1126,$1128,$1133,$1139)|0);
     $dict_flags = $1140;
     $1141 = HEAP32[19061]|0;
     $1142 = $ix;
     $1143 = (($1142) + 1)|0;
     $1144 = (($words) + (($1143*12)|0)|0);
     $1145 = ((($1144)) + 6|0);
     $1146 = HEAP8[$1145>>0]|0;
     $1147 = $1146&255;
     $1148 = ($1141|0)>($1147|0);
     if ($1148) {
      $1149 = HEAP32[19061]|0;
      $1150 = $1149&255;
      $1151 = $ix;
      $1152 = (($1151) + 1)|0;
      $1153 = (($words) + (($1152*12)|0)|0);
      $1154 = ((($1153)) + 6|0);
      HEAP8[$1154>>0] = $1150;
      HEAP32[19061] = 0;
     }
     $1155 = $dict_flags;
     $1156 = $1155 & 4096;
     $1157 = ($1156|0)!=(0);
     L409: do {
      if ($1157) {
       $1158 = $word;
       $pw = $1158;
       while(1) {
        $1159 = $pw;
        $1160 = HEAP8[$1159>>0]|0;
        $1161 = $1160 << 24 >> 24;
        $1162 = ($1161|0)!=(32);
        if (!($1162)) {
         break L409;
        }
        dest=$number_buf; stop=dest+9|0; do { HEAP8[dest>>0]=32|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
        $1163 = $pw;
        $1164 = (__Z7utf8_inPiPKc($c_temp,$1163)|0);
        $nx = $1164;
        $1165 = ((($number_buf)) + 2|0);
        $1166 = $pw;
        $1167 = $nx;
        _memcpy(($1165|0),($1166|0),($1167|0))|0;
        $1168 = $1;
        $1169 = ((($number_buf)) + 2|0);
        $1170 = $ix;
        $1171 = (($words) + (($1170*12)|0)|0);
        (__ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($1168,$1169,$1171,0,0)|0);
        $1172 = $nx;
        $1173 = $pw;
        $1174 = (($1173) + ($1172)|0);
        $pw = $1174;
       }
      }
     } while(0);
     $1175 = $dict_flags;
     $1176 = $1175 & 50331648;
     $1177 = ($1176|0)!=(0);
     if ($1177) {
      $1178 = $ix;
      $1179 = $word_count;
      $1180 = (($1179) - 1)|0;
      $1181 = HEAP32[10344]|0;
      $1182 = (($1180) - ($1181))|0;
      $1183 = ($1178|0)==($1182|0);
      if ($1183) {
       $1184 = $terminator;
       $1185 = $1184 & 4194304;
       $1186 = ($1185|0)!=(0);
       if (!($1186)) {
        break;
       }
       $clause_pause = 10;
       $tone = 4;
      }
     }
    }
   } while(0);
   $1187 = $dict_flags;
   $1188 = $1187 & 128;
   $1189 = ($1188|0)!=(0);
   $1190 = HEAP32[10344]|0;
   $1191 = ($1190|0)>(0);
   $or$cond64 = $1189 & $1191;
   if ($or$cond64) {
    while(1) {
     $1192 = $ix;
     $1193 = HEAP32[10344]|0;
     $1194 = (($1192) + ($1193))|0;
     $1195 = (($words) + (($1194*12)|0)|0);
     $1196 = HEAP32[$1195>>2]|0;
     $1197 = $1196 | 1048576;
     HEAP32[$1195>>2] = $1197;
     $1198 = HEAP32[10344]|0;
     $1199 = (($1198) + -1)|0;
     HEAP32[10344] = $1199;
     $$old = HEAP32[10344]|0;
     $$old63 = ($$old|0)>(0);
     if (!($$old63)) {
      break;
     }
    }
   }
  }
  $1200 = $ix;
  $1201 = (($1200) + 1)|0;
  $ix = $1201;
 }
 $1202 = HEAP32[19378]|0;
 $1203 = HEAP32[19380]|0;
 $1204 = ($1202|0)<($1203|0);
 if ($1204) {
  __Z16Word_EmbeddedCmdv();
 }
 $ix = 0;
 while(1) {
  $1205 = $ix;
  $1206 = ($1205|0)<(2);
  $1207 = HEAP32[19063]|0;
  if (!($1206)) {
   break;
  }
  $1208 = $ix;
  $1209 = (($1207) + ($1208))|0;
  $1210 = (99916 + ($1209<<3)|0);
  $p2 = $1210;
  $1211 = $p2;
  $1212 = ((($1211)) + 2|0);
  HEAP8[$1212>>0] = 9;
  $1213 = $p2;
  $1214 = ((($1213)) + 3|0);
  HEAP8[$1214>>0] = 0;
  $1215 = HEAP32[$source_index>>2]|0;
  $1216 = $1215&65535;
  $1217 = $p2;
  $1218 = ((($1217)) + 4|0);
  HEAP16[$1218>>1] = $1216;
  $1219 = $p2;
  HEAP16[$1219>>1] = 0;
  $1220 = $ix;
  $1221 = (($1220) + 1)|0;
  $ix = $1221;
 }
 $1222 = (($1207) + 2)|0;
 HEAP32[19063] = $1222;
 $1223 = HEAP32[19057]|0;
 $1224 = ($1223|0)==(0);
 if ($1224) {
  $clause_pause = 0;
 }
 $1225 = (__Z3Eofv()|0);
 $1226 = ($1225|0)!=(0);
 if ($1226) {
  $1227 = $word_count;
  $1228 = ($1227|0)==(0);
  $1229 = HEAP32[19043]|0;
  $1230 = ($1229|0)==(0);
  $or$cond57 = $1228 | $1230;
  if ($or$cond57) {
   $clause_pause = 10;
  }
 }
 $1231 = $1;
 $1232 = $clause_pause;
 $1233 = $new_sentence2;
 __Z15MakePhonemeListP10Translatorii($1231,$1232,$1233);
 HEAP32[(74640)>>2] = 0;
 HEAP16[(74636)>>1] = 1;
 $1234 = $embedded_count;
 $1235 = ($1234|0)!=(0);
 if ($1235) {
  $1236 = HEAP32[12657]|0;
  $1237 = (($1236) - 2)|0;
  $1238 = (50632 + (($1237*24)|0)|0);
  HEAP16[$1238>>1] = 2;
  $1239 = HEAP32[19380]|0;
  $1240 = (($1239) - 1)|0;
  $1241 = (76504 + ($1240<<2)|0);
  $1242 = HEAP32[$1241>>2]|0;
  $1243 = $1242 | 128;
  HEAP32[$1241>>2] = $1243;
  $1244 = HEAP32[19380]|0;
  $1245 = (76504 + ($1244<<2)|0);
  HEAP32[$1245>>2] = 128;
 }
 $1246 = $clause_pause;
 HEAP32[19387] = $1246;
 $1247 = $4;
 $1248 = ($1247|0)!=(0|0);
 if ($1248) {
  $1249 = $tone;
  $1250 = $4;
  HEAP32[$1250>>2] = $1249;
 }
 HEAP32[19060] = 0;
 $1251 = $terminator;
 $1252 = $1251 & 524288;
 $1253 = ($1252|0)!=(0);
 $$58 = $1253 ? 1 : 0;
 HEAP32[19060] = $$58;
 $1254 = $5;
 $1255 = ($1254|0)!=(0|0);
 do {
  if ($1255) {
   $1256 = $terminator;
   $1257 = $1256 & 131072;
   $1258 = ($1257|0)!=(0);
   $1259 = $5;
   if ($1258) {
    HEAP32[$1259>>2] = 121284;
    break;
   } else {
    HEAP32[$1259>>2] = 0;
    break;
   }
  }
 } while(0);
 $1260 = (__Z3Eofv()|0);
 $1261 = ($1260|0)!=(0);
 $1262 = $3;
 $1263 = ($1262|0)==(0|0);
 $or$cond60 = $1261 | $1263;
 if ($or$cond60) {
  $0 = 0;
  $1268 = $0;
  STACKTOP = sp;return ($1268|0);
 }
 $1264 = HEAP32[19124]|0;
 $1265 = ($1264|0)==(3);
 if ($1265) {
  $1266 = HEAP32[10366]|0;
  $0 = $1266;
  $1268 = $0;
  STACKTOP = sp;return ($1268|0);
 } else {
  $1267 = HEAP32[10365]|0;
  $0 = $1267;
  $1268 = $0;
  STACKTOP = sp;return ($1268|0);
 }
 return (0)|0;
}
function __ZL15EmbeddedCommandPj($source_index_out) {
 $source_index_out = $source_index_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $c = 0, $cmd = 0, $commands = 0, $p = 0, $sign = 0;
 var $source_index = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $source_index_out;
 $commands = 23113;
 $value = -1;
 $sign = 0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $source_index = $3;
 $4 = $source_index;
 $5 = (120444 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $c = $6;
 $7 = $c;
 $8 = $7&255;
 $9 = ($8|0)==(43);
 if ($9) {
  $sign = 64;
  $10 = $source_index;
  $11 = (($10) + 1)|0;
  $source_index = $11;
 } else {
  $12 = $c;
  $13 = $12&255;
  $14 = ($13|0)==(45);
  if ($14) {
   $sign = 96;
   $15 = $source_index;
   $16 = (($15) + 1)|0;
   $source_index = $16;
  }
 }
 $17 = $source_index;
 $18 = (120444 + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = (__Z9IsDigit09j($20)|0);
 $22 = ($21|0)!=(0);
 L6: do {
  if ($22) {
   $23 = $source_index;
   $24 = (120444 + ($23)|0);
   $25 = (_atoi($24)|0);
   $value = $25;
   while(1) {
    $26 = $source_index;
    $27 = (120444 + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = (__Z9IsDigit09j($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     break L6;
    }
    $32 = $source_index;
    $33 = (($32) + 1)|0;
    $source_index = $33;
   }
  }
 } while(0);
 $34 = $source_index;
 $35 = (($34) + 1)|0;
 $source_index = $35;
 $36 = (120444 + ($34)|0);
 $37 = HEAP8[$36>>0]|0;
 $c = $37;
 $38 = HEAP32[19380]|0;
 $39 = ($38|0)>=(248);
 if ($39) {
  $0 = 0;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $40 = $commands;
 $41 = $c;
 $42 = $41&255;
 $43 = (__Z8strchr_wPKci($40,$42)|0);
 $p = $43;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $0 = 0;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $45 = $p;
 $46 = $commands;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49) + 1)|0;
 $cmd = $50;
 $51 = $value;
 $52 = ($51|0)==(-1);
 if ($52) {
  $53 = $cmd;
  $54 = (4988 + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $value = $55;
  $sign = 0;
 }
 $56 = $cmd;
 $57 = ($56|0)==(9);
 if ($57) {
  $58 = $value;
  HEAP32[19382] = $58;
  HEAP32[19383] = 0;
 }
 $59 = $cmd;
 $60 = ($59|0)==(13);
 do {
  if ($60) {
   $61 = $value;
   $62 = ($61|0)>=(3);
   if ($62) {
    HEAP32[19384] = 2048;
    break;
   } else {
    HEAP32[19384] = 0;
    break;
   }
  }
 } while(0);
 $63 = $cmd;
 $64 = $sign;
 $65 = (($63) + ($64))|0;
 $66 = $value;
 $67 = $66 << 8;
 $68 = (($65) + ($67))|0;
 $69 = HEAP32[19380]|0;
 $70 = (($69) + 1)|0;
 HEAP32[19380] = $70;
 $71 = (76504 + ($69<<2)|0);
 HEAP32[$71>>2] = $68;
 $72 = $source_index;
 $73 = $1;
 HEAP32[$73>>2] = $72;
 $0 = 1;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZL13TranslateCharP10TranslatorPcijjPiS2_($tr,$ptr,$prev_in,$c,$next_in,$insert,$wordflags) {
 $tr = $tr|0;
 $ptr = $ptr|0;
 $prev_in = $prev_in|0;
 $c = $c|0;
 $next_in = $next_in|0;
 $insert = $insert|0;
 $wordflags = $wordflags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $code = 0, $final = 0, $initial = 0, $medial = 0, $next2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next2 = sp;
 $1 = $tr;
 $2 = $ptr;
 $3 = $prev_in;
 $4 = $c;
 $5 = $next_in;
 $6 = $insert;
 $7 = $wordflags;
 $8 = $4;
 $9 = (($8) - 44032)|0;
 $code = $9;
 $10 = ($9|0)>=(0);
 $11 = $4;
 $12 = ($11>>>0)<=(55215);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = $code;
  $14 = (($13|0) / 28)&-1;
  $15 = (($14|0) / 21)&-1;
  $initial = $15;
  $16 = $code;
  $17 = (($16|0) / 28)&-1;
  $18 = (($17|0) % 21)&-1;
  $medial = $18;
  $19 = $code;
  $20 = (($19|0) % 28)&-1;
  $final = $20;
  $21 = $initial;
  $22 = ($21|0)==(11);
  if ($22) {
   $23 = $medial;
   $24 = (($23) + 4449)|0;
   $4 = $24;
   $25 = $final;
   $26 = ($25|0)>(0);
   if ($26) {
    $27 = $final;
    $28 = (($27) + 4519)|0;
    $29 = $6;
    HEAP32[$29>>2] = $28;
   }
  } else {
   $30 = $initial;
   $31 = (($30) + 4352)|0;
   $4 = $31;
   $32 = $medial;
   $33 = ($32*28)|0;
   $34 = (6468 + ($33))|0;
   $35 = $final;
   $36 = (($34) + ($35))|0;
   $37 = (($36) + 44032)|0;
   $38 = $6;
   HEAP32[$38>>2] = $37;
  }
  $39 = $4;
  $0 = $39;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $40 = $4;
 $41 = (($40) - 12592)|0;
 $code = $41;
 $42 = ($41|0)>=(0);
 $43 = $code;
 $44 = ($43|0)<(52);
 $or$cond3 = $42 & $44;
 if ($or$cond3) {
  $45 = $code;
  $46 = (23127 + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (($48) + 4352)|0;
  $0 = $49;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $50 = $1;
 $51 = ((($50)) + 324|0);
 $52 = HEAP32[$51>>2]|0;
 $switch$split2D = ($52|0)<(28268);
 if ($switch$split2D) {
  switch ($52|0) {
  case 24934:  {
   label = 10;
   break;
  }
  default: {
  }
  }
 } else {
  switch ($52|0) {
  case 28268:  {
   label = 10;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 10) {
  $53 = $3;
  $54 = (__Z9iswalpha2i($53)|0);
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $56 = $2;
   $57 = ((($56)) + 1|0);
   (__Z7utf8_inPiPKc($next2,$57)|0);
   $58 = $4;
   $59 = ($58|0)==(39);
   if ($59) {
    $60 = HEAP32[$next2>>2]|0;
    $61 = (__Z7IsSpacej($60)|0);
    $62 = ($61|0)!=(0);
    if ($62) {
     $63 = $5;
     $64 = ($63|0)==(110);
     if ($64) {
      $65 = $1;
      $66 = ((($65)) + 324|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(24934);
      if ($68) {
       $69 = $2;
       HEAP8[$69>>0] = 32;
       $0 = 601;
       $80 = $0;
       STACKTOP = sp;return ($80|0);
      }
     }
     $70 = $5;
     $71 = ($70|0)==(110);
     $72 = $5;
     $73 = ($72|0)==(116);
     $or$cond5 = $71 | $73;
     if ($or$cond5) {
      $0 = 601;
      $80 = $0;
      STACKTOP = sp;return ($80|0);
     }
    }
   }
  }
 }
 $74 = $1;
 $75 = $4;
 $76 = $5;
 $77 = $6;
 $78 = $7;
 $79 = (__ZL14SubstituteCharP10TranslatorjjPiS1_($74,$75,$76,$77,$78)|0);
 $0 = $79;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function __ZL14SubstituteCharP10TranslatorjjPiS1_($tr,$c,$next_in,$insert,$wordflags) {
 $tr = $tr|0;
 $c = $c|0;
 $next_in = $next_in|0;
 $insert = $insert|0;
 $wordflags = $wordflags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $c2 = 0, $c_lower = 0, $ix = 0, $new_c = 0;
 var $replace_chars = 0, $upper_case = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tr;
 $2 = $c;
 $3 = $next_in;
 $4 = $insert;
 $5 = $wordflags;
 $upper_case = 0;
 $6 = HEAP32[19385]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  HEAP32[19385] = 0;
  $0 = 8;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $8 = $2;
 $9 = ($8|0)==(0);
 if ($9) {
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $10 = $1;
 $11 = ((($10)) + 284|0);
 $12 = HEAP32[$11>>2]|0;
 $replace_chars = $12;
 $13 = ($12|0)==(0|0);
 $14 = $2;
 if ($13) {
  $0 = $14;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $c_lower = $14;
 $15 = (__Z9iswupper2i($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $2;
  $18 = (__Z9towlower2j($17)|0);
  $c_lower = $18;
  $upper_case = 1;
 }
 $new_c = 0;
 $ix = 0;
 while(1) {
  $19 = $ix;
  $20 = $replace_chars;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $word = $22;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   break;
  }
  $24 = $c_lower;
  $25 = $word;
  $26 = $25 & 65535;
  $27 = ($24|0)==($26|0);
  if ($27) {
   $28 = $word;
   $29 = $28 >>> 16;
   $30 = ($29|0)==(0);
   if ($30) {
    label = 13;
    break;
   }
   $36 = $word;
   $37 = $36 >>> 16;
   $38 = $3;
   $39 = (__Z9towlower2j($38)|0);
   $40 = ($37|0)==($39|0);
   if ($40) {
    label = 15;
    break;
   }
  }
  $46 = $ix;
  $47 = (($46) + 2)|0;
  $ix = $47;
 }
 if ((label|0) == 13) {
  $31 = $ix;
  $32 = (($31) + 1)|0;
  $33 = $replace_chars;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $new_c = $35;
 }
 else if ((label|0) == 15) {
  $41 = $ix;
  $42 = (($41) + 1)|0;
  $43 = $replace_chars;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $new_c = $45;
  HEAP32[19385] = 1;
 }
 $48 = $new_c;
 $49 = ($48|0)==(0);
 if ($49) {
  $50 = $2;
  $0 = $50;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $51 = $new_c;
 $52 = $51 & -2097152;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $new_c;
  $55 = $54 >>> 16;
  $c2 = $55;
  $56 = $upper_case;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $3;
   $59 = (__Z9iswupper2i($58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $c2;
    $62 = (__Z9towupper2j($61)|0);
    $c2 = $62;
   }
  }
  $63 = $c2;
  $64 = $4;
  HEAP32[$64>>2] = $63;
  $65 = $new_c;
  $66 = $65 & 65535;
  $new_c = $66;
 }
 $67 = $upper_case;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $new_c;
  $70 = (__Z9towupper2j($69)|0);
  $new_c = $70;
 }
 $71 = $5;
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 | 2097152;
 HEAP32[$71>>2] = $73;
 $74 = $new_c;
 $0 = $74;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function __ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($tr,$word,$wtab,$pre_pause,$next_pause) {
 $tr = $tr|0;
 $word = $word|0;
 $wtab = $wtab|0;
 $pre_pause = $pre_pause|0;
 $next_pause = $next_pause|0;
 var $$ = 0, $$2 = 0, $$7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bad_phoneme = 0, $c1 = 0, $c2 = 0, $c_word2 = 0, $first_phoneme = 0, $flags = 0, $flags2 = 0, $found_dict_flag = 0, $ix = 0, $lang_name = 0, $len = 0;
 var $max_stress = 0, $max_stress_ix = 0, $new_language = 0, $next_stress = 0, $next_tone = 0, $ok = 0, $old_dictionary_name = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond9 = 0, $p = 0, $p2 = 0, $ph = 0, $ph_buf = 0, $ph_code = 0, $pitch_raised = 0, $plist2 = 0;
 var $prev_vowel = 0, $source_ix = 0, $srcix = 0, $stress = 0, $switch_attempt = 0, $switch_phonemes = 0, $sylimit = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_ptr14 = 0, $word_copy = 0, $word_copy_len = 0, $word_flags = 0, $word_replaced = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 8|0;
 $vararg_buffer = sp;
 $bad_phoneme = sp + 56|0;
 $word_copy = sp + 585|0;
 $word_replaced = sp + 424|0;
 $old_dictionary_name = sp + 384|0;
 $lang_name = sp + 368|0;
 $flags2 = sp + 24|0;
 $c_word2 = sp + 16|0;
 $ph_buf = sp + 168|0;
 $1 = $tr;
 $2 = $word;
 $3 = $wtab;
 $4 = $pre_pause;
 $5 = $next_pause;
 $flags = 0;
 $next_tone = 0;
 $max_stress_ix = 0;
 $prev_vowel = -1;
 $pitch_raised = 0;
 $switch_phonemes = -1;
 $first_phoneme = 1;
 $6 = HEAP32[11134]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[11135]|0;
  $9 = $8 & 8;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = HEAP32[11134]|0;
   $12 = $3;
   $13 = HEAP32[$12>>2]|0;
   $14 = $3;
   $15 = ((($14)) + 10|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr14 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $17;
   (_fprintf($11,23179,$vararg_buffer)|0);
   $ix = 0;
   while(1) {
    $18 = $ix;
    $19 = ($18|0)<(40);
    if (!($19)) {
     break;
    }
    $20 = $ix;
    $21 = $2;
    $22 = (($21) + ($20)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(0);
    if ($25) {
     break;
    }
    $26 = $ix;
    $27 = $2;
    $28 = (($27) + ($26)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = HEAP32[11134]|0;
    (_fputc($30,$31)|0);
    $32 = $ix;
    $33 = (($32) + 1)|0;
    $ix = $33;
   }
   $34 = HEAP32[11134]|0;
   (_fprintf($34,23204,$vararg_buffer15)|0);
  }
 }
 $35 = $3;
 $36 = ((($35)) + 10|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $len = $38;
 $39 = $len;
 $40 = ($39|0)>(31);
 $$ = $40 ? 31 : $38;
 $len = $$;
 $41 = $3;
 $42 = ((($41)) + 8|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $44 & 2047;
 $46 = $len;
 $47 = $46 << 11;
 $48 = $45 | $47;
 $source_ix = $48;
 $49 = $3;
 $50 = HEAP32[$49>>2]|0;
 $word_flags = $50;
 $51 = $word_flags;
 $52 = $51 & 64;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $3;
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 & -65;
  HEAP32[$54>>2] = $56;
  HEAP32[19386] = 2;
  __Z16Word_EmbeddedCmdv();
 }
 $57 = $2;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 << 24 >> 24;
 $60 = ($59|0)==(0);
 if (!($60)) {
  $61 = $word_flags;
  $62 = $61 & 1048576;
  $63 = ($62|0)!=(0);
  if (!($63)) {
   $87 = $1;
   $88 = ((($87)) + 8344|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)>(0);
   if ($90) {
    $91 = $1;
    $92 = ((($91)) + 8344|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + -1)|0;
    HEAP32[$92>>2] = $94;
   }
   $95 = HEAP32[19046]|0;
   $96 = $95 & 240;
   $97 = ($96|0)==(16);
   if ($97) {
    $98 = $word_flags;
    $99 = $98 & 512;
    $100 = ($99|0)!=(0);
    if (!($100)) {
     $101 = $4;
     $102 = (($101) + 4)|0;
     $4 = $102;
    }
   }
   $103 = $word_flags;
   $104 = $103 & 2;
   $105 = ($104|0)!=(0);
   if ($105) {
    $106 = HEAP32[19044]|0;
    $107 = ($106|0)>(2);
    $108 = HEAP32[19380]|0;
    $109 = ($108|0)<(244);
    $or$cond = $107 & $109;
    if ($or$cond) {
     $110 = HEAP32[19386]|0;
     $111 = ($110|0)!=(0);
     if ($111) {
      $112 = HEAP32[19380]|0;
      $113 = (($112) - 1)|0;
      $114 = (76504 + ($113<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $115 & -129;
      HEAP32[$114>>2] = $116;
     }
     $117 = HEAP32[19044]|0;
     $pitch_raised = $117;
     $118 = ($117|0)==(3);
     $$2 = $118 ? 20 : $117;
     $pitch_raised = $$2;
     $119 = $pitch_raised;
     $120 = $119 << 8;
     $121 = (193 + ($120))|0;
     $122 = HEAP32[19380]|0;
     $123 = (($122) + 1)|0;
     HEAP32[19380] = $123;
     $124 = (76504 + ($122<<2)|0);
     HEAP32[$124>>2] = $121;
     HEAP32[19386] = 2;
    }
   }
   $p = 120044;
   $125 = $word_flags;
   $126 = $125 & 8;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $2;
    $129 = (_memcmp($128,23207,3)|0);
    $130 = ($129|0)==(0);
    $131 = $2;
    if ($130) {
     $132 = ((($131)) + 3|0);
     $2 = $132;
     $ix = 0;
     while(1) {
      $133 = $2;
      $134 = ((($133)) + 1|0);
      $2 = $134;
      $135 = HEAP8[$133>>0]|0;
      $136 = $135 << 24 >> 24;
      $c1 = $136;
      $137 = $c1;
      $138 = ($137|0)==(32);
      $139 = $c1;
      $140 = ($139|0)==(0);
      $or$cond4 = $138 | $140;
      if ($or$cond4) {
       break;
      }
      $141 = $c1;
      $142 = (_tolower($141)|0);
      $143 = $142&255;
      $144 = $ix;
      $145 = (($144) + 1)|0;
      $ix = $145;
      $146 = (($lang_name) + ($144)|0);
      HEAP8[$146>>0] = $143;
     }
     $147 = $ix;
     $148 = (($lang_name) + ($147)|0);
     HEAP8[$148>>0] = 0;
     $149 = (__Z18LookupPhonemeTablePKc($lang_name)|0);
     $ix = $149;
     $150 = ($149|0)>(0);
     if ($150) {
      $151 = $ix;
      __Z18SelectPhonemeTablei($151);
      HEAP8[120044] = 21;
      $152 = $ix;
      $153 = $152&255;
      HEAP8[(120045)>>0] = $153;
      HEAP8[(120046)>>0] = 0;
     }
    } else {
     (__Z14EncodePhonemesPKcPcPi($131,120044,$bad_phoneme)|0);
    }
    $flags = -2147483648;
   } else {
    $ix = 0;
    while(1) {
     $154 = $ix;
     $155 = $2;
     $156 = (($155) + ($154)|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $ix;
     $159 = (($word_copy) + ($158)|0);
     HEAP8[$159>>0] = $157;
     $160 = $157 << 24 >> 24;
     $c2 = $160;
     $161 = ($160|0)!=(32);
     $162 = $c2;
     $163 = ($162|0)!=(0);
     $or$cond6 = $161 & $163;
     if ($or$cond6) {
      $164 = $ix;
      $165 = ($164|0)<(160);
      $745 = $165;
     } else {
      $745 = 0;
     }
     $166 = $ix;
     if (!($745)) {
      break;
     }
     $167 = (($166) + 1)|0;
     $ix = $167;
    }
    $word_copy_len = $166;
    $168 = ((($word_replaced)) + 2|0);
    HEAP8[$168>>0] = 0;
    $169 = HEAP32[19035]|0;
    $170 = $2;
    $171 = $5;
    $172 = $3;
    $173 = ((($word_replaced)) + 2|0);
    $174 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($169,$170,$171,$172,$173)|0);
    $flags = $174;
    $175 = $flags;
    $176 = $175 & 4096;
    $177 = ($176|0)!=(0);
    if ($177) {
     $178 = $2;
     $179 = $word_copy_len;
     _memcpy(($178|0),($word_copy|0),($179|0))|0;
     $180 = $flags;
     $0 = $180;
     $744 = $0;
     STACKTOP = sp;return ($744|0);
    }
    $181 = $flags;
    $182 = $181 & 8388608;
    $183 = ($182|0)!=(0);
    do {
     if ($183) {
      $184 = $3;
      $185 = ((($184)) + 12|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 & 8;
      $188 = ($187|0)!=(0);
      if (!($188)) {
       $ok = 1;
       HEAP32[$flags2>>2] = 0;
       $189 = $1;
       $190 = ((($189)) + 24|0);
       $191 = ((($190)) + 44|0);
       $192 = HEAP32[$191>>2]|0;
       $sylimit = $192;
       $193 = $2;
       $p2 = $193;
       while(1) {
        $194 = $p2;
        $195 = HEAP8[$194>>0]|0;
        $196 = $195 << 24 >> 24;
        $197 = ($196|0)!=(32);
        $198 = $p2;
        $199 = ((($198)) + 1|0);
        if (!($197)) {
         break;
        }
        $p2 = $199;
       }
       (__Z7utf8_inPiPKc($c_word2,$199)|0);
       $200 = HEAP32[$c_word2>>2]|0;
       $201 = (__Z9iswalpha2i($200)|0);
       $202 = ($201|0)!=(0);
       if (!($202)) {
        $ok = 0;
       }
       $203 = $ok;
       $204 = ($203|0)!=(0);
       do {
        if ($204) {
         (_strcpy($ph_buf,120044)|0);
         $205 = HEAP32[19035]|0;
         $206 = $p2;
         $207 = ((($206)) + 1|0);
         $208 = $3;
         $209 = ((($208)) + 12|0);
         $210 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($205,$207,0,$209,0)|0);
         HEAP32[$flags2>>2] = $210;
         $211 = HEAP32[$flags2>>2]|0;
         $212 = $211 & 67108864;
         $213 = ($212|0)!=(0);
         if ($213) {
          label = 51;
         } else {
          $214 = HEAP8[120044]|0;
          $215 = $214 << 24 >> 24;
          $216 = ($215|0)==(21);
          if ($216) {
           label = 51;
          }
         }
         if ((label|0) == 51) {
          $ok = 0;
         }
         $217 = $sylimit;
         $218 = $217 & 256;
         $219 = ($218|0)!=(0);
         do {
          if ($219) {
           $220 = HEAP32[$flags2>>2]|0;
           $221 = $220 & 32768;
           $222 = ($221|0)==(0);
           if (!($222)) {
            break;
           }
           $ok = 0;
          }
         } while(0);
         $223 = $sylimit;
         $224 = $223 & 512;
         $225 = ($224|0)!=(0);
         do {
          if ($225) {
           $226 = $3;
           $227 = ((($226)) + 12|0);
           $228 = HEAP32[$227>>2]|0;
           $229 = $228 & 16;
           $230 = ($229|0)!=(0);
           if (!($230)) {
            break;
           }
           $ok = 0;
          }
         } while(0);
         $231 = $ok;
         $232 = ($231|0)==(0);
         if (!($232)) {
          break;
         }
         (_strcpy(120044,$ph_buf)|0);
        }
       } while(0);
       $233 = $ok;
       $234 = ($233|0)!=(0);
       if ($234) {
        $235 = $p2;
        HEAP8[$235>>0] = 45;
        $236 = $3;
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & -2;
        HEAP32[$236>>2] = $238;
        $239 = HEAP32[19035]|0;
        $240 = $2;
        $241 = $5;
        $242 = $3;
        $243 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($239,$240,$241,$242,0)|0);
        $flags = $243;
        $244 = $sylimit;
        $245 = ($244|0)>(0);
        if ($245) {
         $246 = $p;
         $247 = (__ZL14CountSyllablesPh($246)|0);
         $248 = $sylimit;
         $249 = $248 & 31;
         $250 = ($247|0)>($249|0);
         if ($250) {
          $251 = $p2;
          HEAP8[$251>>0] = 32;
          $252 = HEAP32[19035]|0;
          $253 = $2;
          $254 = $5;
          $255 = $3;
          $256 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($252,$253,$254,$255,0)|0);
          $flags = $256;
          break;
         }
        }
        $257 = $flags;
        $258 = ($257|0)==(0);
        if ($258) {
         $259 = HEAP32[$flags2>>2]|0;
         $flags = $259;
        }
        $260 = $flags;
        $261 = $260 | 128;
        $flags = $261;
        HEAP32[10344] = 1;
       }
      }
     }
    } while(0);
    $262 = $p;
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = ($264|0)==(21);
    if ($265) {
     (_strcpy($old_dictionary_name,119220)|0);
     $switch_attempt = 0;
     while(1) {
      $266 = $switch_attempt;
      $267 = ($266|0)<(2);
      if (!($267)) {
       break;
      }
      $268 = $2;
      $269 = $word_copy_len;
      _memcpy(($268|0),($word_copy|0),($269|0))|0;
      $270 = $p;
      $271 = ((($270)) + 1|0);
      $new_language = $271;
      $272 = $new_language;
      $273 = HEAP8[$272>>0]|0;
      $274 = $273 << 24 >> 24;
      $275 = ($274|0)==(0);
      $$7 = $275 ? 25406 : $271;
      $new_language = $$7;
      $276 = $new_language;
      $277 = (__Z14SetTranslator2PKc($276)|0);
      $switch_phonemes = $277;
      $278 = $switch_phonemes;
      $279 = ($278|0)>=(0);
      do {
       if ($279) {
        $280 = $3;
        $281 = HEAP32[$280>>2]|0;
        $282 = $281 | 4194304;
        HEAP32[$280>>2] = $282;
        $283 = ((($word_replaced)) + 2|0);
        $284 = HEAP8[$283>>0]|0;
        $285 = $284 << 24 >> 24;
        $286 = ($285|0)!=(0);
        if ($286) {
         HEAP8[$word_replaced>>0] = 0;
         $287 = ((($word_replaced)) + 1|0);
         HEAP8[$287>>0] = 32;
         $288 = HEAP32[19036]|0;
         $289 = ((($word_replaced)) + 1|0);
         $290 = $5;
         $291 = $3;
         $292 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($288,$289,$290,$291,0)|0);
         $flags = $292;
         break;
        } else {
         $293 = HEAP32[19036]|0;
         $294 = $2;
         $295 = $5;
         $296 = $3;
         $297 = ((($word_replaced)) + 2|0);
         $298 = (__Z13TranslateWordP10TranslatorPciP8WORD_TABS1_($293,$294,$295,$296,$297)|0);
         $flags = $298;
         break;
        }
       }
      } while(0);
      $299 = $p;
      $300 = HEAP8[$299>>0]|0;
      $301 = $300&255;
      $302 = ($301|0)!=(21);
      if ($302) {
       break;
      }
      $303 = $switch_attempt;
      $304 = (($303) + 1)|0;
      $switch_attempt = $304;
     }
     $305 = $p;
     $306 = HEAP8[$305>>0]|0;
     $307 = $306&255;
     $308 = ($307|0)==(21);
     if ($308) {
      $0 = 4096;
      $744 = $0;
      STACKTOP = sp;return ($744|0);
     }
     $309 = $switch_phonemes;
     $310 = ($309|0)<(0);
     if ($310) {
      $311 = $p;
      HEAP8[$311>>0] = 13;
      $312 = $p;
      $313 = ((($312)) + 1|0);
      HEAP8[$313>>0] = 13;
      $314 = $p;
      $315 = ((($314)) + 2|0);
      HEAP8[$315>>0] = 0;
     }
     $316 = $1;
     $317 = $switch_phonemes;
     $318 = $p;
     $319 = (__Z24ChangeEquivalentPhonemesP10TranslatoriPc($316,$317,$318)|0);
     $320 = ($319|0)!=(0);
     if ($320) {
      $switch_phonemes = -1;
     }
     $321 = $switch_phonemes;
     $322 = ($321|0)==(-1);
     if ($322) {
      (_strcpy(119220,$old_dictionary_name)|0);
      $323 = HEAP32[1124]|0;
      $324 = ((($323)) + 60|0);
      $325 = HEAP32[$324>>2]|0;
      __Z18SelectPhonemeTablei($325);
      $326 = HEAP32[1124]|0;
      $327 = ((($326)) + 60|0);
      $328 = HEAP32[$327>>2]|0;
      $switch_phonemes = $328;
     }
    }
    $329 = $word_flags;
    $330 = $329 & 128;
    $331 = ($330|0)!=(0);
    if (!($331)) {
     $332 = $flags;
     $333 = $332 & 268435456;
     $334 = ($333|0)!=(0);
     $335 = $4;
     $336 = ($335|0)<(1);
     $or$cond13 = $334 & $336;
     if ($or$cond13) {
      $4 = 1;
     }
     $337 = $flags;
     $338 = $337 & 256;
     $339 = ($338|0)!=(0);
     if ($339) {
      $340 = $word_flags;
      $341 = $340 & 528;
      $342 = ($341|0)!=(0);
      if (!($342)) {
       $343 = $3;
       $344 = ((($343)) + -12|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = $345 & 512;
       $347 = ($346|0)!=(0);
       if (!($347)) {
        $348 = $1;
        $349 = ((($348)) + 8344|0);
        $350 = HEAP32[$349>>2]|0;
        $351 = ($350|0)==(0);
        if ($351) {
         $352 = $4;
         $353 = ($352|0)<(4);
         if ($353) {
          $4 = 4;
         }
         $354 = $1;
         $355 = ((($354)) + 8344|0);
         HEAP32[$355>>2] = 3;
        }
       }
      }
     }
    }
    $356 = HEAP32[19379]|0;
    $357 = ($356|0)>=(3);
    $358 = $4;
    $359 = ($358|0)<(1);
    $or$cond9 = $357 & $359;
    if ($or$cond9) {
     $4 = 1;
    }
   }
   $stress = 0;
   $next_stress = 1;
   $srcix = 0;
   $max_stress = -1;
   $found_dict_flag = 0;
   $360 = $flags;
   $361 = $360 & -2147483648;
   $362 = ($361|0)!=(0);
   if ($362) {
    $363 = $flags;
    $364 = $363 & 536870912;
    $365 = ($364|0)!=(0);
    if (!($365)) {
     $found_dict_flag = 16;
    }
   }
   while(1) {
    $366 = $4;
    $367 = ($366|0)>(0);
    $368 = HEAP32[19063]|0;
    $369 = ($368|0)<(996);
    $370 = $367 ? $369 : 0;
    if (!($370)) {
     break;
    }
    $371 = $4;
    $372 = ($371|0)>(1);
    $373 = HEAP32[19063]|0;
    $374 = (($373) + 1)|0;
    HEAP32[19063] = $374;
    $375 = (99916 + ($373<<3)|0);
    if ($372) {
     __ZL9SetPlist2P13PHONEME_LIST2h($375,9);
     $376 = $4;
     $377 = (($376) - 2)|0;
     $4 = $377;
    } else {
     __ZL9SetPlist2P13PHONEME_LIST2h($375,11);
     $378 = $4;
     $379 = (($378) + -1)|0;
     $4 = $379;
    }
    $380 = $1;
    $381 = ((($380)) + 8348|0);
    HEAP32[$381>>2] = 0;
    $382 = $1;
    $383 = ((($382)) + 8352|0);
    HEAP32[$383>>2] = 0;
    $384 = $1;
    $385 = ((($384)) + 8352|0);
    $386 = ((($385)) + 4|0);
    HEAP32[$386>>2] = 0;
   }
   $387 = HEAP32[19063]|0;
   $388 = (99916 + ($387<<3)|0);
   $plist2 = $388;
   $389 = HEAP32[19044]|0;
   $390 = ($389|0)==(1);
   if ($390) {
    $391 = $word_flags;
    $392 = $391 & 2;
    $393 = ($392|0)!=(0);
    if ($393) {
     $394 = HEAP32[19063]|0;
     $395 = (($394) + 1)|0;
     HEAP32[19063] = $395;
     $396 = (99916 + ($394<<3)|0);
     __ZL9SetPlist2P13PHONEME_LIST2h($396,10);
     $397 = HEAP32[19063]|0;
     $398 = (($397) + 1)|0;
     HEAP32[19063] = $398;
     $399 = (99916 + ($397<<3)|0);
     __ZL9SetPlist2P13PHONEME_LIST2h($399,18);
     $400 = $word_flags;
     $401 = $400 & 1;
     $402 = ($401|0)!=(0);
     if ($402) {
      $403 = $2;
      $404 = ((($403)) + 1|0);
      $405 = HEAP8[$404>>0]|0;
      $406 = $405 << 24 >> 24;
      $407 = (__Z7IsAlphaj($406)|0);
      $408 = ($407|0)!=(0);
      if ($408) {
       $409 = HEAP32[19063]|0;
       $410 = (($409) + 1)|0;
       HEAP32[19063] = $410;
       $411 = (99916 + ($409<<3)|0);
       __ZL9SetPlist2P13PHONEME_LIST2h($411,10);
       $412 = HEAP32[19063]|0;
       $413 = (($412) + 1)|0;
       HEAP32[19063] = $413;
       $414 = (99916 + ($412<<3)|0);
       __ZL9SetPlist2P13PHONEME_LIST2h($414,18);
      }
     }
    }
   }
   $415 = $switch_phonemes;
   $416 = ($415|0)>=(0);
   do {
    if ($416) {
     $417 = $p;
     $418 = HEAP8[$417>>0]|0;
     $419 = $418&255;
     $420 = ($419|0)==(9);
     if ($420) {
      $421 = $p;
      $422 = ((($421)) + 1|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = $423&255;
      $425 = ($424|0)==(21);
      if ($425) {
       $426 = HEAP32[19063]|0;
       $427 = (($426) - 1)|0;
       $428 = (99916 + ($427<<3)|0);
       $429 = ((($428)) + 2|0);
       $430 = HEAP8[$429>>0]|0;
       $431 = $430&255;
       $432 = ($431|0)==(21);
       if (!($432)) {
        break;
       }
       $433 = HEAP32[19063]|0;
       $434 = (($433) + -1)|0;
       HEAP32[19063] = $434;
       break;
      }
     }
     $435 = HEAP32[19063]|0;
     $436 = (($435) - 1)|0;
     $437 = (99916 + ($436<<3)|0);
     $438 = ((($437)) + 2|0);
     $439 = HEAP8[$438>>0]|0;
     $440 = $439&255;
     $441 = ($440|0)==(21);
     $442 = HEAP32[19063]|0;
     if ($441) {
      $443 = (($442) + -1)|0;
      HEAP32[19063] = $443;
     } else {
      $444 = (99916 + ($442<<3)|0);
      __ZL9SetPlist2P13PHONEME_LIST2h($444,21);
     }
     $445 = $switch_phonemes;
     $446 = $445&255;
     $447 = HEAP32[19063]|0;
     $448 = (($447) + 1)|0;
     HEAP32[19063] = $448;
     $449 = (99916 + ($447<<3)|0);
     $450 = ((($449)) + 7|0);
     HEAP8[$450>>0] = $446;
    }
   } while(0);
   $451 = $word_flags;
   $452 = $451 & 128;
   $453 = ($452|0)!=(0);
   if ($453) {
    $454 = $p;
    $455 = HEAP8[$454>>0]|0;
    $456 = $455&255;
    $457 = (44552 + ($456<<2)|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = ((($458)) + 11|0);
    $460 = HEAP8[$459>>0]|0;
    $461 = $460&255;
    $462 = ($461|0)==(0);
    if ($462) {
     $463 = $p;
     $464 = ((($463)) + 1|0);
     $p = $464;
    }
   }
   $465 = $p;
   $466 = HEAP8[$465>>0]|0;
   $467 = $466&255;
   $468 = ($467|0)==(0);
   $469 = HEAP32[19386]|0;
   $470 = ($469|0)!=(0);
   $or$cond11 = $468 & $470;
   if ($or$cond11) {
    $471 = $p;
    HEAP8[$471>>0] = 23;
    $472 = $p;
    $473 = ((($472)) + 1|0);
    HEAP8[$473>>0] = 0;
   }
   while(1) {
    $474 = $p;
    $475 = ((($474)) + 1|0);
    $p = $475;
    $476 = HEAP8[$474>>0]|0;
    $ph_code = $476;
    $477 = $476&255;
    $478 = ($477|0)!=(0);
    $479 = HEAP32[19063]|0;
    $480 = ($479|0)<(996);
    $481 = $478 ? $480 : 0;
    if (!($481)) {
     break;
    }
    $482 = $ph_code;
    $483 = $482&255;
    $484 = ($483|0)==(255);
    if ($484) {
     continue;
    }
    $485 = $ph_code;
    $486 = $485&255;
    $487 = (44552 + ($486<<2)|0);
    $488 = HEAP32[$487>>2]|0;
    $ph = $488;
    $489 = $ph_code;
    $490 = $489&255;
    $491 = ($490|0)==(21);
    if ($491) {
     $492 = $ph_code;
     $493 = HEAP32[19063]|0;
     $494 = (99916 + ($493<<3)|0);
     $495 = ((($494)) + 2|0);
     HEAP8[$495>>0] = $492;
     $496 = HEAP32[19063]|0;
     $497 = (99916 + ($496<<3)|0);
     $498 = ((($497)) + 4|0);
     HEAP16[$498>>1] = 0;
     $499 = HEAP32[19063]|0;
     $500 = (99916 + ($499<<3)|0);
     HEAP16[$500>>1] = 0;
     $501 = $p;
     $502 = HEAP8[$501>>0]|0;
     $503 = HEAP32[19063]|0;
     $504 = (($503) + 1)|0;
     HEAP32[19063] = $504;
     $505 = (99916 + ($503<<3)|0);
     $506 = ((($505)) + 7|0);
     HEAP8[$506>>0] = $502;
     $507 = $p;
     $508 = HEAP8[$507>>0]|0;
     $509 = $508&255;
     __Z18SelectPhonemeTablei($509);
     $510 = $p;
     $511 = ((($510)) + 1|0);
     $p = $511;
     continue;
    }
    $512 = $ph;
    $513 = ((($512)) + 11|0);
    $514 = HEAP8[$513>>0]|0;
    $515 = $514&255;
    $516 = ($515|0)==(1);
    if ($516) {
     $517 = $ph;
     $518 = ((($517)) + 8|0);
     $519 = HEAP16[$518>>1]|0;
     $520 = $519&65535;
     $521 = ($520|0)==(0);
     if ($521) {
      $522 = $ph;
      $523 = ((($522)) + 14|0);
      $524 = HEAP8[$523>>0]|0;
      $525 = $524&255;
      $next_stress = $525;
      continue;
     }
     $526 = $prev_vowel;
     $527 = ($526|0)>=(0);
     $528 = $ph_code;
     if ($527) {
      $529 = $prev_vowel;
      $530 = (99916 + ($529<<3)|0);
      $531 = ((($530)) + 7|0);
      HEAP8[$531>>0] = $528;
      continue;
     } else {
      $532 = $528&255;
      $next_tone = $532;
      continue;
     }
    }
    $533 = $ph_code;
    $534 = $533&255;
    $535 = ($534|0)==(20);
    if ($535) {
     $536 = HEAP32[19063]|0;
     $537 = (($536) - 1)|0;
     $prev_vowel = $537;
     $538 = $prev_vowel;
     $539 = (99916 + ($538<<3)|0);
     $540 = HEAP16[$539>>1]|0;
     $541 = $540&65535;
     $542 = $541 | 4;
     $543 = $542&65535;
     HEAP16[$539>>1] = $543;
     $544 = $next_stress;
     $545 = $544&255;
     $546 = $prev_vowel;
     $547 = (99916 + ($546<<3)|0);
     $548 = ((($547)) + 3|0);
     HEAP8[$548>>0] = $545;
     continue;
    }
    $549 = $ph_code;
    $550 = $549&255;
    $551 = ($550|0)==(12);
    if ($551) {
     $552 = HEAP32[19063]|0;
     $553 = (($552) - 1)|0;
     $554 = (99916 + ($553<<3)|0);
     $555 = HEAP16[$554>>1]|0;
     $556 = $555&65535;
     $557 = $556 | 8;
     $558 = $557&65535;
     HEAP16[$554>>1] = $558;
     continue;
    }
    $559 = $ph_code;
    $560 = $559&255;
    $561 = ($560|0)==(15);
    if ($561) {
     $562 = $source_ix;
     $563 = (($562) + 1)|0;
     $srcix = $563;
     continue;
    }
    $564 = $ph_code;
    $565 = $564&255;
    $566 = ($565|0)==(22);
    if ($566) {
     $567 = $1;
     $568 = ((($567)) + 24|0);
     $569 = ((($568)) + 56|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = ($570|0)!=(0);
     if (!($571)) {
      continue;
     }
     $572 = $flags;
     $573 = $572 | 16384;
     $flags = $573;
     continue;
    }
    $574 = $ph_code;
    $575 = HEAP32[19063]|0;
    $576 = (99916 + ($575<<3)|0);
    $577 = ((($576)) + 2|0);
    HEAP8[$577>>0] = $574;
    $578 = HEAP32[19063]|0;
    $579 = (99916 + ($578<<3)|0);
    $580 = ((($579)) + 7|0);
    HEAP8[$580>>0] = 0;
    $581 = HEAP32[19386]|0;
    $582 = $found_dict_flag;
    $583 = $581 | $582;
    $584 = $583&65535;
    $585 = HEAP32[19063]|0;
    $586 = (99916 + ($585<<3)|0);
    HEAP16[$586>>1] = $584;
    HEAP32[19386] = 0;
    $587 = $srcix;
    $588 = $587&65535;
    $589 = HEAP32[19063]|0;
    $590 = (99916 + ($589<<3)|0);
    $591 = ((($590)) + 4|0);
    HEAP16[$591>>1] = $588;
    $srcix = 0;
    $592 = $ph;
    $593 = ((($592)) + 11|0);
    $594 = HEAP8[$593>>0]|0;
    $595 = $594&255;
    $596 = ($595|0)==(2);
    do {
     if ($596) {
      $597 = $next_stress;
      $stress = $597;
      $next_stress = 1;
      $598 = $stress;
      $599 = ($598|0)>=(4);
      if ($599) {
       HEAP32[19377] = 1;
      }
      $600 = $prev_vowel;
      $601 = ($600|0)>=(0);
      do {
       if ($601) {
        $602 = HEAP32[19063]|0;
        $603 = (($602) - 1)|0;
        $604 = $prev_vowel;
        $605 = ($603|0)!=($604|0);
        if (!($605)) {
         break;
        }
        $606 = $stress;
        $607 = $606&255;
        $608 = HEAP32[19063]|0;
        $609 = (($608) - 1)|0;
        $610 = (99916 + ($609<<3)|0);
        $611 = ((($610)) + 3|0);
        HEAP8[$611>>0] = $607;
       }
      } while(0);
      $612 = HEAP32[19063]|0;
      $613 = (99916 + ($612<<3)|0);
      $614 = HEAP16[$613>>1]|0;
      $615 = $614&65535;
      $616 = $615 | 4;
      $617 = $616&65535;
      HEAP16[$613>>1] = $617;
      $618 = HEAP32[19063]|0;
      $prev_vowel = $618;
      $619 = $stress;
      $620 = $max_stress;
      $621 = ($619|0)>($620|0);
      if ($621) {
       $622 = $stress;
       $max_stress = $622;
       $623 = HEAP32[19063]|0;
       $max_stress_ix = $623;
      }
      $624 = $next_tone;
      $625 = ($624|0)!=(0);
      if (!($625)) {
       break;
      }
      $626 = $next_tone;
      $627 = $626&255;
      $628 = HEAP32[19063]|0;
      $629 = (99916 + ($628<<3)|0);
      $630 = ((($629)) + 7|0);
      HEAP8[$630>>0] = $627;
      $next_tone = 0;
     } else {
      $631 = $first_phoneme;
      $632 = ($631|0)!=(0);
      if (!($632)) {
       break;
      }
      $633 = $1;
      $634 = ((($633)) + 24|0);
      $635 = ((($634)) + 56|0);
      $636 = HEAP32[$635>>2]|0;
      $637 = ($636|0)!=(0);
      if (!($637)) {
       break;
      }
      $638 = $1;
      $639 = ((($638)) + 8352|0);
      $640 = HEAP32[$639>>2]|0;
      $641 = $640 & 16384;
      $642 = ($641|0)!=(0);
      if ($642) {
       $643 = $1;
       $644 = ((($643)) + 24|0);
       $645 = ((($644)) + 56|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = $646 & 1;
       $648 = ($647|0)!=(0);
       if (!($648)) {
        label = 156;
       }
      } else {
       label = 156;
      }
      if ((label|0) == 156) {
       label = 0;
       $649 = $1;
       $650 = ((($649)) + 8348|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = ($651|0)!=(0);
       if (!($652)) {
        break;
       }
       $653 = $1;
       $654 = ((($653)) + 24|0);
       $655 = ((($654)) + 56|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = $656 & 2;
       $658 = ($657|0)!=(0);
       if (!($658)) {
        break;
       }
      }
      $659 = HEAP32[19063]|0;
      $660 = (99916 + ($659<<3)|0);
      $661 = HEAP16[$660>>1]|0;
      $662 = $661&65535;
      $663 = $662 | 8;
      $664 = $663&65535;
      HEAP16[$660>>1] = $664;
     }
    } while(0);
    $665 = $stress;
    $666 = $665&255;
    $667 = HEAP32[19063]|0;
    $668 = (99916 + ($667<<3)|0);
    $669 = ((($668)) + 3|0);
    HEAP8[$669>>0] = $666;
    $670 = HEAP32[19063]|0;
    $671 = (($670) + 1)|0;
    HEAP32[19063] = $671;
    $first_phoneme = 0;
   }
   $672 = $word_flags;
   $673 = $672 & 131072;
   $674 = ($673|0)!=(0);
   if ($674) {
    $675 = HEAP32[19063]|0;
    $676 = (($675) + 1)|0;
    HEAP32[19063] = $676;
    $677 = (99916 + ($675<<3)|0);
    __ZL9SetPlist2P13PHONEME_LIST2h($677,27);
   }
   $678 = $word_flags;
   $679 = $678 & 128;
   $680 = ($679|0)==(0);
   if ($680) {
    $681 = $source_ix;
    $682 = $681&65535;
    $683 = $plist2;
    $684 = ((($683)) + 4|0);
    HEAP16[$684>>1] = $682;
   }
   $685 = $1;
   $686 = ((($685)) + 8348|0);
   HEAP32[$686>>2] = 0;
   $687 = $stress;
   $688 = ($687|0)>=(4);
   if ($688) {
    $689 = HEAP32[19063]|0;
    $690 = (($689) - 1)|0;
    $691 = (99916 + ($690<<3)|0);
    $692 = ((($691)) + 2|0);
    $693 = HEAP8[$692>>0]|0;
    $694 = $693&255;
    $695 = (44552 + ($694<<2)|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = ((($696)) + 11|0);
    $698 = HEAP8[$697>>0]|0;
    $699 = $698&255;
    $700 = ($699|0)==(2);
    if ($700) {
     $701 = $1;
     $702 = ((($701)) + 8348|0);
     HEAP32[$702>>2] = 1;
    }
   }
   $703 = $switch_phonemes;
   $704 = ($703|0)>=(0);
   if ($704) {
    (_strcpy(119220,$old_dictionary_name)|0);
    $705 = HEAP32[1124]|0;
    $706 = ((($705)) + 60|0);
    $707 = HEAP32[$706>>2]|0;
    __Z18SelectPhonemeTablei($707);
    $708 = HEAP32[19063]|0;
    $709 = (99916 + ($708<<3)|0);
    __ZL9SetPlist2P13PHONEME_LIST2h($709,21);
    $710 = HEAP32[1124]|0;
    $711 = ((($710)) + 60|0);
    $712 = HEAP32[$711>>2]|0;
    $713 = $712&255;
    $714 = HEAP32[19063]|0;
    $715 = (($714) + 1)|0;
    HEAP32[19063] = $715;
    $716 = (99916 + ($714<<3)|0);
    $717 = ((($716)) + 7|0);
    HEAP8[$717>>0] = $713;
   }
   $718 = $pitch_raised;
   $719 = ($718|0)>(0);
   if ($719) {
    $720 = $pitch_raised;
    $721 = $720 << 8;
    $722 = (225 + ($721))|0;
    $723 = HEAP32[19380]|0;
    $724 = (($723) + 1)|0;
    HEAP32[19380] = $724;
    $725 = (76504 + ($723<<2)|0);
    HEAP32[$725>>2] = $722;
    $726 = HEAP32[19063]|0;
    $727 = (99916 + ($726<<3)|0);
    __ZL9SetPlist2P13PHONEME_LIST2h($727,10);
    $728 = HEAP32[19063]|0;
    $729 = (($728) + 1)|0;
    HEAP32[19063] = $729;
    $730 = (99916 + ($728<<3)|0);
    HEAP16[$730>>1] = 2;
   }
   $731 = $flags;
   $732 = $731 & 1024;
   $733 = ($732|0)!=(0);
   if ($733) {
    $734 = $max_stress_ix;
    $735 = (99916 + ($734<<3)|0);
    $736 = HEAP16[$735>>1]|0;
    $737 = $736&65535;
    $738 = $737 | 64;
    $739 = $738&65535;
    HEAP16[$735>>1] = $739;
   }
   $740 = $flags;
   $741 = $1;
   $742 = ((($741)) + 8352|0);
   HEAP32[$742>>2] = $740;
   $743 = $flags;
   $0 = $743;
   $744 = $0;
   STACKTOP = sp;return ($744|0);
  }
 }
 $64 = HEAP32[19386]|0;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = HEAP32[19063]|0;
  $67 = (99916 + ($66<<3)|0);
  $68 = ((($67)) + 2|0);
  HEAP8[$68>>0] = 15;
  $69 = HEAP32[19063]|0;
  $70 = (99916 + ($69<<3)|0);
  $71 = ((($70)) + 3|0);
  HEAP8[$71>>0] = 0;
  $72 = HEAP32[19063]|0;
  $73 = (99916 + ($72<<3)|0);
  $74 = ((($73)) + 6|0);
  HEAP8[$74>>0] = 0;
  $75 = HEAP32[19063]|0;
  $76 = (99916 + ($75<<3)|0);
  $77 = ((($76)) + 7|0);
  HEAP8[$77>>0] = 0;
  $78 = HEAP32[19386]|0;
  $79 = $78&65535;
  $80 = HEAP32[19063]|0;
  $81 = (99916 + ($80<<3)|0);
  HEAP16[$81>>1] = $79;
  $82 = HEAP32[19063]|0;
  $83 = (99916 + ($82<<3)|0);
  $84 = ((($83)) + 4|0);
  HEAP16[$84>>1] = 0;
  $85 = HEAP32[19063]|0;
  $86 = (($85) + 1)|0;
  HEAP32[19063] = $86;
  HEAP32[19386] = 0;
 }
 HEAP8[120044] = 0;
 $0 = 0;
 $744 = $0;
 STACKTOP = sp;return ($744|0);
}
function __ZL14CountSyllablesPh($phonemes) {
 $phonemes = $phonemes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $phon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $phonemes;
 $count = 0;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 1|0);
  $0 = $2;
  $3 = HEAP8[$1>>0]|0;
  $4 = $3&255;
  $phon = $4;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $phon;
  $7 = (44552 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 11|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(2);
  if (!($12)) {
   continue;
  }
  $13 = $count;
  $14 = (($13) + 1)|0;
  $count = $14;
 }
 $15 = $count;
 STACKTOP = sp;return ($15|0);
}
function __ZL9SetPlist2P13PHONEME_LIST2h($p,$phcode) {
 $p = $p|0;
 $phcode = $phcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $phcode;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 2|0);
 HEAP8[$4>>0] = $2;
 $5 = $0;
 $6 = ((($5)) + 3|0);
 HEAP8[$6>>0] = 0;
 $7 = $0;
 $8 = ((($7)) + 7|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[19386]|0;
 $10 = $9&65535;
 $11 = $0;
 HEAP16[$11>>1] = $10;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 HEAP16[$13>>1] = 0;
 HEAP32[19386] = 0;
 STACKTOP = sp;return;
}
function __Z8InitTexti($control) {
 $control = $control|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $control;
 HEAP32[19056] = 0;
 HEAP32[19057] = 0;
 HEAP32[19055] = 0;
 HEAP32[19051] = 0;
 HEAP8[119994] = 0;
 HEAP32[19052] = 0;
 HEAP32[19053] = 0;
 HEAP32[19054] = 0;
 HEAP32[19060] = 1;
 HEAP32[19387] = 0;
 HEAP32[19046] = 0;
 HEAP32[19382] = 0;
 HEAP32[19379] = 0;
 HEAP32[19384] = 0;
 HEAP32[19386] = 0;
 __Z9InitText2v();
 $1 = $0;
 $2 = $1 & 8192;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 __Z12InitNamedatav();
 STACKTOP = sp;return;
}
function _init_MBR($voice_path) {
 $voice_path = $voice_path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $wavhdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $wavhdr = sp + 28|0;
 $1 = $voice_path;
 $2 = $1;
 $3 = (__ZL12start_mbrolaPKc($2)|0);
 $error = $3;
 $4 = $error;
 $5 = ($4|0)!=(0);
 if ($5) {
  $0 = -1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $6 = (__ZL14send_to_mbrolaPKc(23388)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(2);
 if ($8) {
  __ZL11stop_mbrolav();
  $0 = -1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $9 = (__ZL19receive_from_mbrolaPvj($wavhdr,45)|0);
 $result = $9;
 $10 = $result;
 $11 = ($10|0)!=(44);
 if ($11) {
  $12 = $result;
  $13 = ($12|0)>=(0);
  if ($13) {
   __ZL3errPKcz(23674,$vararg_buffer);
  }
  __ZL11stop_mbrolav();
  $0 = -1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $14 = (_memcmp($wavhdr,23712,4)|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = ((($wavhdr)) + 8|0);
  $17 = (_memcmp($16,23717,8)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = ((($wavhdr)) + 24|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ((($wavhdr)) + 25|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $24 << 8;
   $26 = (($21) + ($25))|0;
   $27 = ((($wavhdr)) + 26|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 << 16;
   $31 = (($26) + ($30))|0;
   $32 = ((($wavhdr)) + 27|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 << 24;
   $36 = (($31) + ($35))|0;
   HEAP32[19396] = $36;
   $37 = HEAP32[19397]|0;
   $38 = $1;
   $39 = ($37|0)!=($38|0);
   if ($39) {
    $40 = HEAP32[19397]|0;
    _free($40);
    $41 = $1;
    $42 = (___strdup($41)|0);
    HEAP32[19397] = $42;
   }
   $0 = 0;
   $43 = $0;
   STACKTOP = sp;return ($43|0);
  }
 }
 __ZL3errPKcz(23726,$vararg_buffer1);
 __ZL11stop_mbrolav();
 $0 = -1;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function __ZL12start_mbrolaPKc($voice_path) {
 $voice_path = $voice_path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $charbuf = 0, $error = 0, $i = 0, $p_stderr = 0, $p_stdin = 0, $p_stdout = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $written = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer38 = sp + 120|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $p_stdin = sp + 152|0;
 $p_stdout = sp + 144|0;
 $p_stderr = sp + 136|0;
 $charbuf = sp + 172|0;
 $1 = $voice_path;
 $2 = HEAP32[19388]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  __ZL3errPKcz(23211,$vararg_buffer);
  $0 = -1;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 $4 = (__ZL12create_pipesPiS_S_($p_stdin,$p_stdout,$p_stderr)|0);
 $error = $4;
 $5 = $error;
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = -1;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 $7 = (_fork()|0);
 HEAP32[19389] = $7;
 $8 = HEAP32[19389]|0;
 $9 = ($8|0)==(-1);
 if ($9) {
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $error = $11;
  __ZL11close_pipesPiS_S_($p_stdin,$p_stdout,$p_stderr);
  $12 = $error;
  $13 = (_strerror($12)|0);
  HEAP32[$vararg_buffer1>>2] = $13;
  __ZL3errPKcz(23286,$vararg_buffer1);
  $0 = -1;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 $14 = HEAP32[19389]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[$p_stdin>>2]|0;
  $17 = (_dup2($16,0)|0);
  $18 = ($17|0)==(-1);
  if ($18) {
   $27 = (___errno_location()|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_strerror($28)|0);
   HEAP32[$vararg_buffer3>>2] = $29;
   (_snprintf(121324,160,23297,$vararg_buffer3)|0);
   $30 = ((($p_stderr)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_strlen(121324)|0);
   $33 = (_write($31,121324,$32)|0);
   $written = $33;
   __exit(1);
   // unreachable;
  }
  $19 = ((($p_stdout)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_dup2($20,1)|0);
  $22 = ($21|0)==(-1);
  if ($22) {
   $27 = (___errno_location()|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_strerror($28)|0);
   HEAP32[$vararg_buffer3>>2] = $29;
   (_snprintf(121324,160,23297,$vararg_buffer3)|0);
   $30 = ((($p_stderr)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_strlen(121324)|0);
   $33 = (_write($31,121324,$32)|0);
   $written = $33;
   __exit(1);
   // unreachable;
  }
  $23 = ((($p_stderr)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_dup2($24,2)|0);
  $26 = ($25|0)==(-1);
  if ($26) {
   $27 = (___errno_location()|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_strerror($28)|0);
   HEAP32[$vararg_buffer3>>2] = $29;
   (_snprintf(121324,160,23297,$vararg_buffer3)|0);
   $30 = ((($p_stderr)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_strlen(121324)|0);
   $33 = (_write($31,121324,$32)|0);
   $written = $33;
   __exit(1);
   // unreachable;
  }
  $34 = ((($p_stderr)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $i = $35;
  while(1) {
   $36 = $i;
   $37 = ($36|0)>(2);
   if (!($37)) {
    break;
   }
   $38 = $i;
   (_close($38)|0);
   $39 = $i;
   $40 = (($39) + -1)|0;
   $i = $40;
  }
  (_signal(1,((1)|0))|0);
  (_signal(2,((1)|0))|0);
  (_signal(3,((1)|0))|0);
  (_signal(15,((1)|0))|0);
  $41 = +HEAPF32[773];
  $42 = $41;
  HEAPF64[$vararg_buffer6>>3] = $42;
  (_snprintf($charbuf,20,23309,$vararg_buffer6)|0);
  $43 = $1;
  HEAP32[$vararg_buffer9>>2] = 23312;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 23315;
  $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
  HEAP32[$vararg_ptr13>>2] = $charbuf;
  $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
  HEAP32[$vararg_ptr14>>2] = $43;
  $vararg_ptr15 = ((($vararg_buffer9)) + 16|0);
  HEAP32[$vararg_ptr15>>2] = 25837;
  $vararg_ptr16 = ((($vararg_buffer9)) + 20|0);
  HEAP32[$vararg_ptr16>>2] = 23318;
  $vararg_ptr17 = ((($vararg_buffer9)) + 24|0);
  HEAP32[$vararg_ptr17>>2] = 0;
  (_execlp((25659|0),(25659|0),($vararg_buffer9|0))|0);
  $44 = (___errno_location()|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_strerror($45)|0);
  HEAP32[$vararg_buffer18>>2] = $46;
  (_snprintf(121324,160,23324,$vararg_buffer18)|0);
  $47 = (_strlen(121324)|0);
  $48 = (_write(2,121324,$47)|0);
  $written = $48;
  __exit(1);
  // unreachable;
 } else {
  $49 = HEAP32[19389]|0;
  HEAP32[$vararg_buffer21>>2] = $49;
  (_snprintf($charbuf,20,23336,$vararg_buffer21)|0);
  $50 = (_open($charbuf,0,$vararg_buffer24)|0);
  HEAP32[19390] = $50;
  $51 = HEAP32[19390]|0;
  $52 = ($51|0)==(-1);
  if ($52) {
   $53 = (___errno_location()|0);
   $54 = HEAP32[$53>>2]|0;
   $error = $54;
   __ZL11close_pipesPiS_S_($p_stdin,$p_stdout,$p_stderr);
   $55 = HEAP32[19389]|0;
   (_waitpid(($55|0),(0|0),0)|0);
   HEAP32[19389] = 0;
   $56 = $error;
   $57 = (_strerror($56)|0);
   HEAP32[$vararg_buffer26>>2] = $57;
   __ZL3errPKcz(23350,$vararg_buffer26);
   $0 = -1;
   $82 = $0;
   STACKTOP = sp;return ($82|0);
  }
  (_signal(13,((1)|0))|0);
  $58 = ((($p_stdin)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$vararg_buffer29>>2] = 2048;
  $60 = (_fcntl($59,4,$vararg_buffer29)|0);
  $61 = ($60|0)==(-1);
  if (!($61)) {
   $62 = HEAP32[$p_stdout>>2]|0;
   HEAP32[$vararg_buffer32>>2] = 2048;
   $63 = (_fcntl($62,4,$vararg_buffer32)|0);
   $64 = ($63|0)==(-1);
   if (!($64)) {
    $65 = HEAP32[$p_stderr>>2]|0;
    HEAP32[$vararg_buffer35>>2] = 2048;
    $66 = (_fcntl($65,4,$vararg_buffer35)|0);
    $67 = ($66|0)==(-1);
    if (!($67)) {
     $73 = ((($p_stdin)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     HEAP32[19391] = $74;
     $75 = HEAP32[$p_stdout>>2]|0;
     HEAP32[19392] = $75;
     $76 = HEAP32[$p_stderr>>2]|0;
     HEAP32[19393] = $76;
     $77 = HEAP32[$p_stdin>>2]|0;
     (_close($77)|0);
     $78 = ((($p_stdout)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     (_close($79)|0);
     $80 = ((($p_stderr)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     (_close($81)|0);
     HEAP32[19388] = 1;
     $0 = 0;
     $82 = $0;
     STACKTOP = sp;return ($82|0);
    }
   }
  }
  $68 = (___errno_location()|0);
  $69 = HEAP32[$68>>2]|0;
  $error = $69;
  __ZL11close_pipesPiS_S_($p_stdin,$p_stdout,$p_stderr);
  $70 = HEAP32[19389]|0;
  (_waitpid(($70|0),(0|0),0)|0);
  HEAP32[19389] = 0;
  $71 = $error;
  $72 = (_strerror($71)|0);
  HEAP32[$vararg_buffer38>>2] = $72;
  __ZL3errPKcz(23376,$vararg_buffer38);
  $0 = -1;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function __ZL3errPKcz($errmsg,$varargs) {
 $errmsg = $errmsg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $params = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $params = sp + 8|0;
 $0 = $errmsg;
 HEAP32[$params>>2] = $varargs;
 $1 = $0;
 (_vsnprintf(121324,160,$1,$params)|0);
 HEAP32[$vararg_buffer>>2] = 121324;
 __ZL3logPKcz(23256,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL3logPKcz($msg,$varargs) {
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $params = sp;
 $0 = $msg;
 HEAP32[$params>>2] = $varargs;
 $1 = HEAP32[1295]|0;
 $2 = $0;
 (_vfprintf($1,$2,$params)|0);
 $3 = HEAP32[1295]|0;
 (_fputc(10,$3)|0);
 STACKTOP = sp;return;
}
function __ZL12create_pipesPiS_S_($p1,$p2,$p3) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $p1;
 $2 = $p2;
 $3 = $p3;
 $4 = $1;
 $5 = (_pipe($4)|0);
 $6 = ($5|0)!=(-1);
 if ($6) {
  $7 = $2;
  $8 = (_pipe($7)|0);
  $9 = ($8|0)!=(-1);
  do {
   if ($9) {
    $10 = $3;
    $11 = (_pipe($10)|0);
    $12 = ($11|0)!=(-1);
    if (!($12)) {
     $13 = (___errno_location()|0);
     $14 = HEAP32[$13>>2]|0;
     $error = $14;
     $15 = $2;
     $16 = HEAP32[$15>>2]|0;
     (_close($16)|0);
     $17 = $2;
     $18 = ((($17)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     (_close($19)|0);
     break;
    }
    $0 = 0;
    $31 = $0;
    STACKTOP = sp;return ($31|0);
   } else {
    $20 = (___errno_location()|0);
    $21 = HEAP32[$20>>2]|0;
    $error = $21;
   }
  } while(0);
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  (_close($23)|0);
  $24 = $1;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  (_close($26)|0);
 } else {
  $27 = (___errno_location()|0);
  $28 = HEAP32[$27>>2]|0;
  $error = $28;
 }
 $29 = $error;
 $30 = (_strerror($29)|0);
 HEAP32[$vararg_buffer>>2] = $30;
 __ZL3errPKcz(23275,$vararg_buffer);
 $0 = -1;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function __ZL11close_pipesPiS_S_($p1,$p2,$p3) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $p2;
 $2 = $p3;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 (_close($4)|0);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 (_close($7)|0);
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 (_close($9)|0);
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 (_close($12)|0);
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 (_close($14)|0);
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 (_close($17)|0);
 STACKTOP = sp;return;
}
function __ZL14send_to_mbrolaPKc($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $error = 0, $len = 0, $result = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $cmd;
 $2 = HEAP32[19389]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = -1;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $4 = $1;
 $5 = (_strlen($4)|0);
 $len = $5;
 $6 = HEAP32[19391]|0;
 $7 = $1;
 $8 = $len;
 $9 = (_write($6,$7,$8)|0);
 $result = $9;
 $10 = $result;
 $11 = ($10|0)==(-1);
 do {
  if ($11) {
   $12 = (___errno_location()|0);
   $13 = HEAP32[$12>>2]|0;
   $error = $13;
   $14 = $error;
   $15 = ($14|0)==(32);
   if ($15) {
    $16 = (__ZL17mbrola_has_errorsv()|0);
    $17 = ($16|0)!=(0);
    if ($17) {
     $0 = -1;
     $55 = $0;
     STACKTOP = sp;return ($55|0);
    }
   }
   $18 = $error;
   $19 = ($18|0)==(11);
   if ($19) {
    $result = 0;
    break;
   }
   $20 = $error;
   $21 = (_strerror($20)|0);
   HEAP32[$vararg_buffer>>2] = $21;
   __ZL3errPKcz(23614,$vararg_buffer);
   $0 = -1;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 } while(0);
 $22 = $result;
 $23 = $len;
 $24 = ($22|0)!=($23|0);
 if ($24) {
  $25 = $len;
  $26 = (16 + ($25))|0;
  $27 = $result;
  $28 = (($26) - ($27))|0;
  $29 = (_malloc($28)|0);
  $data = $29;
  $30 = $data;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $data;
   HEAP32[$32>>2] = 0;
   $33 = $data;
   $34 = ((($33)) + 4|0);
   HEAP32[$34>>2] = 0;
   $35 = $len;
   $36 = $result;
   $37 = (($35) - ($36))|0;
   $38 = $data;
   $39 = ((($38)) + 8|0);
   HEAP32[$39>>2] = $37;
   $40 = $data;
   $41 = ((($40)) + 12|0);
   $42 = $1;
   $43 = $result;
   $44 = (($42) + ($43)|0);
   $45 = $len;
   $46 = $result;
   $47 = (($45) - ($46))|0;
   _memcpy(($41|0),($44|0),($47|0))|0;
   $48 = $len;
   $result = $48;
   $49 = HEAP32[19394]|0;
   $50 = ($49|0)!=(0|0);
   $51 = $data;
   if ($50) {
    $52 = HEAP32[19395]|0;
    HEAP32[$52>>2] = $51;
   } else {
    HEAP32[19394] = $51;
   }
   $53 = $data;
   HEAP32[19395] = $53;
  }
 }
 $54 = $result;
 $0 = $54;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function __ZL17mbrola_has_errorsv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf_ptr = 0, $buffer = 0, $lf = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 40|0;
 $buf_ptr = $buffer;
 L1: while(1) {
  $1 = HEAP32[19393]|0;
  $2 = $buf_ptr;
  $3 = $buf_ptr;
  $4 = $3;
  $5 = $buffer;
  $6 = (($4) - ($5))|0;
  $7 = (256 - ($6))|0;
  $8 = (($7) - 1)|0;
  $9 = (_read($1,$2,$8)|0);
  $result = $9;
  $10 = $result;
  $11 = ($10|0)==(-1);
  if ($11) {
   label = 3;
   break;
  }
  $18 = $result;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 7;
   break;
  }
  $21 = $result;
  $22 = $buf_ptr;
  $23 = (($22) + ($21)|0);
  HEAP8[$23>>0] = 0;
  while(1) {
   $24 = $buf_ptr;
   $25 = (_strchr($24,10)|0);
   $lf = $25;
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    break;
   }
   $27 = $buf_ptr;
   $28 = (_strncmp($27,23565,18)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = $buf_ptr;
    $31 = (_strncmp($30,23584,18)|0);
    $32 = ($31|0)==(0);
    if (!($32)) {
     $33 = $lf;
     HEAP8[$33>>0] = 0;
     $34 = $buf_ptr;
     HEAP32[$vararg_buffer1>>2] = $34;
     __ZL3logPKcz(23603,$vararg_buffer1);
     $35 = $lf;
     $36 = $result;
     $37 = (($36) - 1)|0;
     $38 = $buf_ptr;
     $39 = (($38) + ($37)|0);
     $40 = ($35|0)==($39|0);
     if ($40) {
      label = 13;
      break L1;
     }
    }
   }
   $42 = $lf;
   $43 = ((($42)) + 1|0);
   $buf_ptr = $43;
  }
  $44 = $buf_ptr;
  $45 = $result;
  _memmove(($buffer|0),($44|0),($45|0))|0;
  $46 = $result;
  $47 = (($buffer) + ($46)|0);
  $buf_ptr = $47;
 }
 if ((label|0) == 3) {
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(11);
  if ($14) {
   $0 = 0;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  } else {
   $15 = (___errno_location()|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strerror($16)|0);
   HEAP32[$vararg_buffer>>2] = $17;
   __ZL3errPKcz(23391,$vararg_buffer);
   $0 = -1;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
 }
 else if ((label|0) == 7) {
  $20 = (__ZL11mbrola_diedv()|0);
  $0 = $20;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 else if ((label|0) == 13) {
  $41 = $buf_ptr;
  HEAP32[$vararg_buffer4>>2] = $41;
  (_snprintf(121324,160,25839,$vararg_buffer4)|0);
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function __ZL11mbrola_diedv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exst = 0, $len = 0, $msg = 0, $msgbuf = 0, $pid = 0, $sig = 0, $status = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $status = sp + 52|0;
 $msgbuf = sp + 64|0;
 $0 = HEAP32[19389]|0;
 $1 = (_waitpid(($0|0),($status|0),1)|0);
 $pid = $1;
 $2 = $pid;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = $pid;
   $5 = HEAP32[19389]|0;
   $6 = ($4|0)!=($5|0);
   if ($6) {
    $msg = 23445;
    break;
   }
   HEAP32[19389] = 0;
   $7 = HEAP32[$status>>2]|0;
   $8 = $7 & 65535;
   $9 = (($8) - 1)|0;
   $10 = ($9>>>0)<(255);
   $11 = HEAP32[$status>>2]|0;
   $12 = $11 & 127;
   if ($10) {
    $sig = $12;
    $13 = $sig;
    HEAP32[$vararg_buffer>>2] = $13;
    (_snprintf($msgbuf,80,23467,$vararg_buffer)|0);
    $msg = $msgbuf;
    break;
   }
   $14 = ($12|0)!=(0);
   if ($14) {
    $msg = 23521;
    break;
   } else {
    $15 = HEAP32[$status>>2]|0;
    $16 = $15 & 65280;
    $17 = $16 >> 8;
    $exst = $17;
    $18 = $exst;
    HEAP32[$vararg_buffer1>>2] = $18;
    (_snprintf($msgbuf,80,23492,$vararg_buffer1)|0);
    $msg = $msgbuf;
    break;
   }
  } else {
   $msg = 23407;
  }
 } while(0);
 $19 = $msg;
 HEAP32[$vararg_buffer4>>2] = $19;
 __ZL3logPKcz(23256,$vararg_buffer4);
 $20 = (_strlen(121324)|0);
 $len = $20;
 $21 = $len;
 $22 = ($21|0)!=(0);
 if ($22) {
  $24 = $len;
  $25 = (121324 + ($24)|0);
  $26 = $len;
  $27 = (160 - ($26))|0;
  $28 = $msg;
  HEAP32[$vararg_buffer10>>2] = $28;
  (_snprintf($25,$27,23558,$vararg_buffer10)|0);
  STACKTOP = sp;return -1;
 } else {
  $23 = $msg;
  HEAP32[$vararg_buffer7>>2] = $23;
  (_snprintf(121324,160,25839,$vararg_buffer7)|0);
  STACKTOP = sp;return -1;
 }
 return (0)|0;
}
function __ZL11stop_mbrolav() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19388]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[19390]|0;
 (_close($2)|0);
 $3 = HEAP32[19391]|0;
 (_close($3)|0);
 $4 = HEAP32[19392]|0;
 (_close($4)|0);
 $5 = HEAP32[19393]|0;
 (_close($5)|0);
 $6 = HEAP32[19389]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[19389]|0;
  (_kill(($8|0),15)|0);
  $9 = HEAP32[19389]|0;
  (_waitpid(($9|0),(0|0),0)|0);
  HEAP32[19389] = 0;
 }
 HEAP32[19388] = 0;
 return;
}
function __ZL19receive_from_mbrolaPvj($buffer,$bufsize) {
 $buffer = $buffer|0;
 $bufsize = $bufsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $curpos = 0, $cursize = 0, $data = 0, $error = 0, $head = 0, $idle = 0, $left = 0, $nfds = 0, $obtained = 0, $pollfd = 0, $result = 0, $space = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $wait = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pollfd = sp + 64|0;
 $1 = $buffer;
 $2 = $bufsize;
 $wait = 1;
 $cursize = 0;
 $3 = HEAP32[19389]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 L4: while(1) {
  $nfds = 0;
  $5 = HEAP32[19392]|0;
  HEAP32[$pollfd>>2] = $5;
  $6 = ((($pollfd)) + 4|0);
  HEAP16[$6>>1] = 1;
  $7 = $nfds;
  $8 = (($7) + 1)|0;
  $nfds = $8;
  $9 = HEAP32[19393]|0;
  $10 = ((($pollfd)) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($pollfd)) + 8|0);
  $12 = ((($11)) + 4|0);
  HEAP16[$12>>1] = 1;
  $13 = $nfds;
  $14 = (($13) + 1)|0;
  $nfds = $14;
  $15 = HEAP32[19394]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = HEAP32[19391]|0;
   $18 = ((($pollfd)) + 16|0);
   HEAP32[$18>>2] = $17;
   $19 = ((($pollfd)) + 16|0);
   $20 = ((($19)) + 4|0);
   HEAP16[$20>>1] = 4;
   $21 = $nfds;
   $22 = (($21) + 1)|0;
   $nfds = $22;
  }
  $23 = (__ZL14mbrola_is_idlev()|0);
  $idle = $23;
  $24 = $nfds;
  $25 = $idle;
  $26 = ($25|0)!=(0);
  $27 = $wait;
  $28 = $26 ? 0 : $27;
  $29 = (_poll($pollfd,$24,$28)|0);
  $result = $29;
  $30 = $result;
  $31 = ($30|0)==(-1);
  if ($31) {
   label = 6;
   break;
  }
  $35 = $result;
  $36 = ($35|0)==(0);
  L10: do {
   if ($36) {
    $37 = $idle;
    $38 = ($37|0)!=(0);
    if ($38) {
     label = 9;
     break L4;
    }
    $39 = $wait;
    $40 = ($39|0)>=(3750);
    if ($40) {
     label = 11;
     break L4;
    }
    $41 = $wait;
    $42 = $41<<2;
    $wait = $42;
   } else {
    $wait = 1;
    $43 = ((($pollfd)) + 8|0);
    $44 = ((($43)) + 6|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = ($45<<16>>16)!=(0);
    if ($46) {
     $47 = (__ZL17mbrola_has_errorsv()|0);
     $48 = ($47|0)!=(0);
     if ($48) {
      label = 15;
      break L4;
     }
    }
    $49 = HEAP32[19394]|0;
    $50 = ($49|0)!=(0|0);
    do {
     if ($50) {
      $51 = ((($pollfd)) + 16|0);
      $52 = ((($51)) + 6|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = ($53<<16>>16)!=(0);
      if ($54) {
       $55 = HEAP32[19394]|0;
       $head = $55;
       $56 = $head;
       $57 = ((($56)) + 12|0);
       $58 = $head;
       $59 = ((($58)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (($57) + ($60)|0);
       $data = $61;
       $62 = $head;
       $63 = ((($62)) + 8|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $head;
       $66 = ((($65)) + 4|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($64) - ($67))|0;
       $left = $68;
       $69 = HEAP32[19391]|0;
       $70 = $data;
       $71 = $left;
       $72 = (_write($69,$70,$71)|0);
       $result = $72;
       $73 = $result;
       $74 = ($73|0)==(-1);
       if ($74) {
        label = 19;
        break L4;
       }
       $83 = $result;
       $84 = $left;
       $85 = ($83|0)!=($84|0);
       if ($85) {
        $86 = $result;
        $87 = $head;
        $88 = ((($87)) + 4|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (($89) + ($86))|0;
        HEAP32[$88>>2] = $90;
        break;
       }
       $91 = $head;
       $92 = HEAP32[$91>>2]|0;
       HEAP32[19394] = $92;
       $93 = $head;
       _free($93);
       $94 = HEAP32[19394]|0;
       $95 = ($94|0)!=(0|0);
       if ($95) {
        break L10;
       }
       HEAP32[19395] = 0;
      }
     }
    } while(0);
    $96 = ((($pollfd)) + 6|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = ($97<<16>>16)!=(0);
    if ($98) {
     $99 = $1;
     $100 = $cursize;
     $101 = (($99) + ($100)|0);
     $curpos = $101;
     $102 = $2;
     $103 = $cursize;
     $104 = (($102) - ($103))|0;
     $space = $104;
     $105 = HEAP32[19392]|0;
     $106 = $curpos;
     $107 = $space;
     $108 = (_read($105,$106,$107)|0);
     $obtained = $108;
     $109 = $obtained;
     $110 = ($109|0)==(-1);
     if ($110) {
      label = 29;
      break L4;
     }
     $114 = $obtained;
     $115 = $cursize;
     $116 = (($115) + ($114))|0;
     $cursize = $116;
     HEAP32[19388] = 3;
    }
   }
  } while(0);
  $117 = $cursize;
  $118 = $2;
  $119 = ($117>>>0)<($118>>>0);
  if (!($119)) {
   break;
  }
 }
 if ((label|0) == 6) {
  $32 = (___errno_location()|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_strerror($33)|0);
  HEAP32[$vararg_buffer>>2] = $34;
  __ZL3errPKcz(23626,$vararg_buffer);
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 9) {
  HEAP32[19388] = 1;
 }
 else if ((label|0) == 11) {
  HEAP32[19388] = 4;
  __ZL3errPKcz(23637,$vararg_buffer1);
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 19) {
  $75 = (___errno_location()|0);
  $76 = HEAP32[$75>>2]|0;
  $error = $76;
  $77 = $error;
  $78 = ($77|0)==(32);
  if ($78) {
   $79 = (__ZL17mbrola_has_errorsv()|0);
   $80 = ($79|0)!=(0);
   if ($80) {
    $0 = -1;
    $121 = $0;
    STACKTOP = sp;return ($121|0);
   }
  }
  $81 = $error;
  $82 = (_strerror($81)|0);
  HEAP32[$vararg_buffer3>>2] = $82;
  __ZL3errPKcz(23614,$vararg_buffer3);
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 29) {
  $111 = (___errno_location()|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (_strerror($112)|0);
  HEAP32[$vararg_buffer6>>2] = $113;
  __ZL3errPKcz(23663,$vararg_buffer6);
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $120 = $cursize;
 $0 = $120;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function __ZL14mbrola_is_idlev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 8|0;
 $1 = HEAP32[19390]|0;
 $2 = (_lseek($1,0,0)|0);
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $0 = 0;
  } else {
   $4 = HEAP32[19390]|0;
   $5 = (_read($4,$buffer,20)|0);
   $6 = ($5|0)!=(20);
   if ($6) {
    $0 = 0;
    break;
   }
   $7 = (_memchr($buffer,41,20)|0);
   $p = $7;
   $8 = $p;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $p;
    $11 = $10;
    $12 = $buffer;
    $13 = (($11) - ($12))|0;
    $14 = ($13>>>0)>=(18);
    if (!($14)) {
     $15 = $p;
     $16 = ((($15)) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 << 24 >> 24;
     $19 = ($18|0)==(32);
     if ($19) {
      $20 = $p;
      $21 = ((($20)) + 2|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = $22 << 24 >> 24;
      $24 = ($23|0)==(83);
      $26 = $24;
     } else {
      $26 = 0;
     }
     $25 = $26&1;
     $0 = $25;
     break;
    }
   }
   $0 = 0;
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _close_MBR() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL11stop_mbrolav();
 __ZL17free_pending_datav();
 $0 = HEAP32[19397]|0;
 _free($0);
 HEAP32[19397] = 0;
 HEAPF32[773] = 1.0;
 return;
}
function __ZL17free_pending_datav() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $head = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[19394]|0;
 $head = $0;
 while(1) {
  $1 = $head;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $head;
  $p = $3;
  $4 = $head;
  $5 = HEAP32[$4>>2]|0;
  $head = $5;
  $6 = $p;
  _free($6);
 }
 HEAP32[19394] = 0;
 HEAP32[19395] = 0;
 STACKTOP = sp;return;
}
function _reset_MBR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummybuf = 0, $or$cond = 0, $result = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummybuf = sp + 16|0;
 $success = 1;
 $1 = HEAP32[19388]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $0 = 1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $3 = HEAP32[19389]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $5 = HEAP32[19389]|0;
 $6 = (_kill(($5|0),10)|0);
 $7 = ($6|0)==(-1);
 if ($7) {
  $success = 0;
 }
 __ZL17free_pending_datav();
 $8 = HEAP32[19391]|0;
 $9 = (_write($8,23762,3)|0);
 $result = $9;
 $10 = $result;
 $11 = ($10|0)!=(3);
 if ($11) {
  $success = 0;
 }
 while(1) {
  $12 = HEAP32[19392]|0;
  $13 = (_read($12,$dummybuf,4096)|0);
  $result = $13;
  $14 = $result;
  $15 = ($14|0)>(0);
  if (!($15)) {
   break;
  }
 }
 $16 = $result;
 $17 = ($16|0)!=(-1);
 if ($17) {
  label = 12;
 } else {
  $18 = (___errno_location()|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(11);
  if ($20) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $success = 0;
 }
 $21 = (__ZL17mbrola_has_errorsv()|0);
 $22 = ($21|0)==(0);
 $23 = $success;
 $24 = ($23|0)!=(0);
 $or$cond = $22 & $24;
 if ($or$cond) {
  HEAP32[19388] = 1;
 }
 $25 = $success;
 $0 = $25;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _read_MBR($buffer,$nb_samples) {
 $buffer = $buffer|0;
 $nb_samples = $nb_samples|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $nb_samples;
 $2 = $0;
 $3 = $1;
 $4 = $3<<1;
 $5 = (__ZL19receive_from_mbrolaPvj($2,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)>(0);
 if (!($7)) {
  $10 = $result;
  STACKTOP = sp;return ($10|0);
 }
 $8 = $result;
 $9 = (($8|0) / 2)&-1;
 $result = $9;
 $10 = $result;
 STACKTOP = sp;return ($10|0);
}
function _write_MBR($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 HEAP32[19388] = 2;
 $1 = $0;
 $2 = (__ZL14send_to_mbrolaPKc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _flush_MBR() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZL14send_to_mbrolaPKc(23762)|0);
 $1 = ($0|0)==(3);
 $2 = $1&1;
 return ($2|0);
}
function _setVolumeRatio_MBR($value) {
 $value = +$value;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = +HEAPF32[773];
 $3 = $1 == $2;
 if (!($3)) {
  $4 = $0;
  HEAPF32[773] = $4;
  $5 = HEAP32[19388]|0;
  $6 = ($5|0)!=(1);
  if (!($6)) {
   __ZL11stop_mbrolav();
   $7 = HEAP32[19397]|0;
   (_init_MBR($7)|0);
  }
 }
 STACKTOP = sp;return;
}
function __Z16AlphabetFromNamePKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alphabet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $alphabet = 3096;
 while(1) {
  $2 = $alphabet;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $1;
  $6 = $alphabet;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 1|0);
  $9 = (_strcmp($5,$8)|0);
  $10 = ($9|0)==(0);
  $11 = $alphabet;
  if ($10) {
   label = 4;
   break;
  }
  $12 = ((($11)) + 20|0);
  $alphabet = $12;
 }
 if ((label|0) == 4) {
  $0 = $11;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __Z16AlphabetFromChari($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $alphabet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $alphabet = 3096;
 while(1) {
  $2 = $alphabet;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = $alphabet;
  $7 = ((($6)) + 10|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = ($5|0)<=($9|0);
  if ($10) {
   label = 4;
   break;
  }
  $18 = $alphabet;
  $19 = ((($18)) + 20|0);
  $alphabet = $19;
 }
 if ((label|0) == 4) {
  $11 = $1;
  $12 = $alphabet;
  $13 = ((($12)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = ($11|0)>=($15|0);
  if ($16) {
   $17 = $alphabet;
   $0 = $17;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $0 = 0;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __Z15SetIndicLettersP10Translator($tr) {
 $tr = $tr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $0;
 $2 = ((($1)) + 464|0);
 _memset(($2|0),0,256)|0;
 $3 = $0;
 __ZL18SetLetterBitsRangeP10Translatoriii($3,0,4,20);
 $4 = $0;
 __ZL18SetLetterBitsRangeP10Translatoriii($4,0,62,77);
 $5 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($5,0,23883);
 $6 = $0;
 __ZL18SetLetterBitsRangeP10Translatoriii($6,1,62,77);
 $7 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($7,1,23883);
 $8 = $0;
 __ZL18SetLetterBitsRangeP10Translatoriii($8,2,21,57);
 $9 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($9,2,23891);
 $10 = $0;
 __ZL18SetLetterBitsRangeP10Translatoriii($10,6,4,20);
 $11 = $0;
 __ZL18SetLetterBitsRangeP10Translatoriii($11,6,62,76);
 $12 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($12,6,23883);
 $13 = $0;
 $14 = ((($13)) + 24|0);
 $15 = ((($14)) + 20|0);
 HEAP32[$15>>2] = 1;
 $16 = $0;
 $17 = ((($16)) + 720|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 77)|0;
 $20 = $0;
 $21 = ((($20)) + 316|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function __ZL18SetLetterBitsRangeP10Translatoriii($tr,$group,$first,$last) {
 $tr = $tr|0;
 $group = $group|0;
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bits = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $group;
 $2 = $first;
 $3 = $last;
 $4 = $1;
 $5 = 1 << $4;
 $bits = $5;
 $6 = $2;
 $ix = $6;
 while(1) {
  $7 = $ix;
  $8 = $3;
  $9 = ($7|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $bits;
  $11 = $ix;
  $12 = $0;
  $13 = ((($12)) + 464|0);
  $14 = (($13) + ($11)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 | $10;
  $18 = $17&255;
  HEAP8[$14>>0] = $18;
  $19 = $ix;
  $20 = (($19) + 1)|0;
  $ix = $20;
 }
 STACKTOP = sp;return;
}
function __ZL13SetLetterBitsP10TranslatoriPKc($tr,$group,$string) {
 $tr = $tr|0;
 $group = $group|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bits = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $group;
 $2 = $string;
 $3 = $1;
 $4 = 1 << $3;
 $bits = $4;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 1|0);
  $2 = $6;
  $7 = HEAP8[$5>>0]|0;
  $c = $7;
  $8 = $7&255;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $bits;
  $11 = $c;
  $12 = $11&255;
  $13 = $0;
  $14 = ((($13)) + 464|0);
  $15 = (($14) + ($12)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 | $10;
  $19 = $18&255;
  HEAP8[$15>>0] = $19;
 }
 STACKTOP = sp;return;
}
function __Z15SetupTranslatorP10TranslatorPKsPKh($tr,$lengths,$amps) {
 $tr = $tr|0;
 $lengths = $lengths|0;
 $amps = $amps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $lengths;
 $2 = $amps;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 424|0);
  $7 = $1;
  ;HEAP16[$6>>1]=HEAP16[$7>>1]|0;HEAP16[$6+2>>1]=HEAP16[$7+2>>1]|0;HEAP16[$6+4>>1]=HEAP16[$7+4>>1]|0;HEAP16[$6+6>>1]=HEAP16[$7+6>>1]|0;HEAP16[$6+8>>1]=HEAP16[$7+8>>1]|0;HEAP16[$6+10>>1]=HEAP16[$7+10>>1]|0;HEAP16[$6+12>>1]=HEAP16[$7+12>>1]|0;HEAP16[$6+14>>1]=HEAP16[$7+14>>1]|0;
 }
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = ((($10)) + 408|0);
 $12 = $2;
 ;HEAP8[$11>>0]=HEAP8[$12>>0]|0;HEAP8[$11+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$12+3>>0]|0;HEAP8[$11+4>>0]=HEAP8[$12+4>>0]|0;HEAP8[$11+5>>0]=HEAP8[$12+5>>0]|0;HEAP8[$11+6>>0]=HEAP8[$12+6>>0]|0;HEAP8[$11+7>>0]=HEAP8[$12+7>>0]|0;
 STACKTOP = sp;return;
}
function __Z16SelectTranslatorPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $name2 = 0, $switch$split102D = 0;
 var $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $name2 = 0;
 $1 = (__ZL13NewTranslatorv()|0);
 $tr = $1;
 $2 = $tr;
 $3 = ((($2)) + 340|0);
 $4 = $0;
 (_strcpy($3,$4)|0);
 while(1) {
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  $9 = $name2;
  if (!($8)) {
   break;
  }
  $10 = $9 << 8;
  $11 = $0;
  $12 = ((($11)) + 1|0);
  $0 = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (($10) + ($14))|0;
  $name2 = $15;
 }
 $switch$split2D = ($9|0)<(27509);
 L5: do {
  if ($switch$split2D) {
   do {
    switch ($9|0) {
    case 24947: case 25198:  {
     label = 9;
     break L5;
     break;
    }
    case 25964:  {
     label = 16;
     break L5;
     break;
    }
    case 26977: case 25441: case 24942: case 25971:  {
     label = 19;
     break L5;
     break;
    }
    case 26485: case 26729:  {
     label = 34;
     break L5;
     break;
    }
    case 25203: case 26738:  {
     label = 43;
     break L5;
     break;
    }
    case 26980:  {
     label = 50;
     break L5;
     break;
    }
    case 25459:  {
     label = 72;
     break L5;
     break;
    }
    case 27502:  {
     label = 80;
     break L5;
     break;
    }
    case 24954:  {
     label = 91;
     break L5;
     break;
    }
    case 24934:  {
     $16 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($16,9548,0);
     $17 = $tr;
     $18 = ((($17)) + 8|0);
     HEAP32[$18>>2] = 0;
     $19 = $tr;
     $20 = ((($19)) + 4|0);
     HEAP32[$20>>2] = 48;
     $21 = $tr;
     $22 = ((($21)) + 24|0);
     $23 = ((($22)) + 4|0);
     HEAP32[$23>>2] = 1;
     $24 = $tr;
     $25 = ((($24)) + 24|0);
     $26 = ((($25)) + 12|0);
     HEAP32[$26>>2] = 1;
     $27 = $tr;
     __ZL14SetLetterVowelP10Translatori($27,121);
     $28 = $tr;
     $29 = ((($28)) + 200|0);
     HEAP32[$29>>2] = 16779472;
     $30 = $tr;
     $31 = ((($30)) + 240|0);
     HEAP32[$31>>2] = 1;
     break L5;
     break;
    }
    case 24941:  {
     $32 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($32,9564,24293);
     $33 = $tr;
     $34 = ((($33)) + 720|0);
     HEAP32[$34>>2] = 4608;
     $35 = $tr;
     $36 = ((($35)) + 8|0);
     HEAP32[$36>>2] = 0;
     $37 = $tr;
     $38 = ((($37)) + 12|0);
     HEAP32[$38>>2] = 36;
     $39 = $tr;
     $40 = ((($39)) + 192|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $tr;
     $43 = ((($42)) + 196|0);
     HEAP32[$43>>2] = $41;
     $44 = $tr;
     $45 = ((($44)) + 24|0);
     $46 = ((($45)) + 20|0);
     HEAP32[$46>>2] = 1;
     $47 = $tr;
     $48 = ((($47)) + 200|0);
     HEAP32[$48>>2] = 1024;
     break L5;
     break;
    }
    case 24946:  {
     $49 = $tr;
     $50 = ((($49)) + 332|0);
     HEAP32[$50>>2] = 1568;
     $51 = $tr;
     $52 = ((($51)) + 328|0);
     HEAP32[$52>>2] = 1631;
     $53 = $tr;
     $54 = ((($53)) + 336|0);
     HEAP32[$54>>2] = 0;
     $55 = $tr;
     $56 = ((($55)) + 720|0);
     HEAP32[$56>>2] = 1536;
     $57 = $tr;
     $58 = ((($57)) + 200|0);
     HEAP32[$58>>2] = 2884720;
     $59 = $tr;
     $60 = ((($59)) + 24|0);
     $61 = ((($60)) + 20|0);
     HEAP32[$61>>2] = 1;
     break L5;
     break;
    }
    case 25191:  {
     $62 = $tr;
     __ZL18SetCyrillicLettersP10Translator($62);
     $63 = $tr;
     __ZL14SetLetterVowelP10Translatori($63,42);
     $64 = HEAP32[(2960)>>2]|0;
     $65 = $tr;
     $66 = ((($65)) + 448|0);
     HEAP32[$66>>2] = $64;
     $67 = $tr;
     $68 = ((($67)) + 24|0);
     $69 = ((($68)) + 20|0);
     HEAP32[$69>>2] = 1074;
     $70 = $tr;
     $71 = ((($70)) + 24|0);
     $72 = ((($71)) + 16|0);
     HEAP32[$72>>2] = 263;
     $73 = $tr;
     $74 = ((($73)) + 24|0);
     $75 = ((($74)) + 40|0);
     HEAP32[$75>>2] = 2;
     $76 = $tr;
     $77 = ((($76)) + 8|0);
     HEAP32[$77>>2] = 2;
     $78 = $tr;
     $79 = ((($78)) + 200|0);
     HEAP32[$79>>2] = 184554728;
     $80 = $tr;
     $81 = ((($80)) + 220|0);
     HEAP32[$81>>2] = 32;
     break L5;
     break;
    }
    case 25199:  {
     $102 = $tr;
     $103 = ((($102)) + 8|0);
     HEAP32[$103>>2] = 0;
     $104 = $tr;
     $105 = ((($104)) + 720|0);
     HEAP32[$105>>2] = 3840;
     $106 = $tr;
     __ZL18SetLetterBitsRangeP10Translatoriii($106,0,113,125);
     $107 = $tr;
     __ZL18SetLetterBitsRangeP10Translatoriii($107,1,113,129);
     $108 = $tr;
     __ZL18SetLetterBitsRangeP10Translatoriii($108,1,144,188);
     $109 = $tr;
     __ZL18SetLetterBitsRangeP10Translatoriii($109,2,64,108);
     $110 = $tr;
     $111 = ((($110)) + 24|0);
     $112 = ((($111)) + 20|0);
     HEAP32[$112>>2] = 1;
     $113 = $tr;
     $114 = ((($113)) + 200|0);
     HEAP32[$114>>2] = 1;
     break L5;
     break;
    }
    case 25465:  {
     $115 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($115,9656,24398);
     $116 = HEAP32[(2996)>>2]|0;
     $117 = $tr;
     $118 = ((($117)) + 448|0);
     HEAP32[$118>>2] = $116;
     $119 = $tr;
     $120 = ((($119)) + 8|0);
     HEAP32[$120>>2] = 2;
     $121 = $tr;
     $122 = ((($121)) + 12|0);
     HEAP32[$122>>2] = 22;
     $123 = $tr;
     $124 = ((($123)) + 16|0);
     HEAP32[$124>>2] = 0;
     $125 = $tr;
     $126 = ((($125)) + 20|0);
     HEAP32[$126>>2] = 2;
     $127 = $tr;
     $128 = ((($127)) + 24|0);
     $129 = ((($128)) + 28|0);
     HEAP32[$129>>2] = 120;
     $130 = $tr;
     $131 = ((($130)) + 200|0);
     HEAP32[$131>>2] = 1024;
     $132 = $tr;
     __ZL14SetLetterVowelP10Translatori($132,119);
     $133 = $tr;
     __ZL14SetLetterVowelP10Translatori($133,121);
     break L5;
     break;
    }
    case 25697:  {
     $134 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($134,9672,0);
     $135 = $tr;
     $136 = ((($135)) + 8|0);
     HEAP32[$136>>2] = 0;
     $137 = $tr;
     $138 = ((($137)) + 24|0);
     $139 = ((($138)) + 12|0);
     HEAP32[$139>>2] = 1;
     $140 = $tr;
     __ZL14SetLetterVowelP10Translatori($140,121);
     $141 = $tr;
     $142 = ((($141)) + 200|0);
     HEAP32[$142>>2] = 184618072;
     break L5;
     break;
    }
    case 25701:  {
     $143 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($143,9688,24406);
     $144 = $tr;
     $145 = ((($144)) + 8|0);
     HEAP32[$145>>2] = 0;
     $146 = $tr;
     HEAP32[$146>>2] = 8;
     $147 = $tr;
     $148 = ((($147)) + 4|0);
     HEAP32[$148>>2] = 48;
     $149 = $tr;
     $150 = ((($149)) + 24|0);
     $151 = ((($150)) + 12|0);
     HEAP32[$151>>2] = 1;
     $152 = $tr;
     $153 = ((($152)) + 24|0);
     $154 = ((($153)) + 16|0);
     HEAP32[$154>>2] = 256;
     $155 = $tr;
     $156 = ((($155)) + 24|0);
     $157 = ((($156)) + 72|0);
     HEAP32[$157>>2] = 87;
     $158 = $tr;
     $159 = ((($158)) + 200|0);
     HEAP32[$159>>2] = 16846872;
     $160 = $tr;
     __ZL14SetLetterVowelP10Translatori($160,121);
     $161 = $tr;
     $162 = ((($161)) + 24|0);
     $163 = ((($162)) + 20|0);
     HEAP32[$163>>2] = 2;
     break L5;
     break;
    }
    case 25718:  {
     $164 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($164,9704,24414);
     $165 = $tr;
     $166 = ((($165)) + 24|0);
     $167 = ((($166)) + 20|0);
     HEAP32[$167>>2] = 1;
     $168 = $tr;
     $169 = ((($168)) + 192|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $tr;
     $172 = ((($171)) + 196|0);
     HEAP32[$172>>2] = $170;
     $173 = $tr;
     $174 = ((($173)) + 720|0);
     HEAP32[$174>>2] = 1920;
     $175 = $tr;
     $176 = ((($175)) + 8|0);
     HEAP32[$176>>2] = 0;
     $177 = $tr;
     $178 = ((($177)) + 12|0);
     HEAP32[$178>>2] = 65540;
     $179 = $tr;
     __ZL18SetLetterBitsRangeP10Translatoriii($179,1,38,48);
     $180 = $tr;
     $181 = ((($180)) + 208|0);
     HEAP32[$181>>2] = 5288;
     $182 = $tr;
     $183 = ((($182)) + 200|0);
     HEAP32[$183>>2] = 1;
     break L5;
     break;
    }
    case 25966:  {
     $184 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($184,9720,0);
     $185 = $tr;
     $186 = ((($185)) + 8|0);
     HEAP32[$186>>2] = 0;
     $187 = $tr;
     $188 = ((($187)) + 12|0);
     HEAP32[$188>>2] = 8;
     $189 = $tr;
     $190 = ((($189)) + 200|0);
     HEAP32[$190>>2] = 16779328;
     $191 = $tr;
     $192 = ((($191)) + 24|0);
     $193 = ((($192)) + 44|0);
     HEAP32[$193>>2] = 2;
     $194 = $tr;
     $195 = ((($194)) + 316|0);
     HEAP32[$195>>2] = 101;
     $196 = $tr;
     $197 = ((($196)) + 24|0);
     $198 = ((($197)) + 20|0);
     HEAP32[$198>>2] = 2;
     $199 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($199,6,24272);
     break L5;
     break;
    }
    case 25967:  {
     $240 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($240,9752,24488);
     $241 = HEAP32[(2952)>>2]|0;
     $242 = $tr;
     $243 = ((($242)) + 448|0);
     HEAP32[$243>>2] = $241;
     $244 = $tr;
     $245 = ((($244)) + 452|0);
     HEAP32[$245>>2] = 3692;
     $246 = $tr;
     $247 = ((($246)) + 4|0);
     HEAP32[$247>>2] = 2;
     $248 = $tr;
     $249 = ((($248)) + 8|0);
     HEAP32[$249>>2] = 2;
     $250 = $tr;
     $251 = ((($250)) + 12|0);
     HEAP32[$251>>2] = 22;
     $252 = $tr;
     $253 = ((($252)) + 20|0);
     HEAP32[$253>>2] = 2;
     $254 = $tr;
     $255 = ((($254)) + 200|0);
     HEAP32[$255>>2] = 16782344;
     break L5;
     break;
    }
    case 25973:  {
     $307 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($307,9784,24507);
     $308 = $tr;
     $309 = ((($308)) + 8|0);
     HEAP32[$309>>2] = 1;
     $310 = $tr;
     $311 = ((($310)) + 12|0);
     HEAP32[$311>>2] = 256;
     $312 = $tr;
     $313 = ((($312)) + 24|0);
     $314 = ((($313)) + 76|0);
     HEAP32[$314>>2] = 1;
     $315 = $tr;
     $316 = ((($315)) + 200|0);
     HEAP32[$316>>2] = 3147080;
     break L5;
     break;
    }
    case 26209:  {
     $317 = $tr;
     $318 = ((($317)) + 332|0);
     HEAP32[$318>>2] = 1568;
     $319 = $tr;
     $320 = ((($319)) + 328|0);
     HEAP32[$320>>2] = 1740;
     $321 = $tr;
     $322 = ((($321)) + 336|0);
     HEAP32[$322>>2] = 24515;
     $323 = $tr;
     $324 = ((($323)) + 720|0);
     HEAP32[$324>>2] = 1536;
     $325 = $tr;
     $326 = ((($325)) + 200|0);
     HEAP32[$326>>2] = 96;
     $327 = $tr;
     $328 = ((($327)) + 24|0);
     $329 = ((($328)) + 20|0);
     HEAP32[$329>>2] = 1;
     $330 = $tr;
     $331 = ((($330)) + 460|0);
     HEAP32[$331>>2] = 9800;
     break L5;
     break;
    }
    case 25972:  {
     $332 = HEAP32[(2956)>>2]|0;
     $333 = $tr;
     $334 = ((($333)) + 448|0);
     HEAP32[$334>>2] = $332;
     break;
    }
    case 26217:  {
     break;
    }
    case 26226:  {
     $352 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($352,9564,24293);
     $353 = $tr;
     $354 = ((($353)) + 8|0);
     HEAP32[$354>>2] = 3;
     $355 = $tr;
     $356 = ((($355)) + 12|0);
     HEAP32[$356>>2] = 36;
     $357 = $tr;
     $358 = ((($357)) + 24|0);
     $359 = ((($358)) + 8|0);
     HEAP32[$359>>2] = 1;
     $360 = $tr;
     $361 = ((($360)) + 192|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = $tr;
     $364 = ((($363)) + 196|0);
     HEAP32[$364>>2] = $362;
     $365 = $tr;
     $366 = ((($365)) + 240|0);
     HEAP32[$366>>2] = 2;
     $367 = $tr;
     $368 = ((($367)) + 200|0);
     HEAP32[$368>>2] = 118658312;
     $369 = $tr;
     __ZL14SetLetterVowelP10Translatori($369,121);
     break L5;
     break;
    }
    case 26468: case 26465:  {
     $370 = $tr;
     $371 = ((($370)) + 8|0);
     HEAP32[$371>>2] = 0;
     $372 = $tr;
     $373 = ((($372)) + 12|0);
     HEAP32[$373>>2] = 32;
     $374 = $tr;
     $375 = ((($374)) + 200|0);
     HEAP32[$375>>2] = 2098176;
     $376 = $tr;
     $377 = ((($376)) + 240|0);
     HEAP32[$377>>2] = 2;
     $378 = $tr;
     $379 = ((($378)) + 24|0);
     $380 = ((($379)) + 20|0);
     HEAP32[$380>>2] = 3;
     $381 = $tr;
     $382 = ((($381)) + 24|0);
     $383 = ((($382)) + 8|0);
     HEAP32[$383>>2] = 1;
     break L5;
     break;
    }
    case 26740:  {
     $461 = $tr;
     $462 = ((($461)) + 8|0);
     HEAP32[$462>>2] = 3;
     $463 = $tr;
     $464 = ((($463)) + 12|0);
     HEAP32[$464>>2] = 36;
     $465 = $tr;
     $466 = ((($465)) + 200|0);
     HEAP32[$466>>2] = 17990912;
     break L5;
     break;
    }
    case 26741:  {
     $467 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($467,9900,24724);
     $468 = HEAP32[(2948)>>2]|0;
     $469 = $tr;
     $470 = ((($469)) + 448|0);
     HEAP32[$470>>2] = $468;
     $471 = $tr;
     $472 = ((($471)) + 4|0);
     HEAP32[$472>>2] = 32;
     $473 = $tr;
     $474 = ((($473)) + 8|0);
     HEAP32[$474>>2] = 0;
     $475 = $tr;
     $476 = ((($475)) + 12|0);
     HEAP32[$476>>2] = 1081398;
     $477 = $tr;
     $478 = ((($477)) + 16|0);
     HEAP32[$478>>2] = 2;
     $479 = $tr;
     $480 = ((($479)) + 24|0);
     $481 = ((($480)) + 56|0);
     HEAP32[$481>>2] = 1;
     $482 = $tr;
     $483 = ((($482)) + 24|0);
     $484 = ((($483)) + 68|0);
     HEAP32[$484>>2] = 2;
     $485 = $tr;
     $486 = ((($485)) + 200|0);
     HEAP32[$486>>2] = 186758144;
     $487 = $tr;
     $488 = ((($487)) + 220|0);
     HEAP32[$488>>2] = 32;
     $489 = $tr;
     $490 = ((($489)) + 224|0);
     HEAP32[$490>>2] = 44;
     $491 = $tr;
     $492 = ((($491)) + 212|0);
     HEAP32[$492>>2] = 899;
     $493 = $tr;
     $494 = ((($493)) + 216|0);
     HEAP32[$494>>2] = 1;
     $495 = $tr;
     __ZL14SetLetterVowelP10Translatori($495,121);
     $496 = $tr;
     $497 = ((($496)) + 269|0);
     HEAP8[$497>>0] = 1;
     $498 = $tr;
     __Z13SetLengthModsP10Translatori($498,3);
     break L5;
     break;
    }
    case 26745:  {
     $499 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($499,9916,0);
     $500 = $tr;
     $501 = ((($500)) + 8|0);
     HEAP32[$501>>2] = 3;
     $502 = $tr;
     $503 = ((($502)) + 720|0);
     HEAP32[$503>>2] = 1328;
     $504 = $tr;
     $505 = ((($504)) + 464|0);
     _memset(($505|0),0,256)|0;
     $506 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($506,0,24732);
     $507 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($507,7,24732);
     $508 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($508,1,24740);
     $509 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($509,2,24740);
     $510 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($510,2,24771);
     $511 = $tr;
     $512 = ((($511)) + 268|0);
     HEAP8[$512>>0] = 6;
     $513 = $tr;
     $514 = ((($513)) + 200|0);
     HEAP32[$514>>2] = 5128;
     break L5;
     break;
    }
    case 26995:  {
     $524 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($524,9948,0);
     $525 = $tr;
     $526 = ((($525)) + 8|0);
     HEAP32[$526>>2] = 0;
     $527 = $tr;
     $528 = ((($527)) + 12|0);
     HEAP32[$528>>2] = 16;
     $529 = $tr;
     $530 = ((($529)) + 24|0);
     $531 = ((($530)) + 8|0);
     HEAP32[$531>>2] = 17;
     $532 = $tr;
     $533 = ((($532)) + 24|0);
     $534 = ((($533)) + 40|0);
     HEAP32[$534>>2] = 2;
     $535 = $tr;
     __ZL15ResetLetterBitsP10Translatori($535,24);
     $536 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($536,4,24781);
     $537 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($537,3,24786);
     $538 = $tr;
     $539 = ((($538)) + 724|0);
     $540 = ((($539)) + 4|0);
     HEAP32[$540>>2] = 3980;
     $541 = $tr;
     __ZL14SetLetterVowelP10Translatori($541,121);
     $542 = $tr;
     $543 = ((($542)) + 200|0);
     HEAP32[$543>>2] = 2280;
     $544 = $tr;
     $545 = ((($544)) + 204|0);
     HEAP32[$545>>2] = 2;
     break L5;
     break;
    }
    case 26996:  {
     $546 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($546,9964,24790);
     $547 = $tr;
     $548 = ((($547)) + 192|0);
     $549 = HEAP32[$548>>2]|0;
     $550 = $tr;
     $551 = ((($550)) + 196|0);
     HEAP32[$551>>2] = $549;
     $552 = $tr;
     $553 = ((($552)) + 8|0);
     HEAP32[$553>>2] = 2;
     $554 = $tr;
     $555 = ((($554)) + 12|0);
     HEAP32[$555>>2] = 131088;
     $556 = $tr;
     $557 = ((($556)) + 4|0);
     HEAP32[$557>>2] = 1;
     $558 = $tr;
     $559 = ((($558)) + 16|0);
     HEAP32[$559>>2] = 2;
     $560 = $tr;
     $561 = ((($560)) + 20|0);
     HEAP32[$561>>2] = 2;
     $562 = $tr;
     $563 = ((($562)) + 24|0);
     $564 = ((($563)) + 8|0);
     HEAP32[$564>>2] = 2;
     $565 = $tr;
     $566 = ((($565)) + 24|0);
     $567 = ((($566)) + 56|0);
     HEAP32[$567>>2] = 1;
     $568 = $tr;
     $569 = ((($568)) + 24|0);
     $570 = ((($569)) + 28|0);
     HEAP32[$570>>2] = 130;
     $571 = $tr;
     $572 = ((($571)) + 24|0);
     $573 = ((($572)) + 40|0);
     HEAP32[$573>>2] = 1;
     $574 = $tr;
     $575 = ((($574)) + 24|0);
     $576 = ((($575)) + 60|0);
     HEAP32[$576>>2] = 2;
     $577 = $tr;
     $578 = ((($577)) + 200|0);
     HEAP32[$578>>2] = 117450248;
     $579 = $tr;
     $580 = ((($579)) + 204|0);
     HEAP32[$580>>2] = 8192;
     $581 = $tr;
     $582 = ((($581)) + 240|0);
     HEAP32[$582>>2] = 2;
     $583 = $tr;
     __ZL14SetLetterVowelP10Translatori($583,121);
     break L5;
     break;
    }
    case 27489:  {
     $597 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($597,9704,24414);
     $598 = $tr;
     $599 = ((($598)) + 464|0);
     _memset(($599|0),0,256)|0;
     $600 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($600,0,24798);
     $601 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($601,2,24806);
     $602 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($602,7,24798);
     $603 = $tr;
     $604 = ((($603)) + 8|0);
     HEAP32[$604>>2] = 0;
     $605 = $tr;
     $606 = ((($605)) + 12|0);
     HEAP32[$606>>2] = 16;
     $607 = $tr;
     $608 = ((($607)) + 720|0);
     HEAP32[$608>>2] = 4256;
     $609 = $tr;
     $610 = ((($609)) + 268|0);
     HEAP8[$610>>0] = 7;
     $611 = $tr;
     $612 = ((($611)) + 200|0);
     HEAP32[$612>>2] = 19964960;
     $613 = $tr;
     $614 = ((($613)) + 300|0);
     HEAP32[$614>>2] = 1056;
     $615 = $tr;
     $616 = ((($615)) + 304|0);
     HEAP32[$616>>2] = 29301;
     break L5;
     break;
    }
    case 27499:  {
     $617 = $tr;
     $618 = ((($617)) + 720|0);
     HEAP32[$618>>2] = 1056;
     $619 = $tr;
     $620 = ((($619)) + 464|0);
     _memset(($620|0),0,256)|0;
     $621 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($621,0,24301);
     $622 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($622,2,24322);
     $623 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($623,7,24301);
     $624 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($624,9996,24840);
     $625 = $tr;
     $626 = ((($625)) + 8|0);
     HEAP32[$626>>2] = 7;
     $627 = $tr;
     $628 = ((($627)) + 12|0);
     HEAP32[$628>>2] = 2097184;
     $629 = $tr;
     $630 = ((($629)) + 312|0);
     HEAP32[$630>>2] = 0;
     $631 = $tr;
     $632 = ((($631)) + 24|0);
     $633 = ((($632)) + 76|0);
     HEAP32[$633>>2] = 1;
     $634 = $tr;
     $635 = ((($634)) + 200|0);
     HEAP32[$635>>2] = 50176;
     $636 = $tr;
     $637 = ((($636)) + 268|0);
     HEAP8[$637>>0] = 2;
     $638 = $tr;
     __Z13SetLengthModsP10Translatori($638,3);
     break L5;
     break;
    }
    case 27500:  {
     $639 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($639,9852,24704);
     $640 = $tr;
     $641 = ((($640)) + 8|0);
     HEAP32[$641>>2] = 12;
     $642 = $tr;
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = 32;
     $644 = $tr;
     $645 = ((($644)) + 200|0);
     HEAP32[$645>>2] = 184618072;
     break L5;
     break;
    }
    case 27503:  {
     $646 = $tr;
     $647 = ((($646)) + 720|0);
     HEAP32[$647>>2] = 4352;
     $648 = $tr;
     $649 = ((($648)) + 296|0);
     HEAP32[$649>>2] = 42752;
     $650 = $tr;
     $651 = ((($650)) + 464|0);
     _memset(($651|0),0,256)|0;
     $652 = $tr;
     __ZL18SetLetterBitsRangeP10Translatoriii($652,0,97,117);
     $653 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($653,6,24848);
     $654 = $tr;
     __ZL13SetLetterBitsP10TranslatoriPKc($654,5,24857);
     $655 = $tr;
     $656 = ((($655)) + 8|0);
     HEAP32[$656>>2] = 8;
     $657 = $tr;
     $658 = ((($657)) + 24|0);
     $659 = ((($658)) + 20|0);
     HEAP32[$659>>2] = 1;
     $660 = $tr;
     $661 = ((($660)) + 200|0);
     HEAP32[$661>>2] = 1024;
     $662 = $tr;
     $663 = ((($662)) + 204|0);
     HEAP32[$663>>2] = 16384;
     $664 = $tr;
     $665 = ((($664)) + 208|0);
     HEAP32[$665>>2] = 17895696;
     $666 = $tr;
     $667 = ((($666)) + 228|0);
     HEAP32[$667>>2] = 20;
     break L5;
     break;
    }
    default: {
     label = 102;
     break L5;
    }
    }
   } while(0);
   $335 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($335,9820,24688);
   $336 = $tr;
   $337 = ((($336)) + 8|0);
   HEAP32[$337>>2] = 0;
   $338 = $tr;
   $339 = ((($338)) + 12|0);
   HEAP32[$339>>2] = 86;
   $340 = $tr;
   $341 = ((($340)) + 24|0);
   $342 = ((($341)) + 56|0);
   HEAP32[$342>>2] = 1;
   $343 = $tr;
   $344 = ((($343)) + 260|0);
   HEAP32[$344>>2] = 130;
   $345 = $tr;
   $346 = ((($345)) + 200|0);
   HEAP32[$346>>2] = 4104;
   $347 = $tr;
   __ZL14SetLetterVowelP10Translatori($347,121);
   $348 = $tr;
   $349 = ((($348)) + 269|0);
   HEAP8[$349>>0] = 1;
   $350 = $tr;
   $351 = ((($350)) + 248|0);
   HEAP32[$351>>2] = 3;
  } else {
   $switch$split12D = ($9|0)<(29545);
   L35: do {
    if ($switch$split12D) {
     do {
      switch ($9|0) {
      case 28769: case 28530: case 28261:  {
       label = 34;
       break L5;
       break;
      }
      case 28019:  {
       label = 50;
       break L5;
       break;
      }
      case 28018: case 28012:  {
       label = 80;
       break L5;
       break;
      }
      case 29540:  {
       break L35;
       break;
      }
      case 27509:  {
       $668 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($668,10012,24865);
       $669 = HEAP32[(2976)>>2]|0;
       $670 = $tr;
       $671 = ((($670)) + 448|0);
       HEAP32[$671>>2] = $669;
       $672 = $tr;
       $673 = ((($672)) + 8|0);
       HEAP32[$673>>2] = 7;
       $674 = $tr;
       $675 = ((($674)) + 200|0);
       HEAP32[$675>>2] = 263264;
       $676 = $tr;
       $677 = ((($676)) + 268|0);
       HEAP8[$677>>0] = 2;
       break L5;
       break;
      }
      case 27745:  {
       $678 = HEAP32[(2956)>>2]|0;
       $679 = $tr;
       $680 = ((($679)) + 448|0);
       HEAP32[$680>>2] = $678;
       $681 = $tr;
       $682 = ((($681)) + 8|0);
       HEAP32[$682>>2] = 2;
       $683 = $tr;
       $684 = ((($683)) + 12|0);
       HEAP32[$684>>2] = 32;
       $685 = $tr;
       $686 = ((($685)) + 16|0);
       HEAP32[$686>>2] = 0;
       $687 = $tr;
       $688 = ((($687)) + 20|0);
       HEAP32[$688>>2] = 2;
       $689 = $tr;
       $690 = ((($689)) + 24|0);
       $691 = ((($690)) + 4|0);
       HEAP32[$691>>2] = 1;
       $692 = $tr;
       $693 = ((($692)) + 200|0);
       HEAP32[$693>>2] = 16777216;
       $694 = $tr;
       $695 = ((($694)) + 212|0);
       HEAP32[$695>>2] = 5000;
       break L5;
       break;
      }
      case 27764:  {
       $696 = HEAP32[(2956)>>2]|0;
       $697 = $tr;
       $698 = ((($697)) + 448|0);
       HEAP32[$698>>2] = $696;
       $699 = $tr;
       $700 = ((($699)) + 8|0);
       HEAP32[$700>>2] = 2;
       $701 = $tr;
       $702 = ((($701)) + 12|0);
       HEAP32[$702>>2] = 32;
       $703 = $tr;
       $704 = ((($703)) + 16|0);
       HEAP32[$704>>2] = 0;
       $705 = $tr;
       $706 = ((($705)) + 20|0);
       HEAP32[$706>>2] = 2;
       $707 = $tr;
       $708 = ((($707)) + 24|0);
       $709 = ((($708)) + 4|0);
       HEAP32[$709>>2] = 1;
       $710 = $tr;
       $711 = ((($710)) + 200|0);
       HEAP32[$711>>2] = 99336;
       $712 = $tr;
       $713 = ((($712)) + 204|0);
       HEAP32[$713>>2] = 256;
       $714 = $tr;
       $715 = ((($714)) + 212|0);
       HEAP32[$715>>2] = 5000;
       break L5;
       break;
      }
      case 27766:  {
       $716 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($716,10028,24873);
       $717 = $tr;
       $718 = ((($717)) + 8|0);
       HEAP32[$718>>2] = 0;
       $719 = $tr;
       $720 = ((($719)) + 269|0);
       HEAP8[$720>>0] = 1;
       $721 = HEAP32[(2956)>>2]|0;
       $722 = $tr;
       $723 = ((($722)) + 448|0);
       HEAP32[$723>>2] = $721;
       $724 = $tr;
       $725 = ((($724)) + 200|0);
       HEAP32[$725>>2] = 99336;
       $726 = $tr;
       $727 = ((($726)) + 12|0);
       HEAP32[$727>>2] = 262166;
       break L5;
       break;
      }
      case 28011:  {
       $728 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($728,10044,24881);
       $729 = HEAP32[(2960)>>2]|0;
       $730 = $tr;
       $731 = ((($730)) + 448|0);
       HEAP32[$731>>2] = $729;
       $732 = $tr;
       $733 = ((($732)) + 724|0);
       $734 = ((($733)) + 28|0);
       HEAP32[$734>>2] = 4036;
       $735 = $tr;
       $736 = ((($735)) + 724|0);
       HEAP32[$736>>2] = 4036;
       $737 = $tr;
       $738 = ((($737)) + 720|0);
       HEAP32[$738>>2] = 1056;
       $739 = $tr;
       $740 = ((($739)) + 8|0);
       HEAP32[$740>>2] = 4;
       $741 = $tr;
       $742 = ((($741)) + 200|0);
       HEAP32[$742>>2] = 2114600;
       $743 = $tr;
       $744 = ((($743)) + 204|0);
       HEAP32[$744>>2] = 138;
       break L5;
       break;
      }
      case 28020:  {
       $745 = HEAP32[(2952)>>2]|0;
       $746 = $tr;
       $747 = ((($746)) + 448|0);
       HEAP32[$747>>2] = $745;
       $748 = $tr;
       $749 = ((($748)) + 24|0);
       $750 = ((($749)) + 16|0);
       HEAP32[$750>>2] = 256;
       $751 = $tr;
       $752 = ((($751)) + 8|0);
       HEAP32[$752>>2] = 2;
       $753 = $tr;
       $754 = ((($753)) + 200|0);
       HEAP32[$754>>2] = 1;
       break L5;
       break;
      }
      case 28268:  {
       $755 = $tr;
       $756 = ((($755)) + 8|0);
       HEAP32[$756>>2] = 0;
       $757 = $tr;
       $758 = ((($757)) + 4|0);
       HEAP32[$758>>2] = 48;
       $759 = $tr;
       $760 = ((($759)) + 24|0);
       $761 = ((($760)) + 4|0);
       HEAP32[$761>>2] = 1;
       $762 = $tr;
       $763 = ((($762)) + 24|0);
       $764 = ((($763)) + 12|0);
       HEAP32[$764>>2] = 1;
       $765 = $tr;
       $766 = ((($765)) + 24|0);
       $767 = ((($766)) + 16|0);
       HEAP32[$767>>2] = 256;
       $768 = $tr;
       __ZL14SetLetterVowelP10Translatori($768,121);
       $769 = $tr;
       $770 = ((($769)) + 200|0);
       HEAP32[$770>>2] = 2169880;
       $771 = $tr;
       $772 = ((($771)) + 232|0);
       HEAP32[$772>>2] = 24889;
       $773 = $tr;
       $774 = ((($773)) + 12|0);
       HEAP32[$774>>2] = 128;
       $775 = $tr;
       $776 = ((($775)) + 424|0);
       ;HEAP16[$776>>1]=HEAP16[10060>>1]|0;HEAP16[$776+2>>1]=HEAP16[10060+2>>1]|0;HEAP16[$776+4>>1]=HEAP16[10060+4>>1]|0;HEAP16[$776+6>>1]=HEAP16[10060+6>>1]|0;HEAP16[$776+8>>1]=HEAP16[10060+8>>1]|0;HEAP16[$776+10>>1]=HEAP16[10060+10>>1]|0;HEAP16[$776+12>>1]=HEAP16[10060+12>>1]|0;HEAP16[$776+14>>1]=HEAP16[10060+14>>1]|0;
       break L5;
       break;
      }
      case 28271:  {
       $777 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($777,10076,0);
       $778 = $tr;
       $779 = ((($778)) + 8|0);
       HEAP32[$779>>2] = 0;
       $780 = $tr;
       __ZL14SetLetterVowelP10Translatori($780,121);
       $781 = $tr;
       $782 = ((($781)) + 200|0);
       HEAP32[$782>>2] = 71752;
       break L5;
       break;
      }
      case 28525:  {
       $783 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($783,10092,24891);
       $784 = $tr;
       $785 = ((($784)) + 8|0);
       HEAP32[$785>>2] = 2;
       $786 = $tr;
       $787 = ((($786)) + 12|0);
       HEAP32[$787>>2] = 524310;
       break L5;
       break;
      }
      case 28780:  {
       $788 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($788,10108,24899);
       $789 = HEAP32[(2948)>>2]|0;
       $790 = $tr;
       $791 = ((($790)) + 448|0);
       HEAP32[$791>>2] = $789;
       $792 = $tr;
       $793 = ((($792)) + 8|0);
       HEAP32[$793>>2] = 2;
       $794 = $tr;
       $795 = ((($794)) + 12|0);
       HEAP32[$795>>2] = 6;
       $796 = $tr;
       $797 = ((($796)) + 24|0);
       $798 = ((($797)) + 16|0);
       HEAP32[$798>>2] = 9;
       $799 = $tr;
       $800 = ((($799)) + 268|0);
       HEAP8[$800>>0] = 7;
       $801 = $tr;
       $802 = ((($801)) + 200|0);
       HEAP32[$802>>2] = 20488;
       $803 = $tr;
       $804 = ((($803)) + 204|0);
       HEAP32[$804>>2] = 192;
       $805 = $tr;
       $806 = ((($805)) + 24|0);
       $807 = ((($806)) + 44|0);
       HEAP32[$807>>2] = 260;
       $808 = $tr;
       __ZL14SetLetterVowelP10Translatori($808,121);
       break L5;
       break;
      }
      case 28788:  {
       $809 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($809,10124,24907);
       $810 = $tr;
       $811 = ((($810)) + 192|0);
       $812 = HEAP32[$811>>2]|0;
       $813 = $tr;
       $814 = ((($813)) + 196|0);
       HEAP32[$814>>2] = $812;
       $815 = $tr;
       $816 = ((($815)) + 8|0);
       HEAP32[$816>>2] = 3;
       $817 = $tr;
       $818 = ((($817)) + 12|0);
       HEAP32[$818>>2] = 139286;
       $819 = $tr;
       $820 = ((($819)) + 200|0);
       HEAP32[$820>>2] = 33570920;
       $821 = $tr;
       $822 = ((($821)) + 204|0);
       HEAP32[$822>>2] = 14336;
       $823 = $tr;
       $824 = ((($823)) + 212|0);
       HEAP32[$824>>2] = 5000;
       $825 = $tr;
       __ZL14SetLetterVowelP10Translatori($825,121);
       $826 = $tr;
       __ZL15ResetLetterBitsP10Translatori($826,2);
       $827 = $tr;
       __ZL13SetLetterBitsP10TranslatoriPKc($827,1,24915);
       $828 = $tr;
       $829 = ((($828)) + 24|0);
       $830 = ((($829)) + 60|0);
       HEAP32[$830>>2] = 2;
       $831 = $tr;
       $832 = ((($831)) + 240|0);
       HEAP32[$832>>2] = 2;
       break L5;
       break;
      }
      case 29295:  {
       $833 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($833,10140,24932);
       $834 = $tr;
       $835 = ((($834)) + 8|0);
       HEAP32[$835>>2] = 3;
       $836 = $tr;
       $837 = ((($836)) + 12|0);
       HEAP32[$837>>2] = 262;
       $838 = HEAP32[(2948)>>2]|0;
       $839 = $tr;
       $840 = ((($839)) + 448|0);
       HEAP32[$840>>2] = $838;
       $841 = $tr;
       $842 = ((($841)) + 200|0);
       HEAP32[$842>>2] = 16805928;
       $843 = $tr;
       $844 = ((($843)) + 204|0);
       HEAP32[$844>>2] = 30;
       break L5;
       break;
      }
      case 29301:  {
       $845 = $tr;
       __ZL18Translator_RussianP10Translator($845);
       break L5;
       break;
      }
      case 29303:  {
       $846 = $tr;
       $847 = ((($846)) + 8|0);
       HEAP32[$847>>2] = 2;
       $848 = $tr;
       $849 = ((($848)) + 12|0);
       HEAP32[$849>>2] = 22;
       $850 = $tr;
       $851 = ((($850)) + 192|0);
       $852 = HEAP32[$851>>2]|0;
       $853 = $tr;
       $854 = ((($853)) + 196|0);
       HEAP32[$854>>2] = $852;
       $855 = $tr;
       $856 = ((($855)) + 24|0);
       $857 = ((($856)) + 20|0);
       HEAP32[$857>>2] = 1;
       $858 = $tr;
       $859 = ((($858)) + 200|0);
       HEAP32[$859>>2] = 278624;
       $860 = $tr;
       $861 = ((($860)) + 204|0);
       HEAP32[$861>>2] = 512;
       break L5;
       break;
      }
      default: {
       label = 102;
       break L5;
      }
      }
     } while(0);
    } else {
     $switch$split42D = ($9|0)<(29812);
     if ($switch$split42D) {
      switch ($9|0) {
      case 29797: case 29793:  {
       label = 80;
       break L5;
       break;
      }
      case 29554:  {
       label = 43;
       break L5;
       break;
      }
      case 29547:  {
       label = 72;
       break L5;
       break;
      }
      case 29810:  {
       label = 91;
       break L5;
       break;
      }
      case 29545:  {
       $897 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($897,9704,24414);
       $898 = $tr;
       $899 = ((($898)) + 192|0);
       $900 = HEAP32[$899>>2]|0;
       $901 = $tr;
       $902 = ((($901)) + 196|0);
       HEAP32[$902>>2] = $900;
       $903 = $tr;
       $904 = ((($903)) + 8|0);
       HEAP32[$904>>2] = 0;
       $905 = $tr;
       $906 = ((($905)) + 12|0);
       HEAP32[$906>>2] = 22;
       $907 = $tr;
       $908 = ((($907)) + 269|0);
       HEAP8[$908>>0] = 1;
       $909 = $tr;
       $910 = ((($909)) + 720|0);
       HEAP32[$910>>2] = 3456;
       $911 = $tr;
       $912 = ((($911)) + 464|0);
       _memset(($912|0),0,256)|0;
       $913 = $tr;
       __ZL18SetLetterBitsRangeP10Translatoriii($913,0,5,22);
       $914 = $tr;
       __ZL18SetLetterBitsRangeP10Translatoriii($914,0,74,115);
       $915 = $tr;
       __ZL18SetLetterBitsRangeP10Translatoriii($915,1,74,115);
       $916 = $tr;
       __ZL18SetLetterBitsRangeP10Translatoriii($916,2,26,70);
       $917 = $tr;
       $918 = ((($917)) + 24|0);
       $919 = ((($918)) + 20|0);
       HEAP32[$919>>2] = 1;
       $920 = $tr;
       $921 = ((($920)) + 720|0);
       $922 = HEAP32[$921>>2]|0;
       $923 = (($922) + 74)|0;
       $924 = $tr;
       $925 = ((($924)) + 316|0);
       HEAP32[$925>>2] = $923;
       $926 = $tr;
       $927 = ((($926)) + 200|0);
       HEAP32[$927>>2] = 270589952;
       $928 = $tr;
       $929 = ((($928)) + 204|0);
       HEAP32[$929>>2] = 65536;
       $930 = $tr;
       $931 = ((($930)) + 208|0);
       HEAP32[$931>>2] = 84648;
       break L5;
       break;
      }
      case 29548:  {
       $932 = HEAP32[(2948)>>2]|0;
       $933 = $tr;
       $934 = ((($933)) + 448|0);
       HEAP32[$934>>2] = $932;
       $935 = $tr;
       $936 = ((($935)) + 8|0);
       HEAP32[$936>>2] = 2;
       $937 = $tr;
       $938 = ((($937)) + 12|0);
       HEAP32[$938>>2] = 32;
       $939 = $tr;
       $940 = ((($939)) + 24|0);
       $941 = ((($940)) + 16|0);
       HEAP32[$941>>2] = 259;
       $942 = $tr;
       $943 = ((($942)) + 24|0);
       $944 = ((($943)) + 20|0);
       HEAP32[$944>>2] = 118;
       $945 = $tr;
       $946 = ((($945)) + 24|0);
       $947 = ((($946)) + 60|0);
       HEAP32[$947>>2] = 2;
       $948 = $tr;
       $949 = ((($948)) + 24|0);
       $950 = ((($949)) + 8|0);
       HEAP32[$950>>2] = 1;
       $951 = $tr;
       $952 = ((($951)) + 464|0);
       $953 = ((($952)) + 114|0);
       $954 = HEAP8[$953>>0]|0;
       $955 = $954&255;
       $956 = $955 | 128;
       $957 = $956&255;
       HEAP8[$953>>0] = $957;
       $958 = $tr;
       $959 = ((($958)) + 200|0);
       HEAP32[$959>>2] = 16864280;
       $960 = $tr;
       $961 = ((($960)) + 204|0);
       HEAP32[$961>>2] = 256;
       $962 = $tr;
       $963 = ((($962)) + 220|0);
       HEAP32[$963>>2] = 32;
       $964 = $tr;
       $965 = ((($964)) + 284|0);
       HEAP32[$965>>2] = 3712;
       break L5;
       break;
      }
      case 29553:  {
       $966 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($966,10188,24980);
       $967 = $tr;
       $968 = ((($967)) + 8|0);
       HEAP32[$968>>2] = 3;
       $969 = $tr;
       $970 = ((($969)) + 12|0);
       HEAP32[$970>>2] = 278;
       $971 = $tr;
       __ZL14SetLetterVowelP10Translatori($971,121);
       $972 = $tr;
       $973 = ((($972)) + 200|0);
       HEAP32[$973>>2] = 32872;
       $974 = $tr;
       $975 = ((($974)) + 240|0);
       HEAP32[$975>>2] = 2;
       break L5;
       break;
      }
      case 29558:  {
       $976 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($976,10204,24988);
       $977 = $tr;
       $978 = ((($977)) + 8|0);
       HEAP32[$978>>2] = 0;
       $979 = $tr;
       __ZL14SetLetterVowelP10Translatori($979,121);
       $980 = $tr;
       $981 = ((($980)) + 200|0);
       HEAP32[$981>>2] = 6408;
       $982 = $tr;
       $983 = ((($982)) + 240|0);
       HEAP32[$983>>2] = 1;
       break L5;
       break;
      }
      case 29806: case 29559:  {
       $984 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($984,10220,24996);
       $985 = $tr;
       $986 = ((($985)) + 192|0);
       $987 = HEAP32[$986>>2]|0;
       $988 = $tr;
       $989 = ((($988)) + 196|0);
       HEAP32[$989>>2] = $987;
       $990 = $tr;
       $991 = ((($990)) + 4|0);
       HEAP32[$991>>2] = 1;
       $992 = $tr;
       $993 = ((($992)) + 8|0);
       HEAP32[$993>>2] = 2;
       $994 = $tr;
       $995 = ((($994)) + 12|0);
       HEAP32[$995>>2] = 22;
       $996 = $tr;
       $997 = ((($996)) + 268|0);
       HEAP8[$997>>0] = 4;
       $998 = $tr;
       $999 = ((($998)) + 200|0);
       HEAP32[$999>>2] = 1248;
       $1000 = $tr;
       $1001 = ((($1000)) + 208|0);
       HEAP32[$1001>>2] = 1227133544;
       break L5;
       break;
      }
      default: {
       label = 102;
       break L5;
      }
      }
     }
     $switch$split72D = ($9|0)<(31336);
     if ($switch$split72D) {
      switch ($9|0) {
      case 30066:  {
       break L35;
       break;
      }
      case 29812:  {
       $1078 = $tr;
       __ZL18SetCyrillicLettersP10Translator($1078);
       $1079 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($1079,9564,24293);
       $1080 = $tr;
       $1081 = ((($1080)) + 8|0);
       HEAP32[$1081>>2] = 3;
       $1082 = $tr;
       $1083 = ((($1082)) + 12|0);
       HEAP32[$1083>>2] = 32;
       $1084 = $tr;
       $1085 = ((($1084)) + 200|0);
       HEAP32[$1085>>2] = 2131208;
       break L5;
       break;
      }
      case 30059:  {
       $1086 = $tr;
       __ZL18SetCyrillicLettersP10Translator($1086);
       $1087 = $tr;
       $1088 = ((($1087)) + 24|0);
       $1089 = ((($1088)) + 20|0);
       HEAP32[$1089>>2] = 1074;
       break L5;
       break;
      }
      case 30313:  {
       $1099 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($1099,10284,25012);
       $1100 = $tr;
       $1101 = ((($1100)) + 192|0);
       $1102 = HEAP32[$1101>>2]|0;
       $1103 = $tr;
       $1104 = ((($1103)) + 196|0);
       HEAP32[$1104>>2] = $1102;
       $1105 = $tr;
       $1106 = ((($1105)) + 8|0);
       HEAP32[$1106>>2] = 0;
       $1107 = $tr;
       HEAP32[$1107>>2] = 33;
       $1108 = $tr;
       $1109 = ((($1108)) + 724|0);
       $1110 = ((($1109)) + 28|0);
       HEAP32[$1110>>2] = 4112;
       $1111 = $tr;
       $1112 = ((($1111)) + 724|0);
       HEAP32[$1112>>2] = 4112;
       $1113 = $tr;
       $1114 = ((($1113)) + 244|0);
       HEAP32[$1114>>2] = 1;
       $1115 = $tr;
       $1116 = ((($1115)) + 16|0);
       HEAP32[$1116>>2] = 2;
       $1117 = $tr;
       $1118 = ((($1117)) + 200|0);
       HEAP32[$1118>>2] = 12615688;
       break L5;
       break;
      }
      case 30575:  {
       $1119 = $tr;
       $1120 = ((($1119)) + 8|0);
       HEAP32[$1120>>2] = 0;
       $1121 = $tr;
       $1122 = ((($1121)) + 200|0);
       HEAP32[$1122>>2] = 2098528;
       break L5;
       break;
      }
      default: {
       label = 102;
       break L5;
      }
      }
     }
     $switch$split102D = ($9|0)<(7171689);
     L70: do {
      if ($switch$split102D) {
       $switch$split132D = ($9|0)<(6779491);
       if ($switch$split132D) {
        switch ($9|0) {
        case 31336:  {
         break L70;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
       $switch$split192D = ($9|0)<(6972015);
       if ($switch$split192D) {
        switch ($9|0) {
        case 6779491:  {
         label = 16;
         break L5;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
       switch ($9|0) {
       case 6972015:  {
        break;
       }
       default: {
        label = 102;
        break L5;
       }
       }
       $584 = $tr;
       __Z15SetupTranslatorP10TranslatorPKsPKh($584,9980,0);
       $585 = $tr;
       $586 = ((($585)) + 8|0);
       HEAP32[$586>>2] = 2;
       $587 = $tr;
       $588 = ((($587)) + 4|0);
       HEAP32[$588>>2] = 524;
       $589 = $tr;
       $590 = ((($589)) + 456|0);
       HEAP32[$590>>2] = 4016;
       $591 = $tr;
       $592 = ((($591)) + 24|0);
       $593 = ((($592)) + 52|0);
       HEAP32[$593>>2] = 2;
       $594 = $tr;
       __ZL14SetLetterVowelP10Translatori($594,121);
       $595 = $tr;
       $596 = ((($595)) + 308|0);
       HEAP32[$596>>2] = 368;
       break L5;
      } else {
       $switch$split162D = ($9|0)<(7364976);
       if ($switch$split162D) {
        switch ($9|0) {
        case 7171689:  {
         label = 9;
         break L5;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
       $switch$split222D = ($9|0)<(8022137);
       if ($switch$split222D) {
        switch ($9|0) {
        case 7364976:  {
         label = 19;
         break L5;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       } else {
        switch ($9|0) {
        case 8022137:  {
         break L70;
         break;
        }
        default: {
         label = 102;
         break L5;
        }
        }
       }
      }
     } while(0);
     $1123 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($1123,10300,25020);
     $1124 = $tr;
     $1125 = ((($1124)) + 8|0);
     HEAP32[$1125>>2] = 3;
     $1126 = $tr;
     $1127 = ((($1126)) + 12|0);
     HEAP32[$1127>>2] = 2;
     $1128 = $tr;
     $1129 = ((($1128)) + 4|0);
     HEAP32[$1129>>2] = 0;
     $1130 = $tr;
     $1131 = ((($1130)) + 244|0);
     HEAP32[$1131>>2] = 1;
     $1132 = $tr;
     $1133 = ((($1132)) + 192|0);
     $1134 = HEAP32[$1133>>2]|0;
     $1135 = $tr;
     $1136 = ((($1135)) + 196|0);
     HEAP32[$1136>>2] = $1134;
     $1137 = $tr;
     $1138 = ((($1137)) + 270|0);
     HEAP8[$1138>>0] = 1;
     $1139 = $tr;
     $1140 = ((($1139)) + 271|0);
     HEAP8[$1140>>0] = 1;
     $1141 = $tr;
     $1142 = ((($1141)) + 296|0);
     HEAP32[$1142>>2] = 12544;
     $1143 = $tr;
     HEAP32[$1143>>2] = 33;
     $1144 = $name2;
     $1145 = ($1144|0)==(31336);
     if (!($1145)) {
      break L5;
     }
     $1146 = $tr;
     $1147 = ((($1146)) + 272|0);
     HEAP8[$1147>>0] = 1;
     $1148 = $tr;
     $1149 = ((($1148)) + 280|0);
     HEAP32[$1149>>2] = 1;
     break L5;
    }
   } while(0);
   $1090 = $tr;
   $1091 = ((($1090)) + 720|0);
   HEAP32[$1091>>2] = 1536;
   $1092 = $tr;
   $1093 = ((($1092)) + 24|0);
   $1094 = ((($1093)) + 20|0);
   HEAP32[$1094>>2] = 1;
   $1095 = $tr;
   $1096 = ((($1095)) + 200|0);
   HEAP32[$1096>>2] = 16;
   $1097 = $tr;
   $1098 = ((($1097)) + 208|0);
   HEAP32[$1098>>2] = 21160;
  }
 } while(0);
 switch (label|0) {
  case 9: {
   $82 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($82,9640,24387);
   $83 = $tr;
   $84 = ((($83)) + 192|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $tr;
   $87 = ((($86)) + 196|0);
   HEAP32[$87>>2] = $85;
   $88 = $tr;
   $89 = ((($88)) + 8|0);
   HEAP32[$89>>2] = 0;
   $90 = $tr;
   $91 = ((($90)) + 12|0);
   HEAP32[$91>>2] = 65540;
   $92 = $tr;
   $93 = ((($92)) + 720|0);
   HEAP32[$93>>2] = 2432;
   $94 = $tr;
   __Z15SetIndicLettersP10Translator($94);
   $95 = $tr;
   __ZL18SetLetterBitsRangeP10Translatoriii($95,1,1,1);
   $96 = $tr;
   __ZL18SetLetterBitsRangeP10Translatoriii($96,4,62,76);
   $97 = $tr;
   __ZL13SetLetterBitsP10TranslatoriPKc($97,2,24395);
   $98 = $tr;
   $99 = ((($98)) + 200|0);
   HEAP32[$99>>2] = 16;
   $100 = $tr;
   $101 = ((($100)) + 208|0);
   HEAP32[$101>>2] = 613567144;
   break;
  }
  case 16: {
   $200 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($200,9736,24422);
   $201 = HEAP32[(2968)>>2]|0;
   $202 = $tr;
   $203 = ((($202)) + 448|0);
   HEAP32[$203>>2] = $201;
   $204 = $tr;
   $205 = ((($204)) + 452|0);
   HEAP32[$205>>2] = 3684;
   $206 = $tr;
   $207 = ((($206)) + 720|0);
   HEAP32[$207>>2] = 896;
   $208 = $tr;
   $209 = ((($208)) + 464|0);
   _memset(($209|0),0,256)|0;
   $210 = $tr;
   __ZL13SetLetterBitsP10TranslatoriPKc($210,0,24430);
   $211 = $tr;
   __ZL13SetLetterBitsP10TranslatoriPKc($211,7,24430);
   $212 = $tr;
   __ZL13SetLetterBitsP10TranslatoriPKc($212,1,24450);
   $213 = $tr;
   __ZL13SetLetterBitsP10TranslatoriPKc($213,2,24460);
   $214 = $tr;
   __ZL13SetLetterBitsP10TranslatoriPKc($214,6,24479);
   $215 = $tr;
   $216 = ((($215)) + 192|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $tr;
   $219 = ((($218)) + 196|0);
   HEAP32[$219>>2] = $217;
   $220 = $tr;
   $221 = ((($220)) + 8|0);
   HEAP32[$221>>2] = 2;
   $222 = $tr;
   $223 = ((($222)) + 12|0);
   HEAP32[$223>>2] = 6;
   $224 = $tr;
   $225 = ((($224)) + 16|0);
   HEAP32[$225>>2] = 0;
   $226 = $tr;
   $227 = ((($226)) + 20|0);
   HEAP32[$227>>2] = 2;
   $228 = $tr;
   $229 = ((($228)) + 24|0);
   $230 = ((($229)) + 28|0);
   HEAP32[$230>>2] = 130;
   $231 = $tr;
   $232 = ((($231)) + 200|0);
   HEAP32[$232>>2] = 264;
   $233 = $tr;
   $234 = ((($233)) + 204|0);
   HEAP32[$234>>2] = 6146;
   $235 = $name2;
   $236 = ($235|0)==(6779491);
   if ($236) {
    $237 = $tr;
    $238 = ((($237)) + 24|0);
    $239 = ((($238)) + 20|0);
    HEAP32[$239>>2] = 1;
   }
   break;
  }
  case 19: {
   $256 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($256,9768,24496);
   $257 = $tr;
   $258 = ((($257)) + 192|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $tr;
   $261 = ((($260)) + 196|0);
   HEAP32[$261>>2] = $259;
   $262 = $tr;
   $263 = ((($262)) + 8|0);
   HEAP32[$263>>2] = 2;
   $264 = $tr;
   $265 = ((($264)) + 12|0);
   HEAP32[$265>>2] = 534;
   $266 = $tr;
   $267 = ((($266)) + 16|0);
   HEAP32[$267>>2] = 0;
   $268 = $tr;
   $269 = ((($268)) + 20|0);
   HEAP32[$269>>2] = 2;
   $270 = $tr;
   $271 = ((($270)) + 24|0);
   $272 = ((($271)) + 28|0);
   HEAP32[$272>>2] = 120;
   $273 = $tr;
   $274 = ((($273)) + 200|0);
   HEAP32[$274>>2] = 85984552;
   $275 = $tr;
   $276 = ((($275)) + 204|0);
   HEAP32[$276>>2] = 6144;
   $277 = $name2;
   $278 = ($277|0)==(25441);
   if ($278) {
    $279 = $tr;
    $280 = ((($279)) + 456|0);
    HEAP32[$280>>2] = 3700;
    $281 = $tr;
    $282 = ((($281)) + 12|0);
    HEAP32[$282>>2] = 566;
    break;
   }
   $283 = $name2;
   $284 = ($283|0)==(26977);
   if ($284) {
    $285 = $tr;
    $286 = ((($285)) + 12|0);
    HEAP32[$286>>2] = 534;
    $287 = $tr;
    $288 = ((($287)) + 200|0);
    HEAP32[$288>>2] = 85984264;
    break;
   }
   $289 = $name2;
   $290 = ($289|0)==(24942);
   if ($290) {
    $291 = $tr;
    $292 = ((($291)) + 12|0);
    HEAP32[$292>>2] = 534;
    $293 = $tr;
    $294 = ((($293)) + 200|0);
    HEAP32[$294>>2] = 153093416;
    $295 = $tr;
    $296 = ((($295)) + 204|0);
    HEAP32[$296>>2] = 2048;
    $297 = $tr;
    $298 = ((($297)) + 236|0);
    HEAP32[$298>>2] = 24504;
    break;
   }
   $299 = $name2;
   $300 = ($299|0)==(7364976);
   $301 = $tr;
   if ($300) {
    $302 = ((($301)) + 8|0);
    HEAP32[$302>>2] = 3;
    $303 = $tr;
    $304 = ((($303)) + 12|0);
    HEAP32[$304>>2] = 310;
    break;
   } else {
    $305 = ((($301)) + 24|0);
    $306 = ((($305)) + 20|0);
    HEAP32[$306>>2] = 2;
    break;
   }
   break;
  }
  case 34: {
   $384 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($384,9836,24696);
   $385 = HEAP32[(3016)>>2]|0;
   $386 = $tr;
   $387 = ((($386)) + 448|0);
   HEAP32[$387>>2] = $385;
   $388 = $tr;
   $389 = ((($388)) + 192|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $tr;
   $392 = ((($391)) + 196|0);
   HEAP32[$392>>2] = $390;
   $393 = $tr;
   $394 = ((($393)) + 8|0);
   HEAP32[$394>>2] = 6;
   $395 = $tr;
   $396 = ((($395)) + 12|0);
   HEAP32[$396>>2] = 65540;
   $397 = $tr;
   $398 = ((($397)) + 200|0);
   HEAP32[$398>>2] = 16;
   $399 = $tr;
   $400 = ((($399)) + 208|0);
   HEAP32[$400>>2] = 84648;
   $401 = $tr;
   $402 = ((($401)) + 720|0);
   HEAP32[$402>>2] = 2304;
   $403 = $name2;
   $404 = ($403|0)==(28769);
   do {
    if ($404) {
     $405 = $tr;
     $406 = ((($405)) + 720|0);
     HEAP32[$406>>2] = 2560;
    } else {
     $407 = $name2;
     $408 = ($407|0)==(26485);
     if ($408) {
      $409 = $tr;
      __Z15SetupTranslatorP10TranslatorPKsPKh($409,9852,24704);
      $410 = $tr;
      $411 = ((($410)) + 720|0);
      HEAP32[$411>>2] = 2688;
      $412 = $tr;
      $413 = ((($412)) + 8|0);
      HEAP32[$413>>2] = 2;
      break;
     }
     $414 = $name2;
     $415 = ($414|0)==(28261);
     if ($415) {
      $416 = $tr;
      __Z15SetupTranslatorP10TranslatorPKsPKh($416,9852,24704);
      $417 = $tr;
      $418 = ((($417)) + 208|0);
      HEAP32[$418>>2] = 2796200;
      $419 = $tr;
      $420 = ((($419)) + 228|0);
      HEAP32[$420>>2] = 22;
      $421 = $tr;
      $422 = ((($421)) + 204|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = $423 | 32768;
      HEAP32[$422>>2] = $424;
      break;
     }
     $425 = $name2;
     $426 = ($425|0)==(28530);
     if ($426) {
      $427 = $tr;
      $428 = ((($427)) + 720|0);
      HEAP32[$428>>2] = 2816;
     }
    }
   } while(0);
   $429 = $tr;
   __Z15SetIndicLettersP10Translator($429);
   break;
  }
  case 43: {
   $430 = $tr;
   $431 = ((($430)) + 340|0);
   (_strcpy($431,24712)|0);
   $432 = $name2;
   $433 = ($432|0)==(29554);
   $434 = $tr;
   if ($433) {
    __Z15SetupTranslatorP10TranslatorPKsPKh($434,9868,24716);
   } else {
    __Z15SetupTranslatorP10TranslatorPKsPKh($434,9884,24716);
   }
   $435 = HEAP32[(2948)>>2]|0;
   $436 = $tr;
   $437 = ((($436)) + 448|0);
   HEAP32[$437>>2] = $435;
   $438 = $tr;
   $439 = ((($438)) + 8|0);
   HEAP32[$439>>2] = 0;
   $440 = $tr;
   $441 = ((($440)) + 12|0);
   HEAP32[$441>>2] = 16;
   $442 = $tr;
   $443 = ((($442)) + 24|0);
   $444 = ((($443)) + 16|0);
   HEAP32[$444>>2] = 3;
   $445 = $tr;
   $446 = ((($445)) + 268|0);
   HEAP8[$446>>0] = 5;
   $447 = $tr;
   $448 = ((($447)) + 269|0);
   HEAP8[$448>>0] = 1;
   $449 = $tr;
   $450 = ((($449)) + 240|0);
   HEAP32[$450>>2] = 1;
   $451 = $tr;
   $452 = ((($451)) + 200|0);
   HEAP32[$452>>2] = 33572172;
   $453 = $tr;
   $454 = ((($453)) + 204|0);
   HEAP32[$454>>2] = 330;
   $455 = $tr;
   $456 = ((($455)) + 284|0);
   HEAP32[$456>>2] = 3712;
   $457 = $tr;
   $458 = ((($457)) + 296|0);
   HEAP32[$458>>2] = 1056;
   $459 = $tr;
   __ZL14SetLetterVowelP10Translatori($459,121);
   $460 = $tr;
   __ZL14SetLetterVowelP10Translatori($460,114);
   break;
  }
  case 50: {
   $515 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($515,9932,24773);
   $516 = $tr;
   $517 = ((($516)) + 8|0);
   HEAP32[$517>>2] = 2;
   $518 = $tr;
   $519 = ((($518)) + 200|0);
   HEAP32[$519>>2] = 16781320;
   $520 = $tr;
   $521 = ((($520)) + 12|0);
   HEAP32[$521>>2] = 22;
   $522 = $tr;
   $523 = ((($522)) + 240|0);
   HEAP32[$523>>2] = 2;
   break;
  }
  case 72: {
   $862 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($862,10172,24954);
   $863 = HEAP32[(2948)>>2]|0;
   $864 = $tr;
   $865 = ((($864)) + 448|0);
   HEAP32[$865>>2] = $863;
   $866 = $tr;
   $867 = ((($866)) + 8|0);
   HEAP32[$867>>2] = 0;
   $868 = $tr;
   $869 = ((($868)) + 12|0);
   HEAP32[$869>>2] = 22;
   $870 = $tr;
   $871 = ((($870)) + 24|0);
   $872 = ((($871)) + 16|0);
   HEAP32[$872>>2] = 3;
   $873 = $tr;
   $874 = ((($873)) + 268|0);
   HEAP8[$874>>0] = 5;
   $875 = $tr;
   $876 = ((($875)) + 269|0);
   HEAP8[$876>>0] = 1;
   $877 = $tr;
   $878 = ((($877)) + 24|0);
   $879 = ((($878)) + 44|0);
   HEAP32[$879>>2] = 4;
   $880 = $tr;
   $881 = ((($880)) + 200|0);
   HEAP32[$881>>2] = 16794624;
   $882 = $tr;
   $883 = ((($882)) + 204|0);
   HEAP32[$883>>2] = 128;
   $884 = $tr;
   $885 = ((($884)) + 220|0);
   HEAP32[$885>>2] = 0;
   $886 = $tr;
   $887 = ((($886)) + 224|0);
   HEAP32[$887>>2] = 44;
   $888 = $name2;
   $889 = ($888|0)==(25459);
   if ($889) {
    $890 = $tr;
    $891 = ((($890)) + 204|0);
    HEAP32[$891>>2] = 264;
   }
   $892 = $tr;
   __ZL14SetLetterVowelP10Translatori($892,121);
   $893 = $tr;
   __ZL14SetLetterVowelP10Translatori($893,114);
   $894 = $tr;
   __ZL15ResetLetterBitsP10Translatori($894,32);
   $895 = $tr;
   $896 = HEAP32[1027]|0;
   __ZL13SetLetterBitsP10TranslatoriPKc($895,5,$896);
   break;
  }
  case 80: {
   $1002 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($1002,10236,24414);
   $1003 = $tr;
   $1004 = ((($1003)) + 192|0);
   $1005 = HEAP32[$1004>>2]|0;
   $1006 = $tr;
   $1007 = ((($1006)) + 196|0);
   HEAP32[$1007>>2] = $1005;
   $1008 = $tr;
   $1009 = ((($1008)) + 8|0);
   HEAP32[$1009>>2] = 0;
   $1010 = $tr;
   $1011 = ((($1010)) + 12|0);
   HEAP32[$1011>>2] = 22;
   $1012 = $tr;
   $1013 = ((($1012)) + 269|0);
   HEAP8[$1013>>0] = 1;
   $1014 = $tr;
   $1015 = ((($1014)) + 208|0);
   HEAP32[$1015>>2] = 5288;
   $1016 = $name2;
   $1017 = ($1016|0)==(29793);
   do {
    if ($1017) {
     $1018 = $tr;
     __Z15SetupTranslatorP10TranslatorPKsPKh($1018,9704,0);
     $1019 = $tr;
     $1020 = ((($1019)) + 720|0);
     HEAP32[$1020>>2] = 2944;
     $1021 = $tr;
     $1022 = ((($1021)) + 200|0);
     HEAP32[$1022>>2] = 2097152;
     $1023 = $tr;
     $1024 = ((($1023)) + 204|0);
     HEAP32[$1024>>2] = 262144;
     $1025 = $tr;
     $1026 = ((($1025)) + 24|0);
     $1027 = ((($1026)) + 32|0);
     HEAP32[$1027>>2] = 1;
    } else {
     $1028 = $name2;
     $1029 = ($1028|0)==(28018);
     if ($1029) {
      $1030 = $tr;
      $1031 = ((($1030)) + 720|0);
      HEAP32[$1031>>2] = 2304;
      break;
     }
     $1032 = $name2;
     $1033 = ($1032|0)==(28012);
     if ($1033) {
      $1034 = $tr;
      __Z15SetupTranslatorP10TranslatorPKsPKh($1034,10252,24704);
      $1035 = $tr;
      $1036 = ((($1035)) + 720|0);
      HEAP32[$1036>>2] = 3328;
      $1037 = $tr;
      $1038 = ((($1037)) + 200|0);
      HEAP32[$1038>>2] = 2098176;
      $1039 = $tr;
      $1040 = ((($1039)) + 204|0);
      HEAP32[$1040>>2] = 131072;
      $1041 = $tr;
      $1042 = ((($1041)) + 8|0);
      HEAP32[$1042>>2] = 13;
      break;
     }
     $1043 = $name2;
     $1044 = ($1043|0)==(27502);
     if ($1044) {
      $1045 = $tr;
      $1046 = ((($1045)) + 720|0);
      HEAP32[$1046>>2] = 3200;
      $1047 = $tr;
      $1048 = ((($1047)) + 200|0);
      HEAP32[$1048>>2] = 1;
      break;
     }
     $1049 = $name2;
     $1050 = ($1049|0)==(29797);
     if ($1050) {
      $1051 = $tr;
      $1052 = ((($1051)) + 720|0);
      HEAP32[$1052>>2] = 3072;
      $1053 = $tr;
      $1054 = ((($1053)) + 200|0);
      HEAP32[$1054>>2] = 1;
      $1055 = $tr;
      $1056 = ((($1055)) + 204|0);
      HEAP32[$1056>>2] = 524288;
     }
    }
   } while(0);
   $1057 = $tr;
   __Z15SetIndicLettersP10Translator($1057);
   $1058 = $tr;
   __ZL18SetLetterBitsRangeP10Translatoriii($1058,1,78,78);
   break;
  }
  case 91: {
   $1059 = $tr;
   __Z15SetupTranslatorP10TranslatorPKsPKh($1059,10268,25004);
   $1060 = HEAP32[(2976)>>2]|0;
   $1061 = $tr;
   $1062 = ((($1061)) + 448|0);
   HEAP32[$1062>>2] = $1060;
   $1063 = $tr;
   $1064 = ((($1063)) + 8|0);
   HEAP32[$1064>>2] = 7;
   $1065 = $tr;
   $1066 = ((($1065)) + 12|0);
   HEAP32[$1066>>2] = 32;
   $1067 = $tr;
   $1068 = ((($1067)) + 273|0);
   HEAP8[$1068>>0] = 1;
   $1069 = $tr;
   $1070 = ((($1069)) + 24|0);
   $1071 = ((($1070)) + 76|0);
   HEAP32[$1071>>2] = 1;
   $1072 = $name2;
   $1073 = ($1072|0)==(24954);
   $1074 = $tr;
   $1075 = ((($1074)) + 200|0);
   if ($1073) {
    HEAP32[$1075>>2] = 2118920;
   } else {
    HEAP32[$1075>>2] = 2114824;
   }
   $1076 = $tr;
   $1077 = ((($1076)) + 268|0);
   HEAP8[$1077>>0] = 2;
   break;
  }
  case 102: {
   $1150 = $tr;
   $1151 = ((($1150)) + 24|0);
   $1152 = ((($1151)) + 20|0);
   HEAP32[$1152>>2] = 1;
   break;
  }
 }
 $1153 = $name2;
 $1154 = $tr;
 $1155 = ((($1154)) + 324|0);
 HEAP32[$1155>>2] = $1153;
 $1156 = $tr;
 __Z22ProcessLanguageOptionsP16LANGUAGE_OPTIONS($1156);
 $1157 = $tr;
 STACKTOP = sp;return ($1157|0);
}
function __ZL13NewTranslatorv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ix = 0, $tr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (__Z5Alloci(8364)|0);
 $tr = $1;
 $2 = $tr;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $132 = $0;
  STACKTOP = sp;return ($132|0);
 }
 $4 = HEAP32[(2944)>>2]|0;
 $5 = $tr;
 $6 = ((($5)) + 448|0);
 HEAP32[$6>>2] = $4;
 HEAP8[119220] = 0;
 $7 = $tr;
 $8 = ((($7)) + 340|0);
 HEAP8[$8>>0] = 0;
 $9 = $tr;
 $10 = ((($9)) + 440|0);
 HEAP32[$10>>2] = 0;
 $11 = $tr;
 $12 = ((($11)) + 444|0);
 HEAP32[$12>>2] = 0;
 $13 = $tr;
 $14 = ((($13)) + 804|0);
 HEAP32[$14>>2] = 0;
 $15 = $tr;
 $16 = ((($15)) + 808|0);
 HEAP32[$16>>2] = 0;
 $17 = $tr;
 $18 = ((($17)) + 332|0);
 HEAP32[$18>>2] = 96;
 $19 = $tr;
 $20 = ((($19)) + 328|0);
 HEAP32[$20>>2] = 383;
 $21 = $tr;
 $22 = ((($21)) + 336|0);
 HEAP32[$22>>2] = 23906;
 $23 = $tr;
 $24 = ((($23)) + 8300|0);
 HEAP32[$24>>2] = 0;
 $25 = $tr;
 $26 = ((($25)) + 720|0);
 HEAP32[$26>>2] = 0;
 $27 = $tr;
 $28 = ((($27)) + 464|0);
 _memset(($28|0),0,256)|0;
 $29 = $tr;
 $30 = ((($29)) + 724|0);
 ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;HEAP32[$30+16>>2]=0|0;HEAP32[$30+20>>2]=0|0;HEAP32[$30+24>>2]=0|0;HEAP32[$30+28>>2]=0|0;
 $31 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($31,0,24194);
 $32 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($32,1,24200);
 $33 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($33,2,24218);
 $34 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($34,3,24239);
 $35 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($35,4,24245);
 $36 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($36,5,24255);
 $37 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($37,6,24268);
 $38 = $tr;
 __ZL13SetLetterBitsP10TranslatoriPKc($38,7,24272);
 $39 = $tr;
 $40 = ((($39)) + 452|0);
 HEAP32[$40>>2] = 77592;
 $41 = $tr;
 $42 = ((($41)) + 456|0);
 HEAP32[$42>>2] = 3676;
 $43 = $tr;
 $44 = ((($43)) + 460|0);
 HEAP32[$44>>2] = 9516;
 $ix = 0;
 while(1) {
  $45 = $ix;
  $46 = ($45|0)<(8);
  if (!($46)) {
   break;
  }
  $47 = $ix;
  $48 = (24279 + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $ix;
  $51 = $tr;
  $52 = ((($51)) + 408|0);
  $53 = (($52) + ($50)|0);
  HEAP8[$53>>0] = $49;
  $54 = $ix;
  $55 = (24279 + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (($57) - 1)|0;
  $59 = $58&255;
  $60 = $ix;
  $61 = $tr;
  $62 = ((($61)) + 416|0);
  $63 = (($62) + ($60)|0);
  HEAP8[$63>>0] = $59;
  $64 = $ix;
  $65 = (9532 + ($64<<1)|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $ix;
  $68 = $tr;
  $69 = ((($68)) + 424|0);
  $70 = (($69) + ($67<<1)|0);
  HEAP16[$70>>1] = $66;
  $71 = $ix;
  $72 = (($71) + 1)|0;
  $ix = $72;
 }
 $73 = $tr;
 _memset(($73|0),0,324)|0;
 $74 = $tr;
 $75 = ((($74)) + 308|0);
 HEAP32[$75>>2] = 500;
 $76 = $tr;
 $77 = ((($76)) + 312|0);
 HEAP32[$77>>2] = 20;
 $78 = $tr;
 $79 = ((($78)) + 8|0);
 HEAP32[$79>>2] = 2;
 $80 = $tr;
 $81 = ((($80)) + 16|0);
 HEAP32[$81>>2] = 1;
 $82 = $tr;
 $83 = ((($82)) + 20|0);
 HEAP32[$83>>2] = 3;
 $84 = $tr;
 $85 = ((($84)) + 24|0);
 $86 = ((($85)) + 28|0);
 HEAP32[$86>>2] = 95;
 $87 = $tr;
 $88 = ((($87)) + 24|0);
 $89 = ((($88)) + 72|0);
 HEAP32[$89>>2] = 95;
 $90 = $tr;
 $91 = ((($90)) + 24|0);
 $92 = ((($91)) + 36|0);
 HEAP32[$92>>2] = 19;
 $93 = $tr;
 $94 = ((($93)) + 24|0);
 $95 = ((($94)) + 20|0);
 HEAP32[$95>>2] = 115;
 $96 = $tr;
 $97 = ((($96)) + 24|0);
 $98 = ((($97)) + 64|0);
 HEAP32[$98>>2] = 4;
 $99 = $tr;
 $100 = ((($99)) + 108|0);
 $101 = ((($100)) + 64|0);
 HEAP32[$101>>2] = 2;
 $102 = $tr;
 $103 = ((($102)) + 268|0);
 HEAP8[$103>>0] = 3;
 $104 = $tr;
 $105 = ((($104)) + 284|0);
 HEAP32[$105>>2] = 0;
 $106 = $tr;
 $107 = ((($106)) + 288|0);
 HEAP8[$107>>0] = 0;
 $108 = $tr;
 $109 = ((($108)) + 304|0);
 HEAP32[$109>>2] = 25966;
 $110 = $tr;
 $111 = ((($110)) + 236|0);
 HEAP32[$111>>2] = 121874;
 $112 = $tr;
 __Z13SetLengthModsP10Translatori($112,201);
 $113 = $tr;
 $114 = ((($113)) + 260|0);
 HEAP32[$114>>2] = 100;
 $115 = $tr;
 $116 = ((($115)) + 212|0);
 HEAP32[$116>>2] = 49;
 $117 = $tr;
 $118 = ((($117)) + 216|0);
 HEAP32[$118>>2] = 2;
 $119 = $tr;
 $120 = ((($119)) + 220|0);
 HEAP32[$120>>2] = 44;
 $121 = $tr;
 $122 = ((($121)) + 224|0);
 HEAP32[$122>>2] = 46;
 $123 = $tr;
 $124 = ((($123)) + 208|0);
 HEAP32[$124>>2] = 1227133512;
 $125 = $tr;
 $126 = ((($125)) + 228|0);
 HEAP32[$126>>2] = 14;
 $127 = $tr;
 $128 = ((($127)) + 756|0);
 dest=$128; src=19956; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $129 = $tr;
 $130 = ((($129)) + 252|0);
 ;HEAP8[$130>>0]=HEAP8[24287>>0]|0;HEAP8[$130+1>>0]=HEAP8[24287+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[24287+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[24287+3>>0]|0;HEAP8[$130+4>>0]=HEAP8[24287+4>>0]|0;HEAP8[$130+5>>0]=HEAP8[24287+5>>0]|0;
 $131 = $tr;
 $0 = $131;
 $132 = $0;
 STACKTOP = sp;return ($132|0);
}
function __ZL14SetLetterVowelP10Translatori($tr,$c) {
 $tr = $tr|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $c;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 464|0);
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 64;
 $9 = $8 | 129;
 $10 = $9&255;
 $11 = $1;
 $12 = $0;
 $13 = ((($12)) + 464|0);
 $14 = (($13) + ($11)|0);
 HEAP8[$14>>0] = $10;
 STACKTOP = sp;return;
}
function __ZL18SetCyrillicLettersP10Translator($tr) {
 $tr = $tr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = HEAP32[(3012)>>2]|0;
 $2 = $0;
 $3 = ((($2)) + 448|0);
 HEAP32[$3>>2] = $1;
 $4 = $0;
 $5 = ((($4)) + 332|0);
 HEAP32[$5>>2] = 1072;
 $6 = $0;
 $7 = ((($6)) + 328|0);
 HEAP32[$7>>2] = 1105;
 $8 = $0;
 $9 = ((($8)) + 336|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = ((($10)) + 8300|0);
 HEAP32[$11>>2] = 9580;
 $12 = $0;
 $13 = ((($12)) + 720|0);
 HEAP32[$13>>2] = 1056;
 $14 = $0;
 $15 = ((($14)) + 464|0);
 _memset(($15|0),0,256)|0;
 $16 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($16,0,24301);
 $17 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($17,1,24317);
 $18 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($18,2,24322);
 $19 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($19,3,24350);
 $20 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($20,4,24355);
 $21 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($21,5,24375);
 $22 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($22,6,24382);
 $23 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($23,7,24301);
 STACKTOP = sp;return;
}
function __ZL15ResetLetterBitsP10Translatori($tr,$groups) {
 $tr = $tr|0;
 $groups = $groups|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $mask = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $groups;
 $2 = $1;
 $3 = $2 ^ -1;
 $mask = $3;
 $ix = 0;
 while(1) {
  $4 = $ix;
  $5 = ($4>>>0)<(256);
  if (!($5)) {
   break;
  }
  $6 = $mask;
  $7 = $ix;
  $8 = $0;
  $9 = ((($8)) + 464|0);
  $10 = (($9) + ($7)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 & $6;
  $14 = $13&255;
  HEAP8[$10>>0] = $14;
  $15 = $ix;
  $16 = (($15) + 1)|0;
  $ix = $16;
 }
 STACKTOP = sp;return;
}
function __ZL18Translator_RussianP10Translator($tr) {
 $tr = $tr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $0;
 __Z15SetupTranslatorP10TranslatorPKsPKh($1,10156,24940);
 $2 = $0;
 __ZL18SetCyrillicLettersP10Translator($2);
 $3 = $0;
 __ZL13SetLetterBitsP10TranslatoriPKc($3,6,24948);
 $4 = $0;
 $5 = ((($4)) + 24|0);
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = 1074;
 $7 = $0;
 $8 = ((($7)) + 24|0);
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = 1;
 $10 = $0;
 $11 = ((($10)) + 24|0);
 $12 = ((($11)) + 40|0);
 HEAP32[$12>>2] = 2;
 $13 = $0;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 5;
 $15 = $0;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = 32;
 $17 = $0;
 $18 = ((($17)) + 200|0);
 HEAP32[$18>>2] = 1032;
 $19 = $0;
 $20 = ((($19)) + 204|0);
 HEAP32[$20>>2] = 66;
 $21 = $0;
 $22 = ((($21)) + 264|0);
 HEAP32[$22>>2] = 1;
 $23 = $0;
 $24 = ((($23)) + 276|0);
 HEAP32[$24>>2] = 2;
 STACKTOP = sp;return;
}
function __Z22ProcessLanguageOptionsP16LANGUAGE_OPTIONS($langopts) {
 $langopts = $langopts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $langopts;
 $1 = $0;
 $2 = ((($1)) + 200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 220|0);
  HEAP32[$7>>2] = 46;
  $8 = $0;
  $9 = ((($8)) + 224|0);
  HEAP32[$9>>2] = 44;
 }
 $10 = $0;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 4;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $0;
 $16 = ((($15)) + 220|0);
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __Z14ReadTonePointsPcPi($string,$tone_pts) {
 $string = $string|0;
 $tone_pts = $tone_pts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $string;
 $1 = $tone_pts;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = ($2|0)<(12);
  if (!($3)) {
   break;
  }
  $4 = $ix;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  HEAP32[$6>>2] = -1;
  $7 = $ix;
  $8 = (($7) + 1)|0;
  $ix = $8;
 }
 $9 = $0;
 $10 = $1;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = $1;
 $16 = ((($15)) + 12|0);
 $17 = $1;
 $18 = ((($17)) + 16|0);
 $19 = $1;
 $20 = ((($19)) + 20|0);
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = $1;
 $24 = ((($23)) + 28|0);
 $25 = $1;
 $26 = ((($25)) + 32|0);
 $27 = $1;
 $28 = ((($27)) + 36|0);
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $14;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $18;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $20;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $22;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $24;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $26;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $28;
 (_sscanf($9,25084,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __Z10VoiceReseti($tone_only) {
 $tone_only = $tone_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $pk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tone_only;
 $1 = HEAP32[1124]|0;
 $2 = ((($1)) + 64|0);
 HEAP32[$2>>2] = 290816;
 $3 = HEAP32[1124]|0;
 $4 = ((($3)) + 68|0);
 HEAP32[$4>>2] = 4104;
 $5 = HEAP32[1124]|0;
 $6 = ((($5)) + 116|0);
 HEAP32[$6>>2] = 256;
 $7 = HEAP32[1124]|0;
 $8 = ((($7)) + 84|0);
 HEAP32[$8>>2] = 100;
 $9 = HEAP32[1124]|0;
 $10 = ((($9)) + 96|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[1124]|0;
 $12 = ((($11)) + 100|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[1124]|0;
 $14 = ((($13)) + 88|0);
 HEAP32[$14>>2] = 64;
 $15 = HEAP32[1124]|0;
 $16 = ((($15)) + 104|0);
 HEAP32[$16>>2] = 5;
 $17 = HEAP32[1124]|0;
 $18 = ((($17)) + 108|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[1124]|0;
 $20 = ((($19)) + 112|0);
 HEAP32[$20>>2] = 64;
 $21 = HEAP32[1124]|0;
 $22 = ((($21)) + 120|0);
 HEAP32[$22>>2] = 90;
 $23 = HEAP32[1124]|0;
 $24 = ((($23)) + 124|0);
 HEAP32[$24>>2] = 100;
 $25 = HEAP32[20098]|0;
 $26 = HEAP32[1124]|0;
 $27 = ((($26)) + 128|0);
 HEAP32[$27>>2] = $25;
 $28 = HEAP32[1124]|0;
 $29 = ((($28)) + 132|0);
 ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;HEAP32[$29+20>>2]=0|0;HEAP32[$29+24>>2]=0|0;HEAP32[$29+28>>2]=0|0;
 HEAP32[(74692)>>2] = 450;
 HEAP32[(74696)>>2] = 800;
 HEAP32[(74700)>>2] = 175;
 $30 = HEAP32[1124]|0;
 $31 = ((($30)) + 92|0);
 HEAP32[$31>>2] = 2;
 __Z10InitBreathv();
 $pk = 0;
 while(1) {
  $32 = $pk;
  $33 = ($32|0)<(9);
  if (!($33)) {
   break;
  }
  $34 = $pk;
  $35 = HEAP32[1124]|0;
  $36 = ((($35)) + 164|0);
  $37 = (($36) + ($34<<1)|0);
  HEAP16[$37>>1] = 256;
  $38 = $pk;
  $39 = (25114 + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41<<1;
  $43 = $42&65535;
  $44 = $pk;
  $45 = HEAP32[1124]|0;
  $46 = ((($45)) + 182|0);
  $47 = (($46) + ($44<<1)|0);
  HEAP16[$47>>1] = $43;
  $48 = $pk;
  $49 = (25123 + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51<<1;
  $53 = $52&65535;
  $54 = $pk;
  $55 = HEAP32[1124]|0;
  $56 = ((($55)) + 200|0);
  $57 = (($56) + ($54<<1)|0);
  HEAP16[$57>>1] = $53;
  $58 = $pk;
  $59 = HEAP32[1124]|0;
  $60 = ((($59)) + 292|0);
  $61 = (($60) + ($58<<2)|0);
  HEAP32[$61>>2] = 0;
  $62 = $pk;
  $63 = (4500 + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $pk;
  $66 = HEAP32[1124]|0;
  $67 = ((($66)) + 328|0);
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = $64;
  $69 = $pk;
  $70 = HEAP32[1124]|0;
  $71 = ((($70)) + 218|0);
  $72 = (($71) + ($69<<1)|0);
  HEAP16[$72>>1] = 0;
  $73 = $pk;
  $74 = (4536 + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75*22050)|0;
  $77 = HEAP32[20097]|0;
  $78 = (($76|0) / ($77|0))&-1;
  $79 = $pk;
  $80 = (77596 + ($79<<2)|0);
  HEAP32[$80>>2] = $78;
  $81 = $pk;
  $82 = (($81) + 1)|0;
  $pk = $82;
 }
 $83 = HEAP32[1124]|0;
 __ZL13SetToneAdjustP7voice_tPi($83,4436);
 $84 = HEAP32[1124]|0;
 $85 = ((($84)) + 72|0);
 HEAP32[$85>>2] = 256;
 $86 = HEAP32[1124]|0;
 $87 = ((($86)) + 76|0);
 HEAP32[$87>>2] = 238;
 $88 = HEAP32[1124]|0;
 $89 = ((($88)) + 80|0);
 HEAP32[$89>>2] = 232;
 $90 = $0;
 $91 = ($90|0)==(0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 HEAP32[19376] = 0;
 HEAP32[19042] = 0;
 (__Z15LoadMbrolaTablePKcS0_i(0,0,0)|0);
 STACKTOP = sp;return;
}
function __ZL13SetToneAdjustP7voice_tPi($voice,$tone_pts) {
 $voice = $voice|0;
 $tone_pts = $tone_pts|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $freq1 = 0, $freq2 = 0, $height1 = 0;
 var $height2 = 0, $ix = 0, $pt = 0, $rate = 0.0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $voice;
 $1 = $tone_pts;
 $freq1 = 0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $height1 = $4;
 $pt = 0;
 while(1) {
  $5 = $pt;
  $6 = ($5|0)<(12);
  if (!($6)) {
   break;
  }
  $7 = $pt;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(-1);
  if ($11) {
   $12 = $pt;
   $13 = $1;
   $14 = (($13) + ($12<<2)|0);
   HEAP32[$14>>2] = 8000;
   $15 = $pt;
   $16 = ($15|0)>(0);
   if ($16) {
    $17 = $pt;
    $18 = (($17) - 1)|0;
    $19 = $1;
    $20 = (($19) + ($18<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $pt;
    $23 = (($22) + 1)|0;
    $24 = $1;
    $25 = (($24) + ($23<<2)|0);
    HEAP32[$25>>2] = $21;
   }
  }
  $26 = $pt;
  $27 = $1;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29|0) / 8)&-1;
  $freq2 = $30;
  $31 = $pt;
  $32 = (($31) + 1)|0;
  $33 = $1;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $height2 = $35;
  $36 = $freq2;
  $37 = $freq1;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)>(0);
  L8: do {
   if ($39) {
    $40 = $height2;
    $41 = $height1;
    $42 = (($40) - ($41))|0;
    $43 = (+($42|0));
    $44 = $freq2;
    $45 = $freq1;
    $46 = (($44) - ($45))|0;
    $47 = (+($46|0));
    $48 = $43 / $47;
    $rate = $48;
    $49 = $freq1;
    $ix = $49;
    while(1) {
     $50 = $ix;
     $51 = $freq2;
     $52 = ($50|0)<($51|0);
     if (!($52)) {
      break L8;
     }
     $53 = $height1;
     $54 = $rate;
     $55 = $ix;
     $56 = $freq1;
     $57 = (($55) - ($56))|0;
     $58 = (+($57|0));
     $59 = $54 * $58;
     $60 = (~~(($59)));
     $61 = (($53) + ($60))|0;
     $y = $61;
     $62 = $y;
     $63 = ($62|0)>(255);
     $$ = $63 ? 255 : $61;
     $y = $$;
     $64 = $y;
     $65 = $64&255;
     $66 = $ix;
     $67 = $0;
     $68 = ((($67)) + 364|0);
     $69 = (($68) + ($66)|0);
     HEAP8[$69>>0] = $65;
     $70 = $ix;
     $71 = (($70) + 1)|0;
     $ix = $71;
    }
   }
  } while(0);
  $72 = $freq2;
  $freq1 = $72;
  $73 = $height2;
  $height1 = $73;
  $74 = $pt;
  $75 = (($74) + 2)|0;
  $pt = $75;
 }
 STACKTOP = sp;return;
}
function __Z9LoadVoicePKci($vname,$control) {
 $vname = $vname|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $age = 0, $alphabet = 0, $buf = 0, $conditional_rules = 0, $dict_min = 0, $f_voice = 0, $factor = 0.0, $ix = 0, $key = 0, $langix = 0, $langopts = 0, $language_name = 0, $language_set = 0, $language_type = 0, $len = 0, $n = 0, $name1 = 0, $name2 = 0, $names = 0, $new_dictionary = 0;
 var $new_translator = 0, $option_name = 0, $or$cond = 0, $or$cond10 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, $p = 0, $path_voices = 0, $phonemes_name = 0, $phonemes_set = 0, $pitch1 = 0, $pitch2 = 0, $priority = 0, $srate = 0, $stress_add = 0, $stress_add_set = 0, $stress_amps = 0, $stress_amps_set = 0, $stress_lengths = 0;
 var $stress_lengths_set = 0, $tone_data = 0, $tone_only = 0, $translator_name = 0, $value = 0, $value2 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer116 = 0, $vararg_buffer120 = 0, $vararg_buffer123 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer137 = 0;
 var $vararg_buffer140 = 0, $vararg_buffer143 = 0, $vararg_buffer146 = 0, $vararg_buffer149 = 0, $vararg_buffer152 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0;
 var $vararg_buffer77 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer91 = 0, $vararg_buffer96 = 0, $vararg_ptr103 = 0, $vararg_ptr11 = 0, $vararg_ptr119 = 0, $vararg_ptr12 = 0, $vararg_ptr126 = 0, $vararg_ptr127 = 0, $vararg_ptr136 = 0, $vararg_ptr16 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0;
 var $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr76 = 0, $vararg_ptr80 = 0, $vararg_ptr81 = 0, $vararg_ptr82 = 0, $vararg_ptr89 = 0, $vararg_ptr90 = 0, $vararg_ptr94 = 0, $vararg_ptr95 = 0, $vararg_ptr99 = 0, $vgender = 0, $voice_dir = 0, $voicename = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer152 = sp + 384|0;
 $vararg_buffer149 = sp + 376|0;
 $vararg_buffer146 = sp + 368|0;
 $vararg_buffer143 = sp + 360|0;
 $vararg_buffer140 = sp + 352|0;
 $vararg_buffer137 = sp + 344|0;
 $vararg_buffer133 = sp + 336|0;
 $vararg_buffer130 = sp + 328|0;
 $vararg_buffer128 = sp + 320|0;
 $vararg_buffer123 = sp + 304|0;
 $vararg_buffer120 = sp + 296|0;
 $vararg_buffer116 = sp + 288|0;
 $vararg_buffer113 = sp + 280|0;
 $vararg_buffer110 = sp + 272|0;
 $vararg_buffer107 = sp + 264|0;
 $vararg_buffer104 = sp + 256|0;
 $vararg_buffer100 = sp + 248|0;
 $vararg_buffer96 = sp + 240|0;
 $vararg_buffer91 = sp + 224|0;
 $vararg_buffer86 = sp + 208|0;
 $vararg_buffer83 = sp + 200|0;
 $vararg_buffer77 = sp + 184|0;
 $vararg_buffer73 = sp + 176|0;
 $vararg_buffer70 = sp + 168|0;
 $vararg_buffer67 = sp + 160|0;
 $vararg_buffer59 = sp + 136|0;
 $vararg_buffer55 = sp + 128|0;
 $vararg_buffer51 = sp + 120|0;
 $vararg_buffer48 = sp + 112|0;
 $vararg_buffer45 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer38 = sp + 88|0;
 $vararg_buffer34 = sp + 80|0;
 $vararg_buffer31 = sp + 72|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer20 = sp + 40|0;
 $vararg_buffer17 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $ix = sp + 628|0;
 $value = sp + 620|0;
 $value2 = sp + 616|0;
 $voicename = sp + 1744|0;
 $language_name = sp + 1704|0;
 $translator_name = sp + 1664|0;
 $new_dictionary = sp + 1624|0;
 $phonemes_name = sp + 1584|0;
 $option_name = sp + 1544|0;
 $buf = sp + 1348|0;
 $path_voices = sp + 1176|0;
 $dict_min = sp + 568|0;
 $stress_amps = sp + 536|0;
 $stress_lengths = sp + 504|0;
 $stress_add = sp + 472|0;
 $names = sp + 856|0;
 $name1 = sp + 816|0;
 $name2 = sp + 736|0;
 $pitch1 = sp + 464|0;
 $pitch2 = sp + 460|0;
 $priority = sp + 452|0;
 $age = sp + 448|0;
 $vgender = sp + 656|0;
 $tone_data = sp + 400|0;
 $srate = sp + 392|0;
 $1 = $vname;
 $2 = $control;
 $f_voice = 0;
 $langix = 0;
 $3 = $2;
 $4 = $3 & 2;
 $tone_only = $4;
 $language_set = 0;
 $phonemes_set = 0;
 $stress_amps_set = 0;
 $stress_lengths_set = 0;
 $stress_add_set = 0;
 $conditional_rules = 0;
 $langopts = 0;
 $new_translator = 0;
 HEAP32[$dict_min>>2] = 0;
 $5 = $1;
 __Z8strncpy0PcPKci($voicename,$5,40);
 $6 = $2;
 $7 = $6 & 16;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = $1;
   (_strcpy($buf,$9)|0);
   $10 = (__Z13GetFileLengthPKc($buf)|0);
   $11 = ($10|0)<=(0);
   if ($11) {
    $0 = 0;
    $599 = $0;
    STACKTOP = sp;return ($599|0);
   }
  } else {
   $12 = HEAP8[$voicename>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)==(0);
   if ($14) {
    (_strcpy($voicename,27486)|0);
   }
   HEAP32[$vararg_buffer>>2] = 118980;
   $vararg_ptr11 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 47;
   $vararg_ptr12 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = 47;
   (_sprintf($path_voices,25132,$vararg_buffer)|0);
   HEAP32[$vararg_buffer13>>2] = $path_voices;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $voicename;
   (_sprintf($buf,25145,$vararg_buffer13)|0);
   $15 = (__Z13GetFileLengthPKc($buf)|0);
   $16 = ($15|0)<=(0);
   if ($16) {
    $17 = HEAP8[$voicename>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)==(109);
    if ($19) {
     $20 = ((($voicename)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21 << 24 >> 24;
     $23 = ($22|0)==(98);
     if ($23) {
      $voice_dir = 25150;
      break;
     }
    }
    HEAP32[$vararg_buffer17>>2] = $voicename;
    (_sprintf($name2,25153,$vararg_buffer17)|0);
    $24 = HEAP32[1143]|0;
    $25 = (_strstr($24,$voicename)|0);
    $26 = ($25|0)!=(0|0);
    do {
     if ($26) {
      $voice_dir = 25272;
     } else {
      $27 = HEAP32[1144]|0;
      $28 = (_strstr($27,$voicename)|0);
      $29 = ($28|0)!=(0|0);
      if ($29) {
       $voice_dir = 25373;
       break;
      } else {
       $voice_dir = 25378;
       break;
      }
     }
    } while(0);
    $30 = $voice_dir;
    HEAP32[$vararg_buffer20>>2] = $path_voices;
    $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
    HEAP32[$vararg_ptr23>>2] = $30;
    $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
    HEAP32[$vararg_ptr24>>2] = 47;
    $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
    HEAP32[$vararg_ptr25>>2] = $voicename;
    (_sprintf($buf,25384,$vararg_buffer20)|0);
    $31 = (__Z13GetFileLengthPKc($buf)|0);
    $32 = ($31|0)<=(0);
    if ($32) {
     HEAP32[$vararg_buffer26>>2] = $path_voices;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = 47;
     $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
     HEAP32[$vararg_ptr30>>2] = $voicename;
     (_sprintf($buf,25393,$vararg_buffer26)|0);
    }
   }
  }
 } while(0);
 $33 = (_fopen($buf,25404)|0);
 $f_voice = $33;
 $language_type = 25406;
 $34 = $f_voice;
 $35 = ($34|0)==(0|0);
 do {
  if ($35) {
   $36 = $2;
   $37 = $36 & 3;
   $38 = ($37|0)!=(0);
   if ($38) {
    $0 = 0;
    $599 = $0;
    STACKTOP = sp;return ($599|0);
   } else {
    $39 = (__Z22SelectPhonemeTableNamePKc($voicename)|0);
    $40 = ($39|0)>=(0);
    if (!($40)) {
     break;
    }
    $language_type = $voicename;
    break;
   }
  }
 } while(0);
 $41 = $tone_only;
 $42 = ($41|0)==(0);
 $43 = HEAP32[19035]|0;
 $44 = ($43|0)!=(0|0);
 $or$cond = $42 & $44;
 if ($or$cond) {
  $45 = HEAP32[19035]|0;
  __Z16DeleteTranslatorP10Translator($45);
  HEAP32[19035] = 0;
 }
 $46 = $language_type;
 (_strcpy($translator_name,$46)|0);
 $47 = $language_type;
 (_strcpy($new_dictionary,$47)|0);
 $48 = $language_type;
 (_strcpy($phonemes_name,$48)|0);
 $49 = $tone_only;
 $50 = ($49|0)!=(0);
 if ($50) {
  $52 = (_strchr(121484,43)|0);
  $p = $52;
  $53 = ($52|0)!=(0|0);
  if ($53) {
   $54 = $p;
   HEAP8[$54>>0] = 0;
  }
  $55 = $1;
  $56 = ((($55)) + 3|0);
  HEAP32[$vararg_buffer31>>2] = $56;
  (_sprintf($buf,25409,$vararg_buffer31)|0);
  (_strcat(121484,$buf)|0);
  $57 = HEAP32[19035]|0;
  $langopts = $57;
 } else {
  HEAP32[1124] = 77656;
  $51 = $1;
  __Z8strncpy0PcPKci(121484,$51,40);
  HEAP8[121524] = 0;
  HEAP8[121564] = 0;
  HEAP32[(77640)>>2] = 121484;
  HEAP32[19408] = 121524;
  HEAP32[(77636)>>2] = 121564;
 }
 $58 = $tone_only;
 __Z10VoiceReseti($58);
 $59 = $tone_only;
 $60 = ($59|0)!=(0);
 if (!($60)) {
  (__Z22SelectPhonemeTableNamePKc($phonemes_name)|0);
 }
 L43: while(1) {
  $61 = $f_voice;
  $62 = ($61|0)!=(0|0);
  if (!($62)) {
   break;
  }
  $63 = $f_voice;
  $64 = (__ZL11fgets_stripPciP8_IO_FILE($buf,190,$63)|0);
  $65 = ($64|0)!=(0|0);
  if (!($65)) {
   break;
  }
  $p = $buf;
  while(1) {
   $66 = $p;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = ($68|0)!=(0);
   if (!($69)) {
    break;
   }
   $70 = $p;
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 << 24 >> 24;
   $73 = (_isspace($72)|0);
   $74 = ($73|0)!=(0);
   $75 = $74 ^ 1;
   if (!($75)) {
    break;
   }
   $76 = $p;
   $77 = ((($76)) + 1|0);
   $p = $77;
  }
  $78 = $p;
  $79 = ((($78)) + 1|0);
  $p = $79;
  HEAP8[$78>>0] = 0;
  $80 = HEAP8[$buf>>0]|0;
  $81 = $80 << 24 >> 24;
  $82 = ($81|0)==(0);
  if ($82) {
   continue;
  }
  $83 = (__Z10LookupMnemP8MNEM_TABPKc(4580,$buf)|0);
  $key = $83;
  $84 = $key;
  do {
   switch ($84|0) {
   case 2:  {
    $85 = $tone_only;
    $86 = ($85|0)!=(0);
    if ($86) {
     continue L43;
    }
    HEAP32[$priority>>2] = 5;
    HEAP8[$language_name>>0] = 0;
    $87 = $p;
    HEAP32[$vararg_buffer34>>2] = $language_name;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $priority;
    (_sscanf($87,25823,$vararg_buffer34)|0);
    $88 = (_strcmp($language_name,25829)|0);
    $89 = ($88|0)==(0);
    if ($89) {
     continue L43;
    }
    $90 = (_strlen($language_name)|0);
    $91 = (($90) + 2)|0;
    $len = $91;
    $92 = $len;
    $93 = $langix;
    $94 = (100 - ($93))|0;
    $95 = (($94) - 1)|0;
    $96 = ($92>>>0)<($95>>>0);
    if ($96) {
     $97 = HEAP32[$priority>>2]|0;
     $98 = $97&255;
     $99 = $langix;
     $100 = (121564 + ($99)|0);
     HEAP8[$100>>0] = $98;
     $101 = $langix;
     $102 = (($101) + 1)|0;
     $103 = (121564 + ($102)|0);
     (_strcpy($103,$language_name)|0);
     $104 = $len;
     $105 = $langix;
     $106 = (($105) + ($104))|0;
     $langix = $106;
    }
    $107 = $language_set;
    $108 = ($107|0)==(0);
    if (!($108)) {
     continue L43;
    }
    $109 = (_strtok($language_name,25837)|0);
    $language_type = $109;
    $language_set = 1;
    $110 = $language_type;
    (_strcpy($translator_name,$110)|0);
    $111 = $language_type;
    (_strcpy($new_dictionary,$111)|0);
    $112 = $language_type;
    (_strcpy($phonemes_name,$112)|0);
    (__Z22SelectPhonemeTableNamePKc($phonemes_name)|0);
    $113 = $new_translator;
    $114 = ($113|0)!=(0|0);
    if ($114) {
     $115 = $new_translator;
     __Z16DeleteTranslatorP10Translator($115);
    }
    $116 = (__Z16SelectTranslatorPKc($translator_name)|0);
    $new_translator = $116;
    $117 = $new_translator;
    $langopts = $117;
    $118 = HEAP32[1124]|0;
    $119 = ((($118)) + 40|0);
    __Z8strncpy0PcPKci($119,$language_name,20);
    continue L43;
    break;
   }
   case 1:  {
    $120 = $tone_only;
    $121 = ($120|0)==(0);
    if (!($121)) {
     continue L43;
    }
    while(1) {
     $122 = $p;
     $123 = HEAP8[$122>>0]|0;
     $124 = $123 << 24 >> 24;
     $125 = (_isspace($124)|0);
     $126 = ($125|0)!=(0);
     $127 = $p;
     if (!($126)) {
      break;
     }
     $128 = ((($127)) + 1|0);
     $p = $128;
    }
    __Z8strncpy0PcPKci(121524,$127,40);
    continue L43;
    break;
   }
   case 3:  {
    HEAP32[$age>>2] = 0;
    $129 = $p;
    HEAP32[$vararg_buffer38>>2] = $vgender;
    $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
    HEAP32[$vararg_ptr41>>2] = $age;
    (_sscanf($129,25823,$vararg_buffer38)|0);
    $130 = (__Z10LookupMnemP8MNEM_TABPKc(4404,$vgender)|0);
    $131 = $130&255;
    HEAP8[(77644)>>0] = $131;
    $132 = HEAP32[$age>>2]|0;
    $133 = $132&255;
    HEAP8[(77645)>>0] = $133;
    continue L43;
    break;
   }
   case 4:  {
    $134 = $tone_only;
    $135 = ($134|0)!=(0);
    if ($135) {
     continue L43;
    }
    $136 = $p;
    HEAP32[$vararg_buffer42>>2] = $translator_name;
    (_sscanf($136,25839,$vararg_buffer42)|0);
    $137 = $new_translator;
    $138 = ($137|0)!=(0|0);
    if ($138) {
     $139 = $new_translator;
     __Z16DeleteTranslatorP10Translator($139);
    }
    $140 = (__Z16SelectTranslatorPKc($translator_name)|0);
    $new_translator = $140;
    $141 = $new_translator;
    $langopts = $141;
    continue L43;
    break;
   }
   case 6:  {
    $142 = $p;
    HEAP32[$vararg_buffer45>>2] = $new_dictionary;
    (_sscanf($142,25839,$vararg_buffer45)|0);
    continue L43;
    break;
   }
   case 5:  {
    $143 = $p;
    HEAP32[$vararg_buffer48>>2] = $phonemes_name;
    (_sscanf($143,25839,$vararg_buffer48)|0);
    continue L43;
    break;
   }
   case 7:  {
    $144 = $p;
    __ZL12VoiceFormantPc($144);
    continue L43;
    break;
   }
   case 8:  {
    $145 = $p;
    HEAP32[$vararg_buffer51>>2] = $pitch1;
    $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
    HEAP32[$vararg_ptr54>>2] = $pitch2;
    $146 = (_sscanf($145,25857,$vararg_buffer51)|0);
    $n = $146;
    $147 = HEAP32[$pitch1>>2]|0;
    $148 = (($147) - 9)|0;
    $149 = $148 << 12;
    $150 = HEAP32[1124]|0;
    $151 = ((($150)) + 64|0);
    HEAP32[$151>>2] = $149;
    $152 = HEAP32[$pitch2>>2]|0;
    $153 = HEAP32[$pitch1>>2]|0;
    $154 = (($152) - ($153))|0;
    $155 = ($154*108)|0;
    $156 = HEAP32[1124]|0;
    $157 = ((($156)) + 68|0);
    HEAP32[$157>>2] = $155;
    $158 = HEAP32[$pitch1>>2]|0;
    $159 = (($158) - 82)|0;
    $160 = (+($159|0));
    $161 = $160 / 82.0;
    $factor = $161;
    $162 = $factor;
    $163 = $162 / 4.0;
    $164 = 1.0 + $163;
    $165 = $164 * 256.0;
    $166 = (~~(($165)));
    $167 = HEAP32[1124]|0;
    $168 = ((($167)) + 116|0);
    HEAP32[$168>>2] = $166;
    continue L43;
    break;
   }
   case 20:  {
    $169 = $p;
    $170 = (__ZL12Read8NumbersPcPi($169,$stress_lengths)|0);
    $stress_lengths_set = $170;
    continue L43;
    break;
   }
   case 21:  {
    $171 = $p;
    $172 = (__ZL12Read8NumbersPcPi($171,$stress_amps)|0);
    $stress_amps_set = $172;
    continue L43;
    break;
   }
   case 22:  {
    $173 = $p;
    $174 = (__ZL12Read8NumbersPcPi($173,$stress_add)|0);
    $stress_add_set = $174;
    continue L43;
    break;
   }
   case 18:  {
    $175 = $p;
    HEAP32[$vararg_buffer55>>2] = 76156;
    $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
    HEAP32[$vararg_ptr58>>2] = 76152;
    (_sscanf($175,25857,$vararg_buffer55)|0);
    $176 = HEAP32[19039]|0;
    $177 = $176 & 255;
    $178 = ($177|0)!=(0);
    if (!($178)) {
     continue L43;
    }
    $179 = HEAP32[19039]|0;
    $180 = $179 & 255;
    $181 = $langopts;
    $182 = ((($181)) + 248|0);
    HEAP32[$182>>2] = $180;
    continue L43;
    break;
   }
   case 19:  {
    $183 = $p;
    $184 = ((($names)) + 40|0);
    $185 = ((($names)) + 80|0);
    $186 = ((($names)) + 120|0);
    $187 = ((($names)) + 160|0);
    $188 = ((($names)) + 200|0);
    HEAP32[$vararg_buffer59>>2] = $names;
    $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
    HEAP32[$vararg_ptr62>>2] = $184;
    $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
    HEAP32[$vararg_ptr63>>2] = $185;
    $vararg_ptr64 = ((($vararg_buffer59)) + 12|0);
    HEAP32[$vararg_ptr64>>2] = $186;
    $vararg_ptr65 = ((($vararg_buffer59)) + 16|0);
    HEAP32[$vararg_ptr65>>2] = $187;
    $vararg_ptr66 = ((($vararg_buffer59)) + 20|0);
    HEAP32[$vararg_ptr66>>2] = $188;
    $189 = (_sscanf($183,25887,$vararg_buffer59)|0);
    $n = $189;
    $190 = $langopts;
    $191 = ((($190)) + 248|0);
    HEAP32[$191>>2] = 0;
    HEAP32[$ix>>2] = 0;
    while(1) {
     $192 = HEAP32[$ix>>2]|0;
     $193 = $n;
     $194 = ($192|0)<($193|0);
     if (!($194)) {
      continue L43;
     }
     $195 = HEAP32[$ix>>2]|0;
     $196 = (($names) + (($195*40)|0)|0);
     $197 = (_strcmp($196,25905)|0);
     $198 = ($197|0)==(0);
     do {
      if (!($198)) {
       $199 = HEAP32[$ix>>2]|0;
       $200 = (($names) + (($199*40)|0)|0);
       $201 = (__ZL10LookupTunePKc($200)|0);
       HEAP32[$value>>2] = $201;
       $202 = ($201|0)<(0);
       if ($202) {
        $203 = HEAP32[1295]|0;
        $204 = HEAP32[$ix>>2]|0;
        $205 = (($names) + (($204*40)|0)|0);
        HEAP32[$vararg_buffer67>>2] = $205;
        (_fprintf($203,25910,$vararg_buffer67)|0);
        break;
       } else {
        $206 = HEAP32[$value>>2]|0;
        $207 = $206&255;
        $208 = HEAP32[$ix>>2]|0;
        $209 = $langopts;
        $210 = ((($209)) + 252|0);
        $211 = (($210) + ($208)|0);
        HEAP8[$211>>0] = $207;
        break;
       }
      }
     } while(0);
     $212 = HEAP32[$ix>>2]|0;
     $213 = (($212) + 1)|0;
     HEAP32[$ix>>2] = $213;
    }
    break;
   }
   case 25: case 27: case 23:  {
    L98: while(1) {
     $214 = $p;
     $215 = HEAP8[$214>>0]|0;
     $216 = $215 << 24 >> 24;
     $217 = ($216|0)!=(0);
     if (!($217)) {
      break;
     }
     while(1) {
      $218 = $p;
      $219 = HEAP8[$218>>0]|0;
      $220 = $219 << 24 >> 24;
      $221 = (_isspace($220)|0);
      $222 = ($221|0)!=(0);
      if (!($222)) {
       break;
      }
      $223 = $p;
      $224 = ((($223)) + 1|0);
      $p = $224;
     }
     $n = -1;
     $225 = $p;
     $226 = (_atoi($225)|0);
     $n = $226;
     $227 = ($226|0)>(0);
     do {
      if ($227) {
       $228 = $p;
       $229 = ((($228)) + 1|0);
       $p = $229;
       $230 = $n;
       $231 = ($230|0)<(32);
       $232 = $key;
       if (!($231)) {
        $254 = ($232|0)==(27);
        $255 = $n;
        $256 = ($255|0)<(64);
        $or$cond4 = $254 & $256;
        if ($or$cond4) {
         $257 = $n;
         $258 = (($257) - 32)|0;
         $259 = 1 << $258;
         $260 = $langopts;
         $261 = ((($260)) + 200|0);
         $262 = HEAP32[$261>>2]|0;
         $263 = $262 | $259;
         HEAP32[$261>>2] = $263;
         break;
        } else {
         $264 = HEAP32[1295]|0;
         $265 = $n;
         HEAP32[$vararg_buffer70>>2] = $265;
         (_fprintf($264,25929,$vararg_buffer70)|0);
         break;
        }
       }
       $233 = ($232|0)==(23);
       if ($233) {
        $234 = $n;
        $235 = 1 << $234;
        $236 = $conditional_rules;
        $237 = $236 | $235;
        $conditional_rules = $237;
        break;
       }
       $238 = $key;
       $239 = ($238|0)==(27);
       if ($239) {
        $240 = $n;
        $241 = 1 << $240;
        $242 = $langopts;
        $243 = ((($242)) + 200|0);
        $244 = HEAP32[$243>>2]|0;
        $245 = $244 | $241;
        HEAP32[$243>>2] = $245;
        break;
       }
       $246 = $key;
       $247 = ($246|0)==(25);
       if ($247) {
        $248 = $n;
        $249 = 1 << $248;
        $250 = $langopts;
        $251 = ((($250)) + 12|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = $252 | $249;
        HEAP32[$251>>2] = $253;
       }
      }
     } while(0);
     while(1) {
      $266 = $p;
      $267 = HEAP8[$266>>0]|0;
      $268 = $267 << 24 >> 24;
      $269 = (_isalnum($268)|0);
      $270 = ($269|0)!=(0);
      if (!($270)) {
       continue L98;
      }
      $271 = $p;
      $272 = ((($271)) + 1|0);
      $p = $272;
     }
    }
    $273 = $langopts;
    __Z22ProcessLanguageOptionsP16LANGUAGE_OPTIONS($273);
    continue L43;
    break;
   }
   case 36:  {
    $274 = $phonemes_set;
    $275 = ($274|0)==(0);
    if ($275) {
     (__Z22SelectPhonemeTableNamePKc($phonemes_name)|0);
     $phonemes_set = 1;
    }
    $276 = $key;
    $277 = $p;
    __ZL18PhonemeReplacementiPc($276,$277);
    continue L43;
    break;
   }
   case 17:  {
    $278 = $p;
    $279 = $langopts;
    $280 = $langopts;
    $281 = ((($280)) + 4|0);
    HEAP32[$vararg_buffer73>>2] = $279;
    $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
    HEAP32[$vararg_ptr76>>2] = $281;
    (_sscanf($278,25857,$vararg_buffer73)|0);
    continue L43;
    break;
   }
   case 24:  {
    $282 = $p;
    $283 = $langopts;
    $284 = ((($283)) + 8|0);
    $285 = $langopts;
    $286 = ((($285)) + 12|0);
    $287 = $langopts;
    $288 = ((($287)) + 16|0);
    $289 = $langopts;
    $290 = ((($289)) + 20|0);
    HEAP32[$vararg_buffer77>>2] = $284;
    $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
    HEAP32[$vararg_ptr80>>2] = $286;
    $vararg_ptr81 = ((($vararg_buffer77)) + 8|0);
    HEAP32[$vararg_ptr81>>2] = $288;
    $vararg_ptr82 = ((($vararg_buffer77)) + 12|0);
    HEAP32[$vararg_ptr82>>2] = $290;
    (_sscanf($282,25960,$vararg_buffer77)|0);
    continue L43;
    break;
   }
   case 26:  {
    $291 = $p;
    HEAP32[$vararg_buffer83>>2] = $value;
    $292 = (_sscanf($291,25972,$vararg_buffer83)|0);
    $293 = ($292|0)==(1);
    $294 = HEAP32[$value>>2]|0;
    $295 = ($294|0)<(20);
    $or$cond6 = $293 & $295;
    if (!($or$cond6)) {
     continue L43;
    }
    $296 = HEAP32[$value>>2]|0;
    $297 = (2940 + ($296<<2)|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $new_translator;
    $300 = ((($299)) + 448|0);
    HEAP32[$300>>2] = $298;
    continue L43;
    break;
   }
   case 28:  {
    HEAP32[$value2>>2] = 0;
    $301 = $p;
    HEAP32[$vararg_buffer86>>2] = $option_name;
    $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
    HEAP32[$vararg_ptr89>>2] = $value;
    $vararg_ptr90 = ((($vararg_buffer86)) + 8|0);
    HEAP32[$vararg_ptr90>>2] = $value2;
    $302 = (_sscanf($301,25975,$vararg_buffer86)|0);
    $303 = ($302|0)>=(2);
    if ($303) {
     $304 = (__Z10LookupMnemP8MNEM_TABPKc(4940,$option_name)|0);
     HEAP32[$ix>>2] = $304;
     $305 = ($304|0)>=(0);
     if (!($305)) {
      label = 98;
     }
    } else {
     label = 98;
    }
    if ((label|0) == 98) {
     label = 0;
     $306 = $p;
     HEAP32[$vararg_buffer91>>2] = $ix;
     $vararg_ptr94 = ((($vararg_buffer91)) + 4|0);
     HEAP32[$vararg_ptr94>>2] = $value;
     $vararg_ptr95 = ((($vararg_buffer91)) + 8|0);
     HEAP32[$vararg_ptr95>>2] = $value2;
     $307 = (_sscanf($306,26001,$vararg_buffer91)|0);
     $308 = ($307|0)>=(2);
     $309 = HEAP32[$ix>>2]|0;
     $310 = ($309|0)<(21);
     $or$cond8 = $308 & $310;
     if (!($or$cond8)) {
      $321 = HEAP32[1295]|0;
      $322 = $p;
      HEAP32[$vararg_buffer96>>2] = $buf;
      $vararg_ptr99 = ((($vararg_buffer96)) + 4|0);
      HEAP32[$vararg_ptr99>>2] = $322;
      (_fprintf($321,26010,$vararg_buffer96)|0);
      continue L43;
     }
    }
    $311 = HEAP32[$value>>2]|0;
    $312 = HEAP32[$ix>>2]|0;
    $313 = $langopts;
    $314 = ((($313)) + 24|0);
    $315 = (($314) + ($312<<2)|0);
    HEAP32[$315>>2] = $311;
    $316 = HEAP32[$value2>>2]|0;
    $317 = HEAP32[$ix>>2]|0;
    $318 = $langopts;
    $319 = ((($318)) + 108|0);
    $320 = (($319) + ($317<<2)|0);
    HEAP32[$320>>2] = $316;
    continue L43;
    break;
   }
   case 9:  {
    HEAP32[$value>>2] = 0;
    $323 = HEAP32[1124]|0;
    $324 = ((($323)) + 100|0);
    HEAP32[$324>>2] = 0;
    $325 = $p;
    $326 = HEAP32[1124]|0;
    $327 = ((($326)) + 96|0);
    $328 = HEAP32[1124]|0;
    $329 = ((($328)) + 100|0);
    HEAP32[$vararg_buffer100>>2] = $327;
    $vararg_ptr103 = ((($vararg_buffer100)) + 4|0);
    HEAP32[$vararg_ptr103>>2] = $329;
    (_sscanf($325,25857,$vararg_buffer100)|0);
    continue L43;
    break;
   }
   case 10:  {
    $330 = $p;
    HEAP32[$vararg_buffer104>>2] = $value;
    $331 = (_sscanf($330,25972,$vararg_buffer104)|0);
    $332 = ($331|0)==(1);
    if (!($332)) {
     continue L43;
    }
    $333 = HEAP32[$value>>2]|0;
    $334 = $333<<5;
    $335 = HEAP32[1124]|0;
    $336 = ((($335)) + 88|0);
    HEAP32[$336>>2] = $334;
    continue L43;
    break;
   }
   case 11:  {
    $337 = $p;
    HEAP32[$vararg_buffer107>>2] = $value;
    $338 = (_sscanf($337,25972,$vararg_buffer107)|0);
    $339 = ($338|0)==(1);
    if (!($339)) {
     continue L43;
    }
    $340 = HEAP32[$value>>2]|0;
    $341 = HEAP32[1124]|0;
    $342 = ((($341)) + 92|0);
    HEAP32[$342>>2] = $340;
    continue L43;
    break;
   }
   case 12:  {
    $343 = $p;
    HEAP32[$vararg_buffer110>>2] = $value;
    $344 = (_sscanf($343,25972,$vararg_buffer110)|0);
    $345 = ($344|0)==(1);
    if (!($345)) {
     continue L43;
    }
    $346 = HEAP32[$value>>2]|0;
    $347 = ($346|0)>(4);
    if ($347) {
     $348 = HEAP32[1124]|0;
     $349 = ((($348)) + 108|0);
     HEAP32[$349>>2] = 1;
     HEAP32[$value>>2] = 4;
    }
    $350 = HEAP32[$value>>2]|0;
    $351 = (1 + ($350))|0;
    $352 = HEAP32[1124]|0;
    $353 = ((($352)) + 104|0);
    HEAP32[$353>>2] = $351;
    continue L43;
    break;
   }
   case 13:  {
    $354 = $p;
    __Z14ReadTonePointsPcPi($354,$tone_data);
    $355 = HEAP32[1124]|0;
    __ZL13SetToneAdjustP7voice_tPi($355,$tone_data);
    continue L43;
    break;
   }
   case 14:  {
    $356 = $p;
    HEAP32[$vararg_buffer113>>2] = $value;
    $357 = (_sscanf($356,25972,$vararg_buffer113)|0);
    $358 = ($357|0)==(1);
    if (!($358)) {
     continue L43;
    }
    $359 = HEAP32[$value>>2]|0;
    $360 = $359<<6;
    $361 = (($360|0) / 100)&-1;
    $362 = HEAP32[1124]|0;
    $363 = ((($362)) + 112|0);
    HEAP32[$363>>2] = $361;
    continue L43;
    break;
   }
   case 15:  {
    $364 = $p;
    $365 = HEAP32[1124]|0;
    $366 = ((($365)) + 292|0);
    $367 = ((($366)) + 4|0);
    $368 = (__ZL12Read8NumbersPcPi($364,$367)|0);
    $369 = HEAP32[1124]|0;
    $370 = ((($369)) + 292|0);
    HEAP32[$370>>2] = $368;
    HEAP32[$ix>>2] = 1;
    while(1) {
     $371 = HEAP32[$ix>>2]|0;
     $372 = ($371|0)<(8);
     if (!($372)) {
      continue L43;
     }
     $373 = HEAP32[$ix>>2]|0;
     $374 = (($373|0) % 2)&-1;
     $375 = ($374|0)!=(0);
     if ($375) {
      $376 = HEAP32[$ix>>2]|0;
      $377 = HEAP32[1124]|0;
      $378 = ((($377)) + 292|0);
      $379 = (($378) + ($376<<2)|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (0 - ($380))|0;
      $382 = HEAP32[$ix>>2]|0;
      $383 = HEAP32[1124]|0;
      $384 = ((($383)) + 292|0);
      $385 = (($384) + ($382<<2)|0);
      HEAP32[$385>>2] = $381;
     }
     $386 = HEAP32[$ix>>2]|0;
     $387 = (($386) + 1)|0;
     HEAP32[$ix>>2] = $387;
    }
    break;
   }
   case 16:  {
    $388 = $p;
    $389 = HEAP32[1124]|0;
    $390 = ((($389)) + 328|0);
    $391 = ((($390)) + 4|0);
    $392 = (__ZL12Read8NumbersPcPi($388,$391)|0);
    $393 = HEAP32[1124]|0;
    $394 = ((($393)) + 328|0);
    HEAP32[$394>>2] = $392;
    continue L43;
    break;
   }
   case 37:  {
    $395 = $p;
    $396 = HEAP32[1124]|0;
    $397 = ((($396)) + 120|0);
    $398 = HEAP32[1124]|0;
    $399 = ((($398)) + 124|0);
    HEAP32[$vararg_buffer116>>2] = $397;
    $vararg_ptr119 = ((($vararg_buffer116)) + 4|0);
    HEAP32[$vararg_ptr119>>2] = $399;
    $400 = (_sscanf($395,25857,$vararg_buffer116)|0);
    HEAP32[$value>>2] = $400;
    continue L43;
    break;
   }
   case 32:  {
    $401 = $p;
    $402 = HEAP32[1124]|0;
    $403 = ((($402)) + 84|0);
    HEAP32[$vararg_buffer120>>2] = $403;
    (_sscanf($401,25972,$vararg_buffer120)|0);
    continue L43;
    break;
   }
   case 29:  {
    HEAP32[$srate>>2] = 16000;
    HEAP8[$name2>>0] = 0;
    $404 = $p;
    HEAP32[$vararg_buffer123>>2] = $name1;
    $vararg_ptr126 = ((($vararg_buffer123)) + 4|0);
    HEAP32[$vararg_ptr126>>2] = $name2;
    $vararg_ptr127 = ((($vararg_buffer123)) + 8|0);
    HEAP32[$vararg_ptr127>>2] = $srate;
    (_sscanf($404,26035,$vararg_buffer123)|0);
    $405 = HEAP32[$srate>>2]|0;
    $406 = (__Z15LoadMbrolaTablePKcS0_i($name1,$name2,$405)|0);
    $407 = ($406|0)!=(0);
    if ($407) {
     $408 = HEAP32[1295]|0;
     (_fprintf($408,26044,$vararg_buffer128)|0);
    }
    $409 = HEAP32[$srate>>2]|0;
    $410 = HEAP32[1124]|0;
    $411 = ((($410)) + 128|0);
    HEAP32[$411>>2] = $409;
    continue L43;
    break;
   }
   case 30:  {
    $412 = HEAP32[1124]|0;
    $413 = ((($412)) + 132|0);
    HEAP32[$413>>2] = 1;
    $414 = $p;
    $415 = HEAP32[1124]|0;
    $416 = ((($415)) + 132|0);
    (__ZL12Read8NumbersPcPi($414,$416)|0);
    $417 = HEAP32[1124]|0;
    $418 = ((($417)) + 132|0);
    $419 = ((($418)) + 20|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = (($420) - 40)|0;
    HEAP32[$419>>2] = $421;
    continue L43;
    break;
   }
   case 31:  {
    $422 = $p;
    (__ZL12Read8NumbersPcPi($422,(74692))|0);
    __Z8SetSpeedi(3);
    continue L43;
    break;
   }
   case 33:  {
    $423 = $p;
    HEAP32[$vararg_buffer130>>2] = $dict_min;
    (_sscanf($423,25972,$vararg_buffer130)|0);
    continue L43;
    break;
   }
   case 34:  {
    HEAP8[$name2>>0] = 0;
    HEAP8[$name1>>0] = 0;
    $424 = $p;
    HEAP32[$vararg_buffer133>>2] = $name1;
    $vararg_ptr136 = ((($vararg_buffer133)) + 4|0);
    HEAP32[$vararg_ptr136>>2] = $name2;
    (_sscanf($424,26068,$vararg_buffer133)|0);
    $425 = (_strcmp($name1,26074)|0);
    $426 = ($425|0)==(0);
    if ($426) {
     $427 = $langopts;
     $428 = ((($427)) + 288|0);
     __Z8strncpy0PcPKci($428,$name2,8);
     continue L43;
    }
    $429 = (__Z16AlphabetFromNamePKc($name1)|0);
    $alphabet = $429;
    $430 = ($429|0)!=(0|0);
    if ($430) {
     $431 = $alphabet;
     $432 = ((($431)) + 4|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = $langopts;
     $435 = ((($434)) + 300|0);
     HEAP32[$435>>2] = $433;
     $436 = (__ZL13StringToWord2PKc($name2)|0);
     $437 = $langopts;
     $438 = ((($437)) + 304|0);
     HEAP32[$438>>2] = $436;
     continue L43;
    } else {
     $439 = HEAP32[1295]|0;
     HEAP32[$vararg_buffer137>>2] = $name1;
     (_fprintf($439,26080,$vararg_buffer137)|0);
     continue L43;
    }
    break;
   }
   case 35:  {
    $440 = $p;
    HEAP32[$vararg_buffer140>>2] = $name1;
    $441 = (_sscanf($440,25839,$vararg_buffer140)|0);
    $442 = ($441|0)==(1);
    if (!($442)) {
     continue L43;
    }
    $443 = (__Z10LookupMnemP8MNEM_TABPKc(4964,$name1)|0);
    HEAP32[$ix>>2] = $443;
    $444 = ($443|0)>(0);
    if ($444) {
     $445 = HEAP32[$ix>>2]|0;
     $446 = 1 << $445;
     $447 = $langopts;
     $448 = ((($447)) + 320|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = $449 | $446;
     HEAP32[$448>>2] = $450;
     continue L43;
    } else {
     $451 = HEAP32[1295]|0;
     HEAP32[$vararg_buffer143>>2] = $name1;
     (_fprintf($451,26122,$vararg_buffer143)|0);
     continue L43;
    }
    break;
   }
   default: {
    $452 = $key;
    $453 = $452 & 65280;
    $454 = ($453|0)==(256);
    if ($454) {
     $455 = $p;
     $456 = $key;
     $457 = $456 & 255;
     $458 = $langopts;
     $459 = ((($458)) + 24|0);
     $460 = (($459) + ($457<<2)|0);
     HEAP32[$vararg_buffer146>>2] = $460;
     (_sscanf($455,25972,$vararg_buffer146)|0);
     continue L43;
    } else {
     $461 = HEAP32[1295]|0;
     HEAP32[$vararg_buffer149>>2] = $buf;
     (_fprintf($461,26160,$vararg_buffer149)|0);
     continue L43;
    }
   }
   }
  } while(0);
 }
 $462 = $f_voice;
 $463 = ($462|0)!=(0|0);
 if ($463) {
  $464 = $f_voice;
  (_fclose($464)|0);
 }
 $465 = $new_translator;
 $466 = ($465|0)!=(0|0);
 $467 = $tone_only;
 $468 = ($467|0)!=(0);
 $or$cond10 = $466 | $468;
 if (!($or$cond10)) {
  $469 = (__Z16SelectTranslatorPKc($translator_name)|0);
  $new_translator = $469;
 }
 __Z8SetSpeedi(3);
 HEAP32[$ix>>2] = 0;
 while(1) {
  $470 = HEAP32[$ix>>2]|0;
  $471 = ($470|0)<(9);
  if (!($471)) {
   break;
  }
  $472 = HEAP32[$ix>>2]|0;
  $473 = HEAP32[1124]|0;
  $474 = ((($473)) + 164|0);
  $475 = (($474) + ($472<<1)|0);
  $476 = HEAP16[$475>>1]|0;
  $477 = HEAP32[$ix>>2]|0;
  $478 = HEAP32[1124]|0;
  $479 = ((($478)) + 236|0);
  $480 = (($479) + ($477<<1)|0);
  HEAP16[$480>>1] = $476;
  $481 = HEAP32[$ix>>2]|0;
  $482 = HEAP32[1124]|0;
  $483 = ((($482)) + 182|0);
  $484 = (($483) + ($481<<1)|0);
  $485 = HEAP16[$484>>1]|0;
  $486 = HEAP32[$ix>>2]|0;
  $487 = HEAP32[1124]|0;
  $488 = ((($487)) + 254|0);
  $489 = (($488) + ($486<<1)|0);
  HEAP16[$489>>1] = $485;
  $490 = HEAP32[$ix>>2]|0;
  $491 = HEAP32[1124]|0;
  $492 = ((($491)) + 200|0);
  $493 = (($492) + ($490<<1)|0);
  $494 = HEAP16[$493>>1]|0;
  $495 = HEAP32[$ix>>2]|0;
  $496 = HEAP32[1124]|0;
  $497 = ((($496)) + 272|0);
  $498 = (($497) + ($495<<1)|0);
  HEAP16[$498>>1] = $494;
  $499 = HEAP32[$ix>>2]|0;
  $500 = (($499) + 1)|0;
  HEAP32[$ix>>2] = $500;
 }
 $501 = $tone_only;
 $502 = ($501|0)!=(0);
 do {
  if ($502) {
   $503 = HEAP32[19035]|0;
   $new_translator = $503;
  } else {
   $504 = (__Z22SelectPhonemeTableNamePKc($phonemes_name)|0);
   HEAP32[$ix>>2] = $504;
   $505 = ($504|0)<(0);
   if ($505) {
    $506 = HEAP32[1295]|0;
    HEAP32[$vararg_buffer152>>2] = $phonemes_name;
    (_fprintf($506,26185,$vararg_buffer152)|0);
    HEAP32[$ix>>2] = 0;
   }
   $507 = HEAP32[$ix>>2]|0;
   $508 = HEAP32[1124]|0;
   $509 = ((($508)) + 60|0);
   HEAP32[$509>>2] = $507;
   $510 = HEAP32[$ix>>2]|0;
   $511 = $new_translator;
   $512 = ((($511)) + 404|0);
   HEAP32[$512>>2] = $510;
   $513 = HEAP32[$dict_min>>2]|0;
   $514 = $new_translator;
   $515 = ((($514)) + 444|0);
   HEAP32[$515>>2] = $513;
   $516 = $new_translator;
   $517 = $2;
   $518 = $517 & 4;
   (__Z14LoadDictionaryP10TranslatorPKci($516,$new_dictionary,$518)|0);
   $519 = HEAP8[119220]|0;
   $520 = $519 << 24 >> 24;
   $521 = ($520|0)==(0);
   if (!($521)) {
    $522 = $conditional_rules;
    $523 = $new_translator;
    $524 = ((($523)) + 440|0);
    HEAP32[$524>>2] = $522;
    $525 = $langix;
    $526 = (121564 + ($525)|0);
    HEAP8[$526>>0] = 0;
    break;
   }
   $0 = 0;
   $599 = $0;
   STACKTOP = sp;return ($599|0);
  }
 } while(0);
 $527 = $new_translator;
 $langopts = $527;
 $528 = $langopts;
 $529 = ((($528)) + 24|0);
 $530 = ((($529)) + 24|0);
 $531 = HEAP32[$530>>2]|0;
 HEAP32[$value>>2] = $531;
 $532 = ($531|0)!=(0);
 if ($532) {
  $533 = $new_translator;
  $534 = HEAP32[$value>>2]|0;
  __Z13SetLengthModsP10Translatori($533,$534);
 }
 $535 = HEAP32[1124]|0;
 $536 = ((($535)) + 200|0);
 $537 = HEAP16[$536>>1]|0;
 $538 = $537 << 16 >> 16;
 $539 = ($538*105)|0;
 $540 = (($539|0) / 100)&-1;
 $541 = $540&65535;
 $542 = HEAP32[1124]|0;
 $543 = ((($542)) + 200|0);
 HEAP16[$543>>1] = $541;
 $544 = $tone_only;
 $545 = ($544|0)!=(0);
 if (!($545)) {
  $546 = $new_translator;
  HEAP32[19035] = $546;
 }
 HEAP32[$ix>>2] = 0;
 while(1) {
  $547 = HEAP32[$ix>>2]|0;
  $548 = $stress_lengths_set;
  $549 = ($547|0)<($548|0);
  if (!($549)) {
   break;
  }
  $550 = HEAP32[$ix>>2]|0;
  $551 = (($stress_lengths) + ($550<<2)|0);
  $552 = HEAP32[$551>>2]|0;
  $553 = $552&65535;
  $554 = HEAP32[$ix>>2]|0;
  $555 = HEAP32[19035]|0;
  $556 = ((($555)) + 424|0);
  $557 = (($556) + ($554<<1)|0);
  HEAP16[$557>>1] = $553;
  $558 = HEAP32[$ix>>2]|0;
  $559 = (($558) + 1)|0;
  HEAP32[$ix>>2] = $559;
 }
 HEAP32[$ix>>2] = 0;
 while(1) {
  $560 = HEAP32[$ix>>2]|0;
  $561 = $stress_add_set;
  $562 = ($560|0)<($561|0);
  if (!($562)) {
   break;
  }
  $563 = HEAP32[$ix>>2]|0;
  $564 = (($stress_add) + ($563<<2)|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = HEAP32[$ix>>2]|0;
  $567 = HEAP32[19035]|0;
  $568 = ((($567)) + 424|0);
  $569 = (($568) + ($566<<1)|0);
  $570 = HEAP16[$569>>1]|0;
  $571 = $570 << 16 >> 16;
  $572 = (($571) + ($565))|0;
  $573 = $572&65535;
  HEAP16[$569>>1] = $573;
  $574 = HEAP32[$ix>>2]|0;
  $575 = (($574) + 1)|0;
  HEAP32[$ix>>2] = $575;
 }
 HEAP32[$ix>>2] = 0;
 while(1) {
  $576 = HEAP32[$ix>>2]|0;
  $577 = $stress_amps_set;
  $578 = ($576|0)<($577|0);
  if (!($578)) {
   break;
  }
  $579 = HEAP32[$ix>>2]|0;
  $580 = (($stress_amps) + ($579<<2)|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = $581&255;
  $583 = HEAP32[$ix>>2]|0;
  $584 = HEAP32[19035]|0;
  $585 = ((($584)) + 408|0);
  $586 = (($585) + ($583)|0);
  HEAP8[$586>>0] = $582;
  $587 = HEAP32[$ix>>2]|0;
  $588 = (($stress_amps) + ($587<<2)|0);
  $589 = HEAP32[$588>>2]|0;
  $590 = (($589) - 1)|0;
  $591 = $590&255;
  $592 = HEAP32[$ix>>2]|0;
  $593 = HEAP32[19035]|0;
  $594 = ((($593)) + 416|0);
  $595 = (($594) + ($592)|0);
  HEAP8[$595>>0] = $591;
  $596 = HEAP32[$ix>>2]|0;
  $597 = (($596) + 1)|0;
  HEAP32[$ix>>2] = $597;
 }
 $598 = HEAP32[1124]|0;
 $0 = $598;
 $599 = $0;
 STACKTOP = sp;return ($599|0);
}
function __ZL11fgets_stripPciP8_IO_FILE($buf,$size,$f_in) {
 $buf = $buf|0;
 $size = $size|0;
 $f_in = $f_in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $f_in;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_fgets($4,$5,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $9 = $1;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)==(35);
 $13 = $1;
 if ($12) {
  HEAP8[$13>>0] = 0;
  $14 = $1;
  $0 = $14;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $15 = (_strlen($13)|0);
 $len = $15;
 while(1) {
  $16 = $len;
  $17 = (($16) + -1)|0;
  $len = $17;
  $18 = ($17|0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $len;
  $20 = $1;
  $21 = (($20) + ($19)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = (_isspace($23)|0);
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $len;
  $27 = $1;
  $28 = (($27) + ($26)|0);
  HEAP8[$28>>0] = 0;
 }
 $29 = $1;
 $30 = (_strstr($29,25413)|0);
 $p = $30;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $p;
  HEAP8[$32>>0] = 0;
 }
 $33 = $1;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZL12VoiceFormantPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $formant = 0, $freq = 0, $freqadd = 0, $height = 0, $ix = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $width = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $formant = sp + 36|0;
 $freq = sp + 32|0;
 $height = sp + 28|0;
 $width = sp + 24|0;
 $freqadd = sp + 20|0;
 $0 = $p;
 HEAP32[$freq>>2] = 100;
 HEAP32[$height>>2] = 100;
 HEAP32[$width>>2] = 100;
 HEAP32[$freqadd>>2] = 0;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $formant;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $freq;
 $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr3>>2] = $height;
 $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr4>>2] = $width;
 $vararg_ptr5 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr5>>2] = $freqadd;
 $2 = (_sscanf($1,25842,$vararg_buffer)|0);
 $ix = $2;
 $3 = $ix;
 $4 = ($3|0)<(2);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$formant>>2]|0;
 $6 = ($5|0)<(0);
 $7 = HEAP32[$formant>>2]|0;
 $8 = ($7|0)>(8);
 $or$cond = $6 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$freq>>2]|0;
 $10 = ($9|0)>=(0);
 if ($10) {
  $11 = HEAP32[$freq>>2]|0;
  $12 = (+($11|0));
  $13 = $12 * 2.5600100000000001;
  $14 = (~~(($13)));
  $15 = $14&65535;
  $16 = HEAP32[$formant>>2]|0;
  $17 = HEAP32[1124]|0;
  $18 = ((($17)) + 164|0);
  $19 = (($18) + ($16<<1)|0);
  HEAP16[$19>>1] = $15;
 }
 $20 = HEAP32[$height>>2]|0;
 $21 = ($20|0)>=(0);
 if ($21) {
  $22 = HEAP32[$height>>2]|0;
  $23 = (+($22|0));
  $24 = $23 * 2.5600100000000001;
  $25 = (~~(($24)));
  $26 = $25&65535;
  $27 = HEAP32[$formant>>2]|0;
  $28 = HEAP32[1124]|0;
  $29 = ((($28)) + 182|0);
  $30 = (($29) + ($27<<1)|0);
  HEAP16[$30>>1] = $26;
 }
 $31 = HEAP32[$width>>2]|0;
 $32 = ($31|0)>=(0);
 if ($32) {
  $33 = HEAP32[$width>>2]|0;
  $34 = (+($33|0));
  $35 = $34 * 2.5600100000000001;
  $36 = (~~(($35)));
  $37 = $36&65535;
  $38 = HEAP32[$formant>>2]|0;
  $39 = HEAP32[1124]|0;
  $40 = ((($39)) + 200|0);
  $41 = (($40) + ($38<<1)|0);
  HEAP16[$41>>1] = $37;
 }
 $42 = HEAP32[$freqadd>>2]|0;
 $43 = $42&65535;
 $44 = HEAP32[$formant>>2]|0;
 $45 = HEAP32[1124]|0;
 $46 = ((($45)) + 218|0);
 $47 = (($46) + ($44<<1)|0);
 HEAP16[$47>>1] = $43;
 STACKTOP = sp;return;
}
function __ZL12Read8NumbersPcPi($data_in,$data) {
 $data_in = $data_in|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $data_in;
 $1 = $data;
 $2 = $1;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $3 = $0;
 $4 = $1;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = $1;
 $12 = ((($11)) + 16|0);
 $13 = $1;
 $14 = ((($13)) + 20|0);
 $15 = $1;
 $16 = ((($15)) + 24|0);
 $17 = $1;
 $18 = ((($17)) + 28|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $12;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $14;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $16;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $18;
 $19 = (_sscanf($3,25863,$vararg_buffer)|0);
 STACKTOP = sp;return ($19|0);
}
function __ZL10LookupTunePKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[10353]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $1;
  $6 = $ix;
  $7 = HEAP32[10354]|0;
  $8 = (($7) + (($6*68)|0)|0);
  $9 = (_strcmp($5,$8)|0);
  $10 = ($9|0)==(0);
  $11 = $ix;
  if ($10) {
   label = 4;
   break;
  }
  $12 = (($11) + 1)|0;
  $ix = $12;
 }
 if ((label|0) == 4) {
  $0 = $11;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZL18PhonemeReplacementiPc($type,$p) {
 $type = $type|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $n = 0, $or$cond = 0, $phon = 0, $phon_string1 = 0, $phon_string2 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $flags = sp + 12|0;
 $phon_string1 = sp + 44|0;
 $phon_string2 = sp + 32|0;
 $0 = $type;
 $1 = $p;
 HEAP32[$flags>>2] = 0;
 (_strcpy($phon_string2,25905)|0);
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $flags;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $phon_string1;
 $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr3>>2] = $phon_string2;
 $3 = (_sscanf($2,25951,$vararg_buffer)|0);
 $n = $3;
 $4 = $n;
 $5 = ($4|0)<(2);
 $6 = HEAP32[19376]|0;
 $7 = ($6|0)>=(60);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = (__Z19LookupPhonemeStringPKc($phon_string1)|0);
 $phon = $8;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $phon;
 $11 = $10&255;
 $12 = HEAP32[19376]|0;
 $13 = (120244 + (($12*3)|0)|0);
 HEAP8[$13>>0] = $11;
 $14 = (__Z19LookupPhonemeStringPKc($phon_string2)|0);
 $15 = $14&255;
 $16 = HEAP32[19376]|0;
 $17 = (120244 + (($16*3)|0)|0);
 $18 = ((($17)) + 1|0);
 HEAP8[$18>>0] = $15;
 $19 = HEAP32[$flags>>2]|0;
 $20 = $19&255;
 $21 = HEAP32[19376]|0;
 $22 = (($21) + 1)|0;
 HEAP32[19376] = $22;
 $23 = (120244 + (($21*3)|0)|0);
 $24 = ((($23)) + 2|0);
 HEAP8[$24>>0] = $20;
 STACKTOP = sp;return;
}
function __ZL13StringToWord2PKc($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $ix = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $value = 0;
 $ix = 0;
 while(1) {
  $1 = $ix;
  $2 = ($1|0)<(4);
  if ($2) {
   $3 = $ix;
   $4 = $0;
   $5 = (($4) + ($3)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $c = $7;
   $8 = ($7|0)!=(0);
   $16 = $8;
  } else {
   $16 = 0;
  }
  $9 = $value;
  if (!($16)) {
   break;
  }
  $10 = $9 << 8;
  $11 = $c;
  $12 = $11 & 255;
  $13 = $10 | $12;
  $value = $13;
  $14 = $ix;
  $15 = (($14) + 1)|0;
  $ix = $15;
 }
 STACKTOP = sp;return ($9|0);
}
function __Z16LoadVoiceVariantPKci($vname,$variant_num) {
 $vname = $vname|0;
 $variant_num = $variant_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $v = 0, $variant_name = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $1 = $vname;
 $2 = $variant_num;
 $3 = $1;
 __Z8strncpy0PcPKci($buf,$3,60);
 $4 = $2;
 $5 = (__ZL23ExtractVoiceVariantNamePcii($buf,$4,1)|0);
 $variant_name = $5;
 $6 = (__Z9LoadVoicePKci($buf,0)|0);
 $v = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 $8 = $variant_name;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $variant_name;
  $13 = (__Z9LoadVoicePKci($12,2)|0);
  $v = $13;
 }
 $14 = $v;
 $0 = $14;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __ZL23ExtractVoiceVariantNamePcii($vname,$variant_num,$add_dir) {
 $vname = $vname|0;
 $variant_num = $variant_num|0;
 $add_dir = $add_dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $variant_prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $variant_prefix = sp + 48|0;
 $0 = $vname;
 $1 = $variant_num;
 $2 = $add_dir;
 HEAP8[121664] = 0;
 HEAP32[$vararg_buffer>>2] = 47;
 (_sprintf($variant_prefix,26214,$vararg_buffer)|0);
 $3 = $2;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP8[$variant_prefix>>0] = 0;
 }
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $0;
   $8 = (_strchr($7,43)|0);
   $p = $8;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $1 = 0;
    $10 = $p;
    $11 = ((($10)) + 1|0);
    $p = $11;
    HEAP8[$10>>0] = 0;
    $12 = $p;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (__Z9IsDigit09j($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     $17 = $p;
     $18 = (_atoi($17)|0);
     $1 = $18;
     break;
    } else {
     $19 = $p;
     HEAP32[$vararg_buffer1>>2] = $variant_prefix;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $19;
     (_sprintf(121664,25145,$vararg_buffer1)|0);
     break;
    }
   }
  }
 } while(0);
 $20 = $1;
 $21 = ($20|0)>(0);
 if (!($21)) {
  STACKTOP = sp;return (121664|0);
 }
 $22 = $1;
 $23 = ($22|0)<(10);
 $24 = $1;
 if ($23) {
  HEAP32[$vararg_buffer5>>2] = $variant_prefix;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $24;
  (_sprintf(121664,26219,$vararg_buffer5)|0);
  STACKTOP = sp;return (121664|0);
 } else {
  $25 = (($24) - 10)|0;
  HEAP32[$vararg_buffer9>>2] = $variant_prefix;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $25;
  (_sprintf(121664,26225,$vararg_buffer9)|0);
  STACKTOP = sp;return (121664|0);
 }
 return (0)|0;
}
function __Z17SelectVoiceByNamePP12espeak_VOICEPKc($voices,$name2) {
 $voices = $voices|0;
 $name2 = $name2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $id = 0, $ix = 0, $last_part = 0, $last_part_len = 0, $match_fname = 0, $match_fname2 = 0, $match_name = 0, $name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $variant_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $last_part = sp + 88|0;
 $name = sp + 48|0;
 $1 = $voices;
 $2 = $name2;
 $match_fname = -1;
 $match_fname2 = -1;
 $match_name = -1;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[19755]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   (_espeak_ListVoices(0)|0);
  }
  $1 = 79024;
 }
 $7 = $2;
 __Z8strncpy0PcPKci($name,$7,40);
 $8 = (_strchr($name,43)|0);
 $variant_name = $8;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $variant_name;
  HEAP8[$10>>0] = 0;
  $11 = $variant_name;
  $12 = ((($11)) + 1|0);
  $variant_name = $12;
 }
 HEAP32[$vararg_buffer>>2] = 47;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $name;
 (_sprintf($last_part,26281,$vararg_buffer)|0);
 $13 = (_strlen($last_part)|0);
 $last_part_len = $13;
 $ix = 0;
 while(1) {
  $14 = $ix;
  $15 = $1;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $ix;
  $20 = $1;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strcmp($name,$23)|0);
  $25 = ($24|0)==(0);
  $26 = $ix;
  if ($25) {
   label = 10;
   break;
  }
  $27 = $1;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $id = $31;
  $32 = $id;
  $33 = (_strcmp($name,$32)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   $35 = $ix;
   $match_fname = $35;
  } else {
   $36 = $id;
   $37 = (_strlen($36)|0);
   $38 = $last_part_len;
   $39 = (($37) - ($38))|0;
   $40 = $id;
   $41 = (($40) + ($39)|0);
   $42 = (_strcmp($last_part,$41)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $ix;
    $match_fname2 = $44;
   }
  }
  $45 = $ix;
  $46 = (($45) + 1)|0;
  $ix = $46;
 }
 if ((label|0) == 10) {
  $match_name = $26;
 }
 $47 = $match_name;
 $48 = ($47|0)<(0);
 if ($48) {
  $49 = $match_fname;
  $match_name = $49;
  $50 = $match_name;
  $51 = ($50|0)<(0);
  if ($51) {
   $52 = $match_fname2;
   $match_name = $52;
  }
 }
 $53 = $match_name;
 $54 = ($53|0)<(0);
 if ($54) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 } else {
  $55 = $match_name;
  $56 = $1;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $0 = $58;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _espeak_ListVoices($voice_spec) {
 $voice_spec = $voice_spec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $j = 0, $path_voices = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $path_voices = sp + 24|0;
 $0 = $voice_spec;
 __Z13FreeVoiceListv();
 HEAP32[$vararg_buffer>>2] = 118980;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 47;
 (_sprintf($path_voices,26231,$vararg_buffer)|0);
 $1 = (_strlen($path_voices)|0);
 $2 = (($1) + 1)|0;
 HEAP32[20006] = $2;
 __ZL9GetVoicesPKc($path_voices);
 $3 = HEAP32[19755]|0;
 $4 = (79024 + ($3<<2)|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[20007]|0;
 $6 = HEAP32[19755]|0;
 $7 = (($6) + 1)|0;
 $8 = $7<<2;
 $9 = (_realloc($5,$8)|0);
 HEAP32[20007] = $9;
 $10 = HEAP32[19755]|0;
 _qsort(79024,$10,4,26);
 $11 = $0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $0;
  $14 = HEAP32[20007]|0;
  (__ZL14SetVoiceScoresP12espeak_VOICEPS0_i($13,$14,1)|0);
  $51 = HEAP32[20007]|0;
  STACKTOP = sp;return ($51|0);
 }
 $j = 0;
 $ix = 0;
 while(1) {
  $15 = $ix;
  $16 = (79024 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $v = $17;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $v;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $v;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 1|0);
   $29 = (_strcmp($28,25829)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $v;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (_memcmp($33,26271,3)|0);
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $v;
     $37 = ((($36)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (_memcmp($38,26275,5)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      $41 = $v;
      $42 = $j;
      $43 = (($42) + 1)|0;
      $j = $43;
      $44 = HEAP32[20007]|0;
      $45 = (($44) + ($42<<2)|0);
      HEAP32[$45>>2] = $41;
     }
    }
   }
  }
  $46 = $ix;
  $47 = (($46) + 1)|0;
  $ix = $47;
 }
 $48 = $j;
 $49 = HEAP32[20007]|0;
 $50 = (($49) + ($48<<2)|0);
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[20007]|0;
 STACKTOP = sp;return ($51|0);
}
function __Z13FreeVoiceListv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ix = 0;
 while(1) {
  $0 = $ix;
  $1 = HEAP32[19755]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = $ix;
  $4 = (79024 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $ix;
   $8 = (79024 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   _free($9);
   $10 = $ix;
   $11 = (79024 + ($10<<2)|0);
   HEAP32[$11>>2] = 0;
  }
  $12 = $ix;
  $13 = (($12) + 1)|0;
  $ix = $13;
 }
 HEAP32[19755] = 0;
 STACKTOP = sp;return;
}
function __ZL9GetVoicesPKc($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dir = 0, $ent = 0;
 var $f_voice = 0, $fname = 0, $ftype = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $voice_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fname = sp + 36|0;
 $0 = $path;
 $1 = $0;
 $2 = (_opendir($1)|0);
 $dir = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = $dir;
  $5 = (_readdir($4)|0);
  $ent = $5;
  $6 = ($5|0)==(0|0);
  $7 = HEAP32[19755]|0;
  $8 = ($7|0)>=(248);
  $or$cond = $6 | $8;
  if ($or$cond) {
   break;
  }
  $9 = $ent;
  $10 = ((($9)) + 11|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(46);
  if ($13) {
   continue;
  }
  $14 = $0;
  $15 = $ent;
  $16 = ((($15)) + 11|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 47;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $16;
  (_sprintf($fname,26242,$vararg_buffer)|0);
  $17 = (__Z13GetFileLengthPKc($fname)|0);
  $ftype = $17;
  $18 = $ftype;
  $19 = ($18|0)==(-2);
  if ($19) {
   __ZL9GetVoicesPKc($fname);
   continue;
  }
  $20 = $ftype;
  $21 = ($20|0)>(0);
  if (!($21)) {
   continue;
  }
  $22 = (_fopen($fname,25404)|0);
  $f_voice = $22;
  $23 = ($22|0)==(0|0);
  if ($23) {
   continue;
  }
  $24 = $f_voice;
  $25 = HEAP32[20006]|0;
  $26 = (($fname) + ($25)|0);
  $27 = $ent;
  $28 = ((($27)) + 11|0);
  $29 = (__ZL13ReadVoiceFileP8_IO_FILEPKcS2_($24,$26,$28)|0);
  $voice_data = $29;
  $30 = $f_voice;
  (_fclose($30)|0);
  $31 = $voice_data;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   continue;
  }
  $33 = $voice_data;
  $34 = HEAP32[19755]|0;
  $35 = (($34) + 1)|0;
  HEAP32[19755] = $35;
  $36 = (79024 + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
 }
 $37 = $dir;
 (_closedir($37)|0);
 STACKTOP = sp;return;
}
function __ZL13ReadVoiceFileP8_IO_FILEPKcS2_($f_in,$fname,$leafname) {
 $f_in = $f_in|0;
 $fname = $fname|0;
 $leafname = $leafname|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $age = 0, $gender = 0, $langix = 0, $languages = 0, $len = 0, $linebuf = 0, $n_languages = 0;
 var $n_variants = 0, $p = 0, $priority = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vgender = 0, $vlanguage = 0, $vname = 0, $voice_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $linebuf = sp + 616|0;
 $vname = sp + 536|0;
 $vgender = sp + 456|0;
 $vlanguage = sp + 376|0;
 $languages = sp + 72|0;
 $priority = sp + 32|0;
 $age = sp + 28|0;
 $n_variants = sp + 24|0;
 $1 = $f_in;
 $2 = $fname;
 $3 = $leafname;
 $langix = 0;
 $n_languages = 0;
 HEAP32[$n_variants>>2] = 4;
 HEAP8[$vname>>0] = 0;
 HEAP8[$vgender>>0] = 0;
 HEAP32[$age>>2] = 0;
 while(1) {
  $4 = $1;
  $5 = (__ZL11fgets_stripPciP8_IO_FILE($linebuf,120,$4)|0);
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = (_memcmp($linebuf,25416,4)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ((($linebuf)) + 4|0);
   $p = $9;
   while(1) {
    $10 = $p;
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    $13 = (_isspace($12)|0);
    $14 = ($13|0)!=(0);
    if (!($14)) {
     break;
    }
    $15 = $p;
    $16 = ((($15)) + 1|0);
    $p = $16;
   }
   $17 = $p;
   __Z8strncpy0PcPKci($vname,$17,80);
   continue;
  }
  $18 = (_memcmp($linebuf,25421,8)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   HEAP32[$priority>>2] = 5;
   HEAP8[$vlanguage>>0] = 0;
   $20 = ((($linebuf)) + 8|0);
   HEAP32[$vararg_buffer>>2] = $vlanguage;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $priority;
   (_sscanf($20,25823,$vararg_buffer)|0);
   $21 = (_strlen($vlanguage)|0);
   $22 = (($21) + 2)|0;
   $len = $22;
   $23 = $len;
   $24 = $langix;
   $25 = (300 - ($24))|0;
   $26 = (($25) - 1)|0;
   $27 = ($23>>>0)<($26>>>0);
   if (!($27)) {
    continue;
   }
   $28 = HEAP32[$priority>>2]|0;
   $29 = $28&255;
   $30 = $langix;
   $31 = (($languages) + ($30)|0);
   HEAP8[$31>>0] = $29;
   $32 = $langix;
   $33 = (($32) + 1)|0;
   $34 = (($languages) + ($33)|0);
   (_strcpy($34,$vlanguage)|0);
   $35 = $len;
   $36 = $langix;
   $37 = (($36) + ($35))|0;
   $langix = $37;
   $38 = $n_languages;
   $39 = (($38) + 1)|0;
   $n_languages = $39;
   continue;
  }
  $40 = (_memcmp($linebuf,25430,6)|0);
  $41 = ($40|0)==(0);
  if ($41) {
   $42 = ((($linebuf)) + 6|0);
   HEAP32[$vararg_buffer2>>2] = $vgender;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $age;
   (_sscanf($42,25823,$vararg_buffer2)|0);
   continue;
  }
  $43 = (_memcmp($linebuf,26249,8)|0);
  $44 = ($43|0)==(0);
  if (!($44)) {
   continue;
  }
  $45 = ((($linebuf)) + 8|0);
  HEAP32[$vararg_buffer6>>2] = $n_variants;
  (_sscanf($45,25972,$vararg_buffer6)|0);
 }
 $46 = $langix;
 $47 = (($46) + 1)|0;
 $langix = $47;
 $48 = (($languages) + ($46)|0);
 HEAP8[$48>>0] = 0;
 $49 = (__Z10LookupMnemP8MNEM_TABPKc(4404,$vgender)|0);
 $gender = $49;
 $50 = $n_languages;
 $51 = ($50|0)==(0);
 if ($51) {
  $0 = 0;
  $112 = $0;
  STACKTOP = sp;return ($112|0);
 }
 $52 = $langix;
 $53 = (24 + ($52))|0;
 $54 = $2;
 $55 = (_strlen($54)|0);
 $56 = (($53) + ($55))|0;
 $57 = (_strlen($vname)|0);
 $58 = (($56) + ($57))|0;
 $59 = (($58) + 3)|0;
 $60 = (_calloc($59,1)|0);
 $p = $60;
 $61 = $p;
 $voice_data = $61;
 $62 = $p;
 $63 = ((($62)) + 24|0);
 $p = $63;
 $64 = $p;
 $65 = $langix;
 _memcpy(($64|0),($languages|0),($65|0))|0;
 $66 = $p;
 $67 = $voice_data;
 $68 = ((($67)) + 4|0);
 HEAP32[$68>>2] = $66;
 $69 = $langix;
 $70 = $p;
 $71 = (($70) + ($69)|0);
 $72 = $2;
 (_strcpy($71,$72)|0);
 $73 = $langix;
 $74 = $p;
 $75 = (($74) + ($73)|0);
 $76 = $voice_data;
 $77 = ((($76)) + 8|0);
 HEAP32[$77>>2] = $75;
 $78 = $langix;
 $79 = $p;
 $80 = (($79) + ($78)|0);
 $81 = $voice_data;
 HEAP32[$81>>2] = $80;
 $82 = HEAP8[$vname>>0]|0;
 $83 = $82 << 24 >> 24;
 $84 = ($83|0)!=(0);
 if ($84) {
  $85 = $2;
  $86 = (_strlen($85)|0);
  $87 = (($86) + 1)|0;
  $88 = $langix;
  $89 = (($88) + ($87))|0;
  $langix = $89;
  $90 = $langix;
  $91 = $p;
  $92 = (($91) + ($90)|0);
  (_strcpy($92,$vname)|0);
  $93 = $langix;
  $94 = $p;
  $95 = (($94) + ($93)|0);
  $96 = $voice_data;
  HEAP32[$96>>2] = $95;
 }
 $97 = HEAP32[$age>>2]|0;
 $98 = $97&255;
 $99 = $voice_data;
 $100 = ((($99)) + 13|0);
 HEAP8[$100>>0] = $98;
 $101 = $gender;
 $102 = $101&255;
 $103 = $voice_data;
 $104 = ((($103)) + 12|0);
 HEAP8[$104>>0] = $102;
 $105 = $voice_data;
 $106 = ((($105)) + 14|0);
 HEAP8[$106>>0] = 0;
 $107 = HEAP32[$n_variants>>2]|0;
 $108 = $107&255;
 $109 = $voice_data;
 $110 = ((($109)) + 15|0);
 HEAP8[$110>>0] = $108;
 $111 = $voice_data;
 $0 = $111;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function __ZL15VoiceNameSorterPKvS0_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $v1 = 0, $v2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $v1 = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $v2 = $6;
 $7 = $v1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 1|0);
 $11 = $v2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 1|0);
 $15 = (_strcmp($10,$14)|0);
 $ix = $15;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $ix;
  $0 = $17;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $18 = $v1;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 << 24 >> 24;
 $23 = $v2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = (($22) - ($27))|0;
 $ix = $28;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $ix;
  $0 = $30;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $31 = $v1;
  $32 = HEAP32[$31>>2]|0;
  $33 = $v2;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_strcmp($32,$34)|0);
  $0 = $35;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZL14SetVoiceScoresP12espeak_VOICEPS0_i($voice_select,$voices,$control) {
 $voice_select = $voice_select|0;
 $voices = $voices|0;
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $buf = 0, $ix = 0, $lang_len = 0;
 var $language = 0, $n_parts = 0, $nv = 0, $score = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $language = sp + 288|0;
 $buf = sp + 48|0;
 $1 = $voice_select;
 $2 = $voices;
 $3 = $control;
 $n_parts = 0;
 $lang_len = 0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)!=(0);
   if ($13) {
    $n_parts = 1;
    $14 = $1;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_strlen($16)|0);
    $lang_len = $17;
    $ix = 0;
    while(1) {
     $18 = $ix;
     $19 = $lang_len;
     $20 = ($18|0)<=($19|0);
     $21 = $ix;
     $22 = ($21>>>0)<(80);
     $23 = $20 ? $22 : 0;
     if (!($23)) {
      break L1;
     }
     $24 = $ix;
     $25 = $1;
     $26 = ((($25)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + ($24)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29 << 24 >> 24;
     $31 = (_tolower($30)|0);
     $32 = $31&255;
     $33 = $ix;
     $34 = (($language) + ($33)|0);
     HEAP8[$34>>0] = $32;
     $35 = $32 << 24 >> 24;
     $36 = ($35|0)==(45);
     if ($36) {
      $37 = $n_parts;
      $38 = (($37) + 1)|0;
      $n_parts = $38;
     }
     $39 = $ix;
     $40 = (($39) + 1)|0;
     $ix = $40;
    }
   }
  }
 } while(0);
 $41 = $n_parts;
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = $3;
  $44 = $43 & 1;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = (_strcmp($language,25659)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    $48 = ((($language)) + 2|0);
    HEAP8[$48>>0] = 0;
    $lang_len = 2;
   }
   HEAP32[$vararg_buffer>>2] = 118980;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $language;
   (_sprintf($buf,26258,$vararg_buffer)|0);
   $49 = (__Z13GetFileLengthPKc($buf)|0);
   $50 = ($49|0)==(-2);
   if ($50) {
    $51 = $lang_len;
    $52 = (($51) + 1)|0;
    $lang_len = $52;
    $53 = (($language) + ($51)|0);
    HEAP8[$53>>0] = 47;
    $54 = $lang_len;
    $55 = (($language) + ($54)|0);
    HEAP8[$55>>0] = 0;
    $n_parts = -1;
   }
  }
 }
 $nv = 0;
 $ix = 0;
 while(1) {
  $56 = $ix;
  $57 = HEAP32[19755]|0;
  $58 = ($56|0)<($57|0);
  if (!($58)) {
   break;
  }
  $59 = $ix;
  $60 = (79024 + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $vp = $61;
  $62 = $3;
  $63 = $62 & 1;
  $64 = ($63|0)==(0);
  if ($64) {
   $65 = $vp;
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (_memcmp($67,26271,3)|0);
   $69 = ($68|0)==(0);
   if (!($69)) {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $70 = $1;
   $71 = $n_parts;
   $72 = $lang_len;
   $73 = $ix;
   $74 = (79024 + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (__ZL10ScoreVoiceP12espeak_VOICEPKciiS0_($70,$language,$71,$72,$75)|0);
   $score = $76;
   $77 = ($76|0)>(0);
   if ($77) {
    $78 = $vp;
    $79 = $nv;
    $80 = (($79) + 1)|0;
    $nv = $80;
    $81 = $2;
    $82 = (($81) + ($79<<2)|0);
    HEAP32[$82>>2] = $78;
    $83 = $score;
    $84 = $vp;
    $85 = ((($84)) + 16|0);
    HEAP32[$85>>2] = $83;
   }
  }
  $86 = $ix;
  $87 = (($86) + 1)|0;
  $ix = $87;
 }
 $88 = $nv;
 $89 = $2;
 $90 = (($89) + ($88<<2)|0);
 HEAP32[$90>>2] = 0;
 $91 = $nv;
 $92 = ($91|0)==(0);
 if ($92) {
  $0 = 0;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 } else {
  $93 = $2;
  $94 = $nv;
  _qsort($93,$94,4,27);
  $95 = $nv;
  $0 = $95;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 return (0)|0;
}
function __ZL10ScoreVoiceP12espeak_VOICEPKciiS0_($voice_spec,$spec_language,$spec_n_parts,$spec_lang_len,$voice) {
 $voice_spec = $voice_spec|0;
 $spec_language = $spec_language|0;
 $spec_n_parts = $spec_n_parts|0;
 $spec_lang_len = $spec_lang_len|0;
 $voice = $voice|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $diff = 0, $ix = 0, $language_priority = 0, $matching = 0, $matching_parts = 0, $n_parts = 0, $p = 0, $ratio = 0, $required_age = 0, $score = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $voice_spec;
 $2 = $spec_language;
 $3 = $spec_n_parts;
 $4 = $spec_lang_len;
 $5 = $voice;
 $score = 0;
 $6 = $5;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $p = $8;
 $9 = $3;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = $4;
  $16 = (_memcmp($13,$14,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $0 = 100;
   $219 = $0;
   STACKTOP = sp;return ($219|0);
  } else {
   $0 = 0;
   $219 = $0;
   STACKTOP = sp;return ($219|0);
  }
 }
 $18 = $3;
 $19 = ($18|0)==(0);
 L9: do {
  if ($19) {
   $score = 100;
  } else {
   $20 = $p;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $2;
    $25 = (_strcmp($24,26249)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $score = 100;
    }
   }
   while(1) {
    $27 = $p;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)!=(0);
    if (!($30)) {
     break L9;
    }
    $31 = $p;
    $32 = ((($31)) + 1|0);
    $p = $32;
    $33 = HEAP8[$31>>0]|0;
    $34 = $33 << 24 >> 24;
    $language_priority = $34;
    $matching = 1;
    $matching_parts = 0;
    $n_parts = 1;
    $ix = 0;
    while(1) {
     $35 = $ix;
     $36 = $4;
     $37 = ($35|0)>=($36|0);
     if ($37) {
      label = 14;
     } else {
      $38 = $ix;
      $39 = $2;
      $40 = (($39) + ($38)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 << 24 >> 24;
      $c1 = $42;
      $43 = ($42|0)==(45);
      if ($43) {
       label = 14;
      }
     }
     if ((label|0) == 14) {
      label = 0;
      $c1 = 0;
     }
     $44 = $ix;
     $45 = $p;
     $46 = (($45) + ($44)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47 << 24 >> 24;
     $c2 = $48;
     $49 = ($48|0)==(45);
     $$ = $49 ? 0 : $48;
     $c2 = $$;
     $50 = $c1;
     $51 = $c2;
     $52 = ($50|0)!=($51|0);
     if ($52) {
      $matching = 0;
     }
     $53 = $ix;
     $54 = $p;
     $55 = (($54) + ($53)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = ($57|0)==(45);
     if ($58) {
      $59 = $n_parts;
      $60 = (($59) + 1)|0;
      $n_parts = $60;
      $61 = $matching;
      $62 = ($61|0)!=(0);
      if ($62) {
       $63 = $matching_parts;
       $64 = (($63) + 1)|0;
       $matching_parts = $64;
      }
     }
     $65 = $ix;
     $66 = $p;
     $67 = (($66) + ($65)|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68 << 24 >> 24;
     $70 = ($69|0)==(0);
     $71 = $ix;
     $72 = (($71) + 1)|0;
     if ($70) {
      break;
     }
     $ix = $72;
    }
    $73 = $p;
    $74 = (($73) + ($72)|0);
    $p = $74;
    $75 = $matching;
    $76 = $matching_parts;
    $77 = (($76) + ($75))|0;
    $matching_parts = $77;
    $78 = $matching_parts;
    $79 = ($78|0)==(0);
    if ($79) {
     continue;
    }
    $x = 5;
    $80 = $3;
    $81 = $matching_parts;
    $82 = (($80) - ($81))|0;
    $diff = $82;
    $83 = ($82|0)>(0);
    if ($83) {
     $84 = $diff;
     $85 = $x;
     $86 = (($85) - ($84))|0;
     $x = $86;
    }
    $87 = $n_parts;
    $88 = $matching_parts;
    $89 = (($87) - ($88))|0;
    $diff = $89;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $diff;
     $92 = $x;
     $93 = (($92) - ($91))|0;
     $x = $93;
    }
    $94 = $x;
    $95 = ($94*100)|0;
    $96 = $language_priority;
    $97 = $96<<1;
    $98 = (($95) - ($97))|0;
    $x = $98;
    $99 = $x;
    $100 = $score;
    $101 = ($99|0)>($100|0);
    if (!($101)) {
     continue;
    }
    $102 = $x;
    $score = $102;
   }
  }
 } while(0);
 $103 = $score;
 $104 = ($103|0)==(0);
 if ($104) {
  $0 = 0;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 $105 = $1;
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 do {
  if ($107) {
   $108 = $1;
   $109 = HEAP32[$108>>2]|0;
   $110 = $5;
   $111 = HEAP32[$110>>2]|0;
   $112 = (_strcmp($109,$111)|0);
   $113 = ($112|0)==(0);
   if ($113) {
    $114 = $score;
    $115 = (($114) + 500)|0;
    $score = $115;
    break;
   }
   $116 = $1;
   $117 = HEAP32[$116>>2]|0;
   $118 = $5;
   $119 = ((($118)) + 8|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (_strcmp($117,$120)|0);
   $122 = ($121|0)==(0);
   if ($122) {
    $123 = $score;
    $124 = (($123) + 400)|0;
    $score = $124;
   }
  }
 } while(0);
 $125 = $1;
 $126 = ((($125)) + 12|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = ($128|0)==(1);
 if ($129) {
  label = 38;
 } else {
  $130 = $1;
  $131 = ((($130)) + 12|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = ($133|0)==(2);
  if ($134) {
   label = 38;
  }
 }
 do {
  if ((label|0) == 38) {
   $135 = $5;
   $136 = ((($135)) + 12|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = ($138|0)==(1);
   if (!($139)) {
    $140 = $5;
    $141 = ((($140)) + 12|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = ($143|0)==(2);
    if (!($144)) {
     break;
    }
   }
   $145 = $1;
   $146 = ((($145)) + 12|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $5;
   $150 = ((($149)) + 12|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = ($148|0)==($152|0);
   $154 = $score;
   if ($153) {
    $155 = (($154) + 50)|0;
    $score = $155;
    break;
   } else {
    $156 = (($154) - 50)|0;
    $score = $156;
    break;
   }
  }
 } while(0);
 $157 = $1;
 $158 = ((($157)) + 13|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159&255;
 $161 = ($160|0)<=(12);
 if ($161) {
  $162 = $5;
  $163 = ((($162)) + 12|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = ($165|0)==(2);
  if ($166) {
   $167 = $5;
   $168 = ((($167)) + 13|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = ($170|0)>(12);
   if ($171) {
    $172 = $score;
    $173 = (($172) + 5)|0;
    $score = $173;
   }
  }
 }
 $174 = $5;
 $175 = ((($174)) + 13|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = $176&255;
 $178 = ($177|0)!=(0);
 if ($178) {
  $179 = $1;
  $180 = ((($179)) + 13|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = ($182|0)==(0);
  if ($183) {
   $required_age = 30;
  } else {
   $184 = $1;
   $185 = ((($184)) + 13|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $required_age = $187;
  }
  $188 = $required_age;
  $189 = ($188*100)|0;
  $190 = $5;
  $191 = ((($190)) + 13|0);
  $192 = HEAP8[$191>>0]|0;
  $193 = $192&255;
  $194 = (($189|0) / ($193|0))&-1;
  $ratio = $194;
  $195 = $ratio;
  $196 = ($195|0)<(100);
  if ($196) {
   $197 = $ratio;
   $198 = (10000 / ($197|0))&-1;
   $ratio = $198;
  }
  $199 = $ratio;
  $200 = (($199) - 100)|0;
  $201 = (($200|0) / 10)&-1;
  $ratio = $201;
  $202 = $ratio;
  $203 = (5 - ($202))|0;
  $x = $203;
  $204 = $x;
  $205 = ($204|0)>(0);
  $$1 = $205 ? 0 : $203;
  $x = $$1;
  $206 = $score;
  $207 = $x;
  $208 = (($206) + ($207))|0;
  $score = $208;
  $209 = $1;
  $210 = ((($209)) + 13|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&255;
  $213 = ($212|0)>(0);
  if ($213) {
   $214 = $score;
   $215 = (($214) + 10)|0;
   $score = $215;
  }
 }
 $216 = $score;
 $217 = ($216|0)<(1);
 if ($217) {
  $score = 1;
 }
 $218 = $score;
 $0 = $218;
 $219 = $0;
 STACKTOP = sp;return ($219|0);
}
function __ZL16VoiceScoreSorterPKvS0_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ix = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $v1 = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $v2 = $6;
 $7 = $v2;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $v1;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) - ($12))|0;
 $ix = $13;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $ix;
  $0 = $15;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $16 = $v1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $v2;
  $19 = HEAP32[$18>>2]|0;
  $20 = (_strcmp($17,$19)|0);
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __Z11SelectVoiceP12espeak_VOICEPi($voice_select,$found) {
 $voice_select = $voice_select|0;
 $found = $found|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aged = 0, $gender = 0, $ix = 0, $ix2 = 0, $j = 0, $n_variants = 0, $nv = 0;
 var $or$cond = 0, $or$cond4 = 0, $p = 0, $p_start = 0, $skip = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $variant_name = 0, $variant_number = 0, $voice_select2 = 0, $voices = 0, $voices2 = 0, $vp = 0, $vp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $voice_select2 = sp + 2064|0;
 $voices = sp + 1064|0;
 $voices2 = sp + 16|0;
 $1 = $voice_select;
 $2 = $found;
 $aged = 1;
 $vp = 0;
 $3 = $2;
 HEAP32[$3>>2] = 1;
 $4 = $1;
 ;HEAP32[$voice_select2>>2]=HEAP32[$4>>2]|0;HEAP32[$voice_select2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$voice_select2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$voice_select2+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$voice_select2+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$voice_select2+20>>2]=HEAP32[$4+20>>2]|0;
 $5 = HEAP32[19755]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  (_espeak_ListVoices(0)|0);
 }
 $7 = ((($voice_select2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  label = 5;
 } else {
  $10 = ((($voice_select2)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(0);
  if ($14) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $15 = HEAP32[$voice_select2>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $17 = ((($voice_select2)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$voice_select2>>2] = $18;
   $19 = ($18|0)==(0|0);
   if ($19) {
    HEAP32[$voice_select2>>2] = 27486;
   }
  }
  $20 = HEAP32[$voice_select2>>2]|0;
  __Z8strncpy0PcPKci(121704,$20,60);
  $21 = (__ZL23ExtractVoiceVariantNamePcii(121704,0,0)|0);
  $variant_name = $21;
  $22 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(79024,121704)|0);
  $vp = $22;
  $23 = $vp;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $vp;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 1|0);
   $29 = ((($voice_select2)) + 4|0);
   HEAP32[$29>>2] = $28;
   $30 = ((($voice_select2)) + 12|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = ((($voice_select2)) + 13|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = ((($voice_select2)) + 14|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = $variant_name;
      $43 = HEAP8[$42>>0]|0;
      $44 = $43 << 24 >> 24;
      $45 = ($44|0)!=(0);
      $46 = $vp;
      $47 = ((($46)) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      if ($45) {
       $49 = $variant_name;
       HEAP32[$vararg_buffer>>2] = $48;
       $vararg_ptr5 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = $49;
       (_sprintf(121764,26286,$vararg_buffer)|0);
       $0 = 121764;
       $192 = $0;
       STACKTOP = sp;return ($192|0);
      } else {
       $0 = $48;
       $192 = $0;
       STACKTOP = sp;return ($192|0);
      }
     }
    }
   }
  }
 }
 $50 = (__ZL14SetVoiceScoresP12espeak_VOICEPS0_i($voice_select2,$voices,0)|0);
 $nv = $50;
 $51 = $nv;
 $52 = ($51|0)==(0);
 if ($52) {
  $53 = $2;
  HEAP32[$53>>2] = 0;
  $54 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(79024,27486)|0);
  HEAP32[$voices>>2] = $54;
  $55 = ($54|0)!=(0|0);
  if ($55) {
   $nv = 1;
  }
 }
 $gender = 0;
 $56 = ((($voice_select2)) + 12|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = ($58|0)==(2);
 do {
  if ($59) {
   label = 21;
  } else {
   $60 = ((($voice_select2)) + 13|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)>(0);
   if ($63) {
    $64 = ((($voice_select2)) + 13|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = ($66|0)<(13);
    if ($67) {
     label = 21;
     break;
    }
   }
   $68 = ((($voice_select2)) + 12|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = ($70|0)==(1);
   if ($71) {
    $gender = 1;
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $gender = 2;
 }
 $72 = ((($voice_select2)) + 13|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = ($74|0)<(60);
 if ($75) {
  $aged = 0;
 }
 $76 = $gender;
 $77 = (4484 + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $p_start = $78;
 $p = $78;
 $79 = $aged;
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = $p;
  $82 = ((($81)) + 1|0);
  $p = $82;
 }
 $n_variants = 0;
 $ix = 0;
 $ix2 = 0;
 while(1) {
  $83 = $ix;
  $84 = $nv;
  $85 = ($83|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $ix;
  $87 = (($voices) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $vp = $88;
  $skip = 0;
  $89 = $gender;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $vp;
   $92 = ((($91)) + 12|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $gender;
   $96 = ($94|0)!=($95|0);
   if ($96) {
    $skip = 1;
   }
  }
  $97 = $ix2;
  $98 = ($97|0)==(0);
  $99 = $aged;
  $100 = ($99|0)!=(0);
  $or$cond = $98 & $100;
  if ($or$cond) {
   $101 = $vp;
   $102 = ((($101)) + 13|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($104|0)<(60);
   if ($105) {
    $skip = 1;
   }
  }
  $106 = $skip;
  $107 = ($106|0)==(0);
  if ($107) {
   $108 = $vp;
   $109 = $ix2;
   $110 = (($109) + 1)|0;
   $ix2 = $110;
   $111 = (($voices2) + ($109<<2)|0);
   HEAP32[$111>>2] = $108;
  }
  $j = 0;
  while(1) {
   $112 = $j;
   $113 = $vp;
   $114 = ((($113)) + 15|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = ($112|0)<($116|0);
   $118 = $n_variants;
   $119 = ($118|0)<(12);
   $120 = $117 ? $119 : 0;
   if (!($120)) {
    break;
   }
   $121 = $p;
   $122 = HEAP8[$121>>0]|0;
   $123 = $122 << 24 >> 24;
   $variant_number = $123;
   $124 = ($123|0)==(0);
   if ($124) {
    $125 = $p_start;
    $p = $125;
    continue;
   } else {
    $126 = $n_variants;
    $127 = (($126) + 1)|0;
    $n_variants = $127;
    $128 = (80032 + (($126*24)|0)|0);
    $vp2 = $128;
    $129 = $vp2;
    $130 = $vp;
    ;HEAP32[$129>>2]=HEAP32[$130>>2]|0;HEAP32[$129+4>>2]=HEAP32[$130+4>>2]|0;HEAP32[$129+8>>2]=HEAP32[$130+8>>2]|0;HEAP32[$129+12>>2]=HEAP32[$130+12>>2]|0;HEAP32[$129+16>>2]=HEAP32[$130+16>>2]|0;HEAP32[$129+20>>2]=HEAP32[$130+20>>2]|0;
    $131 = $variant_number;
    $132 = $131&255;
    $133 = $vp2;
    $134 = ((($133)) + 14|0);
    HEAP8[$134>>0] = $132;
    $135 = $vp2;
    $136 = $ix2;
    $137 = (($136) + 1)|0;
    $ix2 = $137;
    $138 = (($voices2) + ($136<<2)|0);
    HEAP32[$138>>2] = $135;
    $139 = $p;
    $140 = ((($139)) + 1|0);
    $p = $140;
    $141 = $j;
    $142 = (($141) + 1)|0;
    $j = $142;
    continue;
   }
  }
  $143 = $ix;
  $144 = (($143) + 1)|0;
  $ix = $144;
 }
 while(1) {
  $145 = $vp;
  $146 = ($145|0)!=(0|0);
  if (!($146)) {
   break;
  }
  $147 = $p;
  $148 = ((($147)) + 1|0);
  $p = $148;
  $149 = HEAP8[$147>>0]|0;
  $150 = $149 << 24 >> 24;
  $variant_number = $150;
  $151 = ($150|0)!=(0);
  $152 = $n_variants;
  $153 = ($152|0)<(12);
  $or$cond4 = $151 & $153;
  if (!($or$cond4)) {
   break;
  }
  $154 = $n_variants;
  $155 = (($154) + 1)|0;
  $n_variants = $155;
  $156 = (80032 + (($154*24)|0)|0);
  $vp2 = $156;
  $157 = $vp2;
  $158 = $vp;
  ;HEAP32[$157>>2]=HEAP32[$158>>2]|0;HEAP32[$157+4>>2]=HEAP32[$158+4>>2]|0;HEAP32[$157+8>>2]=HEAP32[$158+8>>2]|0;HEAP32[$157+12>>2]=HEAP32[$158+12>>2]|0;HEAP32[$157+16>>2]=HEAP32[$158+16>>2]|0;HEAP32[$157+20>>2]=HEAP32[$158+20>>2]|0;
  $159 = $variant_number;
  $160 = $159&255;
  $161 = $vp2;
  $162 = ((($161)) + 14|0);
  HEAP8[$162>>0] = $160;
  $163 = $vp2;
  $164 = $ix2;
  $165 = (($164) + 1)|0;
  $ix2 = $165;
  $166 = (($voices2) + ($164<<2)|0);
  HEAP32[$166>>2] = $163;
 }
 $167 = $ix2;
 $168 = ($167|0)==(0);
 if ($168) {
  $0 = 0;
  $192 = $0;
  STACKTOP = sp;return ($192|0);
 }
 $169 = ((($voice_select2)) + 14|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&255;
 $172 = $ix2;
 $173 = (($171|0) % ($172|0))&-1;
 $174 = (($voices2) + ($173<<2)|0);
 $175 = HEAP32[$174>>2]|0;
 $vp = $175;
 $176 = $vp;
 $177 = ((($176)) + 14|0);
 $178 = HEAP8[$177>>0]|0;
 $179 = $178&255;
 $180 = ($179|0)!=(0);
 $181 = $vp;
 if ($180) {
  $182 = ((($181)) + 14|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = (__ZL23ExtractVoiceVariantNamePcii(0,$184,0)|0);
  $variant_name = $185;
  $186 = $vp;
  $187 = ((($186)) + 8|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $variant_name;
  HEAP32[$vararg_buffer6>>2] = $188;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $189;
  (_sprintf(121764,26286,$vararg_buffer6)|0);
  $0 = 121764;
  $192 = $0;
  STACKTOP = sp;return ($192|0);
 } else {
  $190 = ((($181)) + 8|0);
  $191 = HEAP32[$190>>2]|0;
  $0 = $191;
  $192 = $0;
  STACKTOP = sp;return ($192|0);
 }
 return (0)|0;
}
function __Z14SetVoiceByNamePKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $v = 0, $variant_name = 0, $voice_selector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $voice_selector = sp + 8|0;
 $1 = $name;
 $2 = $1;
 __Z8strncpy0PcPKci(121814,$2,60);
 $3 = (__ZL23ExtractVoiceVariantNamePcii(121814,0,1)|0);
 $variant_name = $3;
 $ix = 0;
 while(1) {
  $4 = $ix;
  $5 = (121814 + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = (_tolower($7)|0);
  $9 = $8&255;
  $10 = $ix;
  $11 = (121814 + ($10)|0);
  HEAP8[$11>>0] = $9;
  $12 = $9 << 24 >> 24;
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  }
  $14 = $ix;
  $15 = (($14) + 1)|0;
  $ix = $15;
 }
 ;HEAP32[$voice_selector>>2]=0|0;HEAP32[$voice_selector+4>>2]=0|0;HEAP32[$voice_selector+8>>2]=0|0;HEAP32[$voice_selector+12>>2]=0|0;HEAP32[$voice_selector+16>>2]=0|0;HEAP32[$voice_selector+20>>2]=0|0;
 $16 = $1;
 HEAP32[$voice_selector>>2] = $16;
 $17 = (__Z9LoadVoicePKci(121814,1)|0);
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $variant_name;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $variant_name;
   (__Z9LoadVoicePKci($23,2)|0);
  }
  $24 = HEAP32[1124]|0;
  __Z13DoVoiceChangeP7voice_t($24);
  $25 = HEAP32[1124]|0;
  $26 = ((($25)) + 40|0);
  $27 = ((($voice_selector)) + 4|0);
  HEAP32[$27>>2] = $26;
  $28 = $variant_name;
  __Z13SetVoiceStackP12espeak_VOICEPKc($voice_selector,$28);
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $29 = HEAP32[19755]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  (_espeak_ListVoices(0)|0);
 }
 $31 = (__Z17SelectVoiceByNamePP12espeak_VOICEPKc(79024,121814)|0);
 $v = $31;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $v;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (__Z9LoadVoicePKci($35,0)|0);
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $variant_name;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $variant_name;
    (__Z9LoadVoicePKci($42,2)|0);
   }
   $43 = HEAP32[1124]|0;
   __Z13DoVoiceChangeP7voice_t($43);
   $44 = HEAP32[1124]|0;
   $45 = ((($44)) + 40|0);
   $46 = ((($voice_selector)) + 4|0);
   HEAP32[$46>>2] = $45;
   $47 = $variant_name;
   __Z13SetVoiceStackP12espeak_VOICEPKc($voice_selector,$47);
   $0 = 0;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
 }
 $0 = -1;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function __Z20SetVoiceByPropertiesP12espeak_VOICE($voice_selector) {
 $voice_selector = $voice_selector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $voice_found = 0, $voice_id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $voice_found = sp;
 $1 = $voice_selector;
 $2 = $1;
 $3 = (__Z11SelectVoiceP12espeak_VOICEPi($2,$voice_found)|0);
 $voice_id = $3;
 $4 = HEAP32[$voice_found>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 2;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = $voice_id;
  (__Z16LoadVoiceVariantPKci($6,0)|0);
  $7 = HEAP32[1124]|0;
  __Z13DoVoiceChangeP7voice_t($7);
  $8 = $1;
  __Z13SetVoiceStackP12espeak_VOICEPKc($8,121874);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _espeak_GetCurrentVoice() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (77632|0);
}
function __Z9WcmdqStopv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20802] = 0;
 HEAP32[20803] = 0;
 $0 = HEAP32[20805]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[20805]|0;
  _sonicDestroyStream($2);
  HEAP32[20805] = 0;
 }
 $3 = HEAP8[119969]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  return;
 }
 __Z11MbrolaResetv();
 return;
}
function __Z9WcmdqFreev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[20802]|0;
 $1 = HEAP32[20803]|0;
 $2 = (($0) - ($1))|0;
 $i = $2;
 $3 = $i;
 $4 = ($3|0)<=(0);
 if ($4) {
  $5 = $i;
  $6 = (($5) + 170)|0;
  $i = $6;
 }
 $7 = $i;
 STACKTOP = sp;return ($7|0);
}
function __Z9WcmdqUsedv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z9WcmdqFreev()|0);
 $1 = (170 - ($0))|0;
 return ($1|0);
}
function __Z8WcmdqIncv() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20803]|0;
 $1 = (($0) + 1)|0;
 HEAP32[20803] = $1;
 $2 = HEAP32[20803]|0;
 $3 = ($2|0)>=(170);
 $$ = $3 ? 0 : $1;
 HEAP32[20803] = $$;
 return;
}
function __Z16WavegenOpenSoundv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z17WavegenCloseSoundv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z16WavegenInitSoundv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z11WavegenInitii($rate,$wavemult_fact) {
 $rate = $rate|0;
 $wavemult_fact = $wavemult_fact|0;
 var $$ = 0, $$wavemult_fact = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rate;
 $1 = $wavemult_fact;
 $2 = $1;
 $3 = ($2|0)==(0);
 $$wavemult_fact = $3 ? 60 : $wavemult_fact;
 $1 = $$wavemult_fact;
 HEAP32[20080] = 0;
 $4 = $0;
 HEAP32[20098] = $4;
 HEAP32[20097] = $4;
 $5 = HEAP32[20097]|0;
 $6 = (134217728 / ($5|0))&-1;
 HEAP32[20806] = $6;
 $7 = HEAP32[20097]|0;
 $8 = $7<<6;
 $9 = $0;
 $10 = (($8|0) / ($9|0))&-1;
 HEAP32[20807] = $10;
 HEAP32[20808] = 0;
 HEAP32[20809] = 0;
 HEAP32[20810] = 2147483647;
 HEAP32[20811] = 0;
 HEAP32[(80460)>>2] = 32;
 HEAP32[(80468)>>2] = 100;
 $ix = 0;
 while(1) {
  $11 = $ix;
  $12 = ($11|0)<(15);
  if (!($12)) {
   break;
  }
  $13 = $ix;
  $14 = (4988 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $ix;
  $17 = (80328 + ($16<<2)|0);
  HEAP32[$17>>2] = $15;
  $18 = $ix;
  $19 = (($18) + 1)|0;
  $ix = $19;
 }
 $20 = HEAP32[20097]|0;
 $21 = $1;
 $22 = Math_imul($20, $21)|0;
 $23 = (($22|0) / 12800)&-1;
 HEAP32[20812] = $23;
 $24 = HEAP32[20812]|0;
 $25 = ($24|0)>(128);
 $$ = $25 ? 128 : $23;
 HEAP32[20812] = $$;
 $26 = HEAP32[20812]|0;
 $27 = (($26|0) / 2)&-1;
 HEAP32[20813] = $27;
 $28 = HEAP32[20097]|0;
 $29 = ($28|0)!=(22050);
 if (!($29)) {
  __ZL17WavegenInitPkDatai(1);
  __ZL17WavegenInitPkDatai(0);
  HEAP32[20814] = 26779;
  __Z9KlattInitv();
  STACKTOP = sp;return;
 }
 $ix = 0;
 while(1) {
  $30 = $ix;
  $31 = HEAP32[20812]|0;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $ix;
  $34 = (+($33|0));
  $35 = 6.2831853070000001 * $34;
  $36 = HEAP32[20812]|0;
  $37 = (+($36|0));
  $38 = $35 / $37;
  $39 = (+Math_cos((+$38)));
  $40 = 1.0 - $39;
  $41 = 127.0 * $40;
  $x = $41;
  $42 = $x;
  $43 = (~~(($42)));
  $44 = $43&255;
  $45 = $ix;
  $46 = (26651 + ($45)|0);
  HEAP8[$46>>0] = $44;
  $47 = $ix;
  $48 = (($47) + 1)|0;
  $ix = $48;
 }
 __ZL17WavegenInitPkDatai(1);
 __ZL17WavegenInitPkDatai(0);
 HEAP32[20814] = 26779;
 __Z9KlattInitv();
 STACKTOP = sp;return;
}
function __ZL17WavegenInitPkDatai($which) {
 $which = $which|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $which;
 STACKTOP = sp;return;
}
function __Z12GetAmplitudev() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(80340)>>2]|0;
 $1 = ($0*55)|0;
 $2 = (($1|0) / 100)&-1;
 $amp = $2;
 $3 = $amp;
 $4 = HEAP32[(80380)>>2]|0;
 $5 = (27036 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = Math_imul($3, $7)|0;
 $9 = (($8|0) / 16)&-1;
 HEAP32[1262] = $9;
 $10 = HEAP32[1262]|0;
 STACKTOP = sp;return ($10|0);
}
function __Z16PeaksToHarmspectP15wavegen_peaks_tiPii($peaks,$pitch,$htab,$control) {
 $peaks = $peaks|0;
 $pitch = $pitch|0;
 $htab = $htab|0;
 $control = $control|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f = 0, $fhi = 0, $fp = 0, $h = 0, $h1 = 0, $h2 = 0, $hmax = 0, $hmax_samplerate = 0, $ix = 0, $p = 0, $pk = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $peaks;
 $2 = $pitch;
 $3 = $htab;
 $4 = $control;
 $5 = HEAP32[20080]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 1;
  $261 = $0;
  STACKTOP = sp;return ($261|0);
 }
 $7 = HEAP32[20080]|0;
 $8 = ((($7)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + (($9*80)|0)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[20080]|0;
 $14 = ((($13)) + 104|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (($16) + (($15*80)|0)|0);
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($12) + ($19))|0;
 $21 = $2;
 $22 = (($20|0) / ($21|0))&-1;
 $hmax = $22;
 $23 = $hmax;
 $24 = ($23|0)>=(400);
 $$ = $24 ? 399 : $22;
 $hmax = $$;
 $25 = HEAP32[20097]|0;
 $26 = ($25*19)|0;
 $27 = (($26|0) / 40)&-1;
 $28 = $27 << 16;
 $29 = $2;
 $30 = (($28|0) / ($29|0))&-1;
 $hmax_samplerate = $30;
 $31 = $hmax;
 $32 = $hmax_samplerate;
 $33 = ($31|0)>($32|0);
 if ($33) {
  $34 = $hmax_samplerate;
  $hmax = $34;
 }
 $h = 0;
 while(1) {
  $35 = $h;
  $36 = $hmax;
  $37 = ($35|0)<=($36|0);
  if (!($37)) {
   break;
  }
  $38 = $h;
  $39 = $3;
  $40 = (($39) + ($38<<2)|0);
  HEAP32[$40>>2] = 0;
  $41 = $h;
  $42 = (($41) + 1)|0;
  $h = $42;
 }
 $h = 0;
 $pk = 0;
 while(1) {
  $43 = $pk;
  $44 = HEAP32[20080]|0;
  $45 = ((($44)) + 104|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)<=($46|0);
  if (!($47)) {
   break;
  }
  $48 = $pk;
  $49 = $1;
  $50 = (($49) + (($48*80)|0)|0);
  $p = $50;
  $51 = $p;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0);
  L15: do {
   if (!($54)) {
    $55 = $p;
    $56 = HEAP32[$55>>2]|0;
    $fp = $56;
    $57 = ($56|0)==(0);
    if (!($57)) {
     $58 = $p;
     $59 = HEAP32[$58>>2]|0;
     $60 = $p;
     $61 = ((($60)) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($59) + ($62))|0;
     $fhi = $63;
     $64 = $p;
     $65 = HEAP32[$64>>2]|0;
     $66 = $p;
     $67 = ((($66)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($65) - ($68))|0;
     $70 = $2;
     $71 = (($69|0) / ($70|0))&-1;
     $72 = (($71) + 1)|0;
     $h = $72;
     $73 = $h;
     $74 = ($73|0)<=(0);
     $$1 = $74 ? 1 : $72;
     $h = $$1;
     $75 = $2;
     $76 = $h;
     $77 = Math_imul($75, $76)|0;
     $f = $77;
     while(1) {
      $78 = $f;
      $79 = $fp;
      $80 = ($78|0)<($79|0);
      if (!($80)) {
       break;
      }
      $81 = $fp;
      $82 = $f;
      $83 = (($81) - ($82))|0;
      $84 = $p;
      $85 = ((($84)) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $86 >> 8;
      $88 = (($83|0) / ($87|0))&-1;
      $89 = HEAP32[20814]|0;
      $90 = (($89) + ($88)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91&255;
      $93 = $p;
      $94 = ((($93)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = Math_imul($92, $95)|0;
      $97 = $h;
      $98 = (($97) + 1)|0;
      $h = $98;
      $99 = $3;
      $100 = (($99) + ($97<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($101) + ($96))|0;
      HEAP32[$100>>2] = $102;
      $103 = $2;
      $104 = $f;
      $105 = (($104) + ($103))|0;
      $f = $105;
     }
     while(1) {
      $106 = $f;
      $107 = $fhi;
      $108 = ($106|0)<($107|0);
      if (!($108)) {
       break L15;
      }
      $109 = $f;
      $110 = $fp;
      $111 = (($109) - ($110))|0;
      $112 = $p;
      $113 = ((($112)) + 12|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $114 >> 8;
      $116 = (($111|0) / ($115|0))&-1;
      $117 = HEAP32[20814]|0;
      $118 = (($117) + ($116)|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = $119&255;
      $121 = $p;
      $122 = ((($121)) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = Math_imul($120, $123)|0;
      $125 = $h;
      $126 = (($125) + 1)|0;
      $h = $126;
      $127 = $3;
      $128 = (($127) + ($125<<2)|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (($129) + ($124))|0;
      HEAP32[$128>>2] = $130;
      $131 = $2;
      $132 = $f;
      $133 = (($132) + ($131))|0;
      $f = $133;
     }
    }
   }
  } while(0);
  $134 = $pk;
  $135 = (($134) + 1)|0;
  $pk = $135;
 }
 $136 = $1;
 $137 = ((($136)) + 80|0);
 $138 = ((($137)) + 4|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139*10)|0;
 $y = $140;
 $141 = $2;
 $142 = (65536000 / ($141|0))&-1;
 $h2 = $142;
 $143 = $h2;
 $144 = ($143|0)>(0);
 L26: do {
  if ($144) {
   $145 = $y;
   $146 = $h2;
   $147 = (($145|0) / ($146|0))&-1;
   $x = $147;
   $h = 1;
   while(1) {
    $148 = $y;
    $149 = ($148|0)>(0);
    if (!($149)) {
     break L26;
    }
    $150 = $y;
    $151 = $h;
    $152 = (($151) + 1)|0;
    $h = $152;
    $153 = $3;
    $154 = (($153) + ($151<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + ($150))|0;
    HEAP32[$154>>2] = $156;
    $157 = $x;
    $158 = $y;
    $159 = (($158) - ($157))|0;
    $y = $159;
   }
  }
 } while(0);
 while(1) {
  $160 = $pk;
  $161 = ($160|0)<(9);
  if (!($161)) {
   break;
  }
  $162 = $pk;
  $163 = $1;
  $164 = (($163) + (($162*80)|0)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 >> 14;
  $x = $167;
  $168 = $x;
  $169 = $x;
  $170 = Math_imul($168, $169)|0;
  $171 = ($170*5)|0;
  $172 = (($171|0) / 2)&-1;
  $173 = $pk;
  $174 = (83260 + ($173<<2)|0);
  HEAP32[$174>>2] = $172;
  $175 = $4;
  $176 = ($175|0)==(0);
  if ($176) {
   $177 = $pk;
   $178 = $1;
   $179 = (($178) + (($177*80)|0)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $2;
   $182 = (($180|0) / ($181|0))&-1;
   $183 = $pk;
   $184 = (83296 + ($183<<2)|0);
   HEAP32[$184>>2] = $182;
  }
  $185 = $pk;
  $186 = (83296 + ($185<<2)|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $hmax_samplerate;
  $189 = ($187|0)>=($188|0);
  if ($189) {
   $190 = $pk;
   $191 = (83260 + ($190<<2)|0);
   HEAP32[$191>>2] = 0;
  }
  $192 = $pk;
  $193 = (($192) + 1)|0;
  $pk = $193;
 }
 $f = 0;
 $h = 0;
 while(1) {
  $194 = $h;
  $195 = $hmax;
  $196 = ($194|0)<=($195|0);
  if (!($196)) {
   break;
  }
  $197 = $h;
  $198 = $3;
  $199 = (($198) + ($197<<2)|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $200 >> 15;
  $x = $201;
  $202 = $x;
  $203 = $x;
  $204 = Math_imul($202, $203)|0;
  $205 = $204 >> 8;
  $206 = $h;
  $207 = $3;
  $208 = (($207) + ($206<<2)|0);
  HEAP32[$208>>2] = $205;
  $209 = $f;
  $210 = $209 >> 19;
  $ix = $210;
  $211 = ($210|0)<(1000);
  if ($211) {
   $212 = $h;
   $213 = $3;
   $214 = (($213) + ($212<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $ix;
   $217 = HEAP32[20080]|0;
   $218 = ((($217)) + 364|0);
   $219 = (($218) + ($216)|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = Math_imul($215, $221)|0;
   $223 = $222 >> 13;
   $224 = $h;
   $225 = $3;
   $226 = (($225) + ($224<<2)|0);
   HEAP32[$226>>2] = $223;
  }
  $227 = $h;
  $228 = (($227) + 1)|0;
  $h = $228;
  $229 = $2;
  $230 = $f;
  $231 = (($230) + ($229))|0;
  $f = $231;
 }
 $232 = $3;
 $233 = ((($232)) + 4|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = HEAP32[1263]|0;
 $236 = Math_imul($234, $235)|0;
 $h1 = $236;
 $237 = $h1;
 $238 = (($237|0) / 8)&-1;
 $239 = $3;
 $240 = ((($239)) + 4|0);
 HEAP32[$240>>2] = $238;
 $241 = $4;
 $242 = $241 & 1;
 $243 = ($242|0)!=(0);
 L48: do {
  if ($243) {
   $h = 1;
   while(1) {
    $244 = $h;
    $245 = ($244|0)<(30);
    if (!($245)) {
     break L48;
    }
    $246 = $h;
    $247 = $3;
    $248 = (($247) + ($246<<2)|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $h;
    $251 = HEAP32[20833]|0;
    $252 = (($251) + ($250<<2)|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($249) - ($253))|0;
    $255 = $254 >> 3;
    $256 = $h;
    $257 = (83336 + ($256<<2)|0);
    HEAP32[$257>>2] = $255;
    $258 = $h;
    $259 = (($258) + 1)|0;
    $h = $259;
   }
  }
 } while(0);
 $260 = $hmax;
 $0 = $260;
 $261 = $0;
 STACKTOP = sp;return ($261|0);
}
function __Z10InitBreathv() {
 var $0 = 0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[20097]|0;
 $1 = (+($0|0));
 $2 = -3.1415926999999999 / $1;
 HEAPF64[4565] = $2;
 $3 = +HEAPF64[4565];
 $4 = -2.0 * $3;
 HEAPF64[4566] = $4;
 $ix = 0;
 while(1) {
  $5 = $ix;
  $6 = ($5|0)<(9);
  if (!($6)) {
   break;
  }
  $7 = $ix;
  $8 = (36536 + (($7*40)|0)|0);
  __ZL12setresonatorP9RESONATORiii($8,2000,200,1);
  $9 = $ix;
  $10 = (($9) + 1)|0;
  $ix = $10;
 }
 STACKTOP = sp;return;
}
function __ZL12setresonatorP9RESONATORiii($rp,$freq,$bwidth,$init) {
 $rp = $rp|0;
 $freq = $freq|0;
 $bwidth = $bwidth|0;
 $init = $init|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arg = 0.0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rp;
 $1 = $freq;
 $2 = $bwidth;
 $3 = $init;
 $4 = $3;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 24|0);
  HEAPF64[$7>>3] = 0.0;
  $8 = $0;
  $9 = ((($8)) + 32|0);
  HEAPF64[$9>>3] = 0.0;
 }
 $10 = +HEAPF64[4565];
 $11 = $2;
 $12 = (+($11|0));
 $13 = $10 * $12;
 $arg = $13;
 $14 = $arg;
 $15 = (+Math_exp((+$14)));
 $x = $15;
 $16 = $x;
 $17 = $x;
 $18 = $16 * $17;
 $19 = -$18;
 $20 = $0;
 $21 = ((($20)) + 16|0);
 HEAPF64[$21>>3] = $19;
 $22 = +HEAPF64[4566];
 $23 = $1;
 $24 = (+($23|0));
 $25 = $22 * $24;
 $arg = $25;
 $26 = $x;
 $27 = $arg;
 $28 = (+Math_cos((+$27)));
 $29 = $26 * $28;
 $30 = $29 * 2.0;
 $31 = $0;
 $32 = ((($31)) + 8|0);
 HEAPF64[$32>>3] = $30;
 $33 = $0;
 $34 = ((($33)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = 1.0 - $35;
 $37 = $0;
 $38 = ((($37)) + 16|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $36 - $39;
 $41 = $0;
 HEAPF64[$41>>3] = $40;
 STACKTOP = sp;return;
}
function __Z7Wavegenv() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $amp = 0, $c = 0, $echo = 0, $h = 0, $ix = 0, $modn_amp = 0, $modn_period = 0, $or$cond = 0, $ov = 0, $pk = 0;
 var $sample = 0, $theta = 0, $total = 0, $waveph = 0, $z = 0, $z1 = 0, $z2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 L1: while(1) {
  $1 = HEAP32[20864]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $3 = HEAP32[20808]|0;
   $4 = HEAP32[20809]|0;
   $5 = ($3|0)==($4|0);
   if ($5) {
    label = 4;
    break;
   }
  }
  $6 = HEAP32[20808]|0;
  $7 = $6 & 63;
  $8 = ($7|0)==(0);
  $9 = HEAP32[20808]|0;
  if ($8) {
   $10 = ($9|0)==(0);
   if ($10) {
    HEAP32[20865] = 0;
    HEAP32[20833] = 83464;
    $11 = HEAP32[(80412)>>2]|0;
    $12 = $11 << 4;
    $13 = (__Z16PeaksToHarmspectP15wavegen_peaks_tiPii(36896,$12,83464,0)|0);
    HEAP32[21666] = $13;
    $14 = HEAP32[(80460)>>2]|0;
    $15 = HEAP32[(80412)>>2]|0;
    $16 = $15 >> 8;
    $17 = Math_imul($14, $16)|0;
    $18 = HEAP32[(80468)>>2]|0;
    $19 = Math_imul($17, $18)|0;
    $20 = (($19|0) / 80000)&-1;
    HEAP32[21667] = $20;
    $21 = HEAP32[(80412)>>2]|0;
    $22 = $21 >> 12;
    $23 = (890 / ($22|0))&-1;
    HEAP32[21668] = $23;
   } else {
    __ZL17AdvanceParametersv();
   }
   $24 = HEAP32[(80412)>>2]|0;
   $25 = $24 >> 7;
   $26 = HEAP32[20806]|0;
   $27 = Math_imul($25, $26)|0;
   HEAP32[21673] = $27;
   $28 = HEAP32[20097]|0;
   $29 = HEAP32[(80412)>>2]|0;
   $30 = $29 >> 12;
   $31 = (($28|0) / ($30|0))&-1;
   HEAP32[21674] = $31;
   $32 = HEAP32[(80412)>>2]|0;
   $33 = $32 >> 11;
   HEAP32[21675] = $33;
   $34 = HEAP32[21666]|0;
   HEAP32[21676] = $34;
   $35 = HEAP32[20865]|0;
   $36 = (83464 + (($35*1600)|0)|0);
   HEAP32[20833] = $36;
   $37 = HEAP32[20865]|0;
   $38 = $37 ^ 1;
   HEAP32[20865] = $38;
   $39 = HEAP32[(80412)>>2]|0;
   $40 = $39 << 4;
   $41 = HEAP32[20865]|0;
   $42 = (83464 + (($41*1600)|0)|0);
   $43 = (__Z16PeaksToHarmspectP15wavegen_peaks_tiPii(36896,$40,$42,1)|0);
   HEAP32[21666] = $43;
   __ZL9SetBreathv();
  } else {
   $44 = $9 & 7;
   $45 = ($44|0)==(0);
   if ($45) {
    $h = 1;
    while(1) {
     $46 = $h;
     $47 = ($46|0)<(30);
     if (!($47)) {
      break;
     }
     $48 = $h;
     $49 = HEAP32[21666]|0;
     $50 = ($48|0)<=($49|0);
     if (!($50)) {
      break;
     }
     $51 = $h;
     $52 = HEAP32[21676]|0;
     $53 = ($51|0)<=($52|0);
     if (!($53)) {
      break;
     }
     $54 = $h;
     $55 = (83336 + ($54<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $h;
     $58 = HEAP32[20833]|0;
     $59 = (($58) + ($57<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + ($56))|0;
     HEAP32[$59>>2] = $61;
     $62 = $h;
     $63 = (($62) + 1)|0;
     $h = $63;
    }
    $64 = HEAP32[1265]|0;
    $65 = ($64|0)<(256);
    if ($65) {
     $66 = HEAP32[1265]|0;
     $67 = (($66) + 1)|0;
     HEAP32[1265] = $67;
    }
   }
  }
  $68 = HEAP32[20808]|0;
  $69 = (($68) + 1)|0;
  HEAP32[20808] = $69;
  $70 = HEAP32[20810]|0;
  $71 = ($70|0)>(0);
  $72 = HEAP32[21673]|0;
  $73 = HEAP32[20810]|0;
  $74 = (($73) + ($72))|0;
  HEAP32[20810] = $74;
  $75 = HEAP32[20810]|0;
  $76 = ($75|0)<(0);
  $or$cond = $71 & $76;
  do {
   if ($or$cond) {
    $77 = HEAP32[20813]|0;
    $78 = HEAP32[21674]|0;
    $79 = (($78|0) / 2)&-1;
    $80 = (($77) - ($79))|0;
    HEAP32[21677] = $80;
    $81 = HEAP32[20808]|0;
    $82 = HEAP32[20809]|0;
    $83 = ($81|0)>($82|0);
    if ($83) {
     label = 20;
     break L1;
    }
    $84 = HEAP32[21678]|0;
    $85 = (($84) + 1)|0;
    HEAP32[21678] = $85;
    $86 = HEAP32[20080]|0;
    $87 = ((($86)) + 104|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + 1)|0;
    $pk = $89;
    while(1) {
     $90 = $pk;
     $91 = ($90|0)<(9);
     if (!($91)) {
      break;
     }
     $92 = $pk;
     $93 = (36896 + (($92*80)|0)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = HEAP32[(80412)>>2]|0;
     $96 = $95<<3;
     $97 = (($94|0) / ($96|0))&-1;
     $98 = (($97) + 1)|0;
     $99 = (($98|0) / 2)&-1;
     $100 = $pk;
     $101 = (83296 + ($100<<2)|0);
     HEAP32[$101>>2] = $99;
     $102 = $pk;
     $103 = (($102) + 1)|0;
     $pk = $103;
    }
    $104 = HEAP32[(80460)>>2]|0;
    $105 = HEAP32[(80412)>>2]|0;
    $106 = $105 >> 8;
    $107 = Math_imul($104, $106)|0;
    $108 = HEAP32[(80468)>>2]|0;
    $109 = Math_imul($107, $108)|0;
    $110 = (($109|0) / 80000)&-1;
    HEAP32[21667] = $110;
    $111 = HEAP32[21679]|0;
    $112 = ($111|0)>(0);
    do {
     if ($112) {
      $113 = HEAP32[21679]|0;
      $114 = ($113|0)==(3);
      if ($114) {
       $115 = HEAP32[20809]|0;
       $116 = HEAP32[20808]|0;
       $117 = (($115) - ($116))|0;
       $118 = HEAP32[21674]|0;
       $119 = $118<<1;
       $120 = ($117|0)<($119|0);
       if (!($120)) {
        break;
       }
       HEAP32[21679] = 2;
       $121 = HEAP32[21667]|0;
       $122 = HEAP32[21680]|0;
       $123 = Math_imul($121, $122)|0;
       $124 = (($123|0) / 256)&-1;
       HEAP32[21667] = $124;
       break;
      }
      $125 = HEAP32[21679]|0;
      $126 = ($125|0)==(4);
      if ($126) {
       HEAP32[21679] = 2;
       $127 = HEAP32[21667]|0;
       $128 = HEAP32[21680]|0;
       $129 = Math_imul($127, $128)|0;
       $130 = (($129|0) / 256)&-1;
       HEAP32[21667] = $130;
       break;
      } else {
       $131 = HEAP32[21679]|0;
       $132 = (($131) + -1)|0;
       HEAP32[21679] = $132;
       break;
      }
     }
    } while(0);
    $133 = HEAP32[21681]|0;
    $134 = ($133|0)!=(0|0);
    if ($134) {
     $135 = HEAP32[21670]|0;
     $136 = $135 >> 8;
     $ix = $136;
     $137 = ($136|0)>(127);
     $$ = $137 ? 127 : $136;
     $ix = $$;
     $138 = $ix;
     $139 = HEAP32[21681]|0;
     $140 = (($139) + ($138)|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $141&255;
     $amp = $142;
     $143 = HEAP32[21667]|0;
     $144 = $amp;
     $145 = Math_imul($143, $144)|0;
     $146 = (($145|0) / 128)&-1;
     HEAP32[21667] = $146;
    }
    $modn_period = 0;
    $147 = HEAP32[1124]|0;
    $148 = ((($147)) + 92|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)<(8);
    if ($150) {
     $151 = HEAP32[21682]|0;
     $152 = HEAP32[1124]|0;
     $153 = ((($152)) + 92|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (27409 + ($154<<3)|0);
     $156 = (($155) + ($151)|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $modn_period = $158;
     $159 = $modn_period;
     $160 = $159 & 15;
     $modn_amp = $160;
     $161 = $modn_period;
     $162 = $161 >> 4;
     $modn_period = $162;
    }
    $163 = $modn_period;
    $164 = ($163|0)!=(0);
    if ($164) {
     $165 = $modn_period;
     $166 = ($165|0)==(15);
     if ($166) {
      $167 = HEAP32[21667]|0;
      $168 = $modn_amp;
      $169 = Math_imul($167, $168)|0;
      $170 = (($169|0) / 16)&-1;
      HEAP32[21667] = $170;
      HEAP32[21682] = 0;
      break;
     }
     $171 = HEAP32[21678]|0;
     $172 = $modn_period;
     $173 = (($171|0) % ($172|0))&-1;
     $174 = ($173|0)==(0);
     if ($174) {
      $175 = HEAP32[21667]|0;
      $176 = $modn_amp;
      $177 = Math_imul($175, $176)|0;
      $178 = (($177|0) / 16)&-1;
      HEAP32[21667] = $178;
     }
    }
   }
  } while(0);
  $179 = HEAP32[20810]|0;
  $180 = $179 >> 16;
  $181 = $180&65535;
  $waveph = $181;
  $total = 0;
  $182 = HEAP32[21677]|0;
  $183 = (($182) + 1)|0;
  HEAP32[21677] = $183;
  $184 = HEAP32[21677]|0;
  $185 = ($184|0)>=(0);
  if ($185) {
   $186 = HEAP32[21677]|0;
   $187 = HEAP32[20812]|0;
   $188 = ($186|0)<($187|0);
   if ($188) {
    $189 = HEAP32[20080]|0;
    $190 = ((($189)) + 104|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($191) + 1)|0;
    $pk = $192;
    while(1) {
     $193 = $pk;
     $194 = ($193|0)<(9);
     if (!($194)) {
      break;
     }
     $195 = $pk;
     $196 = (83296 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $waveph;
     $199 = $198&65535;
     $200 = Math_imul($197, $199)|0;
     $201 = $200&65535;
     $theta = $201;
     $202 = $theta;
     $203 = $202&65535;
     $204 = $203 >> 5;
     $205 = (10316 + ($204<<1)|0);
     $206 = HEAP16[$205>>1]|0;
     $207 = $206 << 16 >> 16;
     $208 = $pk;
     $209 = (83260 + ($208<<2)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = Math_imul($207, $210)|0;
     $212 = $total;
     $213 = (($212) + ($211))|0;
     $total = $213;
     $214 = $pk;
     $215 = (($214) + 1)|0;
     $pk = $215;
    }
    $216 = $total;
    $217 = HEAP32[21675]|0;
    $218 = (($216|0) / ($217|0))&-1;
    $219 = HEAP32[21677]|0;
    $220 = (26651 + ($219)|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221&255;
    $223 = Math_imul($218, $222)|0;
    $total = $223;
   }
  }
  $224 = $waveph;
  $theta = $224;
  $h = 1;
  while(1) {
   $225 = $h;
   $226 = HEAP32[21668]|0;
   $227 = ($225|0)<=($226|0);
   if (!($227)) {
    break;
   }
   $228 = $theta;
   $229 = $228&65535;
   $230 = $229 >> 5;
   $231 = (10316 + ($230<<1)|0);
   $232 = HEAP16[$231>>1]|0;
   $233 = $232 << 16 >> 16;
   $234 = $h;
   $235 = HEAP32[20833]|0;
   $236 = (($235) + ($234<<2)|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = Math_imul($233, $237)|0;
   $239 = $total;
   $240 = (($239) + ($238))|0;
   $total = $240;
   $241 = $waveph;
   $242 = $241&65535;
   $243 = $theta;
   $244 = $243&65535;
   $245 = (($244) + ($242))|0;
   $246 = $245&65535;
   $theta = $246;
   $247 = $h;
   $248 = (($247) + 1)|0;
   $h = $248;
  }
  while(1) {
   $249 = $h;
   $250 = HEAP32[21676]|0;
   $251 = ($249|0)<=($250|0);
   if (!($251)) {
    break;
   }
   $252 = $theta;
   $253 = $252&65535;
   $254 = $253 >> 5;
   $255 = (10316 + ($254<<1)|0);
   $256 = HEAP16[$255>>1]|0;
   $257 = $256 << 16 >> 16;
   $258 = $h;
   $259 = HEAP32[20833]|0;
   $260 = (($259) + ($258<<2)|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = Math_imul($257, $261)|0;
   $263 = $total;
   $264 = (($263) - ($262))|0;
   $total = $264;
   $265 = $waveph;
   $266 = $265&65535;
   $267 = $theta;
   $268 = $267&65535;
   $269 = (($268) + ($266))|0;
   $270 = $269&65535;
   $theta = $270;
   $271 = $h;
   $272 = (($271) + 1)|0;
   $h = $272;
  }
  $273 = HEAP32[21683]|0;
  $274 = ($273|0)!=(64);
  if ($274) {
   $275 = $total;
   $276 = $275 >> 6;
   $277 = HEAP32[21683]|0;
   $278 = Math_imul($276, $277)|0;
   $total = $278;
  }
  $279 = HEAP32[20080]|0;
  $280 = ((($279)) + 292|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ($281|0)!=(0);
  if ($282) {
   $283 = (__ZL11ApplyBreathv()|0);
   $284 = $total;
   $285 = (($284) + ($283))|0;
   $total = $285;
  }
  $z2 = 0;
  $286 = HEAP32[(80448)>>2]|0;
  $287 = HEAP32[(80436)>>2]|0;
  $288 = ($286|0)<($287|0);
  if ($288) {
   $289 = HEAP32[(80440)>>2]|0;
   $290 = ($289|0)==(0);
   if ($290) {
    $291 = HEAP32[(80448)>>2]|0;
    $292 = HEAP32[(80456)>>2]|0;
    $293 = (($291) + ($292))|0;
    $294 = (($293) + 1)|0;
    $295 = HEAP32[(80432)>>2]|0;
    $296 = (($295) + ($294)|0);
    $297 = HEAP8[$296>>0]|0;
    $c = $297;
    $298 = HEAP32[(80448)>>2]|0;
    $299 = HEAP32[(80456)>>2]|0;
    $300 = (($298) + ($299))|0;
    $301 = HEAP32[(80432)>>2]|0;
    $302 = (($301) + ($300)|0);
    $303 = HEAP8[$302>>0]|0;
    $304 = $303&255;
    $305 = $c;
    $306 = $305 << 24 >> 24;
    $307 = $306<<8;
    $308 = (($304) + ($307))|0;
    $sample = $308;
    $309 = HEAP32[(80448)>>2]|0;
    $310 = (($309) + 2)|0;
    HEAP32[(80448)>>2] = $310;
   } else {
    $311 = HEAP32[(80456)>>2]|0;
    $312 = HEAP32[(80448)>>2]|0;
    $313 = (($312) + 1)|0;
    HEAP32[(80448)>>2] = $313;
    $314 = (($311) + ($312))|0;
    $315 = HEAP32[(80432)>>2]|0;
    $316 = (($315) + ($314)|0);
    $317 = HEAP8[$316>>0]|0;
    $318 = $317 << 24 >> 24;
    $319 = HEAP32[(80440)>>2]|0;
    $320 = Math_imul($318, $319)|0;
    $sample = $320;
   }
   $321 = $sample;
   $322 = HEAP32[(80464)>>2]|0;
   $323 = Math_imul($321, $322)|0;
   $324 = $323 >> 10;
   $z2 = $324;
   $325 = $z2;
   $326 = HEAP32[(80444)>>2]|0;
   $327 = Math_imul($325, $326)|0;
   $328 = (($327|0) / 32)&-1;
   $z2 = $328;
   $329 = HEAP32[(80448)>>2]|0;
   $330 = HEAP32[(80456)>>2]|0;
   $331 = (($329) + ($330))|0;
   $332 = HEAP32[(80452)>>2]|0;
   $333 = ($331|0)>=($332|0);
   if ($333) {
    $334 = HEAP32[(80452)>>2]|0;
    $335 = ($334*3)|0;
    $336 = (($335|0) / 4)&-1;
    $337 = HEAP32[(80456)>>2]|0;
    $338 = (($337) - ($336))|0;
    HEAP32[(80456)>>2] = $338;
   }
  }
  $339 = $z2;
  $340 = $total;
  $341 = $340 >> 8;
  $342 = HEAP32[21667]|0;
  $343 = Math_imul($341, $342)|0;
  $344 = $343 >> 13;
  $345 = (($339) + ($344))|0;
  $z1 = $345;
  $346 = HEAP32[20100]|0;
  $347 = (($346) + 1)|0;
  HEAP32[20100] = $347;
  $348 = (107916 + ($346<<1)|0);
  $349 = HEAP16[$348>>1]|0;
  $350 = $349 << 16 >> 16;
  $351 = HEAP32[20101]|0;
  $352 = Math_imul($350, $351)|0;
  $echo = $352;
  $353 = $echo;
  $354 = $353 >> 8;
  $355 = $z1;
  $356 = (($355) + ($354))|0;
  $z1 = $356;
  $357 = HEAP32[20100]|0;
  $358 = ($357|0)>=(5500);
  if ($358) {
   HEAP32[20100] = 0;
  }
  $359 = $z1;
  $360 = HEAP32[1265]|0;
  $361 = Math_imul($359, $360)|0;
  $362 = $361 >> 8;
  $z = $362;
  $363 = $z;
  $364 = ($363|0)>=(32768);
  if ($364) {
   $365 = $z1;
   $366 = (8388608 / ($365|0))&-1;
   $367 = (($366) - 1)|0;
   $ov = $367;
   $368 = $ov;
   $369 = HEAP32[1265]|0;
   $370 = ($368|0)<($369|0);
   if ($370) {
    $371 = $ov;
    HEAP32[1265] = $371;
   }
   $372 = $z1;
   $373 = HEAP32[1265]|0;
   $374 = Math_imul($372, $373)|0;
   $375 = $374 >> 8;
   $z = $375;
  } else {
   $376 = $z;
   $377 = ($376|0)<=(-32768);
   if ($377) {
    $378 = $z1;
    $379 = (-8388608 / ($378|0))&-1;
    $380 = (($379) - 1)|0;
    $ov = $380;
    $381 = $ov;
    $382 = HEAP32[1265]|0;
    $383 = ($381|0)<($382|0);
    if ($383) {
     $384 = $ov;
     HEAP32[1265] = $384;
    }
    $385 = $z1;
    $386 = HEAP32[1265]|0;
    $387 = Math_imul($385, $386)|0;
    $388 = $387 >> 8;
    $z = $388;
   }
  }
  $389 = $z;
  $390 = $389&255;
  $391 = HEAP32[20118]|0;
  $392 = ((($391)) + 1|0);
  HEAP32[20118] = $392;
  HEAP8[$391>>0] = $390;
  $393 = $z;
  $394 = $393 >> 8;
  $395 = $394&255;
  $396 = HEAP32[20118]|0;
  $397 = ((($396)) + 1|0);
  HEAP32[20118] = $397;
  HEAP8[$396>>0] = $395;
  $398 = $z;
  $399 = $398&65535;
  $400 = HEAP32[20099]|0;
  $401 = (($400) + 1)|0;
  HEAP32[20099] = $401;
  $402 = (107916 + ($400<<1)|0);
  HEAP16[$402>>1] = $399;
  $403 = HEAP32[20099]|0;
  $404 = ($403|0)>=(5500);
  if ($404) {
   HEAP32[20099] = 0;
  }
  $405 = HEAP32[20118]|0;
  $406 = HEAP32[20120]|0;
  $407 = ($405>>>0)>=($406>>>0);
  if ($407) {
   label = 74;
   break;
  }
 }
 if ((label|0) == 4) {
  $0 = 0;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 74) {
  $0 = 1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 return (0)|0;
}
function __ZL17AdvanceParametersv() {
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ix = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(80420)>>2]|0;
 $1 = HEAP32[(80416)>>2]|0;
 $2 = (($1) + ($0))|0;
 HEAP32[(80416)>>2] = $2;
 $3 = HEAP32[(80416)>>2]|0;
 $4 = $3 >> 8;
 $ix = $4;
 $5 = ($4|0)>(127);
 $$ = $5 ? 127 : $4;
 $ix = $$;
 $6 = $ix;
 $7 = HEAP32[20102]|0;
 $8 = (($7) + ($6)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = HEAP32[(80428)>>2]|0;
 $12 = Math_imul($10, $11)|0;
 $x = $12;
 $13 = $x;
 $14 = $13 >> 8;
 $15 = HEAP32[(80424)>>2]|0;
 $16 = (($14) + ($15))|0;
 HEAP32[(80412)>>2] = $16;
 $17 = HEAP32[21669]|0;
 $18 = HEAP32[21670]|0;
 $19 = (($18) + ($17))|0;
 HEAP32[21670] = $19;
 $20 = HEAP32[21671]|0;
 $21 = ($20|0)>=(23552);
 if ($21) {
  HEAP32[21671] = 0;
 }
 $22 = HEAP32[21671]|0;
 $23 = $22 >> 6;
 $24 = (27041 + ($23)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = (($26) - 128)|0;
 $28 = HEAP32[1264]|0;
 $29 = Math_imul($27, $28)|0;
 $x = $29;
 $30 = HEAP32[20807]|0;
 $31 = HEAP32[21671]|0;
 $32 = (($31) + ($30))|0;
 HEAP32[21671] = $32;
 $33 = $x;
 $34 = HEAP32[(80412)>>2]|0;
 $35 = (($34) + ($33))|0;
 HEAP32[(80412)>>2] = $35;
 $36 = HEAP32[(80412)>>2]|0;
 $37 = ($36|0)<(102400);
 $$1 = $37 ? 102400 : $35;
 HEAP32[(80412)>>2] = $$1;
 $38 = HEAP32[20808]|0;
 $39 = HEAP32[21672]|0;
 $40 = ($38|0)==($39|0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $ix = 0;
 while(1) {
  $41 = $ix;
  $42 = HEAP32[20080]|0;
  $43 = ((($42)) + 104|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<=($44|0);
  if (!($45)) {
   break;
  }
  $46 = $ix;
  $47 = (36896 + (($46*80)|0)|0);
  $48 = ((($47)) + 48|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $ix;
  $51 = (36896 + (($50*80)|0)|0);
  $52 = ((($51)) + 16|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $53 + $49;
  HEAPF64[$52>>3] = $54;
  $55 = $ix;
  $56 = (36896 + (($55*80)|0)|0);
  $57 = ((($56)) + 16|0);
  $58 = +HEAPF64[$57>>3];
  $59 = (~~(($58)));
  $60 = $ix;
  $61 = (36896 + (($60*80)|0)|0);
  HEAP32[$61>>2] = $59;
  $62 = $ix;
  $63 = (36896 + (($62*80)|0)|0);
  $64 = ((($63)) + 56|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $ix;
  $67 = (36896 + (($66*80)|0)|0);
  $68 = ((($67)) + 24|0);
  $69 = +HEAPF64[$68>>3];
  $70 = $69 + $65;
  HEAPF64[$68>>3] = $70;
  $71 = $ix;
  $72 = (36896 + (($71*80)|0)|0);
  $73 = ((($72)) + 24|0);
  $74 = +HEAPF64[$73>>3];
  $75 = (~~(($74)));
  $76 = $ix;
  $77 = (36896 + (($76*80)|0)|0);
  $78 = ((($77)) + 4|0);
  HEAP32[$78>>2] = $75;
  $79 = ($75|0)<(0);
  if ($79) {
   $80 = $ix;
   $81 = (36896 + (($80*80)|0)|0);
   $82 = ((($81)) + 4|0);
   HEAP32[$82>>2] = 0;
  }
  $83 = $ix;
  $84 = (36896 + (($83*80)|0)|0);
  $85 = ((($84)) + 64|0);
  $86 = +HEAPF64[$85>>3];
  $87 = $ix;
  $88 = (36896 + (($87*80)|0)|0);
  $89 = ((($88)) + 32|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $90 + $86;
  HEAPF64[$89>>3] = $91;
  $92 = $ix;
  $93 = (36896 + (($92*80)|0)|0);
  $94 = ((($93)) + 32|0);
  $95 = +HEAPF64[$94>>3];
  $96 = (~~(($95)));
  $97 = $ix;
  $98 = (36896 + (($97*80)|0)|0);
  $99 = ((($98)) + 8|0);
  HEAP32[$99>>2] = $96;
  $100 = $ix;
  $101 = ($100|0)<(3);
  $102 = $ix;
  $103 = (36896 + (($102*80)|0)|0);
  if ($101) {
   $104 = ((($103)) + 72|0);
   $105 = +HEAPF64[$104>>3];
   $106 = $ix;
   $107 = (36896 + (($106*80)|0)|0);
   $108 = ((($107)) + 40|0);
   $109 = +HEAPF64[$108>>3];
   $110 = $109 + $105;
   HEAPF64[$108>>3] = $110;
   $111 = $ix;
   $112 = (36896 + (($111*80)|0)|0);
   $113 = ((($112)) + 40|0);
   $114 = +HEAPF64[$113>>3];
   $115 = (~~(($114)));
   $116 = $ix;
   $117 = (36896 + (($116*80)|0)|0);
   $118 = ((($117)) + 12|0);
   HEAP32[$118>>2] = $115;
  } else {
   $119 = ((($103)) + 8|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $ix;
   $122 = (36896 + (($121*80)|0)|0);
   $123 = ((($122)) + 12|0);
   HEAP32[$123>>2] = $120;
  }
  $124 = $ix;
  $125 = (($124) + 1)|0;
  $ix = $125;
 }
 while(1) {
  $126 = $ix;
  $127 = ($126|0)<(8);
  if (!($127)) {
   break;
  }
  $128 = $ix;
  $129 = ($128|0)<(7);
  if ($129) {
   $130 = $ix;
   $131 = (36896 + (($130*80)|0)|0);
   $132 = ((($131)) + 48|0);
   $133 = +HEAPF64[$132>>3];
   $134 = $ix;
   $135 = (36896 + (($134*80)|0)|0);
   $136 = ((($135)) + 16|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $137 + $133;
   HEAPF64[$136>>3] = $138;
   $139 = $ix;
   $140 = (36896 + (($139*80)|0)|0);
   $141 = ((($140)) + 16|0);
   $142 = +HEAPF64[$141>>3];
   $143 = (~~(($142)));
   $144 = $ix;
   $145 = (36896 + (($144*80)|0)|0);
   HEAP32[$145>>2] = $143;
  }
  $146 = $ix;
  $147 = (36896 + (($146*80)|0)|0);
  $148 = ((($147)) + 56|0);
  $149 = +HEAPF64[$148>>3];
  $150 = $ix;
  $151 = (36896 + (($150*80)|0)|0);
  $152 = ((($151)) + 24|0);
  $153 = +HEAPF64[$152>>3];
  $154 = $153 + $149;
  HEAPF64[$152>>3] = $154;
  $155 = $ix;
  $156 = (36896 + (($155*80)|0)|0);
  $157 = ((($156)) + 24|0);
  $158 = +HEAPF64[$157>>3];
  $159 = (~~(($158)));
  $160 = $ix;
  $161 = (36896 + (($160*80)|0)|0);
  $162 = ((($161)) + 4|0);
  HEAP32[$162>>2] = $159;
  $163 = ($159|0)<(0);
  if ($163) {
   $164 = $ix;
   $165 = (36896 + (($164*80)|0)|0);
   $166 = ((($165)) + 4|0);
   HEAP32[$166>>2] = 0;
  }
  $167 = $ix;
  $168 = (($167) + 1)|0;
  $ix = $168;
 }
 STACKTOP = sp;return;
}
function __ZL9SetBreathv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[20080]|0;
 $1 = ((($0)) + 292|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $pk = 1;
 while(1) {
  $4 = $pk;
  $5 = ($4|0)<(9);
  if (!($5)) {
   break;
  }
  $6 = $pk;
  $7 = HEAP32[20080]|0;
  $8 = ((($7)) + 292|0);
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $pk;
   $13 = (36536 + (($12*40)|0)|0);
   $14 = $pk;
   $15 = (36896 + (($14*80)|0)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 >> 16;
   $18 = $pk;
   $19 = HEAP32[20080]|0;
   $20 = ((($19)) + 328|0);
   $21 = (($20) + ($18<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   __ZL12setresonatorP9RESONATORiii($13,$17,$22,0);
  }
  $23 = $pk;
  $24 = (($23) + 1)|0;
  $pk = $24;
 }
 STACKTOP = sp;return;
}
function __ZL11ApplyBreathv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp = 0, $ix = 0, $noise = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = 0;
 $0 = (_rand()|0);
 $1 = $0 & 16383;
 $2 = (($1) - 8192)|0;
 $noise = $2;
 $ix = 1;
 while(1) {
  $3 = $ix;
  $4 = ($3|0)<(9);
  if (!($4)) {
   break;
  }
  $5 = $ix;
  $6 = HEAP32[20080]|0;
  $7 = ((($6)) + 292|0);
  $8 = (($7) + ($5<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $amp = $9;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $ix;
   $12 = (36896 + (($11*80)|0)|0);
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 >> 14;
   $16 = $amp;
   $17 = Math_imul($16, $15)|0;
   $amp = $17;
   $18 = $ix;
   $19 = (36536 + (($18*40)|0)|0);
   $20 = $noise;
   $21 = (+($20|0));
   $22 = (+__ZL9resonatorP9RESONATORd($19,$21));
   $23 = (~~(($22)));
   $24 = $amp;
   $25 = Math_imul($23, $24)|0;
   $26 = $value;
   $27 = (($26) + ($25))|0;
   $value = $27;
  }
  $28 = $ix;
  $29 = (($28) + 1)|0;
  $ix = $29;
 }
 $30 = $value;
 STACKTOP = sp;return ($30|0);
}
function __ZL9resonatorP9RESONATORd($r,$input) {
 $r = $r|0;
 $input = +$input;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $input;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = $3 * $4;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $0;
 $10 = ((($9)) + 24|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $5 + $12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $0;
 $18 = ((($17)) + 32|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $x = $21;
 $22 = $0;
 $23 = ((($22)) + 24|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $0;
 $26 = ((($25)) + 32|0);
 HEAPF64[$26>>3] = $24;
 $27 = $x;
 $28 = $0;
 $29 = ((($28)) + 24|0);
 HEAPF64[$29>>3] = $27;
 $30 = $x;
 STACKTOP = sp;return (+$30);
}
function __Z11SetEmbeddedii($control,$value) {
 $control = $control|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $command = 0, $sign = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $control;
 $1 = $value;
 $sign = 0;
 $2 = $0;
 $3 = $2 & 31;
 $command = $3;
 $4 = $0;
 $5 = $4 & 96;
 $6 = ($5|0)==(96);
 if ($6) {
  $sign = -1;
 } else {
  $7 = $0;
  $8 = $7 & 96;
  $9 = ($8|0)==(64);
  if ($9) {
   $sign = 1;
  }
 }
 $10 = $command;
 $11 = ($10|0)<(15);
 if ($11) {
  $12 = $sign;
  $13 = ($12|0)==(0);
  $14 = $1;
  if ($13) {
   $15 = $command;
   $16 = (80328 + ($15<<2)|0);
   HEAP32[$16>>2] = $14;
  } else {
   $17 = $sign;
   $18 = Math_imul($14, $17)|0;
   $19 = $command;
   $20 = (80328 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($18))|0;
   HEAP32[$20>>2] = $22;
  }
  $23 = $command;
  $24 = (80328 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $command;
  $27 = (5064 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZL13SetWithRange0ii($25,$28)|0);
  $30 = $command;
  $31 = (80328 + ($30<<2)|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $command;
 switch ($32|0) {
 case 6:  {
  __ZL14WavegenSetEchov();
  break;
 }
 case 1:  {
  break;
 }
 case 3:  {
  $33 = (__Z12GetAmplitudev()|0);
  HEAP32[1262] = $33;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $34 = (__Z12GetAmplitudev()|0);
  HEAP32[1262] = $34;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  __ZL14WavegenSetEchov();
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 __ZL16SetPitchFormantsv();
 STACKTOP = sp;return;
}
function __ZL13SetWithRange0ii($value,$max) {
 $value = $value|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $max;
 $3 = $1;
 $4 = ($3|0)<(0);
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = $1;
   $6 = $2;
   $7 = ($5|0)>($6|0);
   if ($7) {
    $8 = $2;
    $0 = $8;
    break;
   } else {
    $9 = $1;
    $0 = $9;
    break;
   }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function __ZL14WavegenSetEchov() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp = 0, $delay = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[20080]|0;
 $1 = ((($0)) + 112|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[21683] = $2;
 $3 = HEAP32[20080]|0;
 $4 = ((($3)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $delay = $5;
 $6 = HEAP32[20080]|0;
 $7 = ((($6)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $amp = $8;
 $9 = $delay;
 $10 = ($9|0)>=(5500);
 if ($10) {
  $delay = 5499;
 }
 $11 = $amp;
 $12 = ($11|0)>(100);
 if ($12) {
  $amp = 100;
 }
 _memset((107916|0),0,11000)|0;
 HEAP32[20100] = 0;
 $13 = HEAP32[(80348)>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = HEAP32[(80348)>>2]|0;
  $amp = $15;
  $delay = 130;
 }
 $16 = $delay;
 $17 = ($16|0)==(0);
 if ($17) {
  $amp = 0;
 }
 $18 = $delay;
 $19 = HEAP32[20097]|0;
 $20 = Math_imul($18, $19)|0;
 $21 = (($20|0) / 1000)&-1;
 HEAP32[20099] = $21;
 $22 = HEAP32[20099]|0;
 HEAP32[21684] = $22;
 $23 = $amp;
 $24 = ($23|0)==(0);
 $$ = $24 ? 0 : $22;
 HEAP32[21684] = $$;
 $25 = $amp;
 $26 = ($25|0)>(20);
 if ($26) {
  $27 = HEAP32[20099]|0;
  $28 = $27<<1;
  HEAP32[21684] = $28;
 }
 $29 = $amp;
 HEAP32[20101] = $29;
 $30 = (__Z12GetAmplitudev()|0);
 HEAP32[1262] = $30;
 $31 = HEAP32[1262]|0;
 $32 = $amp;
 $33 = (500 - ($32))|0;
 $34 = Math_imul($31, $33)|0;
 $35 = (($34|0) / 500)&-1;
 HEAP32[1262] = $35;
 STACKTOP = sp;return;
}
function __ZL16SetPitchFormantsv() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $factor = 0, $ix = 0, $pitch_value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $factor = 256;
 $0 = HEAP32[(80332)>>2]|0;
 $pitch_value = $0;
 $1 = ($0|0)>(101);
 $$ = $1 ? 101 : $0;
 $pitch_value = $$;
 $2 = $pitch_value;
 $3 = ($2|0)>(50);
 if ($3) {
  $4 = $pitch_value;
  $5 = (($4) - 50)|0;
  $6 = ($5*25)|0;
  $7 = (($6|0) / 50)&-1;
  $8 = (256 + ($7))|0;
  $factor = $8;
 }
 $ix = 0;
 while(1) {
  $9 = $ix;
  $10 = ($9|0)<=(5);
  if (!($10)) {
   break;
  }
  $11 = $ix;
  $12 = HEAP32[20080]|0;
  $13 = ((($12)) + 236|0);
  $14 = (($13) + ($11<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = $factor;
  $18 = Math_imul($16, $17)|0;
  $19 = (($18|0) / 256)&-1;
  $20 = $19&65535;
  $21 = $ix;
  $22 = HEAP32[20080]|0;
  $23 = ((($22)) + 164|0);
  $24 = (($23) + ($21<<1)|0);
  HEAP16[$24>>1] = $20;
  $25 = $ix;
  $26 = (($25) + 1)|0;
  $ix = $26;
 }
 $27 = HEAP32[(80352)>>2]|0;
 $28 = ($27*3)|0;
 $factor = $28;
 $29 = HEAP32[20080]|0;
 $30 = ((($29)) + 254|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 $33 = $factor;
 $34 = $33<<1;
 $35 = (256 - ($34))|0;
 $36 = Math_imul($32, $35)|0;
 $37 = (($36|0) / 256)&-1;
 $38 = $37&65535;
 $39 = HEAP32[20080]|0;
 $40 = ((($39)) + 182|0);
 HEAP16[$40>>1] = $38;
 $41 = HEAP32[20080]|0;
 $42 = ((($41)) + 254|0);
 $43 = ((($42)) + 2|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = $factor;
 $47 = (256 - ($46))|0;
 $48 = Math_imul($45, $47)|0;
 $49 = (($48|0) / 256)&-1;
 $50 = $49&65535;
 $51 = HEAP32[20080]|0;
 $52 = ((($51)) + 182|0);
 $53 = ((($52)) + 2|0);
 HEAP16[$53>>1] = $50;
 STACKTOP = sp;return;
}
function __Z15WavegenSetVoiceP7voice_t($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 _memcpy((86740|0),($1|0),1364)|0;
 HEAP32[20080] = 86740;
 $2 = $0;
 $3 = ((($2)) + 108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[20814] = 26394;
 } else {
  HEAP32[20814] = 26779;
 }
 $6 = $0;
 $7 = ((($6)) + 120|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8*26)|0;
 $10 = (($9|0) / 100)&-1;
 HEAP32[1281] = $10;
 $11 = HEAP32[20097]|0;
 $12 = ($11|0)<=(11000);
 if ($12) {
  $13 = HEAP32[1281]|0;
  $14 = $13<<1;
  HEAP32[1281] = $14;
  HEAP32[1263] = 6;
 }
 __ZL14WavegenSetEchov();
 __ZL16SetPitchFormantsv();
 $15 = HEAP32[20080]|0;
 $16 = ((($15)) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[20118]|0;
 __Z11MarkerEventijiiPh(8,0,$17,0,$18);
 STACKTOP = sp;return;
}
function __Z9SetPitch2P7voice_tiiPiS1_($voice,$pitch1,$pitch2,$pitch_base,$pitch_range) {
 $voice = $voice|0;
 $pitch1 = $pitch1|0;
 $pitch2 = $pitch2|0;
 $pitch_base = $pitch_base|0;
 $pitch_range = $pitch_range|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $base = 0, $pitch_value = 0, $range = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $voice;
 $1 = $pitch1;
 $2 = $pitch2;
 $3 = $pitch_base;
 $4 = $pitch_range;
 $5 = $1;
 $6 = $2;
 $7 = ($5|0)>($6|0);
 if ($7) {
  $8 = $1;
  $x = $8;
  $9 = $2;
  $1 = $9;
  $10 = $x;
  $2 = $10;
 }
 $11 = HEAP32[(80332)>>2]|0;
 $pitch_value = $11;
 $12 = ($11|0)>(101);
 $$ = $12 ? 101 : $11;
 $pitch_value = $$;
 $13 = HEAP32[(80352)>>2]|0;
 $14 = $pitch_value;
 $15 = (($14) - ($13))|0;
 $pitch_value = $15;
 $16 = $pitch_value;
 $17 = ($16|0)<(0);
 $$1 = $17 ? 0 : $15;
 $pitch_value = $$1;
 $18 = $0;
 $19 = ((($18)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $pitch_value;
 $22 = (26292 + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = Math_imul($20, $24)|0;
 $26 = (($25|0) / 128)&-1;
 $base = $26;
 $27 = $0;
 $28 = ((($27)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[(80344)>>2]|0;
 $31 = Math_imul($29, $30)|0;
 $32 = (($31|0) / 50)&-1;
 $range = $32;
 $33 = $range;
 $34 = $0;
 $35 = ((($34)) + 68|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($33) - ($36))|0;
 $38 = ($37*18)|0;
 $39 = $base;
 $40 = (($39) - ($38))|0;
 $base = $40;
 $41 = $base;
 $42 = $1;
 $43 = $range;
 $44 = Math_imul($42, $43)|0;
 $45 = (($44|0) / 2)&-1;
 $46 = (($41) + ($45))|0;
 $47 = $3;
 HEAP32[$47>>2] = $46;
 $48 = $base;
 $49 = $2;
 $50 = $range;
 $51 = Math_imul($49, $50)|0;
 $52 = (($51|0) / 2)&-1;
 $53 = (($48) + ($52))|0;
 $54 = $3;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) - ($55))|0;
 $57 = $4;
 HEAP32[$57>>2] = $56;
 STACKTOP = sp;return;
}
function __Z8SetPitchiPhii($length,$env,$pitch1,$pitch2) {
 $length = $length|0;
 $env = $env|0;
 $pitch1 = $pitch1|0;
 $pitch2 = $pitch2|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $env;
 $2 = $pitch1;
 $3 = $pitch2;
 $4 = $1;
 HEAP32[20102] = $4;
 $5 = ($4|0)==(0|0);
 $$ = $5 ? 18420 : $4;
 HEAP32[20102] = $$;
 HEAP32[(80416)>>2] = 0;
 $6 = $0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[(80420)>>2] = 0;
 } else {
  $8 = $0;
  $9 = (2097152 / ($8|0))&-1;
  HEAP32[(80420)>>2] = $9;
 }
 $10 = HEAP32[20080]|0;
 $11 = $2;
 $12 = $3;
 __Z9SetPitch2P7voice_tiiPiS1_($10,$11,$12,(80424),(80428));
 $13 = HEAP32[20102]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = HEAP32[(80428)>>2]|0;
 $17 = Math_imul($15, $16)|0;
 $18 = $17 >> 8;
 $19 = HEAP32[(80424)>>2]|0;
 $20 = (($18) + ($19))|0;
 HEAP32[(80412)>>2] = $20;
 $21 = HEAP32[20080]|0;
 $22 = ((($21)) + 88|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[1264] = $23;
 STACKTOP = sp;return;
}
function __Z8SetSynthiiP7frame_tS0_P7voice_t($length,$modn,$fr1,$fr2,$v) {
 $length = $length|0;
 $modn = $modn|0;
 $fr1 = $fr1|0;
 $fr2 = $fr2|0;
 $v = $v|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmd = 0, $ix = 0, $length2 = 0, $length4 = 0, $next = 0.0, $or$cond = 0, $qix = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $modn;
 $2 = $fr1;
 $3 = $fr2;
 $4 = $v;
 HEAP32[22026] = 0;
 HEAP32[20864] = 1;
 $5 = $1;
 $6 = $5 & 255;
 HEAP32[21682] = $6;
 HEAP32[21679] = 0;
 $7 = $1;
 $8 = $7 & 1024;
 $9 = ($8|0)!=(0);
 if ($9) {
  HEAP32[21679] = 3;
  $10 = $1;
  $11 = $10 >> 8;
  $12 = $11 & 3;
  $13 = (5128 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[21680] = $14;
 }
 $15 = $1;
 $16 = $15 & 2048;
 $17 = ($16|0)!=(0);
 if ($17) {
  HEAP32[21679] = 4;
  $18 = $1;
  $19 = $18 >> 8;
  $20 = $19 & 3;
  $21 = (5144 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[21680] = $22;
 }
 $23 = HEAP32[20802]|0;
 $24 = (($23) + 1)|0;
 $qix = $24;
 while(1) {
  $25 = $qix;
  $26 = ($25|0)>=(170);
  if ($26) {
   $qix = 0;
  }
  $27 = $qix;
  $28 = HEAP32[20803]|0;
  $29 = ($27|0)==($28|0);
  if ($29) {
   break;
  }
  $30 = $qix;
  $31 = (80488 + ($30<<4)|0);
  $32 = HEAP32[$31>>2]|0;
  $cmd = $32;
  $33 = $cmd;
  $34 = ($33|0)==(3);
  if ($34) {
   label = 10;
   break;
  }
  $35 = $cmd;
  $36 = ($35|0)==(6);
  $37 = $cmd;
  $38 = ($37|0)==(5);
  $or$cond = $36 | $38;
  if ($or$cond) {
   break;
  }
  $39 = $qix;
  $40 = (($39) + 1)|0;
  $qix = $40;
 }
 if ((label|0) == 10) {
  HEAP32[20864] = 0;
 }
 $41 = $0;
 $42 = (($41) + 32)|0;
 $43 = $42 & -64;
 $length2 = $43;
 $44 = $length2;
 $45 = ($44|0)==(0);
 $$ = $45 ? 64 : $43;
 $length2 = $$;
 $46 = HEAP32[20808]|0;
 HEAP32[21672] = $46;
 $47 = $length2;
 $48 = HEAP32[20809]|0;
 $49 = (($48) + ($47))|0;
 HEAP32[20809] = $49;
 $50 = $length2;
 $51 = (($50|0) / 4)&-1;
 $length4 = $51;
 $52 = $4;
 $53 = ((($52)) + 164|0);
 $54 = ((($53)) + 14|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55 << 16 >> 16;
 $57 = ($56*7800)|0;
 $58 = $4;
 $59 = ((($58)) + 218|0);
 $60 = ((($59)) + 14|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $63 = $62<<8;
 $64 = (($57) + ($63))|0;
 $65 = $64 << 8;
 HEAP32[(37456)>>2] = $65;
 $66 = $4;
 $67 = ((($66)) + 164|0);
 $68 = ((($67)) + 16|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69 << 16 >> 16;
 $71 = ($70*9000)|0;
 $72 = $4;
 $73 = ((($72)) + 218|0);
 $74 = ((($73)) + 16|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75 << 16 >> 16;
 $77 = $76<<8;
 $78 = (($71) + ($77))|0;
 $79 = $78 << 8;
 HEAP32[(37536)>>2] = $79;
 $ix = 0;
 while(1) {
  $80 = $ix;
  $81 = ($80|0)<(8);
  if (!($81)) {
   break;
  }
  $82 = $ix;
  $83 = ($82|0)<(7);
  if ($83) {
   $84 = $ix;
   $85 = $2;
   $86 = ((($85)) + 2|0);
   $87 = (($86) + ($84<<1)|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = $ix;
   $91 = $4;
   $92 = ((($91)) + 164|0);
   $93 = (($92) + ($90<<1)|0);
   $94 = HEAP16[$93>>1]|0;
   $95 = $94 << 16 >> 16;
   $96 = Math_imul($89, $95)|0;
   $97 = $ix;
   $98 = $4;
   $99 = ((($98)) + 218|0);
   $100 = (($99) + ($97<<1)|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101 << 16 >> 16;
   $103 = $102<<8;
   $104 = (($96) + ($103))|0;
   $105 = $104 << 8;
   $106 = (+($105|0));
   $107 = $ix;
   $108 = (36896 + (($107*80)|0)|0);
   $109 = ((($108)) + 16|0);
   HEAPF64[$109>>3] = $106;
   $110 = $ix;
   $111 = (36896 + (($110*80)|0)|0);
   $112 = ((($111)) + 16|0);
   $113 = +HEAPF64[$112>>3];
   $114 = (~~(($113)));
   $115 = $ix;
   $116 = (36896 + (($115*80)|0)|0);
   HEAP32[$116>>2] = $114;
   $117 = $ix;
   $118 = $3;
   $119 = ((($118)) + 2|0);
   $120 = (($119) + ($117<<1)|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121 << 16 >> 16;
   $123 = $ix;
   $124 = $4;
   $125 = ((($124)) + 164|0);
   $126 = (($125) + ($123<<1)|0);
   $127 = HEAP16[$126>>1]|0;
   $128 = $127 << 16 >> 16;
   $129 = Math_imul($122, $128)|0;
   $130 = $ix;
   $131 = $4;
   $132 = ((($131)) + 218|0);
   $133 = (($132) + ($130<<1)|0);
   $134 = HEAP16[$133>>1]|0;
   $135 = $134 << 16 >> 16;
   $136 = $135<<8;
   $137 = (($129) + ($136))|0;
   $138 = $137 << 8;
   $139 = (+($138|0));
   $next = $139;
   $140 = $next;
   $141 = $ix;
   $142 = (36896 + (($141*80)|0)|0);
   $143 = ((($142)) + 16|0);
   $144 = +HEAPF64[$143>>3];
   $145 = $140 - $144;
   $146 = $145 * 16.0;
   $147 = $length4;
   $148 = (+($147|0));
   $149 = $146 / $148;
   $150 = $ix;
   $151 = (36896 + (($150*80)|0)|0);
   $152 = ((($151)) + 48|0);
   HEAPF64[$152>>3] = $149;
  }
  $153 = $ix;
  $154 = $2;
  $155 = ((($154)) + 18|0);
  $156 = (($155) + ($153)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157&255;
  $159 = $ix;
  $160 = $4;
  $161 = ((($160)) + 182|0);
  $162 = (($161) + ($159<<1)|0);
  $163 = HEAP16[$162>>1]|0;
  $164 = $163 << 16 >> 16;
  $165 = Math_imul($158, $164)|0;
  $166 = $165 << 6;
  $167 = (+($166|0));
  $168 = $ix;
  $169 = (36896 + (($168*80)|0)|0);
  $170 = ((($169)) + 24|0);
  HEAPF64[$170>>3] = $167;
  $171 = $ix;
  $172 = (36896 + (($171*80)|0)|0);
  $173 = ((($172)) + 24|0);
  $174 = +HEAPF64[$173>>3];
  $175 = (~~(($174)));
  $176 = $ix;
  $177 = (36896 + (($176*80)|0)|0);
  $178 = ((($177)) + 4|0);
  HEAP32[$178>>2] = $175;
  $179 = $ix;
  $180 = $3;
  $181 = ((($180)) + 18|0);
  $182 = (($181) + ($179)|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = $ix;
  $186 = $4;
  $187 = ((($186)) + 182|0);
  $188 = (($187) + ($185<<1)|0);
  $189 = HEAP16[$188>>1]|0;
  $190 = $189 << 16 >> 16;
  $191 = Math_imul($184, $190)|0;
  $192 = $191 << 6;
  $193 = (+($192|0));
  $next = $193;
  $194 = $next;
  $195 = $ix;
  $196 = (36896 + (($195*80)|0)|0);
  $197 = ((($196)) + 24|0);
  $198 = +HEAPF64[$197>>3];
  $199 = $194 - $198;
  $200 = $199 * 64.0;
  $201 = $length2;
  $202 = (+($201|0));
  $203 = $200 / $202;
  $204 = $ix;
  $205 = (36896 + (($204*80)|0)|0);
  $206 = ((($205)) + 56|0);
  HEAPF64[$206>>3] = $203;
  $207 = $ix;
  $208 = ($207|0)<=(5);
  do {
   if ($208) {
    $209 = $ix;
    $210 = HEAP32[20080]|0;
    $211 = ((($210)) + 104|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($209|0)<=($212|0);
    if ($213) {
     $214 = $ix;
     $215 = $2;
     $216 = ((($215)) + 26|0);
     $217 = (($216) + ($214)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = $218&255;
     $220 = $ix;
     $221 = $4;
     $222 = ((($221)) + 200|0);
     $223 = (($222) + ($220<<1)|0);
     $224 = HEAP16[$223>>1]|0;
     $225 = $224 << 16 >> 16;
     $226 = Math_imul($219, $225)|0;
     $227 = $226 << 10;
     $228 = (+($227|0));
     $229 = $ix;
     $230 = (36896 + (($229*80)|0)|0);
     $231 = ((($230)) + 32|0);
     HEAPF64[$231>>3] = $228;
     $232 = $ix;
     $233 = (36896 + (($232*80)|0)|0);
     $234 = ((($233)) + 32|0);
     $235 = +HEAPF64[$234>>3];
     $236 = (~~(($235)));
     $237 = $ix;
     $238 = (36896 + (($237*80)|0)|0);
     $239 = ((($238)) + 8|0);
     HEAP32[$239>>2] = $236;
     $240 = $ix;
     $241 = $3;
     $242 = ((($241)) + 26|0);
     $243 = (($242) + ($240)|0);
     $244 = HEAP8[$243>>0]|0;
     $245 = $244&255;
     $246 = $ix;
     $247 = $4;
     $248 = ((($247)) + 200|0);
     $249 = (($248) + ($246<<1)|0);
     $250 = HEAP16[$249>>1]|0;
     $251 = $250 << 16 >> 16;
     $252 = Math_imul($245, $251)|0;
     $253 = $252 << 10;
     $254 = (+($253|0));
     $next = $254;
     $255 = $next;
     $256 = $ix;
     $257 = (36896 + (($256*80)|0)|0);
     $258 = ((($257)) + 32|0);
     $259 = +HEAPF64[$258>>3];
     $260 = $255 - $259;
     $261 = $260 * 64.0;
     $262 = $length2;
     $263 = (+($262|0));
     $264 = $261 / $263;
     $265 = $ix;
     $266 = (36896 + (($265*80)|0)|0);
     $267 = ((($266)) + 64|0);
     HEAPF64[$267>>3] = $264;
     $268 = $ix;
     $269 = ($268|0)<(3);
     $270 = $ix;
     if ($269) {
      $271 = $2;
      $272 = ((($271)) + 32|0);
      $273 = (($272) + ($270)|0);
      $274 = HEAP8[$273>>0]|0;
      $275 = $274&255;
      $276 = $ix;
      $277 = $4;
      $278 = ((($277)) + 200|0);
      $279 = (($278) + ($276<<1)|0);
      $280 = HEAP16[$279>>1]|0;
      $281 = $280 << 16 >> 16;
      $282 = Math_imul($275, $281)|0;
      $283 = $282 << 10;
      $284 = (+($283|0));
      $285 = $ix;
      $286 = (36896 + (($285*80)|0)|0);
      $287 = ((($286)) + 40|0);
      HEAPF64[$287>>3] = $284;
      $288 = $ix;
      $289 = (36896 + (($288*80)|0)|0);
      $290 = ((($289)) + 40|0);
      $291 = +HEAPF64[$290>>3];
      $292 = (~~(($291)));
      $293 = $ix;
      $294 = (36896 + (($293*80)|0)|0);
      $295 = ((($294)) + 12|0);
      HEAP32[$295>>2] = $292;
      $296 = $ix;
      $297 = $3;
      $298 = ((($297)) + 32|0);
      $299 = (($298) + ($296)|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = $300&255;
      $302 = $ix;
      $303 = $4;
      $304 = ((($303)) + 200|0);
      $305 = (($304) + ($302<<1)|0);
      $306 = HEAP16[$305>>1]|0;
      $307 = $306 << 16 >> 16;
      $308 = Math_imul($301, $307)|0;
      $309 = $308 << 10;
      $310 = (+($309|0));
      $next = $310;
      $311 = $next;
      $312 = $ix;
      $313 = (36896 + (($312*80)|0)|0);
      $314 = ((($313)) + 40|0);
      $315 = +HEAPF64[$314>>3];
      $316 = $311 - $315;
      $317 = $316 * 64.0;
      $318 = $length2;
      $319 = (+($318|0));
      $320 = $317 / $319;
      $321 = $ix;
      $322 = (36896 + (($321*80)|0)|0);
      $323 = ((($322)) + 72|0);
      HEAPF64[$323>>3] = $320;
      break;
     } else {
      $324 = (36896 + (($270*80)|0)|0);
      $325 = ((($324)) + 8|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = $ix;
      $328 = (36896 + (($327*80)|0)|0);
      $329 = ((($328)) + 12|0);
      HEAP32[$329>>2] = $326;
      break;
     }
    }
   }
  } while(0);
  $330 = $ix;
  $331 = (($330) + 1)|0;
  $ix = $331;
 }
 STACKTOP = sp;return;
}
function __Z12WavegenFill2i($fill_zeros) {
 $fill_zeros = $fill_zeros|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $length = 0, $marker_type = 0, $q = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fill_zeros;
 while(1) {
  $2 = HEAP32[20118]|0;
  $3 = HEAP32[20120]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   label = 35;
   break;
  }
  $5 = (__Z9WcmdqUsedv()|0);
  $6 = ($5|0)<=(0);
  if ($6) {
   break;
  }
  $result = 0;
  $21 = HEAP32[20802]|0;
  $22 = (80488 + ($21<<4)|0);
  $q = $22;
  $23 = $q;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $length = $25;
  $26 = $q;
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 255;
  do {
   switch ($28|0) {
   case 9:  {
    $29 = $length;
    $30 = $q;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32;
    $34 = $q;
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $36 >>> 16;
    $38 = $q;
    $39 = ((($38)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 & 65535;
    __Z8SetPitchiPhii($29,$33,$37,$41);
    break;
   }
   case 5:  {
    $42 = HEAP32[22028]|0;
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = $length;
     $45 = HEAP32[22027]|0;
     $46 = (($45) - ($44))|0;
     HEAP32[22027] = $46;
    }
    HEAP32[(80436)>>2] = 0;
    HEAP32[(80468)>>2] = 100;
    __Z10KlattReseti(1);
    $47 = $length;
    $48 = HEAP32[22028]|0;
    $49 = (__ZL11PlaySilenceii($47,$48)|0);
    $result = $49;
    break;
   }
   case 6:  {
    $50 = HEAP32[21684]|0;
    HEAP32[22027] = $50;
    HEAP32[(80436)>>2] = 0;
    __Z10KlattReseti(1);
    $51 = $length;
    $52 = HEAP32[22028]|0;
    $53 = $q;
    $54 = ((($53)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55;
    $57 = $q;
    $58 = ((($57)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & 255;
    $61 = $q;
    $62 = ((($61)) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 >>> 8;
    $65 = (__ZL8PlayWaveiiPhii($51,$52,$56,$60,$64)|0);
    $result = $65;
    break;
   }
   case 7:  {
    $66 = $q;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 >>> 8;
    HEAP32[(80444)>>2] = $69;
    $70 = $q;
    $71 = ((($70)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 & 255;
    HEAP32[(80440)>>2] = $73;
    $74 = $length;
    $75 = $74 & 65535;
    HEAP32[(80436)>>2] = $75;
    $76 = $length;
    $77 = $76 >> 16;
    $78 = $77 & 65535;
    HEAP32[(80452)>>2] = $78;
    $79 = HEAP32[(80440)>>2]|0;
    $80 = ($79|0)==(0);
    if ($80) {
     $81 = HEAP32[(80436)>>2]|0;
     $82 = $81<<1;
     HEAP32[(80436)>>2] = $82;
     $83 = HEAP32[(80452)>>2]|0;
     $84 = $83<<1;
     HEAP32[(80452)>>2] = $84;
    }
    HEAP32[(80448)>>2] = 0;
    HEAP32[(80456)>>2] = 0;
    $85 = $q;
    $86 = ((($85)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $87;
    HEAP32[(80432)>>2] = $88;
    break;
   }
   case 4:  {
    HEAP32[(80436)>>2] = 0;
    label = 21;
    break;
   }
   case 3:  {
    label = 21;
    break;
   }
   case 2:  {
    HEAP32[(80436)>>2] = 0;
    label = 23;
    break;
   }
   case 1:  {
    label = 23;
    break;
   }
   case 10:  {
    $123 = $q;
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 >>> 8;
    $marker_type = $125;
    $126 = $marker_type;
    $127 = $q;
    $128 = ((($127)) + 4|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $q;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $q;
    $134 = ((($133)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = HEAP32[20118]|0;
    __Z11MarkerEventijiiPh($126,$129,$132,$135,$136);
    $137 = $marker_type;
    $138 = ($137|0)==(1);
    if ($138) {
     $139 = $q;
     $140 = ((($139)) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $141 & 16777215;
     HEAP32[20804] = $142;
    }
    break;
   }
   case 8:  {
    $143 = $length;
    $144 = $q;
    $145 = ((($144)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $146;
    $148 = $q;
    $149 = ((($148)) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    __ZL12SetAmplitudeiPhi($143,$147,$150);
    break;
   }
   case 11:  {
    $151 = $q;
    $152 = ((($151)) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $153;
    __Z15WavegenSetVoiceP7voice_t($154);
    $155 = $q;
    $156 = ((($155)) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $157;
    _free($158);
    break;
   }
   case 12:  {
    $159 = $q;
    $160 = ((($159)) + 4|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $q;
    $163 = ((($162)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    __Z11SetEmbeddedii($161,$164);
    break;
   }
   case 13:  {
    $165 = $length;
    $166 = HEAP32[22028]|0;
    $167 = HEAP32[1262]|0;
    $168 = HEAP32[20080]|0;
    $169 = ((($168)) + 112|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = Math_imul($167, $170)|0;
    $172 = (($171|0) / 64)&-1;
    $173 = (__Z10MbrolaFilliii($165,$166,$172)|0);
    $result = $173;
    break;
   }
   case 14:  {
    $174 = $q;
    $175 = ((($174)) + 4|0);
    $176 = HEAP32[$175>>2]|0;
    HEAP32[(80468)>>2] = $176;
    $177 = ($176|0)==(0);
    $$ = $177 ? 100 : $176;
    HEAP32[(80468)>>2] = $$;
    break;
   }
   case 15:  {
    $178 = $q;
    $179 = ((($178)) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (+($180>>>0));
    $182 = $181 / 1024.0;
    HEAPF64[1] = $182;
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   $89 = HEAP32[21684]|0;
   HEAP32[22027] = $89;
   $90 = $length;
   $91 = $90 & 65535;
   $92 = $q;
   $93 = ((($92)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $94 >>> 16;
   $96 = HEAP32[22028]|0;
   $97 = $q;
   $98 = ((($97)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99;
   $101 = $q;
   $102 = ((($101)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103;
   $105 = (__ZL8Wavegen2iiiP7frame_tS0_($91,$95,$96,$100,$104)|0);
   $result = $105;
  }
  else if ((label|0) == 23) {
   label = 0;
   $106 = HEAP32[21684]|0;
   HEAP32[22027] = $106;
   $107 = $length;
   $108 = $107 & 65535;
   $109 = $q;
   $110 = ((($109)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 >>> 16;
   $113 = HEAP32[22028]|0;
   $114 = $q;
   $115 = ((($114)) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116;
   $118 = $q;
   $119 = ((($118)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $120;
   $122 = (__Z14Wavegen_Klatt2iiiP7frame_tS0_($108,$112,$113,$117,$121)|0);
   $result = $122;
  }
  $183 = $result;
  $184 = ($183|0)==(0);
  if ($184) {
   __ZL12WcmdqIncHeadv();
   HEAP32[22028] = 0;
   continue;
  } else {
   HEAP32[22028] = 1;
   continue;
  }
 }
 if ((label|0) == 35) {
  $0 = 0;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 $7 = HEAP32[22027]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = HEAP32[22027]|0;
  $10 = HEAP32[22028]|0;
  $11 = (__ZL11PlaySilenceii($9,$10)|0);
  HEAP32[22028] = $11;
  $12 = HEAP32[22028]|0;
  $13 = ($12|0)==(1);
  if ($13) {
   $0 = 0;
   $185 = $0;
   STACKTOP = sp;return ($185|0);
  }
 }
 $14 = $1;
 $15 = ($14|0)!=(0);
 L42: do {
  if ($15) {
   while(1) {
    $16 = HEAP32[20118]|0;
    $17 = HEAP32[20120]|0;
    $18 = ($16>>>0)<($17>>>0);
    if (!($18)) {
     break L42;
    }
    $19 = HEAP32[20118]|0;
    $20 = ((($19)) + 1|0);
    HEAP32[20118] = $20;
    HEAP8[$19>>0] = 0;
   }
  }
 } while(0);
 $0 = 1;
 $185 = $0;
 STACKTOP = sp;return ($185|0);
}
function __ZL11PlaySilenceii($length,$resume) {
 $length = $length|0;
 $resume = $resume|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $length;
 $2 = $resume;
 $value = 0;
 HEAP32[20809] = 0;
 HEAP32[20808] = 0;
 HEAP32[20810] = 2147483647;
 $3 = $1;
 $4 = ($3|0)==(0);
 if ($4) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $5 = $2;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  HEAP32[22029] = $7;
 }
 while(1) {
  $8 = HEAP32[22029]|0;
  $9 = (($8) + -1)|0;
  HEAP32[22029] = $9;
  $10 = ($8|0)>(0);
  if (!($10)) {
   label = 12;
   break;
  }
  $11 = HEAP32[20100]|0;
  $12 = (($11) + 1)|0;
  HEAP32[20100] = $12;
  $13 = (107916 + ($11<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = HEAP32[20101]|0;
  $17 = Math_imul($15, $16)|0;
  $18 = $17 >> 8;
  $value = $18;
  $19 = HEAP32[20100]|0;
  $20 = ($19|0)>=(5500);
  if ($20) {
   HEAP32[20100] = 0;
  }
  $21 = $value;
  $22 = $21&255;
  $23 = HEAP32[20118]|0;
  $24 = ((($23)) + 1|0);
  HEAP32[20118] = $24;
  HEAP8[$23>>0] = $22;
  $25 = $value;
  $26 = $25 >> 8;
  $27 = $26&255;
  $28 = HEAP32[20118]|0;
  $29 = ((($28)) + 1|0);
  HEAP32[20118] = $29;
  HEAP8[$28>>0] = $27;
  $30 = $value;
  $31 = $30&65535;
  $32 = HEAP32[20099]|0;
  $33 = (($32) + 1)|0;
  HEAP32[20099] = $33;
  $34 = (107916 + ($32<<1)|0);
  HEAP16[$34>>1] = $31;
  $35 = HEAP32[20099]|0;
  $36 = ($35|0)>=(5500);
  if ($36) {
   HEAP32[20099] = 0;
  }
  $37 = HEAP32[20118]|0;
  $38 = HEAP32[20120]|0;
  $39 = ($37>>>0)>=($38>>>0);
  if ($39) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  $0 = 1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZL8PlayWaveiiPhii($length,$resume,$data,$scale,$amp) {
 $length = $length|0;
 $resume = $resume|0;
 $data = $data|0;
 $scale = $scale|0;
 $amp = $amp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $c = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $length;
 $2 = $resume;
 $3 = $data;
 $4 = $scale;
 $5 = $amp;
 $6 = $2;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $1;
  HEAP32[22030] = $8;
  HEAP32[22031] = 0;
 }
 HEAP32[20809] = 0;
 HEAP32[20808] = 0;
 while(1) {
  $9 = HEAP32[22030]|0;
  $10 = (($9) + -1)|0;
  HEAP32[22030] = $10;
  $11 = ($9|0)>(0);
  if (!($11)) {
   label = 18;
   break;
  }
  $12 = $4;
  $13 = ($12|0)==(0);
  $14 = HEAP32[22031]|0;
  $15 = (($14) + 1)|0;
  if ($13) {
   $16 = $3;
   $17 = (($16) + ($15)|0);
   $18 = HEAP8[$17>>0]|0;
   $c = $18;
   $19 = HEAP32[22031]|0;
   $20 = $3;
   $21 = (($20) + ($19)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $c;
   $25 = $24 << 24 >> 24;
   $26 = $25<<8;
   $27 = (($23) + ($26))|0;
   $value = $27;
   $28 = HEAP32[22031]|0;
   $29 = (($28) + 2)|0;
   HEAP32[22031] = $29;
  } else {
   HEAP32[22031] = $15;
   $30 = $3;
   $31 = (($30) + ($14)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = $4;
   $35 = Math_imul($33, $34)|0;
   $value = $35;
  }
  $36 = HEAP32[1281]|0;
  $37 = HEAP32[1262]|0;
  $38 = Math_imul($36, $37)|0;
  $39 = $value;
  $40 = Math_imul($39, $38)|0;
  $value = $40;
  $41 = $value;
  $42 = $41 >> 10;
  $value = $42;
  $43 = $value;
  $44 = $5;
  $45 = Math_imul($43, $44)|0;
  $46 = (($45|0) / 32)&-1;
  $value = $46;
  $47 = HEAP32[20100]|0;
  $48 = (($47) + 1)|0;
  HEAP32[20100] = $48;
  $49 = (107916 + ($47<<1)|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = HEAP32[20101]|0;
  $53 = Math_imul($51, $52)|0;
  $54 = $53 >> 8;
  $55 = $value;
  $56 = (($55) + ($54))|0;
  $value = $56;
  $57 = $value;
  $58 = ($57|0)>(32767);
  if ($58) {
   $value = 32768;
  } else {
   $59 = $value;
   $60 = ($59|0)<(-32768);
   if ($60) {
    $value = -32768;
   }
  }
  $61 = HEAP32[20100]|0;
  $62 = ($61|0)>=(5500);
  if ($62) {
   HEAP32[20100] = 0;
  }
  $63 = $value;
  $64 = $63&255;
  $65 = HEAP32[20118]|0;
  HEAP8[$65>>0] = $64;
  $66 = $value;
  $67 = $66 >> 8;
  $68 = $67&255;
  $69 = HEAP32[20118]|0;
  $70 = ((($69)) + 1|0);
  HEAP8[$70>>0] = $68;
  $71 = HEAP32[20118]|0;
  $72 = ((($71)) + 2|0);
  HEAP32[20118] = $72;
  $73 = $value;
  $74 = ($73*3)|0;
  $75 = (($74|0) / 4)&-1;
  $76 = $75&65535;
  $77 = HEAP32[20099]|0;
  $78 = (($77) + 1)|0;
  HEAP32[20099] = $78;
  $79 = (107916 + ($77<<1)|0);
  HEAP16[$79>>1] = $76;
  $80 = HEAP32[20099]|0;
  $81 = ($80|0)>=(5500);
  if ($81) {
   HEAP32[20099] = 0;
  }
  $82 = HEAP32[20118]|0;
  $83 = HEAP32[20120]|0;
  $84 = ($82>>>0)>=($83>>>0);
  if ($84) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $0 = 1;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 18) {
  $0 = 0;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 return (0)|0;
}
function __ZL8Wavegen2iiiP7frame_tS0_($length,$modulation,$resume,$fr1,$fr2) {
 $length = $length|0;
 $modulation = $modulation|0;
 $resume = $resume|0;
 $fr1 = $fr1|0;
 $fr2 = $fr2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $modulation;
 $2 = $resume;
 $3 = $fr1;
 $4 = $fr2;
 $5 = $2;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $0;
  $8 = $1;
  $9 = $3;
  $10 = $4;
  $11 = HEAP32[20080]|0;
  __Z8SetSynthiiP7frame_tS0_P7voice_t($7,$8,$9,$10,$11);
 }
 $12 = (__Z7Wavegenv()|0);
 STACKTOP = sp;return ($12|0);
}
function __ZL12SetAmplitudeiPhi($length,$amp_env,$value) {
 $length = $length|0;
 $amp_env = $amp_env|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $amp_env;
 $2 = $value;
 HEAP32[21670] = 0;
 $3 = $0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[21669] = 0;
 } else {
  $5 = $0;
  $6 = (2097152 / ($5|0))&-1;
  HEAP32[21669] = $6;
 }
 $7 = $2;
 $8 = HEAP32[1262]|0;
 $9 = Math_imul($7, $8)|0;
 $10 = (($9|0) / 16)&-1;
 HEAP32[(80460)>>2] = $10;
 $11 = HEAP32[(80460)>>2]|0;
 $12 = HEAP32[20080]|0;
 $13 = ((($12)) + 124|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = Math_imul($11, $14)|0;
 $16 = ($15*15)|0;
 $17 = (($16|0) / 100)&-1;
 HEAP32[(80464)>>2] = $17;
 $18 = $1;
 HEAP32[21681] = $18;
 STACKTOP = sp;return;
}
function __ZL12WcmdqIncHeadv() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20802]|0;
 $1 = (($0) + 1)|0;
 HEAP32[20802] = $1;
 $2 = HEAP32[20802]|0;
 $3 = ($2|0)>=(170);
 $$ = $3 ? 0 : $1;
 HEAP32[20802] = $$;
 return;
}
function __Z11WavegenFilli($fill_zeros) {
 $fill_zeros = $fill_zeros|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $finished = 0, $length = 0, $max_length = 0, $p_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fill_zeros;
 $1 = HEAP32[20118]|0;
 $p_start = $1;
 $2 = (__Z12WavegenFill2i(0)|0);
 $finished = $2;
 $3 = +HEAPF64[1];
 $4 = $3 > 1.0;
 if (!($4)) {
  $28 = $finished;
  STACKTOP = sp;return ($28|0);
 }
 $5 = HEAP32[20120]|0;
 $6 = $p_start;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $max_length = $9;
 $10 = $p_start;
 $11 = HEAP32[20118]|0;
 $12 = $p_start;
 $13 = $11;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 2)&-1;
 $17 = $max_length;
 $18 = (($17|0) / 2)&-1;
 $19 = $finished;
 $20 = (__ZL7SpeedUpPsiii($10,$16,$18,$19)|0);
 $21 = $20<<1;
 $length = $21;
 $22 = $p_start;
 $23 = $length;
 $24 = (($22) + ($23)|0);
 HEAP32[20118] = $24;
 $25 = $length;
 $26 = $max_length;
 $27 = ($25|0)>=($26|0);
 if (!($27)) {
  $28 = $finished;
  STACKTOP = sp;return ($28|0);
 }
 $finished = 0;
 $28 = $finished;
 STACKTOP = sp;return ($28|0);
}
function __ZL7SpeedUpPsiii($outbuf,$length_in,$length_out,$end_of_text) {
 $outbuf = $outbuf|0;
 $length_in = $length_in|0;
 $length_out = $length_out|0;
 $end_of_text = $end_of_text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $outbuf;
 $2 = $length_in;
 $3 = $length_out;
 $4 = $end_of_text;
 $5 = $2;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[20805]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = (_sonicCreateStream(22050,1)|0);
   HEAP32[20805] = $9;
  }
  $10 = HEAP32[20805]|0;
  $11 = (+_sonicGetSpeed($10));
  $12 = $11;
  $13 = +HEAPF64[1];
  $14 = $12 != $13;
  if ($14) {
   $15 = HEAP32[20805]|0;
   $16 = +HEAPF64[1];
   $17 = $16;
   _sonicSetSpeed($15,$17);
  }
  $18 = HEAP32[20805]|0;
  $19 = $1;
  $20 = $2;
  (_sonicWriteShortToStream($18,$19,$20)|0);
 }
 $21 = HEAP32[20805]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $23 = $4;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = HEAP32[20805]|0;
  (_sonicFlushStream($25)|0);
 }
 $26 = HEAP32[20805]|0;
 $27 = $1;
 $28 = $3;
 $29 = (_sonicReadShortFromStream($26,$27,$28)|0);
 $0 = $29;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function __Z15MakePhonemeListP10Translatorii($tr,$post_pause,$start_sentence) {
 $tr = $tr|0;
 $post_pause = $post_pause|0;
 $start_sentence = $start_sentence|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alternative = 0, $current_phoneme_tab = 0, $delete_count = 0, $deleted = 0, $end_sourceix = 0, $insert_ph = 0, $inserted = 0, $ix = 0, $j = 0, $k = 0, $k1 = 0, $max_stress = 0, $n_ph_list3 = 0, $next = 0, $next2 = 0, $nextw = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $ph = 0, $ph2 = 0, $ph22 = 0, $ph_list3 = 0, $phdata = 0, $phlist = 0, $plist2 = 0, $plist3 = 0, $plist3_inserted = 0, $regression = 0;
 var $stop_propagation = 0, $type = 0, $unstress_count = 0, $voicing = 0, $word_start = 0, $word_stress = 0, $worddata = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $phdata = sp + 24088|0;
 $ph_list3 = sp + 72|0;
 $worddata = sp + 40|0;
 $0 = $tr;
 $1 = $post_pause;
 $2 = $start_sentence;
 $ix = 0;
 $insert_ph = 0;
 $unstress_count = 0;
 $word_stress = 0;
 $plist3_inserted = 0;
 ;HEAP32[$worddata>>2]=0|0;HEAP32[$worddata+4>>2]=0|0;HEAP32[$worddata+8>>2]=0|0;HEAP32[$worddata+12>>2]=0|0;HEAP32[$worddata+16>>2]=0|0;HEAP32[$worddata+20>>2]=0|0;
 $plist2 = 99916;
 $phlist = 50632;
 $3 = HEAP32[19063]|0;
 $4 = (($3) - 1)|0;
 $5 = $plist2;
 $6 = (($5) + ($4<<3)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $end_sourceix = $9;
 $max_stress = 0;
 $10 = HEAP32[19063]|0;
 $11 = (($10) - 3)|0;
 $j = $11;
 while(1) {
  $12 = $j;
  $13 = ($12|0)>=(0);
  if (!($13)) {
   break;
  }
  $14 = $j;
  $15 = $plist2;
  $16 = (($15) + ($14<<3)|0);
  $17 = ((($16)) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 & 127;
  $21 = $max_stress;
  $22 = ($20|0)>($21|0);
  if ($22) {
   $23 = $j;
   $24 = $plist2;
   $25 = (($24) + ($23<<3)|0);
   $26 = ((($25)) + 3|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 & 127;
   $max_stress = $29;
  }
  $30 = $j;
  $31 = $plist2;
  $32 = (($31) + ($30<<3)|0);
  $33 = ((($32)) + 4|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = ($35|0)!=(0);
  if ($36) {
   break;
  }
  $37 = $j;
  $38 = (($37) + -1)|0;
  $j = $38;
 }
 $39 = $max_stress;
 $40 = ($39|0)<(4);
 L9: do {
  if ($40) {
   while(1) {
    $41 = $j;
    $42 = (($41) + -1)|0;
    $j = $42;
    $43 = ($42|0)>=(0);
    if (!($43)) {
     break L9;
    }
    $44 = $j;
    $45 = $plist2;
    $46 = (($45) + ($44<<3)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = $48 & 64;
    $50 = ($49|0)!=(0);
    $51 = $j;
    $52 = $plist2;
    $53 = (($52) + ($51<<3)|0);
    $54 = ((($53)) + 3|0);
    if ($50) {
     break;
    }
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)>=(4);
    if ($57) {
     break L9;
    }
   }
   HEAP8[$54>>0] = 4;
  }
 } while(0);
 $delete_count = 0;
 $58 = $0;
 $59 = ((($58)) + 404|0);
 $60 = HEAP32[$59>>2]|0;
 $current_phoneme_tab = $60;
 $j = 0;
 while(1) {
  $61 = $j;
  $62 = HEAP32[19063]|0;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $current_phoneme_tab;
  $65 = $0;
  $66 = ((($65)) + 404|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64|0)!=($67|0);
  if ($68) {
   $69 = $j;
   $70 = $plist2;
   $71 = (($70) + ($69<<3)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = $73 | 32;
   $75 = $74&65535;
   HEAP16[$71>>1] = $75;
  }
  $76 = $delete_count;
  $77 = ($76|0)>(0);
  if ($77) {
   $78 = $j;
   $79 = $delete_count;
   $80 = (($78) - ($79))|0;
   $81 = $plist2;
   $82 = (($81) + ($80<<3)|0);
   $83 = $j;
   $84 = $plist2;
   $85 = (($84) + ($83<<3)|0);
   ;HEAP16[$82>>1]=HEAP16[$85>>1]|0;HEAP16[$82+2>>1]=HEAP16[$85+2>>1]|0;HEAP16[$82+4>>1]=HEAP16[$85+4>>1]|0;HEAP16[$82+6>>1]=HEAP16[$85+6>>1]|0;
  }
  $86 = $j;
  $87 = $plist2;
  $88 = (($87) + ($86<<3)|0);
  $89 = ((($88)) + 2|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = ($91|0)==(21);
  L25: do {
   if ($92) {
    $93 = $j;
    $94 = $plist2;
    $95 = (($94) + ($93<<3)|0);
    $96 = HEAP16[$95>>1]|0;
    $97 = $96&65535;
    $98 = $97 & 2;
    $99 = ($98|0)!=(0);
    do {
     if (!($99)) {
      $100 = $j;
      $101 = $plist2;
      $102 = (($101) + ($100<<3)|0);
      $103 = ((($102)) + 7|0);
      $104 = HEAP8[$103>>0]|0;
      $105 = $104&255;
      $106 = $current_phoneme_tab;
      $107 = ($105|0)==($106|0);
      if (!($107)) {
       $108 = $j;
       $109 = (($108) + 1)|0;
       $110 = $plist2;
       $111 = (($110) + ($109<<3)|0);
       $112 = ((($111)) + 2|0);
       $113 = HEAP8[$112>>0]|0;
       $114 = $113&255;
       $115 = ($114|0)==(21);
       if (!($115)) {
        $116 = $j;
        $117 = (($116) + 1)|0;
        $118 = $plist2;
        $119 = (($118) + ($117<<3)|0);
        $120 = ((($119)) + 2|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = $121&255;
        $123 = ($122|0)==(9);
        if (!($123)) {
         break;
        }
        $124 = $j;
        $125 = (($124) + 2)|0;
        $126 = $plist2;
        $127 = (($126) + ($125<<3)|0);
        $128 = ((($127)) + 2|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = $129&255;
        $131 = ($130|0)==(21);
        if (!($131)) {
         break;
        }
       }
      }
      $132 = $delete_count;
      $133 = (($132) + 1)|0;
      $delete_count = $133;
      break L25;
     }
    } while(0);
    $134 = $j;
    $135 = $plist2;
    $136 = (($135) + ($134<<3)|0);
    $137 = ((($136)) + 7|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $current_phoneme_tab = $139;
   }
  } while(0);
  $140 = $j;
  $141 = (($140) + 1)|0;
  $j = $141;
 }
 $142 = $delete_count;
 $143 = HEAP32[19063]|0;
 $144 = (($143) - ($142))|0;
 HEAP32[19063] = $144;
 $145 = $0;
 $146 = ((($145)) + 24|0);
 $147 = ((($146)) + 16|0);
 $148 = HEAP32[$147>>2]|0;
 $regression = $148;
 $149 = ($148|0)!=(0);
 L37: do {
  if ($149) {
   $stop_propagation = 0;
   $voicing = 0;
   $150 = HEAP32[19063]|0;
   $151 = (($150) - 1)|0;
   $j = $151;
   while(1) {
    $152 = $j;
    $153 = ($152|0)>=(0);
    if (!($153)) {
     break L37;
    }
    $154 = $j;
    $155 = $plist2;
    $156 = (($155) + ($154<<3)|0);
    $157 = ((($156)) + 2|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = (44552 + ($159<<2)|0);
    $161 = HEAP32[$160>>2]|0;
    $ph = $161;
    $162 = $ph;
    $163 = ($162|0)==(0|0);
    do {
     if (!($163)) {
      $164 = $j;
      $165 = $plist2;
      $166 = (($165) + ($164<<3)|0);
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = $168 & 32;
      $170 = ($169|0)!=(0);
      if ($170) {
       $stop_propagation = 0;
       $voicing = 0;
       $171 = $regression;
       $172 = $171 & 256;
       $173 = ($172|0)!=(0);
       $$ = $173 ? 1 : 0;
       $voicing = $$;
       break;
      }
      $174 = $ph;
      $175 = ((($174)) + 11|0);
      $176 = HEAP8[$175>>0]|0;
      $177 = $176&255;
      $type = $177;
      $178 = $regression;
      $179 = $178 & 2;
      $180 = ($179|0)!=(0);
      do {
       if ($180) {
        $181 = $ph;
        $182 = HEAP32[$181>>2]|0;
        $183 = $182 & 255;
        $184 = ($183|0)==(118);
        if (!($184)) {
         $185 = $ph;
         $186 = HEAP32[$185>>2]|0;
         $187 = $186 & 255;
         $188 = ($187|0)==(82);
         if (!($188)) {
          break;
         }
        }
        $stop_propagation = 1;
        $189 = $regression;
        $190 = $189 & 16;
        $191 = ($190|0)!=(0);
        if ($191) {
         $voicing = 0;
        }
       }
      } while(0);
      $192 = $type;
      $193 = ($192|0)==(4);
      $194 = $type;
      $195 = ($194|0)==(6);
      $or$cond = $193 | $195;
      do {
       if ($or$cond) {
        $196 = $voicing;
        $197 = ($196|0)==(0);
        if ($197) {
         $198 = $regression;
         $199 = $198 & 15;
         $200 = ($199|0)!=(0);
         if ($200) {
          $voicing = 1;
          break;
         }
        }
        $201 = $voicing;
        $202 = ($201|0)==(2);
        if ($202) {
         $203 = $ph;
         $204 = ((($203)) + 13|0);
         $205 = HEAP8[$204>>0]|0;
         $206 = $205&255;
         $207 = ($206|0)!=(0);
         if ($207) {
          $208 = $ph;
          $209 = ((($208)) + 13|0);
          $210 = HEAP8[$209>>0]|0;
          $211 = $j;
          $212 = $plist2;
          $213 = (($212) + ($211<<3)|0);
          $214 = ((($213)) + 2|0);
          HEAP8[$214>>0] = $210;
         }
        }
       } else {
        $215 = $type;
        $216 = ($215|0)==(5);
        $217 = $type;
        $218 = ($217|0)==(7);
        $or$cond3 = $216 | $218;
        if (!($or$cond3)) {
         $238 = $regression;
         $239 = $238 & 8;
         $240 = ($239|0)!=(0);
         if (!($240)) {
          $voicing = 0;
          break;
         }
         $241 = $type;
         $242 = ($241|0)==(0);
         $243 = $type;
         $244 = ($243|0)==(2);
         $or$cond5 = $242 | $244;
         if (!($or$cond5)) {
          break;
         }
         $voicing = 0;
         break;
        }
        $219 = $voicing;
        $220 = ($219|0)==(0);
        if ($220) {
         $221 = $regression;
         $222 = $221 & 15;
         $223 = ($222|0)!=(0);
         if ($223) {
          $voicing = 2;
          break;
         }
        }
        $224 = $voicing;
        $225 = ($224|0)==(1);
        if ($225) {
         $226 = $ph;
         $227 = ((($226)) + 13|0);
         $228 = HEAP8[$227>>0]|0;
         $229 = $228&255;
         $230 = ($229|0)!=(0);
         if ($230) {
          $231 = $ph;
          $232 = ((($231)) + 13|0);
          $233 = HEAP8[$232>>0]|0;
          $234 = $j;
          $235 = $plist2;
          $236 = (($235) + ($234<<3)|0);
          $237 = ((($236)) + 2|0);
          HEAP8[$237>>0] = $233;
         }
        }
       }
      } while(0);
      $245 = $stop_propagation;
      $246 = ($245|0)!=(0);
      if ($246) {
       $voicing = 0;
       $stop_propagation = 0;
      }
      $247 = $j;
      $248 = $plist2;
      $249 = (($248) + ($247<<3)|0);
      $250 = ((($249)) + 4|0);
      $251 = HEAP16[$250>>1]|0;
      $252 = ($251<<16>>16)!=(0);
      if ($252) {
       $253 = $regression;
       $254 = $253 & 4;
       $255 = ($254|0)!=(0);
       if ($255) {
        $voicing = 0;
       }
       $256 = $regression;
       $257 = $256 & 256;
       $258 = ($257|0)!=(0);
       $259 = $voicing;
       $260 = ($259|0)==(0);
       $or$cond17 = $258 & $260;
       if ($or$cond17) {
        $voicing = 1;
       }
      }
     }
    } while(0);
    $261 = $j;
    $262 = (($261) + -1)|0;
    $j = $262;
   }
  }
 } while(0);
 $263 = $0;
 $264 = (__ZL18SubstitutePhonemesP10TranslatorP12PHONEME_LIST($263,$ph_list3)|0);
 $265 = (($264) - 2)|0;
 $n_ph_list3 = $265;
 $j = 0;
 while(1) {
  $266 = $j;
  $267 = $n_ph_list3;
  $268 = ($266|0)<($267|0);
  $269 = $ix;
  $270 = ($269|0)<(997);
  $271 = $268 ? $270 : 0;
  if (!($271)) {
   break;
  }
  $272 = $j;
  $273 = (($ph_list3) + (($272*24)|0)|0);
  $274 = ((($273)) + 4|0);
  $275 = HEAP16[$274>>1]|0;
  $276 = ($275<<16>>16)!=(0);
  if (!($276)) {
   $312 = $j;
   $313 = (($312) + 1)|0;
   $j = $313;
   continue;
  }
  $word_stress = 0;
  $277 = $j;
  $nextw = $277;
  while(1) {
   $278 = $nextw;
   $279 = $n_ph_list3;
   $280 = ($278|0)<($279|0);
   if (!($280)) {
    break;
   }
   $281 = $nextw;
   $282 = (($ph_list3) + (($281*24)|0)|0);
   $283 = ((($282)) + 3|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284&255;
   $286 = $word_stress;
   $287 = ($285|0)>($286|0);
   if ($287) {
    $288 = $nextw;
    $289 = (($ph_list3) + (($288*24)|0)|0);
    $290 = ((($289)) + 3|0);
    $291 = HEAP8[$290>>0]|0;
    $292 = $291&255;
    $word_stress = $292;
   }
   $293 = $nextw;
   $294 = (($293) + 1)|0;
   $nextw = $294;
   $295 = $nextw;
   $296 = (($ph_list3) + (($295*24)|0)|0);
   $297 = ((($296)) + 4|0);
   $298 = HEAP16[$297>>1]|0;
   $299 = ($298<<16>>16)!=(0);
   if ($299) {
    break;
   }
  }
  $300 = $j;
  $k = $300;
  while(1) {
   $301 = $k;
   $302 = $nextw;
   $303 = ($301|0)<($302|0);
   if (!($303)) {
    break;
   }
   $304 = $word_stress;
   $305 = $304&255;
   $306 = $k;
   $307 = (($ph_list3) + (($306*24)|0)|0);
   $308 = ((($307)) + 6|0);
   HEAP8[$308>>0] = $305;
   $309 = $k;
   $310 = (($309) + 1)|0;
   $k = $310;
  }
  $311 = $nextw;
  $j = $311;
 }
 $314 = HEAP32[(44588)>>2]|0;
 $ph = $314;
 $315 = $ph;
 $316 = ((($ph_list3)) + 8|0);
 HEAP32[$316>>2] = $315;
 $word_start = 1;
 $j = 0;
 while(1) {
  $317 = $insert_ph;
  $318 = ($317|0)!=(0);
  if (!($318)) {
   $319 = $j;
   $320 = $n_ph_list3;
   $321 = ($319|0)<($320|0);
   $322 = $ix;
   $323 = ($322|0)<(997);
   $324 = $321 ? $323 : 0;
   if (!($324)) {
    break;
   }
  }
  $325 = $j;
  $326 = (($ph_list3) + (($325*24)|0)|0);
  $plist3 = $326;
  $inserted = 0;
  $deleted = 0;
  $327 = $insert_ph;
  $328 = ($327|0)!=(0);
  $329 = $plist3;
  if ($328) {
   $330 = ((($329)) + 2|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = (44552 + ($332<<2)|0);
   $334 = HEAP32[$333>>2]|0;
   $next = $334;
   $335 = $j;
   $336 = (($335) + -1)|0;
   $j = $336;
   $337 = $j;
   $338 = (($ph_list3) + (($337*24)|0)|0);
   $plist3_inserted = $338;
   $plist3 = $338;
   $339 = $j;
   $340 = ($339|0)>(0);
   L112: do {
    if ($340) {
     $341 = $word_start;
     $342 = ($341|0)>(0);
     if ($342) {
      $343 = $word_start;
      $k1 = $343;
      $344 = $word_start;
      $345 = (($344) + -1)|0;
      $word_start = $345;
     } else {
      $k1 = 2;
     }
     while(1) {
      $346 = $k1;
      $347 = $j;
      $348 = ($346|0)<=($347|0);
      if (!($348)) {
       break L112;
      }
      $349 = $k1;
      $350 = (($349) - 1)|0;
      $351 = (($ph_list3) + (($350*24)|0)|0);
      $352 = $k1;
      $353 = (($ph_list3) + (($352*24)|0)|0);
      ;HEAP32[$351>>2]=HEAP32[$353>>2]|0;HEAP32[$351+4>>2]=HEAP32[$353+4>>2]|0;HEAP32[$351+8>>2]=HEAP32[$353+8>>2]|0;HEAP32[$351+12>>2]=HEAP32[$353+12>>2]|0;HEAP32[$351+16>>2]=HEAP32[$353+16>>2]|0;HEAP32[$351+20>>2]=HEAP32[$353+20>>2]|0;
      $354 = $k1;
      $355 = (($354) + 1)|0;
      $k1 = $355;
     }
    }
   } while(0);
   $356 = $plist3;
   ;HEAP32[$356>>2]=0|0;HEAP32[$356+4>>2]=0|0;HEAP32[$356+8>>2]=0|0;HEAP32[$356+12>>2]=0|0;HEAP32[$356+16>>2]=0|0;HEAP32[$356+20>>2]=0|0;
   $357 = $insert_ph;
   $358 = $357&255;
   $359 = $plist3;
   $360 = ((($359)) + 2|0);
   HEAP8[$360>>0] = $358;
   $361 = $insert_ph;
   $362 = (44552 + ($361<<2)|0);
   $363 = HEAP32[$362>>2]|0;
   $ph = $363;
   $364 = $ph;
   $365 = $plist3;
   $366 = ((($365)) + 8|0);
   HEAP32[$366>>2] = $364;
   $insert_ph = 0;
   $inserted = 1;
  } else {
   $367 = ((($329)) + 4|0);
   $368 = HEAP16[$367>>1]|0;
   $369 = $368&65535;
   $370 = ($369|0)!=(0);
   if ($370) {
    $371 = $j;
    $word_start = $371;
   }
   $372 = $plist3;
   $373 = ((($372)) + 2|0);
   $374 = HEAP8[$373>>0]|0;
   $375 = $374&255;
   $376 = (44552 + ($375<<2)|0);
   $377 = HEAP32[$376>>2]|0;
   $ph = $377;
   $378 = $ph;
   $379 = $plist3;
   $380 = ((($379)) + 8|0);
   HEAP32[$380>>2] = $378;
   $381 = $plist3;
   $382 = ((($381)) + 2|0);
   $383 = HEAP8[$382>>0]|0;
   $384 = $383&255;
   $385 = ($384|0)==(21);
   if ($385) {
    $386 = $plist3;
    $387 = ((($386)) + 7|0);
    $388 = HEAP8[$387>>0]|0;
    $389 = $388&255;
    __Z18SelectPhonemeTablei($389);
   }
   $390 = $plist3;
   $391 = ((($390)) + 24|0);
   $392 = ((($391)) + 2|0);
   $393 = HEAP8[$392>>0]|0;
   $394 = $393&255;
   $395 = (44552 + ($394<<2)|0);
   $396 = HEAP32[$395>>2]|0;
   $next = $396;
   $397 = $next;
   $398 = $plist3;
   $399 = ((($398)) + 24|0);
   $400 = ((($399)) + 8|0);
   HEAP32[$400>>2] = $397;
  }
  $401 = $ph;
  $402 = ($401|0)==(0|0);
  if (!($402)) {
   $403 = $0;
   $404 = $plist3;
   __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($403,256,$404,$phdata,$worddata);
   $405 = ((($phdata)) + 4|0);
   $406 = ((($405)) + 8|0);
   $407 = HEAP32[$406>>2]|0;
   $alternative = $407;
   $408 = ($407|0)>(0);
   if ($408) {
    $409 = $alternative;
    $410 = (44552 + ($409<<2)|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = $j;
    $413 = (($412) + 1)|0;
    $414 = (($ph_list3) + (($413*24)|0)|0);
    $415 = ((($414)) + 8|0);
    HEAP32[$415>>2] = $411;
    $416 = $alternative;
    $417 = $416&255;
    $418 = $j;
    $419 = (($418) + 1)|0;
    $420 = (($ph_list3) + (($419*24)|0)|0);
    $421 = ((($420)) + 2|0);
    HEAP8[$421>>0] = $417;
    $422 = $alternative;
    $423 = (44552 + ($422<<2)|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = ((($424)) + 11|0);
    $426 = HEAP8[$425>>0]|0;
    $427 = $j;
    $428 = (($427) + 1)|0;
    $429 = (($ph_list3) + (($428*24)|0)|0);
    $430 = ((($429)) + 17|0);
    HEAP8[$430>>0] = $426;
    $431 = $alternative;
    $432 = (44552 + ($431<<2)|0);
    $433 = HEAP32[$432>>2]|0;
    $next = $433;
   }
   $434 = ((($phdata)) + 4|0);
   $435 = ((($434)) + 12|0);
   $436 = HEAP32[$435>>2]|0;
   $alternative = $436;
   $437 = ($436|0)>(0);
   $438 = $inserted;
   $439 = ($438|0)==(0);
   $or$cond7 = $437 & $439;
   if ($or$cond7) {
    $440 = $ph;
    $ph2 = $440;
    $441 = $plist3;
    $442 = ((($441)) + 2|0);
    $443 = HEAP8[$442>>0]|0;
    $444 = $443&255;
    $insert_ph = $444;
    $445 = $alternative;
    $446 = (44552 + ($445<<2)|0);
    $447 = HEAP32[$446>>2]|0;
    $ph = $447;
    $448 = $ph;
    $449 = $plist3;
    $450 = ((($449)) + 8|0);
    HEAP32[$450>>2] = $448;
    $451 = $alternative;
    $452 = $451&255;
    $453 = $plist3;
    $454 = ((($453)) + 2|0);
    HEAP8[$454>>0] = $452;
    $455 = $ph;
    $456 = ((($455)) + 11|0);
    $457 = HEAP8[$456>>0]|0;
    $458 = $457&255;
    $459 = ($458|0)==(2);
    $460 = $plist3;
    $461 = HEAP16[$460>>1]|0;
    $462 = $461&65535;
    if ($459) {
     $463 = $462 | 4;
     $464 = $463&65535;
     HEAP16[$460>>1] = $464;
     $465 = $ph2;
     $466 = ((($465)) + 11|0);
     $467 = HEAP8[$466>>0]|0;
     $468 = $467&255;
     $469 = ($468|0)!=(2);
     if ($469) {
      $470 = $plist3;
      $471 = ((($470)) + 3|0);
      HEAP8[$471>>0] = 0;
     }
    } else {
     $472 = $462 & -5;
     $473 = $472&65535;
     HEAP16[$460>>1] = $473;
    }
    $474 = $0;
    $475 = $plist3;
    __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($474,256,$475,$phdata,$worddata);
   }
   $476 = ((($phdata)) + 4|0);
   $477 = ((($476)) + 4|0);
   $478 = HEAP32[$477>>2]|0;
   $alternative = $478;
   $479 = ($478|0)>(0);
   do {
    if ($479) {
     $480 = $ph;
     $ph22 = $480;
     $481 = $alternative;
     $482 = (44552 + ($481<<2)|0);
     $483 = HEAP32[$482>>2]|0;
     $ph = $483;
     $484 = $ph;
     $485 = $plist3;
     $486 = ((($485)) + 8|0);
     HEAP32[$486>>2] = $484;
     $487 = $alternative;
     $488 = $487&255;
     $489 = $plist3;
     $490 = ((($489)) + 2|0);
     HEAP8[$490>>0] = $488;
     $491 = $alternative;
     $492 = ($491|0)==(1);
     if ($492) {
      $deleted = 1;
      break;
     }
     $493 = $ph;
     $494 = ((($493)) + 11|0);
     $495 = HEAP8[$494>>0]|0;
     $496 = $495&255;
     $497 = ($496|0)==(2);
     $498 = $plist3;
     $499 = HEAP16[$498>>1]|0;
     $500 = $499&65535;
     if ($497) {
      $501 = $500 | 4;
      $502 = $501&65535;
      HEAP16[$498>>1] = $502;
      $503 = $ph22;
      $504 = ((($503)) + 11|0);
      $505 = HEAP8[$504>>0]|0;
      $506 = $505&255;
      $507 = ($506|0)!=(2);
      if ($507) {
       $508 = $plist3;
       $509 = ((($508)) + 3|0);
       HEAP8[$509>>0] = 0;
      }
     } else {
      $510 = $500 & -5;
      $511 = $510&65535;
      HEAP16[$498>>1] = $511;
     }
     $512 = $0;
     $513 = $plist3;
     __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATAP12WORD_PH_DATA($512,256,$513,$phdata,$worddata);
    }
   } while(0);
   $514 = $ph;
   $515 = ((($514)) + 11|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = $516&255;
   $518 = ($517|0)==(2);
   $519 = $deleted;
   $520 = ($519|0)==(0);
   $or$cond9 = $518 & $520;
   L153: do {
    if ($or$cond9) {
     $521 = $plist3;
     $522 = ((($521)) + 3|0);
     $523 = HEAP8[$522>>0]|0;
     $524 = $523&255;
     $525 = ($524|0)<=(1);
     if (!($525)) {
      $unstress_count = 0;
      break;
     }
     $526 = $unstress_count;
     $527 = (($526) + 1)|0;
     $unstress_count = $527;
     $528 = $0;
     $529 = ((($528)) + 12|0);
     $530 = HEAP32[$529>>2]|0;
     $531 = $530 & 8;
     $532 = ($531|0)!=(0);
     if (!($532)) {
      $565 = $unstress_count;
      $566 = ($565|0)>(1);
      if (!($566)) {
       break;
      }
      $567 = $unstress_count;
      $568 = $567 & 1;
      $569 = ($568|0)==(0);
      if (!($569)) {
       break;
      }
      $570 = $0;
      $571 = ((($570)) + 12|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = $572 & 2;
      $574 = ($573|0)!=(0);
      do {
       if (!($574)) {
        $575 = $word_stress;
        $576 = ($575|0)>(3);
        if ($576) {
         $577 = $plist3;
         $578 = ((($577)) + 24|0);
         $579 = ((($578)) + 4|0);
         $580 = HEAP16[$579>>1]|0;
         $581 = $580&65535;
         $582 = ($581|0)!=(0);
         if ($582) {
          break;
         }
        }
        $583 = $plist3;
        $584 = ((($583)) + 3|0);
        HEAP8[$584>>0] = 0;
        break L153;
       }
      } while(0);
      $unstress_count = 1;
      break;
     }
     $533 = $plist3;
     $534 = ((($533)) + 24|0);
     $p = $534;
     while(1) {
      $535 = $p;
      $536 = ((($535)) + 17|0);
      $537 = HEAP8[$536>>0]|0;
      $538 = $537&255;
      $539 = ($538|0)!=(0);
      if (!($539)) {
       break L153;
      }
      $540 = $p;
      $541 = ((($540)) + 17|0);
      $542 = HEAP8[$541>>0]|0;
      $543 = $542&255;
      $544 = ($543|0)==(2);
      $545 = $p;
      if ($544) {
       break;
      }
      $564 = ((($545)) + 24|0);
      $p = $564;
     }
     $546 = ((($545)) + 3|0);
     $547 = HEAP8[$546>>0]|0;
     $548 = $547&255;
     $549 = ($548|0)<=(1);
     if ($549) {
      $550 = $plist3;
      $551 = ((($550)) + 6|0);
      $552 = HEAP8[$551>>0]|0;
      $553 = $552&255;
      $554 = ($553|0)<(4);
      if ($554) {
       $555 = $plist3;
       $556 = ((($555)) + 3|0);
       HEAP8[$556>>0] = 0;
      }
      $557 = $p;
      $558 = ((($557)) + 6|0);
      $559 = HEAP8[$558>>0]|0;
      $560 = $559&255;
      $561 = ($560|0)<(4);
      if ($561) {
       $562 = $p;
       $563 = ((($562)) + 3|0);
       HEAP8[$563>>0] = 0;
      }
     }
    }
   } while(0);
   $585 = $plist3;
   $586 = ((($585)) + 24|0);
   $587 = HEAP16[$586>>1]|0;
   $588 = $587&65535;
   $589 = $588 & 8;
   $590 = ($589|0)!=(0);
   $591 = $j;
   $592 = ($591|0)>(0);
   $or$cond19 = $590 & $592;
   if ($or$cond19) {
    $593 = $next;
    $594 = ((($593)) + 11|0);
    $595 = HEAP8[$594>>0]|0;
    $596 = $595&255;
    $597 = (_strchr(27481,$596)|0);
    $598 = ($597|0)!=(0|0);
    if ($598) {
     $599 = $next;
     $600 = ((($599)) + 10|0);
     $601 = HEAP8[$600>>0]|0;
     $602 = $601&255;
     $insert_ph = $602;
     $603 = $plist3;
     $604 = ((($603)) + 24|0);
     $605 = HEAP16[$604>>1]|0;
     $606 = $605&65535;
     $607 = $606 ^ 8;
     $608 = $607&65535;
     HEAP16[$604>>1] = $608;
    }
   }
   $609 = $plist3;
   $610 = ((($609)) + 24|0);
   $611 = ((($610)) + 4|0);
   $612 = HEAP16[$611>>1]|0;
   $613 = $612&65535;
   $614 = ($613|0)!=(0);
   if ($614) {
    $615 = $0;
    $616 = ((($615)) + 4|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = ($617|0)!=(0);
    do {
     if ($618) {
      $619 = $ph;
      $620 = ((($619)) + 11|0);
      $621 = HEAP8[$620>>0]|0;
      $622 = $621&255;
      $623 = ($622|0)!=(0);
      if ($623) {
       $624 = $ph;
       $625 = ((($624)) + 11|0);
       $626 = HEAP8[$625>>0]|0;
       $627 = $626&255;
       $628 = ($627|0)!=(2);
       if ($628) {
        $629 = $0;
        $630 = ((($629)) + 4|0);
        $631 = HEAP32[$630>>2]|0;
        $632 = $631 & 512;
        $633 = ($632|0)!=(0);
        if ($633) {
         $insert_ph = 11;
        }
       }
       $634 = $next;
       $635 = ((($634)) + 11|0);
       $636 = HEAP8[$635>>0]|0;
       $637 = $636&255;
       $638 = ($637|0)==(2);
       if ($638) {
        $639 = $0;
        $640 = ((($639)) + 4|0);
        $641 = HEAP32[$640>>2]|0;
        $642 = $641 & 12;
        $x = $642;
        $643 = ($642|0)!=(0);
        do {
         if ($643) {
          $644 = $x;
          $645 = ($644|0)==(12);
          if ($645) {
           $insert_ph = 11;
           break;
          } else {
           $insert_ph = 23;
           break;
          }
         }
        } while(0);
        $646 = $ph;
        $647 = ((($646)) + 11|0);
        $648 = HEAP8[$647>>0]|0;
        $649 = $648&255;
        $650 = ($649|0)==(2);
        do {
         if ($650) {
          $651 = $0;
          $652 = ((($651)) + 4|0);
          $653 = HEAP32[$652>>2]|0;
          $654 = $653 & 3;
          $x = $654;
          $655 = ($654|0)!=(0);
          if (!($655)) {
           break;
          }
          $656 = $x;
          $657 = ($656|0)==(2);
          if ($657) {
           $insert_ph = 10;
           break;
          } else {
           $insert_ph = 23;
           break;
          }
         }
        } while(0);
        $658 = $plist3;
        $659 = ((($658)) + 24|0);
        $660 = ((($659)) + 3|0);
        $661 = HEAP8[$660>>0]|0;
        $662 = $661&255;
        $663 = ($662|0)>=(4);
        if (!($663)) {
         break;
        }
        $664 = $0;
        $665 = ((($664)) + 4|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = $666 & 256;
        $668 = ($667|0)!=(0);
        if (!($668)) {
         break;
        }
        $insert_ph = 10;
       }
      }
     }
    } while(0);
    $669 = $plist3;
    $670 = $plist3_inserted;
    $671 = ($669|0)!=($670|0);
    $672 = $ix;
    $673 = ($672|0)>(0);
    $or$cond11 = $671 & $673;
    if ($or$cond11) {
     $674 = $0;
     $675 = HEAP32[$674>>2]|0;
     $676 = $675 & 7;
     $x = $676;
     $677 = ($676|0)!=(0);
     do {
      if ($677) {
       $678 = $x;
       $679 = ($678|0)>(1);
       if (!($679)) {
        $680 = $insert_ph;
        $681 = ($680|0)!=(10);
        $682 = $insert_ph;
        $683 = ($682|0)!=(11);
        $or$cond13 = $681 & $683;
        if (!($or$cond13)) {
         break;
        }
       }
       $684 = $x;
       $685 = (27473 + ($684)|0);
       $686 = HEAP8[$685>>0]|0;
       $687 = $686&255;
       $insert_ph = $687;
      }
     } while(0);
     $688 = HEAP32[19050]|0;
     $689 = ($688|0)>(0);
     if ($689) {
      $insert_ph = 24;
     }
    }
   }
   $690 = $plist3;
   $691 = ((($690)) + 48|0);
   $692 = ((($691)) + 2|0);
   $693 = HEAP8[$692>>0]|0;
   $694 = $693&255;
   $695 = (44552 + ($694<<2)|0);
   $696 = HEAP32[$695>>2]|0;
   $next2 = $696;
   $697 = $next2;
   $698 = $plist3;
   $699 = ((($698)) + 48|0);
   $700 = ((($699)) + 8|0);
   HEAP32[$700>>2] = $697;
   $701 = $insert_ph;
   $702 = ($701|0)==(0);
   if ($702) {
    $703 = ((($phdata)) + 4|0);
    $704 = ((($703)) + 16|0);
    $705 = HEAP32[$704>>2]|0;
    $706 = ($705|0)!=(0);
    if ($706) {
     $707 = ((($phdata)) + 4|0);
     $708 = ((($707)) + 16|0);
     $709 = HEAP32[$708>>2]|0;
     $insert_ph = $709;
    }
   }
   $710 = $deleted;
   $711 = ($710|0)==(0);
   if ($711) {
    $712 = $ph;
    $713 = $ix;
    $714 = $phlist;
    $715 = (($714) + (($713*24)|0)|0);
    $716 = ((($715)) + 8|0);
    HEAP32[$716>>2] = $712;
    $717 = $ph;
    $718 = ((($717)) + 11|0);
    $719 = HEAP8[$718>>0]|0;
    $720 = $ix;
    $721 = $phlist;
    $722 = (($721) + (($720*24)|0)|0);
    $723 = ((($722)) + 17|0);
    HEAP8[$723>>0] = $719;
    $724 = $ix;
    $725 = $phlist;
    $726 = (($725) + (($724*24)|0)|0);
    $727 = ((($726)) + 16|0);
    HEAP8[$727>>0] = 0;
    $728 = $plist3;
    $729 = HEAP16[$728>>1]|0;
    $730 = $ix;
    $731 = $phlist;
    $732 = (($731) + (($730*24)|0)|0);
    HEAP16[$732>>1] = $729;
    $733 = $plist3;
    $734 = ((($733)) + 3|0);
    $735 = HEAP8[$734>>0]|0;
    $736 = $735&255;
    $737 = $736 & 15;
    $738 = $737&255;
    $739 = $ix;
    $740 = $phlist;
    $741 = (($740) + (($739*24)|0)|0);
    $742 = ((($741)) + 3|0);
    HEAP8[$742>>0] = $738;
    $743 = $plist3;
    $744 = ((($743)) + 6|0);
    $745 = HEAP8[$744>>0]|0;
    $746 = $ix;
    $747 = $phlist;
    $748 = (($747) + (($746*24)|0)|0);
    $749 = ((($748)) + 6|0);
    HEAP8[$749>>0] = $745;
    $750 = $plist3;
    $751 = ((($750)) + 7|0);
    $752 = HEAP8[$751>>0]|0;
    $753 = $ix;
    $754 = $phlist;
    $755 = (($754) + (($753*24)|0)|0);
    $756 = ((($755)) + 7|0);
    HEAP8[$756>>0] = $752;
    $757 = $ix;
    $758 = $phlist;
    $759 = (($758) + (($757*24)|0)|0);
    $760 = ((($759)) + 4|0);
    HEAP16[$760>>1] = 0;
    $761 = $ph;
    $762 = ((($761)) + 10|0);
    $763 = HEAP8[$762>>0]|0;
    $764 = $ix;
    $765 = $phlist;
    $766 = (($765) + (($764*24)|0)|0);
    $767 = ((($766)) + 2|0);
    HEAP8[$767>>0] = $763;
    $768 = $plist3;
    $769 = ((($768)) + 4|0);
    $770 = HEAP16[$769>>1]|0;
    $771 = $770&65535;
    $772 = ($771|0)!=(0);
    if ($772) {
     $773 = $plist3;
     $774 = ((($773)) + 4|0);
     $775 = HEAP16[$774>>1]|0;
     $776 = $ix;
     $777 = $phlist;
     $778 = (($777) + (($776*24)|0)|0);
     $779 = ((($778)) + 4|0);
     HEAP16[$779>>1] = $775;
     $780 = $ix;
     $781 = $phlist;
     $782 = (($781) + (($780*24)|0)|0);
     $783 = ((($782)) + 21|0);
     HEAP8[$783>>0] = 1;
     $784 = $2;
     $785 = ($784|0)!=(0);
     if ($785) {
      $786 = $ix;
      $787 = $phlist;
      $788 = (($787) + (($786*24)|0)|0);
      $789 = ((($788)) + 21|0);
      HEAP8[$789>>0] = 5;
      $2 = 0;
     }
    } else {
     $790 = $ix;
     $791 = $phlist;
     $792 = (($791) + (($790*24)|0)|0);
     $793 = ((($792)) + 21|0);
     HEAP8[$793>>0] = 0;
    }
    $794 = ((($phdata)) + 4|0);
    $795 = ((($794)) + 40|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = $796<<1;
    $798 = $ix;
    $799 = $phlist;
    $800 = (($799) + (($798*24)|0)|0);
    $801 = ((($800)) + 12|0);
    HEAP32[$801>>2] = $797;
    $802 = $ph;
    $803 = ((($802)) + 10|0);
    $804 = HEAP8[$803>>0]|0;
    $805 = $804&255;
    $806 = ($805|0)==(24);
    $807 = HEAP32[19050]|0;
    $808 = ($807|0)>(0);
    $or$cond15 = $806 & $808;
    if ($or$cond15) {
     $809 = $plist3;
     $810 = ((($809)) + 24|0);
     $811 = ((($810)) + 4|0);
     $812 = HEAP16[$811>>1]|0;
     $813 = $812&65535;
     $814 = ($813|0)!=(0);
     if ($814) {
      $815 = HEAP32[(44592)>>2]|0;
      $816 = $ix;
      $817 = $phlist;
      $818 = (($817) + (($816*24)|0)|0);
      $819 = ((($818)) + 8|0);
      HEAP32[$819>>2] = $815;
      $820 = HEAP32[19050]|0;
      $821 = ($820*14)|0;
      $822 = $ix;
      $823 = $phlist;
      $824 = (($823) + (($822*24)|0)|0);
      $825 = ((($824)) + 12|0);
      HEAP32[$825>>2] = $821;
     }
    }
    $826 = $ph;
    $827 = ((($826)) + 11|0);
    $828 = HEAP8[$827>>0]|0;
    $829 = $828&255;
    $830 = ($829|0)==(2);
    do {
     if ($830) {
      label = 176;
     } else {
      $831 = $ph;
      $832 = ((($831)) + 11|0);
      $833 = HEAP8[$832>>0]|0;
      $834 = $833&255;
      $835 = ($834|0)==(3);
      if ($835) {
       label = 176;
      } else {
       $836 = $ph;
       $837 = ((($836)) + 11|0);
       $838 = HEAP8[$837>>0]|0;
       $839 = $838&255;
       $840 = ($839|0)==(8);
       if ($840) {
        label = 176;
        break;
       }
       $841 = $ph;
       $842 = ((($841)) + 11|0);
       $843 = HEAP8[$842>>0]|0;
       $844 = $843&255;
       $845 = ($844|0)==(5);
       if ($845) {
        label = 176;
        break;
       }
       $846 = $ph;
       $847 = ((($846)) + 11|0);
       $848 = HEAP8[$847>>0]|0;
       $849 = $848&255;
       $850 = ($849|0)==(7);
       if ($850) {
        label = 176;
        break;
       }
       $851 = $ph;
       $852 = ((($851)) + 4|0);
       $853 = HEAP32[$852>>2]|0;
       $854 = $853 & 33554432;
       $855 = ($854|0)!=(0);
       if ($855) {
        label = 176;
       }
      }
     }
    } while(0);
    if ((label|0) == 176) {
     label = 0;
     $856 = $ix;
     $857 = $phlist;
     $858 = (($857) + (($856*24)|0)|0);
     $859 = ((($858)) + 12|0);
     HEAP32[$859>>2] = 128;
     $860 = $ix;
     $861 = $phlist;
     $862 = (($861) + (($860*24)|0)|0);
     $863 = ((($862)) + 16|0);
     HEAP8[$863>>0] = 0;
    }
    $864 = $ix;
    $865 = $phlist;
    $866 = (($865) + (($864*24)|0)|0);
    $867 = ((($866)) + 18|0);
    HEAP8[$867>>0] = 0;
    $868 = $ix;
    $869 = $phlist;
    $870 = (($869) + (($868*24)|0)|0);
    $871 = ((($870)) + 20|0);
    HEAP8[$871>>0] = 20;
    $872 = $ix;
    $873 = $phlist;
    $874 = (($873) + (($872*24)|0)|0);
    $875 = ((($874)) + 22|0);
    HEAP8[$875>>0] = -1;
    $876 = $ix;
    $877 = $phlist;
    $878 = (($877) + (($876*24)|0)|0);
    $879 = ((($878)) + 23|0);
    HEAP8[$879>>0] = -1;
    $880 = $ix;
    $881 = (($880) + 1)|0;
    $ix = $881;
   }
  }
  $882 = $j;
  $883 = (($882) + 1)|0;
  $j = $883;
 }
 $884 = $ix;
 $885 = $phlist;
 $886 = (($885) + (($884*24)|0)|0);
 $887 = ((($886)) + 21|0);
 HEAP8[$887>>0] = 2;
 $888 = $ix;
 $889 = $phlist;
 $890 = (($889) + (($888*24)|0)|0);
 $891 = ((($890)) + 2|0);
 HEAP8[$891>>0] = 9;
 $892 = $ix;
 $893 = $phlist;
 $894 = (($893) + (($892*24)|0)|0);
 $895 = ((($894)) + 17|0);
 HEAP8[$895>>0] = 0;
 $896 = $1;
 $897 = $ix;
 $898 = $phlist;
 $899 = (($898) + (($897*24)|0)|0);
 $900 = ((($899)) + 12|0);
 HEAP32[$900>>2] = $896;
 $901 = $end_sourceix;
 $902 = $901&65535;
 $903 = $ix;
 $904 = $phlist;
 $905 = (($904) + (($903*24)|0)|0);
 $906 = ((($905)) + 4|0);
 HEAP16[$906>>1] = $902;
 $907 = $ix;
 $908 = $phlist;
 $909 = (($908) + (($907*24)|0)|0);
 HEAP16[$909>>1] = 0;
 $910 = HEAP32[(44588)>>2]|0;
 $911 = $ix;
 $912 = (($911) + 1)|0;
 $ix = $912;
 $913 = $phlist;
 $914 = (($913) + (($911*24)|0)|0);
 $915 = ((($914)) + 8|0);
 HEAP32[$915>>2] = $910;
 $916 = $ix;
 $917 = $phlist;
 $918 = (($917) + (($916*24)|0)|0);
 $919 = ((($918)) + 2|0);
 HEAP8[$919>>0] = 9;
 $920 = $ix;
 $921 = $phlist;
 $922 = (($921) + (($920*24)|0)|0);
 $923 = ((($922)) + 17|0);
 HEAP8[$923>>0] = 0;
 $924 = $ix;
 $925 = $phlist;
 $926 = (($925) + (($924*24)|0)|0);
 $927 = ((($926)) + 12|0);
 HEAP32[$927>>2] = 0;
 $928 = $ix;
 $929 = $phlist;
 $930 = (($929) + (($928*24)|0)|0);
 $931 = ((($930)) + 4|0);
 HEAP16[$931>>1] = 0;
 $932 = $ix;
 $933 = $phlist;
 $934 = (($933) + (($932*24)|0)|0);
 HEAP16[$934>>1] = 0;
 $935 = HEAP32[(44592)>>2]|0;
 $936 = $ix;
 $937 = (($936) + 1)|0;
 $ix = $937;
 $938 = $phlist;
 $939 = (($938) + (($936*24)|0)|0);
 $940 = ((($939)) + 8|0);
 HEAP32[$940>>2] = $935;
 $941 = $ix;
 HEAP32[12657] = $941;
 STACKTOP = sp;return;
}
function __ZL18SubstitutePhonemesP10TranslatorP12PHONEME_LIST($tr,$plist_out) {
 $tr = $tr|0;
 $plist_out = $plist_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ix = 0, $k = 0;
 var $n_plist_out = 0, $next = 0, $or$cond = 0, $plist2 = 0, $replace_flags = 0, $word_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tr;
 $1 = $plist_out;
 $n_plist_out = 0;
 $next = 0;
 $ix = 0;
 while(1) {
  $2 = $ix;
  $3 = HEAP32[19063]|0;
  $4 = ($2|0)<($3|0);
  $5 = $n_plist_out;
  $6 = ($5|0)<(1000);
  $7 = $4 ? $6 : 0;
  if (!($7)) {
   break;
  }
  $8 = $ix;
  $9 = (99916 + ($8<<3)|0);
  $plist2 = $9;
  $10 = $plist2;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = $12 & 32;
  $14 = ($13|0)!=(0);
  if ($14) {
   label = 23;
  } else {
   $15 = $ix;
   $16 = HEAP32[19063]|0;
   $17 = (($16) - 1)|0;
   $18 = ($15|0)<($17|0);
   if ($18) {
    $19 = $ix;
    $20 = (($19) + 1)|0;
    $21 = (99916 + ($20<<3)|0);
    $22 = ((($21)) + 2|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (44552 + ($24<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $next = $26;
   }
   $word_end = 0;
   $27 = $plist2;
   $28 = ((($27)) + 8|0);
   $29 = ((($28)) + 4|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = ($30<<16>>16)!=(0);
   if ($31) {
    label = 9;
   } else {
    $32 = $next;
    $33 = ($32|0)!=(0|0);
    if ($33) {
     $34 = $next;
     $35 = ((($34)) + 11|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)==(0);
     if ($38) {
      label = 9;
     }
    }
   }
   if ((label|0) == 9) {
    label = 0;
    $word_end = 1;
   }
   $k = 0;
   L15: while(1) {
    $39 = $k;
    $40 = HEAP32[19376]|0;
    $41 = ($39|0)<($40|0);
    if (!($41)) {
     break;
    }
    $42 = $plist2;
    $43 = ((($42)) + 2|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $k;
    $47 = (120244 + (($46*3)|0)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = ($45|0)==($49|0);
    do {
     if ($50) {
      $51 = $k;
      $52 = (120244 + (($51*3)|0)|0);
      $53 = ((($52)) + 2|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $replace_flags = $55;
      $56 = $replace_flags;
      $57 = $56 & 1;
      $58 = ($57|0)!=(0);
      $59 = $word_end;
      $60 = ($59|0)==(0);
      $or$cond = $58 & $60;
      if (!($or$cond)) {
       $61 = $replace_flags;
       $62 = $61 & 2;
       $63 = ($62|0)!=(0);
       if ($63) {
        $64 = $plist2;
        $65 = ((($64)) + 3|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = $66&255;
        $68 = $67 & 7;
        $69 = ($68|0)>(3);
        if ($69) {
         break;
        }
       }
       $70 = $replace_flags;
       $71 = $70 & 4;
       $72 = ($71|0)!=(0);
       if (!($72)) {
        label = 18;
        break L15;
       }
       $73 = $plist2;
       $74 = ((($73)) + 4|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75&65535;
       $77 = ($76|0)==(0);
       if (!($77)) {
        label = 18;
        break L15;
       }
      }
     }
    } while(0);
    $101 = $k;
    $102 = (($101) + 1)|0;
    $k = $102;
   }
   if ((label|0) == 18) {
    label = 0;
    $78 = $k;
    $79 = (120244 + (($78*3)|0)|0);
    $80 = ((($79)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $plist2;
    $83 = ((($82)) + 2|0);
    HEAP8[$83>>0] = $81;
    $84 = $plist2;
    $85 = ((($84)) + 3|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = ($87|0)>(1);
    if ($88) {
     $89 = $plist2;
     $90 = ((($89)) + 2|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = (44552 + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($94)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $96 & 2;
     $98 = ($97|0)!=(0);
     if ($98) {
      $99 = $plist2;
      $100 = ((($99)) + 3|0);
      HEAP8[$100>>0] = 0;
     }
    }
   }
   $103 = $plist2;
   $104 = ((($103)) + 2|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = ($106|0)==(0);
   if (!($107)) {
    label = 23;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $108 = $n_plist_out;
   $109 = $1;
   $110 = (($109) + (($108*24)|0)|0);
   $111 = $plist2;
   ;HEAP16[$110>>1]=HEAP16[$111>>1]|0;HEAP16[$110+2>>1]=HEAP16[$111+2>>1]|0;HEAP16[$110+4>>1]=HEAP16[$111+4>>1]|0;HEAP16[$110+6>>1]=HEAP16[$111+6>>1]|0;
   $112 = $plist2;
   $113 = ((($112)) + 2|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = (44552 + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $n_plist_out;
   $119 = $1;
   $120 = (($119) + (($118*24)|0)|0);
   $121 = ((($120)) + 8|0);
   HEAP32[$121>>2] = $117;
   $122 = $n_plist_out;
   $123 = $1;
   $124 = (($123) + (($122*24)|0)|0);
   $125 = ((($124)) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((($126)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $n_plist_out;
   $130 = $1;
   $131 = (($130) + (($129*24)|0)|0);
   $132 = ((($131)) + 17|0);
   HEAP8[$132>>0] = $128;
   $133 = $n_plist_out;
   $134 = (($133) + 1)|0;
   $n_plist_out = $134;
  }
  $135 = $ix;
  $136 = (($135) + 1)|0;
  $ix = $136;
 }
 $137 = $n_plist_out;
 STACKTOP = sp;return ($137|0);
}
function __Z10KlattReseti($control) {
 $control = $control|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r_ix = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $control;
 $1 = $0;
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = HEAP32[(37624)>>2]|0;
  $4 = ($3*950)|0;
  $5 = (($4|0) / 10000)&-1;
  HEAP32[(37628)>>2] = $5;
  $6 = HEAP32[(37624)>>2]|0;
  $7 = ($6*630)|0;
  $8 = (($7|0) / 10000)&-1;
  HEAP32[(37632)>>2] = $8;
  $9 = HEAP32[(37624)>>2]|0;
  $10 = (+($9|0));
  $11 = -3.1415926999999999 / $10;
  HEAPF64[(37688)>>3] = $11;
  $12 = +HEAPF64[(37688)>>3];
  $13 = -2.0 * $12;
  HEAPF64[(37696)>>3] = $13;
  $14 = HEAP32[(37628)>>2]|0;
  $15 = HEAP32[(37632)>>2]|0;
  __ZL6setabcllP11resonator_t($14,$15,(38960));
 }
 $16 = $0;
 $17 = ($16|0)>(0);
 L4: do {
  if ($17) {
   HEAP32[(37648)>>2] = 0;
   HEAP32[(37656)>>2] = 0;
   HEAP32[(37660)>>2] = 0;
   HEAP32[(37664)>>2] = 0;
   $r_ix = 17;
   while(1) {
    $18 = $r_ix;
    $19 = ($18|0)<(20);
    if (!($19)) {
     break L4;
    }
    $20 = $r_ix;
    $21 = ((37808) + ($20<<6)|0);
    $22 = ((($21)) + 24|0);
    HEAPF64[$22>>3] = 0.0;
    $23 = $r_ix;
    $24 = ((37808) + ($23<<6)|0);
    $25 = ((($24)) + 32|0);
    HEAPF64[$25>>3] = 0.0;
    $26 = $r_ix;
    $27 = (($26) + 1)|0;
    $r_ix = $27;
   }
  }
 } while(0);
 $r_ix = 0;
 while(1) {
  $28 = $r_ix;
  $29 = ($28|0)<=(16);
  if (!($29)) {
   break;
  }
  $30 = $r_ix;
  $31 = ((37808) + ($30<<6)|0);
  $32 = ((($31)) + 24|0);
  HEAPF64[$32>>3] = 0.0;
  $33 = $r_ix;
  $34 = ((37808) + ($33<<6)|0);
  $35 = ((($34)) + 32|0);
  HEAPF64[$35>>3] = 0.0;
  $36 = $r_ix;
  $37 = (($36) + 1)|0;
  $r_ix = $37;
 }
 STACKTOP = sp;return;
}
function __ZL6setabcllP11resonator_t($f,$bw,$rp) {
 $f = $f|0;
 $bw = $bw|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $arg = 0.0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $bw;
 $2 = $rp;
 $3 = +HEAPF64[(37688)>>3];
 $4 = $1;
 $5 = (+($4|0));
 $6 = $3 * $5;
 $arg = $6;
 $7 = $arg;
 $8 = (+Math_exp((+$7)));
 $r = $8;
 $9 = $r;
 $10 = $r;
 $11 = $9 * $10;
 $12 = -$11;
 $13 = $2;
 $14 = ((($13)) + 16|0);
 HEAPF64[$14>>3] = $12;
 $15 = +HEAPF64[(37696)>>3];
 $16 = $0;
 $17 = (+($16|0));
 $18 = $15 * $17;
 $arg = $18;
 $19 = $r;
 $20 = $arg;
 $21 = (+Math_cos((+$20)));
 $22 = $19 * $21;
 $23 = $22 * 2.0;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 HEAPF64[$25>>3] = $23;
 $26 = $2;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = 1.0 - $28;
 $30 = $2;
 $31 = ((($30)) + 16|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $29 - $32;
 $34 = $2;
 HEAPF64[$34>>3] = $33;
 STACKTOP = sp;return;
}
function __Z13Wavegen_Klatti($resume) {
 $resume = $resume|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fade = 0, $ix = 0, $pk = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $resume;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[22032] = 0;
 }
 while(1) {
  $4 = HEAP32[22032]|0;
  $5 = HEAP32[22033]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[(80412)>>2]|0;
  $8 = ($7*10)|0;
  $9 = (($8|0) / 4096)&-1;
  HEAP32[22034] = $9;
  $ix = 0;
  while(1) {
   $10 = $ix;
   $11 = ($10|0)<(6);
   if (!($11)) {
    break;
   }
   $12 = $ix;
   $13 = (40368 + (($12*80)|0)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $ix;
   $16 = ((88144) + ($15<<2)|0);
   HEAP32[$16>>2] = $14;
   $17 = $ix;
   $18 = ($17|0)<(4);
   if ($18) {
    $19 = $ix;
    $20 = (40368 + (($19*80)|0)|0);
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $ix;
    $24 = ((88184) + ($23<<2)|0);
    HEAP32[$24>>2] = $22;
   }
   $25 = $ix;
   $26 = (($25) + 1)|0;
   $ix = $26;
  }
  $ix = 1;
  while(1) {
   $27 = $ix;
   $28 = ($27|0)<(7);
   if (!($28)) {
    break;
   }
   $29 = $ix;
   $30 = (40368 + (($29*80)|0)|0);
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $ix;
   $34 = ((88224) + ($33<<2)|0);
   HEAP32[$34>>2] = $32;
   $35 = $ix;
   $36 = (($35) + 1)|0;
   $ix = $36;
  }
  $37 = HEAP32[22106]|0;
  HEAP32[(88140)>>2] = $37;
  $38 = HEAP32[(88448)>>2]|0;
  HEAP32[(88332)>>2] = $38;
  $39 = HEAP32[(88452)>>2]|0;
  HEAP32[(88320)>>2] = $39;
  $40 = HEAP32[(88456)>>2]|0;
  HEAP32[(88328)>>2] = $40;
  $41 = HEAP32[(88436)>>2]|0;
  HEAP32[(88304)>>2] = $41;
  $42 = HEAP32[(88460)>>2]|0;
  HEAP32[(88312)>>2] = $42;
  $43 = HEAP32[(88440)>>2]|0;
  HEAP32[(88324)>>2] = $43;
  $44 = HEAP32[(88432)>>2]|0;
  HEAP32[(88316)>>2] = $44;
  $45 = HEAP32[(88444)>>2]|0;
  HEAP32[(88308)>>2] = $45;
  $pk = 0;
  while(1) {
   $46 = $pk;
   $47 = ($46|0)<(9);
   if (!($47)) {
    break;
   }
   $48 = $pk;
   $49 = (40368 + (($48*80)|0)|0);
   $50 = ((($49)) + 48|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $pk;
   $53 = (40368 + (($52*80)|0)|0);
   $54 = ((($53)) + 16|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $55 + $51;
   HEAPF64[$54>>3] = $56;
   $57 = $pk;
   $58 = (40368 + (($57*80)|0)|0);
   $59 = ((($58)) + 16|0);
   $60 = +HEAPF64[$59>>3];
   $61 = (~~(($60)));
   $62 = $pk;
   $63 = (40368 + (($62*80)|0)|0);
   HEAP32[$63>>2] = $61;
   $64 = $pk;
   $65 = (40368 + (($64*80)|0)|0);
   $66 = ((($65)) + 56|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $pk;
   $69 = (40368 + (($68*80)|0)|0);
   $70 = ((($69)) + 24|0);
   $71 = +HEAPF64[$70>>3];
   $72 = $71 + $67;
   HEAPF64[$70>>3] = $72;
   $73 = $pk;
   $74 = (40368 + (($73*80)|0)|0);
   $75 = ((($74)) + 24|0);
   $76 = +HEAPF64[$75>>3];
   $77 = (~~(($76)));
   $78 = $pk;
   $79 = (40368 + (($78*80)|0)|0);
   $80 = ((($79)) + 4|0);
   HEAP32[$80>>2] = $77;
   $81 = $pk;
   $82 = (40368 + (($81*80)|0)|0);
   $83 = ((($82)) + 72|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $pk;
   $86 = (40368 + (($85*80)|0)|0);
   $87 = ((($86)) + 40|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $88 + $84;
   HEAPF64[$87>>3] = $89;
   $90 = $pk;
   $91 = (40368 + (($90*80)|0)|0);
   $92 = ((($91)) + 40|0);
   $93 = +HEAPF64[$92>>3];
   $94 = (~~(($93)));
   $95 = $pk;
   $96 = (40368 + (($95*80)|0)|0);
   $97 = ((($96)) + 12|0);
   HEAP32[$97>>2] = $94;
   $98 = $pk;
   $99 = (40368 + (($98*80)|0)|0);
   $100 = ((($99)) + 64|0);
   $101 = +HEAPF64[$100>>3];
   $102 = $pk;
   $103 = (40368 + (($102*80)|0)|0);
   $104 = ((($103)) + 32|0);
   $105 = +HEAPF64[$104>>3];
   $106 = $105 + $101;
   HEAPF64[$104>>3] = $106;
   $107 = $pk;
   $108 = (40368 + (($107*80)|0)|0);
   $109 = ((($108)) + 32|0);
   $110 = +HEAPF64[$109>>3];
   $111 = (~~(($110)));
   $112 = $pk;
   $113 = (40368 + (($112*80)|0)|0);
   $114 = ((($113)) + 8|0);
   HEAP32[$114>>2] = $111;
   $115 = $pk;
   $116 = (($115) + 1)|0;
   $pk = $116;
  }
  $ix = 0;
  while(1) {
   $117 = $ix;
   $118 = ($117|0)<(10);
   if (!($118)) {
    break;
   }
   $119 = $ix;
   $120 = (41088 + ($119<<3)|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $ix;
   $123 = (41168 + ($122<<3)|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $124 + $121;
   HEAPF64[$123>>3] = $125;
   $126 = $ix;
   $127 = (41168 + ($126<<3)|0);
   $128 = +HEAPF64[$127>>3];
   $129 = (~~(($128)));
   $130 = $ix;
   $131 = (88424 + ($130<<2)|0);
   HEAP32[$131>>2] = $129;
   $132 = $ix;
   $133 = (($132) + 1)|0;
   $ix = $133;
  }
  $ix = 0;
  while(1) {
   $134 = $ix;
   $135 = ($134|0)<=(6);
   if (!($135)) {
    break;
   }
   $136 = $ix;
   $137 = (40368 + (($136*80)|0)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $ix;
   $140 = ((88344) + ($139<<2)|0);
   HEAP32[$140>>2] = $138;
   $141 = $ix;
   $142 = ($141|0)<(4);
   if ($142) {
    $143 = $ix;
    $144 = (40368 + (($143*80)|0)|0);
    $145 = ((($144)) + 4|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $ix;
    $148 = ((88384) + ($147<<2)|0);
    HEAP32[$148>>2] = $146;
   }
   $149 = $ix;
   $150 = (($149) + 1)|0;
   $ix = $150;
  }
  $151 = HEAP32[(80420)>>2]|0;
  $152 = HEAP32[(80416)>>2]|0;
  $153 = (($152) + ($151))|0;
  HEAP32[(80416)>>2] = $153;
  $154 = HEAP32[(80416)>>2]|0;
  $155 = $154 >> 8;
  $ix = $155;
  $156 = ($155|0)>(127);
  $$ = $156 ? 127 : $155;
  $ix = $$;
  $157 = $ix;
  $158 = HEAP32[20102]|0;
  $159 = (($158) + ($157)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = HEAP32[(80428)>>2]|0;
  $163 = Math_imul($161, $162)|0;
  $x = $163;
  $164 = $x;
  $165 = $164 >> 8;
  $166 = HEAP32[(80424)>>2]|0;
  $167 = (($165) + ($166))|0;
  HEAP32[(80412)>>2] = $167;
  $168 = HEAP32[22033]|0;
  $169 = HEAP32[22032]|0;
  $170 = (($168) - ($169))|0;
  HEAP32[(37644)>>2] = $170;
  $171 = HEAP32[(37644)>>2]|0;
  $172 = ($171|0)>(64);
  $$1 = $172 ? 64 : $170;
  HEAP32[(37644)>>2] = $$1;
  __ZL10frame_initP13klatt_frame_t(88136);
  $173 = (__ZL7parwaveP13klatt_frame_t(88136)|0);
  $174 = ($173|0)==(1);
  if ($174) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  $0 = 1;
  $184 = $0;
  STACKTOP = sp;return ($184|0);
 }
 $175 = HEAP32[22118]|0;
 $176 = ($175|0)>(0);
 if ($176) {
  $fade = 64;
  $177 = $fade;
  HEAP32[(37800)>>2] = $177;
  HEAP32[22118] = 0;
  $178 = $fade;
  $179 = HEAP32[22032]|0;
  $180 = (($179) - ($178))|0;
  HEAP32[22032] = $180;
  $181 = $fade;
  HEAP32[(37644)>>2] = $181;
  $182 = (__ZL7parwaveP13klatt_frame_t(88136)|0);
  $183 = ($182|0)==(1);
  if ($183) {
   $0 = 1;
   $184 = $0;
   STACKTOP = sp;return ($184|0);
  }
 }
 $0 = 0;
 $184 = $0;
 STACKTOP = sp;return ($184|0);
}
function __ZL10frame_initP13klatt_frame_t($frame) {
 $frame = $frame|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0;
 var $99 = 0, $Gain0_tmp = 0, $amp_par = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $amp_par = sp;
 $0 = $frame;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2|0) / 10)&-1;
 HEAP32[(37796)>>2] = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 7)|0;
 $8 = $0;
 $9 = ((($8)) + 204|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = ((($10)) + 204|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $0;
  $15 = ((($14)) + 204|0);
  HEAP32[$15>>2] = 0;
 }
 $16 = $0;
 $17 = ((($16)) + 168|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+__ZL7DBtoLINl($18));
 $20 = $19 * 0.050000000000000003;
 HEAPF64[(37744)>>3] = $20;
 $21 = $0;
 $22 = ((($21)) + 184|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (+__ZL7DBtoLINl($23));
 $25 = $24 * 0.25;
 HEAPF64[(37752)>>3] = $25;
 $26 = $0;
 $27 = ((($26)) + 196|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+__ZL7DBtoLINl($28));
 HEAPF64[(37736)>>3] = $29;
 $30 = $0;
 $31 = ((($30)) + 192|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+__ZL7DBtoLINl($32));
 $34 = $33 * 0.050000000000000003;
 HEAPF64[(37720)>>3] = $34;
 $ix = 0;
 while(1) {
  $35 = $ix;
  $36 = ($35|0)<=(6);
  if (!($36)) {
   break;
  }
  $37 = $ix;
  $38 = $0;
  $39 = ((($38)) + 88|0);
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (+__ZL7DBtoLINl($41));
  $43 = $ix;
  $44 = (16 + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 * $45;
  $47 = $ix;
  $48 = (($amp_par) + ($47<<3)|0);
  HEAPF64[$48>>3] = $46;
  $49 = $ix;
  $50 = (($49) + 1)|0;
  $ix = $50;
 }
 $51 = $0;
 $52 = ((($51)) + 200|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) - 3)|0;
 $Gain0_tmp = $54;
 $55 = $Gain0_tmp;
 $56 = ($55|0)<=(0);
 $$ = $56 ? 57 : $54;
 $Gain0_tmp = $$;
 $57 = $Gain0_tmp;
 $58 = (+__ZL7DBtoLINl($57));
 $59 = HEAP32[(37804)>>2]|0;
 $60 = (+($59|0));
 $61 = $58 / $60;
 HEAPF64[(37768)>>3] = $61;
 $ix = 1;
 while(1) {
  $62 = $ix;
  $63 = ($62|0)<=(9);
  if (!($63)) {
   break;
  }
  $64 = $ix;
  $65 = $0;
  $66 = ((($65)) + 8|0);
  $67 = (($66) + ($64<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $ix;
  $70 = $0;
  $71 = ((($70)) + 48|0);
  $72 = (($71) + ($69<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $ix;
  $75 = ((37808) + ($74<<6)|0);
  __ZL6setabcllP11resonator_t($68,$73,$75);
  $76 = $ix;
  $77 = ($76|0)<=(5);
  if ($77) {
   $78 = $ix;
   $79 = $0;
   $80 = ((($79)) + 208|0);
   $81 = (($80) + ($78<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $ix;
   $84 = $0;
   $85 = ((($84)) + 248|0);
   $86 = (($85) + ($83<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $ix;
   $89 = ((39088) + ($88<<6)|0);
   __ZL6setabcllP11resonator_t($82,$87,$89);
   $90 = $ix;
   $91 = ((39088) + ($90<<6)|0);
   $92 = +HEAPF64[$91>>3];
   $93 = $ix;
   $94 = ((37808) + ($93<<6)|0);
   $95 = +HEAPF64[$94>>3];
   $96 = $92 - $95;
   $97 = $96 / 64.0;
   $98 = $ix;
   $99 = ((37808) + ($98<<6)|0);
   $100 = ((($99)) + 40|0);
   HEAPF64[$100>>3] = $97;
   $101 = $ix;
   $102 = ((39088) + ($101<<6)|0);
   $103 = ((($102)) + 8|0);
   $104 = +HEAPF64[$103>>3];
   $105 = $ix;
   $106 = ((37808) + ($105<<6)|0);
   $107 = ((($106)) + 8|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $104 - $108;
   $110 = $109 / 64.0;
   $111 = $ix;
   $112 = ((37808) + ($111<<6)|0);
   $113 = ((($112)) + 48|0);
   HEAPF64[$113>>3] = $110;
   $114 = $ix;
   $115 = ((39088) + ($114<<6)|0);
   $116 = ((($115)) + 16|0);
   $117 = +HEAPF64[$116>>3];
   $118 = $ix;
   $119 = ((37808) + ($118<<6)|0);
   $120 = ((($119)) + 16|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $117 - $121;
   $123 = $122 / 64.0;
   $124 = $ix;
   $125 = ((37808) + ($124<<6)|0);
   $126 = ((($125)) + 56|0);
   HEAPF64[$126>>3] = $123;
  }
  $127 = $ix;
  $128 = (($127) + 1)|0;
  $ix = $128;
 }
 $129 = $0;
 $130 = ((($129)) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $0;
 $133 = ((($132)) + 48|0);
 $134 = HEAP32[$133>>2]|0;
 __ZL10setzeroabcllP11resonator_t($131,$134,(37808));
 $135 = $0;
 $136 = ((($135)) + 208|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $0;
 $139 = ((($138)) + 248|0);
 $140 = HEAP32[$139>>2]|0;
 __ZL10setzeroabcllP11resonator_t($137,$140,(39088));
 $141 = +HEAPF64[(39088)>>3];
 $142 = +HEAPF64[(37808)>>3];
 $143 = $141 - $142;
 $144 = $143 / 64.0;
 HEAPF64[(37848)>>3] = $144;
 $145 = +HEAPF64[(39096)>>3];
 $146 = +HEAPF64[(37816)>>3];
 $147 = $145 - $146;
 $148 = $147 / 64.0;
 HEAPF64[(37856)>>3] = $148;
 $149 = +HEAPF64[(39104)>>3];
 $150 = +HEAPF64[(37824)>>3];
 $151 = $149 - $150;
 $152 = $151 / 64.0;
 HEAPF64[(37864)>>3] = $152;
 $ix = 0;
 while(1) {
  $153 = $ix;
  $154 = ($153|0)<=(6);
  if (!($154)) {
   break;
  }
  $155 = $ix;
  $156 = $0;
  $157 = ((($156)) + 8|0);
  $158 = (($157) + ($155<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $ix;
  $161 = $0;
  $162 = ((($161)) + 128|0);
  $163 = (($162) + ($160<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $ix;
  $166 = (10 + ($165))|0;
  $167 = ((37808) + ($166<<6)|0);
  __ZL6setabcllP11resonator_t($159,$164,$167);
  $168 = $ix;
  $169 = (($amp_par) + ($168<<3)|0);
  $170 = +HEAPF64[$169>>3];
  $171 = $ix;
  $172 = (10 + ($171))|0;
  $173 = ((37808) + ($172<<6)|0);
  $174 = +HEAPF64[$173>>3];
  $175 = $174 * $170;
  HEAPF64[$173>>3] = $175;
  $176 = $ix;
  $177 = (($176) + 1)|0;
  $ix = $177;
 }
 $178 = HEAP32[(37624)>>2]|0;
 $179 = (($178|0) / 2)&-1;
 __ZL6setabcllP11resonator_t(0,$179,(39024));
 STACKTOP = sp;return;
}
function __ZL7DBtoLINl($dB) {
 $dB = $dB|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dB;
 $2 = $1;
 $3 = ($2|0)<(0);
 $4 = $1;
 $5 = ($4|0)>(87);
 $or$cond = $3 | $5;
 if ($or$cond) {
  $0 = 0.0;
  $11 = $0;
  STACKTOP = sp;return (+$11);
 } else {
  $6 = $1;
  $7 = (14412 + ($6<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (+($8<<16>>16));
  $10 = $9 * 0.001;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return (+$11);
 }
 return +(0.0);
}
function __ZL10setzeroabcllP11resonator_t($f,$bw,$rp) {
 $f = $f|0;
 $bw = $bw|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $arg = 0.0, $r = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $bw;
 $2 = $rp;
 $3 = $0;
 $4 = (0 - ($3))|0;
 $0 = $4;
 $5 = +HEAPF64[(37688)>>3];
 $6 = $1;
 $7 = (+($6|0));
 $8 = $5 * $7;
 $arg = $8;
 $9 = $arg;
 $10 = (+Math_exp((+$9)));
 $r = $10;
 $11 = $r;
 $12 = $r;
 $13 = $11 * $12;
 $14 = -$13;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 HEAPF64[$16>>3] = $14;
 $17 = +HEAPF64[(37696)>>3];
 $18 = $0;
 $19 = (+($18|0));
 $20 = $17 * $19;
 $arg = $20;
 $21 = $r;
 $22 = $arg;
 $23 = (+Math_cos((+$22)));
 $24 = $21 * $23;
 $25 = $24 * 2.0;
 $26 = $2;
 $27 = ((($26)) + 8|0);
 HEAPF64[$27>>3] = $25;
 $28 = $2;
 $29 = ((($28)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = 1.0 - $30;
 $32 = $2;
 $33 = ((($32)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $31 - $34;
 $36 = $2;
 HEAPF64[$36>>3] = $35;
 $37 = $2;
 $38 = +HEAPF64[$37>>3];
 $39 = $38 != 0.0;
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $2;
 $41 = +HEAPF64[$40>>3];
 $42 = 1.0 / $41;
 $43 = $2;
 HEAPF64[$43>>3] = $42;
 $44 = $2;
 $45 = +HEAPF64[$44>>3];
 $46 = -$45;
 $47 = $2;
 $48 = ((($47)) + 16|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $49 * $46;
 HEAPF64[$48>>3] = $50;
 $51 = $2;
 $52 = +HEAPF64[$51>>3];
 $53 = -$52;
 $54 = $2;
 $55 = ((($54)) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $56 * $53;
 HEAPF64[$55>>3] = $57;
 STACKTOP = sp;return;
}
function __ZL7parwaveP13klatt_frame_t($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $aspiration = 0.0, $c = 0, $casc_next_in = 0.0;
 var $frics = 0.0, $glotout = 0.0, $ix = 0, $n4 = 0, $out = 0.0, $outbypas = 0.0, $par_glotout = 0.0, $sample = 0, $temp = 0.0, $value = 0, $z2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $frame;
 $2 = $1;
 __ZL7flutterP13klatt_frame_t($2);
 HEAP32[(37652)>>2] = 0;
 while(1) {
  $3 = HEAP32[(37652)>>2]|0;
  $4 = HEAP32[(37644)>>2]|0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 40;
   break;
  }
  $6 = +HEAPF64[5156];
  $7 = (+__ZL9gen_noised($6));
  HEAPF64[5156] = $7;
  $8 = HEAP32[(37648)>>2]|0;
  $9 = HEAP32[(37664)>>2]|0;
  $10 = ($8|0)>($9|0);
  if ($10) {
   $11 = +HEAPF64[5156];
   $12 = $11 * 0.5;
   HEAPF64[5156] = $12;
  }
  $13 = +HEAPF64[(37752)>>3];
  $14 = +HEAPF64[5156];
  $15 = $13 * $14;
  $frics = $15;
  $n4 = 0;
  while(1) {
   $16 = $n4;
   $17 = ($16|0)<(4);
   if (!($17)) {
    break;
   }
   $18 = HEAP32[(37636)>>2]|0;
   switch ($18|0) {
   case 1:  {
    $19 = (+__ZL16impulsive_sourcev());
    HEAPF64[5159] = $19;
    break;
   }
   case 2:  {
    $20 = (+__ZL14natural_sourcev());
    HEAPF64[5159] = $20;
    break;
   }
   case 3:  {
    $21 = (+__ZL14sampled_sourcei(0));
    HEAPF64[5159] = $21;
    break;
   }
   case 4:  {
    $22 = (+__ZL14sampled_sourcei(1));
    HEAPF64[5159] = $22;
    break;
   }
   default: {
   }
   }
   $23 = HEAP32[(37648)>>2]|0;
   $24 = HEAP32[(37656)>>2]|0;
   $25 = ($23|0)>=($24|0);
   if ($25) {
    HEAP32[(37648)>>2] = 0;
    $26 = $1;
    __ZL21pitch_synch_par_resetP13klatt_frame_t($26);
   }
   $27 = +HEAPF64[5159];
   $28 = (+__ZL9resonatorP11resonator_td((38960),$27));
   HEAPF64[5159] = $28;
   $29 = HEAP32[(37648)>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[(37648)>>2] = $30;
   $31 = $n4;
   $32 = (($31) + 1)|0;
   $n4 = $32;
  }
  $33 = +HEAPF64[5159];
  $34 = +HEAPF64[(37704)>>3];
  $35 = $33 * $34;
  $36 = +HEAPF64[5161];
  $37 = +HEAPF64[(37712)>>3];
  $38 = $36 * $37;
  $39 = $35 + $38;
  HEAPF64[5159] = $39;
  $40 = +HEAPF64[5159];
  HEAPF64[5161] = $40;
  $41 = HEAP32[(37648)>>2]|0;
  $42 = HEAP32[(37660)>>2]|0;
  $43 = ($41|0)<($42|0);
  if ($43) {
   $44 = +HEAPF64[(37760)>>3];
   $45 = HEAP32[(37668)>>2]|0;
   $46 = (+($45|0));
   $47 = $44 * $46;
   $48 = +HEAPF64[5159];
   $49 = $48 + $47;
   HEAPF64[5159] = $49;
  }
  $50 = +HEAPF64[(37728)>>3];
  $51 = +HEAPF64[5159];
  $52 = $50 * $51;
  $glotout = $52;
  $53 = +HEAPF64[(37736)>>3];
  $54 = +HEAPF64[5159];
  $55 = $53 * $54;
  $par_glotout = $55;
  $56 = +HEAPF64[(37744)>>3];
  $57 = +HEAPF64[5156];
  $58 = $56 * $57;
  $aspiration = $58;
  $59 = $aspiration;
  $60 = $glotout;
  $61 = $60 + $59;
  $glotout = $61;
  $62 = $aspiration;
  $63 = $par_glotout;
  $64 = $63 + $62;
  $par_glotout = $64;
  $out = 0.0;
  $65 = HEAP32[9404]|0;
  $66 = ($65|0)!=(2);
  if ($66) {
   $67 = $glotout;
   $68 = (+__ZL14antiresonator2P11resonator_td((37808),$67));
   $casc_next_in = $68;
   $69 = $casc_next_in;
   $70 = (+__ZL9resonatorP11resonator_td((38384),$69));
   $casc_next_in = $70;
   $71 = $casc_next_in;
   $72 = (+__ZL9resonatorP11resonator_td((38320),$71));
   $casc_next_in = $72;
   $73 = $casc_next_in;
   $74 = (+__ZL9resonatorP11resonator_td((38256),$73));
   $casc_next_in = $74;
   $75 = $casc_next_in;
   $76 = (+__ZL9resonatorP11resonator_td((38192),$75));
   $casc_next_in = $76;
   $77 = $casc_next_in;
   $78 = (+__ZL10resonator2P11resonator_td((38128),$77));
   $casc_next_in = $78;
   $79 = $casc_next_in;
   $80 = (+__ZL10resonator2P11resonator_td((38064),$79));
   $casc_next_in = $80;
   $81 = $casc_next_in;
   $82 = (+__ZL10resonator2P11resonator_td((38000),$81));
   $casc_next_in = $82;
   $83 = $casc_next_in;
   $84 = (+__ZL10resonator2P11resonator_td((37936),$83));
   $casc_next_in = $84;
   $85 = $casc_next_in;
   $86 = (+__ZL10resonator2P11resonator_td((37872),$85));
   $out = $86;
  }
  $87 = $par_glotout;
  HEAPF64[5162] = $87;
  $88 = +HEAPF64[5162];
  $89 = (+__ZL9resonatorP11resonator_td((38512),$88));
  $90 = $out;
  $91 = $90 + $89;
  $out = $91;
  $92 = +HEAPF64[5162];
  $93 = (+__ZL9resonatorP11resonator_td((38448),$92));
  $94 = $out;
  $95 = $94 + $93;
  $out = $95;
  $96 = $frics;
  $97 = $par_glotout;
  $98 = $96 + $97;
  $99 = +HEAPF64[5163];
  $100 = $98 - $99;
  HEAPF64[5162] = $100;
  $101 = $par_glotout;
  HEAPF64[5163] = $101;
  $ix = 12;
  while(1) {
   $102 = $ix;
   $103 = ($102|0)<=(16);
   if (!($103)) {
    break;
   }
   $104 = $ix;
   $105 = ((37808) + ($104<<6)|0);
   $106 = +HEAPF64[5162];
   $107 = (+__ZL9resonatorP11resonator_td($105,$106));
   $108 = $out;
   $109 = $107 - $108;
   $out = $109;
   $110 = $ix;
   $111 = (($110) + 1)|0;
   $ix = $111;
  }
  $112 = +HEAPF64[(37720)>>3];
  $113 = +HEAPF64[5162];
  $114 = $112 * $113;
  $outbypas = $114;
  $115 = $outbypas;
  $116 = $out;
  $117 = $115 - $116;
  $out = $117;
  $118 = $out;
  $119 = (+__ZL9resonatorP11resonator_td((39024),$118));
  $out = $119;
  $120 = $out;
  $121 = HEAP32[(80460)>>2]|0;
  $122 = (+($121|0));
  $123 = $120 * $122;
  $124 = +HEAPF64[(37768)>>3];
  $125 = $123 * $124;
  $126 = (~~(($125)));
  $127 = (+($126|0));
  $temp = $127;
  $z2 = 0;
  $128 = HEAP32[(80448)>>2]|0;
  $129 = HEAP32[(80436)>>2]|0;
  $130 = ($128|0)<($129|0);
  if ($130) {
   $131 = HEAP32[(80440)>>2]|0;
   $132 = ($131|0)==(0);
   $133 = HEAP32[(80448)>>2]|0;
   $134 = (($133) + 1)|0;
   if ($132) {
    $135 = HEAP32[(80432)>>2]|0;
    $136 = (($135) + ($134)|0);
    $137 = HEAP8[$136>>0]|0;
    $c = $137;
    $138 = HEAP32[(80448)>>2]|0;
    $139 = HEAP32[(80432)>>2]|0;
    $140 = (($139) + ($138)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $c;
    $144 = $143 << 24 >> 24;
    $145 = $144<<8;
    $146 = (($142) + ($145))|0;
    $sample = $146;
    $147 = HEAP32[(80448)>>2]|0;
    $148 = (($147) + 2)|0;
    HEAP32[(80448)>>2] = $148;
   } else {
    HEAP32[(80448)>>2] = $134;
    $149 = HEAP32[(80432)>>2]|0;
    $150 = (($149) + ($133)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151 << 24 >> 24;
    $153 = HEAP32[(80440)>>2]|0;
    $154 = Math_imul($152, $153)|0;
    $sample = $154;
   }
   $155 = $sample;
   $156 = HEAP32[(80464)>>2]|0;
   $157 = Math_imul($155, $156)|0;
   $158 = (($157|0) / 1024)&-1;
   $z2 = $158;
   $159 = $z2;
   $160 = HEAP32[(80444)>>2]|0;
   $161 = Math_imul($159, $160)|0;
   $162 = (($161|0) / 40)&-1;
   $z2 = $162;
   $163 = $z2;
   $164 = (+($163|0));
   $165 = $temp;
   $166 = $165 + $164;
   $temp = $166;
  }
  $167 = HEAP32[(37800)>>2]|0;
  $168 = ($167|0)>(0);
  if ($168) {
   $169 = HEAP32[(37800)>>2]|0;
   $170 = (($169) + -1)|0;
   HEAP32[(37800)>>2] = $170;
   $171 = $temp;
   $172 = HEAP32[(37800)>>2]|0;
   $173 = (+($172|0));
   $174 = $171 * $173;
   $175 = $174 / 64.0;
   $temp = $175;
  }
  $176 = $temp;
  $177 = (~~(($176)));
  $178 = HEAP32[20100]|0;
  $179 = (($178) + 1)|0;
  HEAP32[20100] = $179;
  $180 = (107916 + ($178<<1)|0);
  $181 = HEAP16[$180>>1]|0;
  $182 = $181 << 16 >> 16;
  $183 = HEAP32[20101]|0;
  $184 = Math_imul($182, $183)|0;
  $185 = $184 >> 8;
  $186 = (($177) + ($185))|0;
  $value = $186;
  $187 = HEAP32[20100]|0;
  $188 = ($187|0)>=(5500);
  if ($188) {
   HEAP32[20100] = 0;
  }
  $189 = $value;
  $190 = ($189|0)<(-32768);
  if ($190) {
   $value = -32768;
  }
  $191 = $value;
  $192 = ($191|0)>(32767);
  if ($192) {
   $value = 32767;
  }
  $193 = $value;
  $194 = $193&255;
  $195 = HEAP32[20118]|0;
  $196 = ((($195)) + 1|0);
  HEAP32[20118] = $196;
  HEAP8[$195>>0] = $194;
  $197 = $value;
  $198 = $197 >> 8;
  $199 = $198&255;
  $200 = HEAP32[20118]|0;
  $201 = ((($200)) + 1|0);
  HEAP32[20118] = $201;
  HEAP8[$200>>0] = $199;
  $202 = $value;
  $203 = $202&65535;
  $204 = HEAP32[20099]|0;
  $205 = (($204) + 1)|0;
  HEAP32[20099] = $205;
  $206 = (107916 + ($204<<1)|0);
  HEAP16[$206>>1] = $203;
  $207 = HEAP32[20099]|0;
  $208 = ($207|0)>=(5500);
  if ($208) {
   HEAP32[20099] = 0;
  }
  $209 = HEAP32[22032]|0;
  $210 = (($209) + 1)|0;
  HEAP32[22032] = $210;
  $211 = HEAP32[20118]|0;
  $212 = HEAP32[20120]|0;
  $213 = ($211>>>0)>=($212>>>0);
  if ($213) {
   label = 38;
   break;
  }
  $214 = HEAP32[(37652)>>2]|0;
  $215 = (($214) + 1)|0;
  HEAP32[(37652)>>2] = $215;
 }
 if ((label|0) == 38) {
  $0 = 1;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 else if ((label|0) == 40) {
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 return (0)|0;
}
function __ZL7flutterP13klatt_frame_t($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $delta_f0 = 0.0, $fla = 0.0, $flb = 0.0;
 var $flc = 0.0, $fld = 0.0, $fle = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $frame;
 $1 = HEAP32[(37640)>>2]|0;
 $2 = (+($1|0));
 $3 = $2 / 50.0;
 $fla = $3;
 $4 = HEAP32[(37796)>>2]|0;
 $5 = (+($4|0));
 $6 = $5 / 100.0;
 $flb = $6;
 $7 = HEAP32[22116]|0;
 $8 = (+($7|0));
 $9 = 39.898227289999994 * $8;
 $10 = (+Math_sin((+$9)));
 $flc = $10;
 $11 = HEAP32[22116]|0;
 $12 = (+($11|0));
 $13 = 22.305308169999996 * $12;
 $14 = (+Math_sin((+$13)));
 $fld = $14;
 $15 = HEAP32[22116]|0;
 $16 = (+($15|0));
 $17 = 14.76548569 * $16;
 $18 = (+Math_sin((+$17)));
 $fle = $18;
 $19 = $fla;
 $20 = $flb;
 $21 = $19 * $20;
 $22 = $flc;
 $23 = $fld;
 $24 = $22 + $23;
 $25 = $fle;
 $26 = $24 + $25;
 $27 = $21 * $26;
 $28 = $27 * 10.0;
 $delta_f0 = $28;
 $29 = $0;
 $30 = HEAP32[$29>>2]|0;
 $31 = $delta_f0;
 $32 = (~~(($31)));
 $33 = (($30) + ($32))|0;
 $34 = $0;
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[22116]|0;
 $36 = (($35) + 1)|0;
 HEAP32[22116] = $36;
 STACKTOP = sp;return;
}
function __ZL9gen_noised($noise) {
 $noise = +$noise;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $noise;
 $1 = (_rand()|0);
 $2 = (($1|0) % 16383)&-1;
 $3 = (($2) + -8191)|0;
 $temp = $3;
 $4 = $temp;
 HEAP32[(37668)>>2] = $4;
 $5 = HEAP32[(37668)>>2]|0;
 $6 = (+($5|0));
 $7 = +HEAPF64[5157];
 $8 = 0.75 * $7;
 $9 = $6 + $8;
 $0 = $9;
 $10 = $0;
 HEAPF64[5157] = $10;
 $11 = $0;
 STACKTOP = sp;return (+$11);
}
function __ZL16impulsive_sourcev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(37648)>>2]|0;
 $1 = ($0|0)<(3);
 if ($1) {
  $2 = HEAP32[(37648)>>2]|0;
  $3 = (72 + ($2<<3)|0);
  $4 = +HEAPF64[$3>>3];
  HEAPF64[5158] = $4;
 } else {
  HEAPF64[5158] = 0.0;
 }
 $5 = +HEAPF64[5158];
 $6 = (+__ZL9resonatorP11resonator_td((38896),$5));
 return (+$6);
}
function __ZL9resonatorP11resonator_td($r,$input) {
 $r = $r|0;
 $input = +$input;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $input;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = $3 * $4;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $0;
 $10 = ((($9)) + 24|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $5 + $12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $0;
 $18 = ((($17)) + 32|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $x = $21;
 $22 = $0;
 $23 = ((($22)) + 24|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $0;
 $26 = ((($25)) + 32|0);
 HEAPF64[$26>>3] = $24;
 $27 = $x;
 $28 = $0;
 $29 = ((($28)) + 24|0);
 HEAPF64[$29>>3] = $27;
 $30 = $x;
 STACKTOP = sp;return (+$30);
}
function __ZL14natural_sourcev() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $lgtemp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(37648)>>2]|0;
 $2 = HEAP32[(37660)>>2]|0;
 $3 = ($1|0)<($2|0);
 if ($3) {
  $4 = +HEAPF64[(37680)>>3];
  $5 = +HEAPF64[(37672)>>3];
  $6 = $5 - $4;
  HEAPF64[(37672)>>3] = $6;
  $7 = +HEAPF64[(37672)>>3];
  $8 = +HEAPF64[5160];
  $9 = $8 + $7;
  HEAPF64[5160] = $9;
  $10 = +HEAPF64[5160];
  $11 = $10 * 0.028000000000000001;
  $lgtemp = $11;
  $12 = $lgtemp;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return (+$13);
 } else {
  HEAPF64[5160] = 0.0;
  $0 = 0.0;
  $13 = $0;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function __ZL14sampled_sourcei($source_num) {
 $source_num = $source_num|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $current_value = 0, $diff_value = 0.0, $ftemp = 0.0, $itemp = 0, $next_value = 0, $result = 0.0, $samples = 0, $temp_diff = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source_num;
 $1 = $0;
 $2 = ($1|0)==(0);
 if ($2) {
  $samples = 14588;
  HEAP32[(37776)>>2] = 100;
 } else {
  $samples = 14788;
  HEAP32[(37776)>>2] = 256;
 }
 $3 = HEAP32[(37656)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[(37648)>>2]|0;
  $6 = (+($5|0));
  $ftemp = $6;
  $7 = $ftemp;
  $8 = HEAP32[(37656)>>2]|0;
  $9 = (+($8|0));
  $10 = $7 / $9;
  $ftemp = $10;
  $11 = $ftemp;
  $12 = HEAP32[(37776)>>2]|0;
  $13 = (+($12|0));
  $14 = $11 * $13;
  $ftemp = $14;
  $15 = $ftemp;
  $16 = (~~(($15)));
  $itemp = $16;
  $17 = $ftemp;
  $18 = $itemp;
  $19 = (+($18|0));
  $20 = $17 - $19;
  $temp_diff = $20;
  $21 = $itemp;
  $22 = $samples;
  $23 = (($22) + ($21<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $current_value = $25;
  $26 = $itemp;
  $27 = (($26) + 1)|0;
  $28 = $samples;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $next_value = $31;
  $32 = $next_value;
  $33 = (+($32|0));
  $34 = $current_value;
  $35 = (+($34|0));
  $36 = $33 - $35;
  $diff_value = $36;
  $37 = $diff_value;
  $38 = $temp_diff;
  $39 = $37 * $38;
  $diff_value = $39;
  $40 = $itemp;
  $41 = $samples;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = (+($44|0));
  $46 = $diff_value;
  $47 = $45 + $46;
  $result = $47;
  $48 = $result;
  $49 = +HEAPF64[(37784)>>3];
  $50 = $48 * $49;
  $result = $50;
  $51 = $result;
  STACKTOP = sp;return (+$51);
 } else {
  $result = 0.0;
  $51 = $result;
  STACKTOP = sp;return (+$51);
 }
 return +(0.0);
}
function __ZL21pitch_synch_par_resetP13klatt_frame_t($frame) {
 $frame = $frame|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0;
 var $or$cond = 0, $or$cond3 = 0, $temp = 0, $temp1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $frame;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = HEAP32[(37624)>>2]|0;
  $5 = ($4*40)|0;
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5|0) / ($7|0))&-1;
  HEAP32[(37656)>>2] = $8;
  $9 = $0;
  $10 = ((($9)) + 204|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (+__ZL7DBtoLINl($11));
  HEAPF64[(37728)>>3] = $12;
  $13 = HEAP32[(37656)>>2]|0;
  HEAP32[(37664)>>2] = $13;
  $14 = $0;
  $15 = ((($14)) + 204|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = HEAP32[(37664)>>2]|0;
   $19 = $18 >> 1;
   HEAP32[(37664)>>2] = $19;
  }
  $20 = $0;
  $21 = ((($20)) + 176|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (+__ZL7DBtoLINl($22));
  $24 = $23 * 0.10000000000000001;
  HEAPF64[(37760)>>3] = $24;
  $25 = $0;
  $26 = ((($25)) + 172|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27<<2;
  HEAP32[(37660)>>2] = $28;
  $29 = HEAP32[(37636)>>2]|0;
  $30 = ($29|0)==(1);
  $31 = HEAP32[(37660)>>2]|0;
  $32 = ($31|0)>(263);
  $or$cond = $30 & $32;
  $$ = $or$cond ? 263 : $28;
  HEAP32[(37660)>>2] = $$;
  $33 = HEAP32[(37660)>>2]|0;
  $34 = HEAP32[(37656)>>2]|0;
  $35 = (($34) - 1)|0;
  $36 = ($33|0)>=($35|0);
  if ($36) {
   $37 = HEAP32[(37656)>>2]|0;
   $38 = (($37) - 2)|0;
   HEAP32[(37660)>>2] = $38;
  }
  $39 = HEAP32[(37660)>>2]|0;
  $40 = ($39|0)<(40);
  if ($40) {
   HEAP32[(37660)>>2] = 40;
  }
  $41 = HEAP32[(37660)>>2]|0;
  $42 = (($41) - 40)|0;
  $43 = (15300 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = (+($44<<16>>16));
  HEAPF64[(37680)>>3] = $45;
  $46 = +HEAPF64[(37680)>>3];
  $47 = HEAP32[(37660)>>2]|0;
  $48 = (+($47|0));
  $49 = $46 * $48;
  $50 = $49 * 0.33300000000000002;
  HEAPF64[(37672)>>3] = $50;
  $51 = HEAP32[(37624)>>2]|0;
  $52 = HEAP32[(37660)>>2]|0;
  $53 = (($51|0) / ($52|0))&-1;
  $temp = $53;
  $54 = $temp;
  __ZL6setabcllP11resonator_t(0,$54,(38896));
  $55 = HEAP32[(37660)>>2]|0;
  $56 = (+($55|0));
  $57 = $56 * 0.0083300000000000006;
  $temp1 = $57;
  $58 = $temp1;
  $59 = $temp1;
  $60 = $58 * $59;
  $61 = +HEAPF64[(38896)>>3];
  $62 = $61 * $60;
  HEAPF64[(38896)>>3] = $62;
  $63 = HEAP32[(37656)>>2]|0;
  $64 = HEAP32[(37660)>>2]|0;
  $65 = (($63) - ($64))|0;
  $temp = $65;
  $66 = $0;
  $67 = ((($66)) + 188|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $temp;
  $70 = ($68|0)>($69|0);
  if ($70) {
   $71 = $temp;
   $72 = $0;
   $73 = ((($72)) + 188|0);
   HEAP32[$73>>2] = $71;
  }
  $74 = HEAP32[22117]|0;
  $75 = ($74|0)>=(0);
  $76 = $0;
  $77 = ((($76)) + 188|0);
  $78 = HEAP32[$77>>2]|0;
  if ($75) {
   HEAP32[22117] = $78;
  } else {
   $79 = (0 - ($78))|0;
   HEAP32[22117] = $79;
  }
  $80 = HEAP32[(37656)>>2]|0;
  $81 = HEAP32[22117]|0;
  $82 = (($80) + ($81))|0;
  HEAP32[(37656)>>2] = $82;
  $83 = HEAP32[22117]|0;
  $84 = (0 - ($83))|0;
  HEAP32[22117] = $84;
 } else {
  HEAP32[(37656)>>2] = 4;
  HEAPF64[(37728)>>3] = 0.0;
  $85 = HEAP32[(37656)>>2]|0;
  HEAP32[(37664)>>2] = $85;
  HEAPF64[(37760)>>3] = 0.0;
  HEAPF64[(37672)>>3] = 0.0;
  HEAPF64[(37680)>>3] = 0.0;
 }
 $86 = HEAP32[(37656)>>2]|0;
 $87 = ($86|0)!=(4);
 $88 = HEAP32[(37652)>>2]|0;
 $89 = ($88|0)==(0);
 $or$cond3 = $87 | $89;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $90 = $0;
 $91 = ((($90)) + 180|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (+($92|0));
 $94 = 0.033000000000000002 * $93;
 HEAPF64[(37712)>>3] = $94;
 $95 = +HEAPF64[(37712)>>3];
 $96 = $95 > 0.0;
 if ($96) {
  $97 = +HEAPF64[(37712)>>3];
  $98 = 1.0 - $97;
  HEAPF64[(37704)>>3] = $98;
  STACKTOP = sp;return;
 } else {
  HEAPF64[(37704)>>3] = 1.0;
  STACKTOP = sp;return;
 }
}
function __ZL14antiresonator2P11resonator_td($r,$input) {
 $r = $r|0;
 $input = +$input;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $input;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = $3 * $4;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $0;
 $10 = ((($9)) + 24|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $5 + $12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $0;
 $18 = ((($17)) + 32|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $x = $21;
 $22 = $0;
 $23 = ((($22)) + 24|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $0;
 $26 = ((($25)) + 32|0);
 HEAPF64[$26>>3] = $24;
 $27 = $1;
 $28 = $0;
 $29 = ((($28)) + 24|0);
 HEAPF64[$29>>3] = $27;
 $30 = $0;
 $31 = ((($30)) + 40|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $0;
 $34 = +HEAPF64[$33>>3];
 $35 = $34 + $32;
 HEAPF64[$33>>3] = $35;
 $36 = $0;
 $37 = ((($36)) + 48|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $0;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41 + $38;
 HEAPF64[$40>>3] = $42;
 $43 = $0;
 $44 = ((($43)) + 56|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $0;
 $47 = ((($46)) + 16|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $48 + $45;
 HEAPF64[$47>>3] = $49;
 $50 = $x;
 STACKTOP = sp;return (+$50);
}
function __ZL10resonator2P11resonator_td($r,$input) {
 $r = $r|0;
 $input = +$input;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $input;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = $3 * $4;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $0;
 $10 = ((($9)) + 24|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $5 + $12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $0;
 $18 = ((($17)) + 32|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $x = $21;
 $22 = $0;
 $23 = ((($22)) + 24|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $0;
 $26 = ((($25)) + 32|0);
 HEAPF64[$26>>3] = $24;
 $27 = $x;
 $28 = $0;
 $29 = ((($28)) + 24|0);
 HEAPF64[$29>>3] = $27;
 $30 = $0;
 $31 = ((($30)) + 40|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $0;
 $34 = +HEAPF64[$33>>3];
 $35 = $34 + $32;
 HEAPF64[$33>>3] = $35;
 $36 = $0;
 $37 = ((($36)) + 48|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $0;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41 + $38;
 HEAPF64[$40>>3] = $42;
 $43 = $0;
 $44 = ((($43)) + 56|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $0;
 $47 = ((($46)) + 16|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $48 + $45;
 HEAPF64[$47>>3] = $49;
 $50 = $x;
 STACKTOP = sp;return (+$50);
}
function __Z14SetSynth_KlattiiP7frame_tS0_P7voice_ti($length,$modn,$fr1,$fr2,$v,$control) {
 $length = $length|0;
 $modn = $modn|0;
 $fr1 = $fr1|0;
 $fr2 = $fr2|0;
 $v = $v|0;
 $control = $control|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmd = 0, $fr3 = 0, $ix = 0, $next = 0.0, $or$cond = 0, $qix = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $modn;
 $2 = $fr1;
 $3 = $fr2;
 $4 = $v;
 $5 = $control;
 $6 = HEAP32[20080]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[20080]|0;
  $9 = ((($8)) + 132|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(0);
  if ($11) {
   $12 = HEAP32[20080]|0;
   $13 = ((($12)) + 132|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)<=(4);
   if ($15) {
    $16 = HEAP32[20080]|0;
    $17 = ((($16)) + 132|0);
    $18 = HEAP32[$17>>2]|0;
    HEAP32[(37636)>>2] = $18;
    $19 = HEAP32[(37636)>>2]|0;
    $20 = (5160 + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[(37804)>>2] = $21;
   }
  }
  $22 = HEAP32[20080]|0;
  $23 = ((($22)) + 88|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24|0) / 32)&-1;
  HEAP32[(37640)>>2] = $25;
 }
 HEAP32[22118] = 0;
 $26 = $5;
 $27 = $26 & 2;
 $28 = ($27|0)!=(0);
 $$ = $28 ? 1 : 0;
 HEAP32[22118] = $$;
 $29 = $5;
 $30 = $29 & 1;
 $31 = ($30|0)!=(0);
 L8: do {
  if ($31) {
   HEAP32[22118] = 1;
   $32 = HEAP32[20802]|0;
   $33 = (($32) + 1)|0;
   $qix = $33;
   while(1) {
    $34 = $qix;
    $35 = ($34|0)>=(170);
    if ($35) {
     $qix = 0;
    }
    $36 = $qix;
    $37 = HEAP32[20803]|0;
    $38 = ($36|0)==($37|0);
    if ($38) {
     break L8;
    }
    $39 = $qix;
    $40 = (80488 + ($39<<4)|0);
    $41 = HEAP32[$40>>2]|0;
    $cmd = $41;
    $42 = $cmd;
    $43 = ($42|0)==(1);
    if ($43) {
     break;
    }
    $66 = $cmd;
    $67 = ($66|0)==(6);
    $68 = $cmd;
    $69 = ($68|0)==(5);
    $or$cond = $67 | $69;
    if ($or$cond) {
     break L8;
    }
    $70 = $qix;
    $71 = (($70) + 1)|0;
    $qix = $71;
   }
   HEAP32[22118] = 0;
   $44 = $qix;
   $45 = (80488 + ($44<<4)|0);
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47;
   $fr3 = $48;
   $ix = 1;
   while(1) {
    $49 = $ix;
    $50 = ($49|0)<(6);
    if (!($50)) {
     break L8;
    }
    $51 = $ix;
    $52 = $fr3;
    $53 = ((($52)) + 2|0);
    $54 = (($53) + ($51<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 << 16 >> 16;
    $57 = $ix;
    $58 = $3;
    $59 = ((($58)) + 2|0);
    $60 = (($59) + ($57<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61 << 16 >> 16;
    $63 = ($56|0)!=($62|0);
    if ($63) {
     break;
    }
    $64 = $ix;
    $65 = (($64) + 1)|0;
    $ix = $65;
   }
   HEAP32[22118] = 2;
  }
 } while(0);
 $72 = $5;
 $73 = $72 & 1;
 $74 = ($73|0)!=(0);
 if ($74) {
  $ix = 1;
  while(1) {
   $75 = $ix;
   $76 = ($75|0)<(6);
   if (!($76)) {
    break;
   }
   $77 = $ix;
   $78 = ((118918) + ($77<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = $ix;
   $82 = $2;
   $83 = ((($82)) + 2|0);
   $84 = (($83) + ($81<<1)|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85 << 16 >> 16;
   $87 = ($80|0)!=($86|0);
   if ($87) {
    label = 23;
    break;
   }
   $88 = $ix;
   $89 = (($88) + 1)|0;
   $ix = $89;
  }
  if ((label|0) == 23) {
   __Z10KlattReseti(0);
  }
  $90 = $3;
  dest=118916; src=$90; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 }
 $ix = 0;
 while(1) {
  $91 = $ix;
  $92 = ($91|0)<(10);
  if (!($92)) {
   break;
  }
  $93 = $ix;
  $94 = ($93|0)>=(5);
  if ($94) {
   $95 = $2;
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = $97 & 1;
   $99 = ($98|0)==(0);
   if ($99) {
    $100 = $ix;
    $101 = (88424 + ($100<<2)|0);
    HEAP32[$101>>2] = 0;
    $102 = $ix;
    $103 = (41168 + ($102<<3)|0);
    HEAPF64[$103>>3] = 0.0;
    $104 = $ix;
    $105 = (41088 + ($104<<3)|0);
    HEAPF64[$105>>3] = 0.0;
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   $106 = $ix;
   $107 = $2;
   $108 = ((($107)) + 39|0);
   $109 = (($108) + ($106)|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110&255;
   $112 = $ix;
   $113 = (88424 + ($112<<2)|0);
   HEAP32[$113>>2] = $111;
   $114 = (+($111|0));
   $115 = $ix;
   $116 = (41168 + ($115<<3)|0);
   HEAPF64[$116>>3] = $114;
   $117 = $ix;
   $118 = $3;
   $119 = ((($118)) + 39|0);
   $120 = (($119) + ($117)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = $ix;
   $124 = (88424 + ($123<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($122) - ($125))|0;
   $127 = $126<<6;
   $128 = (+($127|0));
   $129 = $0;
   $130 = (+($129|0));
   $131 = $128 / $130;
   $132 = $ix;
   $133 = (41088 + ($132<<3)|0);
   HEAPF64[$133>>3] = $131;
  }
  $134 = $ix;
  $135 = (($134) + 1)|0;
  $ix = $135;
 }
 $136 = $0;
 HEAP32[22033] = $136;
 $ix = 1;
 while(1) {
  $137 = $ix;
  $138 = ($137|0)<(6);
  if (!($138)) {
   break;
  }
  $139 = $ix;
  $140 = $2;
  $141 = ((($140)) + 2|0);
  $142 = (($141) + ($139<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = $ix;
  $146 = $4;
  $147 = ((($146)) + 164|0);
  $148 = (($147) + ($145<<1)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149 << 16 >> 16;
  $151 = Math_imul($144, $150)|0;
  $152 = (+($151|0));
  $153 = $152 / 256.0;
  $154 = $ix;
  $155 = $4;
  $156 = ((($155)) + 218|0);
  $157 = (($156) + ($154<<1)|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158 << 16 >> 16;
  $160 = (+($159|0));
  $161 = $153 + $160;
  $162 = $ix;
  $163 = (40368 + (($162*80)|0)|0);
  $164 = ((($163)) + 16|0);
  HEAPF64[$164>>3] = $161;
  $165 = $ix;
  $166 = (40368 + (($165*80)|0)|0);
  $167 = ((($166)) + 16|0);
  $168 = +HEAPF64[$167>>3];
  $169 = (~~(($168)));
  $170 = $ix;
  $171 = (40368 + (($170*80)|0)|0);
  HEAP32[$171>>2] = $169;
  $172 = $ix;
  $173 = $3;
  $174 = ((($173)) + 2|0);
  $175 = (($174) + ($172<<1)|0);
  $176 = HEAP16[$175>>1]|0;
  $177 = $176 << 16 >> 16;
  $178 = $ix;
  $179 = $4;
  $180 = ((($179)) + 164|0);
  $181 = (($180) + ($178<<1)|0);
  $182 = HEAP16[$181>>1]|0;
  $183 = $182 << 16 >> 16;
  $184 = Math_imul($177, $183)|0;
  $185 = (+($184|0));
  $186 = $185 / 256.0;
  $187 = $ix;
  $188 = $4;
  $189 = ((($188)) + 218|0);
  $190 = (($189) + ($187<<1)|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191 << 16 >> 16;
  $193 = (+($192|0));
  $194 = $186 + $193;
  $next = $194;
  $195 = $next;
  $196 = $ix;
  $197 = (40368 + (($196*80)|0)|0);
  $198 = ((($197)) + 16|0);
  $199 = +HEAPF64[$198>>3];
  $200 = $195 - $199;
  $201 = $200 * 64.0;
  $202 = $0;
  $203 = (+($202|0));
  $204 = $201 / $203;
  $205 = $ix;
  $206 = (40368 + (($205*80)|0)|0);
  $207 = ((($206)) + 48|0);
  HEAPF64[$207>>3] = $204;
  $208 = $ix;
  $209 = ($208|0)<(4);
  if ($209) {
   $210 = $ix;
   $211 = $2;
   $212 = ((($211)) + 35|0);
   $213 = (($212) + ($210)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215<<1;
   $217 = (+($216|0));
   $218 = $ix;
   $219 = (40368 + (($218*80)|0)|0);
   $220 = ((($219)) + 24|0);
   HEAPF64[$220>>3] = $217;
   $221 = $ix;
   $222 = (40368 + (($221*80)|0)|0);
   $223 = ((($222)) + 24|0);
   $224 = +HEAPF64[$223>>3];
   $225 = (~~(($224)));
   $226 = $ix;
   $227 = (40368 + (($226*80)|0)|0);
   $228 = ((($227)) + 4|0);
   HEAP32[$228>>2] = $225;
   $229 = $ix;
   $230 = $3;
   $231 = ((($230)) + 35|0);
   $232 = (($231) + ($229)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = $234<<1;
   $236 = (+($235|0));
   $next = $236;
   $237 = $next;
   $238 = $ix;
   $239 = (40368 + (($238*80)|0)|0);
   $240 = ((($239)) + 24|0);
   $241 = +HEAPF64[$240>>3];
   $242 = $237 - $241;
   $243 = $242 * 64.0;
   $244 = $0;
   $245 = (+($244|0));
   $246 = $243 / $245;
   $247 = $ix;
   $248 = (40368 + (($247*80)|0)|0);
   $249 = ((($248)) + 56|0);
   HEAPF64[$249>>3] = $246;
  }
  $250 = $ix;
  $251 = (($250) + 1)|0;
  $ix = $251;
 }
 $252 = $2;
 $253 = ((($252)) + 39|0);
 $254 = ((($253)) + 1|0);
 $255 = HEAP8[$254>>0]|0;
 $256 = $255&255;
 $257 = $256<<1;
 $258 = (+($257|0));
 HEAPF64[(40384)>>3] = $258;
 $259 = +HEAPF64[(40384)>>3];
 $260 = $259 == 0.0;
 if ($260) {
  $261 = HEAP32[(88180)>>2]|0;
  $262 = (+($261|0));
  HEAPF64[(40384)>>3] = $262;
 }
 $263 = +HEAPF64[(40384)>>3];
 $264 = (~~(($263)));
 HEAP32[10092] = $264;
 $265 = $3;
 $266 = ((($265)) + 39|0);
 $267 = ((($266)) + 1|0);
 $268 = HEAP8[$267>>0]|0;
 $269 = $268&255;
 $270 = $269<<1;
 $271 = (+($270|0));
 $next = $271;
 $272 = $next;
 $273 = $272 == 0.0;
 if ($273) {
  $274 = HEAP32[(88180)>>2]|0;
  $275 = (+($274|0));
  $next = $275;
 }
 $276 = $next;
 $277 = +HEAPF64[(40384)>>3];
 $278 = $276 - $277;
 $279 = $278 * 64.0;
 $280 = $0;
 $281 = (+($280|0));
 $282 = $279 / $281;
 HEAPF64[(40416)>>3] = $282;
 HEAPF64[(40392)>>3] = 89.0;
 HEAP32[(40372)>>2] = 89;
 HEAPF64[(40424)>>3] = 0.0;
 $283 = $2;
 $284 = HEAP16[$283>>1]|0;
 $285 = $284 << 16 >> 16;
 $286 = $285 & 1;
 $287 = ($286|0)!=(0);
 if (!($287)) {
  STACKTOP = sp;return;
 }
 $ix = 1;
 while(1) {
  $288 = $ix;
  $289 = ($288|0)<(7);
  if (!($289)) {
   break;
  }
  $290 = $ix;
  $291 = $2;
  $292 = ((($291)) + 56|0);
  $293 = (($292) + ($290)|0);
  $294 = HEAP8[$293>>0]|0;
  $295 = $294&255;
  $296 = $295<<2;
  $297 = (+($296|0));
  $298 = $ix;
  $299 = (40368 + (($298*80)|0)|0);
  $300 = ((($299)) + 40|0);
  HEAPF64[$300>>3] = $297;
  $301 = $ix;
  $302 = (40368 + (($301*80)|0)|0);
  $303 = ((($302)) + 40|0);
  $304 = +HEAPF64[$303>>3];
  $305 = (~~(($304)));
  $306 = $ix;
  $307 = (40368 + (($306*80)|0)|0);
  $308 = ((($307)) + 12|0);
  HEAP32[$308>>2] = $305;
  $309 = $ix;
  $310 = $3;
  $311 = ((($310)) + 56|0);
  $312 = (($311) + ($309)|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = $313&255;
  $315 = $314<<2;
  $316 = (+($315|0));
  $next = $316;
  $317 = $next;
  $318 = $ix;
  $319 = (40368 + (($318*80)|0)|0);
  $320 = ((($319)) + 40|0);
  $321 = +HEAPF64[$320>>3];
  $322 = $317 - $321;
  $323 = $322 * 64.0;
  $324 = $0;
  $325 = (+($324|0));
  $326 = $323 / $325;
  $327 = $ix;
  $328 = (40368 + (($327*80)|0)|0);
  $329 = ((($328)) + 72|0);
  HEAPF64[$329>>3] = $326;
  $330 = $ix;
  $331 = $2;
  $332 = ((($331)) + 49|0);
  $333 = (($332) + ($330)|0);
  $334 = HEAP8[$333>>0]|0;
  $335 = (+($334&255));
  $336 = $ix;
  $337 = (40368 + (($336*80)|0)|0);
  $338 = ((($337)) + 32|0);
  HEAPF64[$338>>3] = $335;
  $339 = $ix;
  $340 = (40368 + (($339*80)|0)|0);
  $341 = ((($340)) + 32|0);
  $342 = +HEAPF64[$341>>3];
  $343 = (~~(($342)));
  $344 = $ix;
  $345 = (40368 + (($344*80)|0)|0);
  $346 = ((($345)) + 8|0);
  HEAP32[$346>>2] = $343;
  $347 = $ix;
  $348 = $3;
  $349 = ((($348)) + 49|0);
  $350 = (($349) + ($347)|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = (+($351&255));
  $next = $352;
  $353 = $next;
  $354 = $ix;
  $355 = (40368 + (($354*80)|0)|0);
  $356 = ((($355)) + 32|0);
  $357 = +HEAPF64[$356>>3];
  $358 = $353 - $357;
  $359 = $358 * 64.0;
  $360 = $0;
  $361 = (+($360|0));
  $362 = $359 / $361;
  $363 = $ix;
  $364 = (40368 + (($363*80)|0)|0);
  $365 = ((($364)) + 64|0);
  HEAPF64[$365>>3] = $362;
  $366 = $ix;
  $367 = (($366) + 1)|0;
  $ix = $367;
 }
 STACKTOP = sp;return;
}
function __Z14Wavegen_Klatt2iiiP7frame_tS0_($length,$modulation,$resume,$fr1,$fr2) {
 $length = $length|0;
 $modulation = $modulation|0;
 $resume = $resume|0;
 $fr1 = $fr1|0;
 $fr2 = $fr2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $length;
 $1 = $modulation;
 $2 = $resume;
 $3 = $fr1;
 $4 = $fr2;
 $5 = $2;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $0;
  $8 = $1;
  $9 = $3;
  $10 = $4;
  $11 = HEAP32[20080]|0;
  __Z14SetSynth_KlattiiP7frame_tS0_P7voice_ti($7,$8,$9,$10,$11,1);
 }
 $12 = $2;
 $13 = (__Z13Wavegen_Klatti($12)|0);
 STACKTOP = sp;return ($13|0);
}
function __Z9KlattInitv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ix = 0;
 while(1) {
  $0 = $ix;
  $1 = ($0|0)<(256);
  if (!($1)) {
   break;
  }
  $2 = $ix;
  $3 = (($2) + 1)|0;
  $ix = $3;
 }
 HEAP32[22032] = 0;
 HEAP32[9404] = 1;
 HEAP32[(37624)>>2] = 22050;
 HEAP32[(37636)>>2] = 1;
 $4 = HEAP32[(37636)>>2]|0;
 $5 = (5160 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[(37804)>>2] = $6;
 HEAP32[(37792)>>2] = 14588;
 HEAP32[(37776)>>2] = 100;
 HEAPF64[(37784)>>3] = 3.0;
 $7 = HEAP32[(37624)>>2]|0;
 $8 = ($7*10)|0;
 $9 = (($8|0) / 1000)&-1;
 HEAP32[(37644)>>2] = $9;
 HEAP32[(37620)>>2] = 0;
 HEAP32[(37640)>>2] = 20;
 __Z10KlattReseti(2);
 $ix = 0;
 while(1) {
  $10 = $ix;
  $11 = ($10|0)<=(9);
  if (!($11)) {
   break;
  }
  $12 = $ix;
  $13 = (15748 + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = $ix;
  $17 = ((88144) + ($16<<2)|0);
  HEAP32[$17>>2] = $15;
  $18 = $ix;
  $19 = (15768 + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = $ix;
  $23 = ((88184) + ($22<<2)|0);
  HEAP32[$23>>2] = $21;
  $24 = $ix;
  $25 = (15788 + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $ix;
  $29 = ((88224) + ($28<<2)|0);
  HEAP32[$29>>2] = $27;
  $30 = $ix;
  $31 = (15808 + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = $ix;
  $35 = ((88264) + ($34<<2)|0);
  HEAP32[$35>>2] = $33;
  $36 = $ix;
  $37 = (($36) + 1)|0;
  $ix = $37;
 }
 $38 = HEAP16[7884]|0;
 $39 = $38 << 16 >> 16;
 HEAP32[(88384)>>2] = $39;
 HEAP32[22034] = 1000;
 HEAP32[(88140)>>2] = 59;
 HEAP32[(88304)>>2] = 0;
 HEAP32[(88308)>>2] = 40;
 HEAP32[(88312)>>2] = 0;
 HEAP32[(88316)>>2] = 0;
 HEAP32[(88320)>>2] = 50;
 HEAP32[(88324)>>2] = 0;
 HEAP32[(88328)>>2] = 0;
 HEAP32[(88332)>>2] = 0;
 HEAP32[(88336)>>2] = 62;
 STACKTOP = sp;return;
}
function _sonicGetSpeed($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function _sonicSetSpeed($stream,$speed) {
 $stream = $stream|0;
 $speed = +$speed;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = $speed;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 HEAPF32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _sonicDestroyStream($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  _free($5);
 }
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = $0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
 }
 $20 = $0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $27 = $0;
  _free($27);
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 _free($26);
 $27 = $0;
 _free($27);
 STACKTOP = sp;return;
}
function _sonicCreateStream($sampleRate,$numChannels) {
 $sampleRate = $sampleRate|0;
 $numChannels = $numChannels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $maxPeriod = 0;
 var $maxRequired = 0, $minPeriod = 0, $stream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sampleRate;
 $2 = $numChannels;
 $3 = (_calloc(1,88)|0);
 $stream = $3;
 $4 = $1;
 $5 = (($4|0) / 400)&-1;
 $minPeriod = $5;
 $6 = $1;
 $7 = (($6|0) / 65)&-1;
 $maxPeriod = $7;
 $8 = $maxPeriod;
 $9 = $8<<1;
 $maxRequired = $9;
 $10 = $stream;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $12 = $maxRequired;
 $13 = $stream;
 $14 = ((($13)) + 32|0);
 HEAP32[$14>>2] = $12;
 $15 = $maxRequired;
 $16 = $2;
 $17 = $16<<1;
 $18 = (_calloc($15,$17)|0);
 $19 = $stream;
 HEAP32[$19>>2] = $18;
 $20 = $stream;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $stream;
  _sonicDestroyStream($23);
  $0 = 0;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $24 = $maxRequired;
 $25 = $stream;
 $26 = ((($25)) + 40|0);
 HEAP32[$26>>2] = $24;
 $27 = $maxRequired;
 $28 = $2;
 $29 = $28<<1;
 $30 = (_calloc($27,$29)|0);
 $31 = $stream;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = $stream;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = $stream;
  _sonicDestroyStream($37);
  $0 = 0;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $38 = $maxRequired;
 $39 = $stream;
 $40 = ((($39)) + 36|0);
 HEAP32[$40>>2] = $38;
 $41 = $maxRequired;
 $42 = $2;
 $43 = $42<<1;
 $44 = (_calloc($41,$43)|0);
 $45 = $stream;
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = $stream;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = $stream;
  _sonicDestroyStream($51);
  $0 = 0;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 } else {
  $52 = $maxRequired;
  $53 = (_calloc($52,2)|0);
  $54 = $stream;
  $55 = ((($54)) + 12|0);
  HEAP32[$55>>2] = $53;
  $56 = $stream;
  $57 = ((($56)) + 16|0);
  HEAPF32[$57>>2] = 1.0;
  $58 = $stream;
  $59 = ((($58)) + 24|0);
  HEAPF32[$59>>2] = 1.0;
  $60 = $stream;
  $61 = ((($60)) + 20|0);
  HEAPF32[$61>>2] = 1.0;
  $62 = $1;
  $63 = $stream;
  $64 = ((($63)) + 72|0);
  HEAP32[$64>>2] = $62;
  $65 = $2;
  $66 = $stream;
  $67 = ((($66)) + 28|0);
  HEAP32[$67>>2] = $65;
  $68 = $minPeriod;
  $69 = $stream;
  $70 = ((($69)) + 56|0);
  HEAP32[$70>>2] = $68;
  $71 = $maxPeriod;
  $72 = $stream;
  $73 = ((($72)) + 60|0);
  HEAP32[$73>>2] = $71;
  $74 = $maxRequired;
  $75 = $stream;
  $76 = ((($75)) + 64|0);
  HEAP32[$76>>2] = $74;
  $77 = $stream;
  $0 = $77;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 return (0)|0;
}
function _sonicReadShortFromStream($stream,$samples,$maxSamples) {
 $stream = $stream|0;
 $samples = $samples|0;
 $maxSamples = $maxSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numSamples = 0, $remainingSamples = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $samples;
 $3 = $maxSamples;
 $4 = $1;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $numSamples = $6;
 $remainingSamples = 0;
 $7 = $numSamples;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $9 = $numSamples;
 $10 = $3;
 $11 = ($9|0)>($10|0);
 if ($11) {
  $12 = $numSamples;
  $13 = $3;
  $14 = (($12) - ($13))|0;
  $remainingSamples = $14;
  $15 = $3;
  $numSamples = $15;
 }
 $16 = $2;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $numSamples;
 $21 = $20<<1;
 $22 = $1;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($21, $24)|0;
 _memcpy(($16|0),($19|0),($25|0))|0;
 $26 = $remainingSamples;
 $27 = ($26|0)>(0);
 if ($27) {
  $28 = $1;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $numSamples;
  $35 = $1;
  $36 = ((($35)) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = Math_imul($34, $37)|0;
  $39 = (($33) + ($38<<1)|0);
  $40 = $remainingSamples;
  $41 = $40<<1;
  $42 = $1;
  $43 = ((($42)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = Math_imul($41, $44)|0;
  _memmove(($30|0),($39|0),($45|0))|0;
 }
 $46 = $remainingSamples;
 $47 = $1;
 $48 = ((($47)) + 48|0);
 HEAP32[$48>>2] = $46;
 $49 = $numSamples;
 $0 = $49;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _sonicFlushStream($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $expectedSamples = 0, $maxRequired = 0, $numOutputSamples = 0, $numSamples = 0, $remainingSpace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $1;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $maxRequired = $4;
 $5 = $1;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $numSamples = $7;
 $8 = $numSamples;
 $9 = ($8|0)==(0);
 if ($9) {
  $0 = 1;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $10 = $numSamples;
 $11 = $maxRequired;
 $12 = ($10|0)>=($11|0);
 if ($12) {
  $13 = $1;
  $14 = (_sonicWriteShortToStream($13,0,0)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $0 = 0;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $16 = $1;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $numSamples = $18;
 $19 = $numSamples;
 $20 = ($19|0)==(0);
 if ($20) {
  $0 = 1;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $21 = $maxRequired;
 $22 = $numSamples;
 $23 = (($21) - ($22))|0;
 $remainingSpace = $23;
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = $numSamples;
 $27 = $1;
 $28 = ((($27)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($26, $29)|0;
 $31 = (($25) + ($30<<1)|0);
 $32 = $remainingSpace;
 $33 = $32<<1;
 $34 = $1;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = Math_imul($33, $36)|0;
 _memset(($31|0),0,($37|0))|0;
 $38 = $maxRequired;
 $39 = $1;
 $40 = ((($39)) + 44|0);
 HEAP32[$40>>2] = $38;
 $41 = $1;
 $42 = ((($41)) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 $numOutputSamples = $43;
 $44 = $1;
 $45 = (_sonicWriteShortToStream($44,0,0)|0);
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $0 = 0;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $47 = $numSamples;
 $48 = (+($47|0));
 $49 = $1;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $48 * $51;
 $53 = $52;
 $54 = $53 + 0.5;
 $55 = (~~(($54)));
 $expectedSamples = $55;
 $56 = $1;
 $57 = ((($56)) + 48|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $numOutputSamples;
 $60 = $expectedSamples;
 $61 = (($59) + ($60))|0;
 $62 = ($58|0)>($61|0);
 if ($62) {
  $63 = $numOutputSamples;
  $64 = $expectedSamples;
  $65 = (($63) + ($64))|0;
  $66 = $1;
  $67 = ((($66)) + 48|0);
  HEAP32[$67>>2] = $65;
 }
 $0 = 1;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _sonicWriteShortToStream($stream,$samples,$numSamples) {
 $stream = $stream|0;
 $samples = $samples|0;
 $numSamples = $numSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $samples;
 $3 = $numSamples;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZL28addShortSamplesToInputBufferP17sonicStreamStructPsi($4,$5,$6)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = (__ZL18processStreamInputP17sonicStreamStruct($9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZL28addShortSamplesToInputBufferP17sonicStreamStructPsi($stream,$samples,$numSamples) {
 $stream = $stream|0;
 $samples = $samples|0;
 $numSamples = $numSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $samples;
 $3 = $numSamples;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $6 = $1;
 $7 = $3;
 $8 = (__ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($6,$7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = Math_imul($14, $17)|0;
  $19 = (($11) + ($18<<1)|0);
  $20 = $2;
  $21 = $3;
  $22 = $21<<1;
  $23 = $1;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = Math_imul($22, $25)|0;
  _memcpy(($19|0),($20|0),($26|0))|0;
  $27 = $3;
  $28 = $1;
  $29 = ((($28)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27))|0;
  HEAP32[$29>>2] = $31;
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($stream,$numSamples) {
 $stream = $stream|0;
 $numSamples = $numSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $numSamples;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) + ($6))|0;
 $8 = $1;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>($10|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 >> 1;
  $16 = $2;
  $17 = (($15) + ($16))|0;
  $18 = $1;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17))|0;
  HEAP32[$19>>2] = $21;
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26<<1;
  $28 = $1;
  $29 = ((($28)) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = Math_imul($27, $30)|0;
  $32 = (_realloc($23,$31)|0);
  $33 = $1;
  HEAP32[$33>>2] = $32;
  $34 = $1;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $0 = 0;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $0 = 1;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZL18processStreamInputP17sonicStreamStruct($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $7 = 0.0, $8 = 0, $9 = 0, $originalNumOutputSamples = 0, $speed = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $1;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $originalNumOutputSamples = $4;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $7 / $10;
 $speed = $11;
 $12 = $speed;
 $13 = $12;
 $14 = $13 > 1.0000100000000001;
 do {
  if ($14) {
   label = 3;
  } else {
   $15 = $speed;
   $16 = $15;
   $17 = $16 < 0.99999000000000004;
   if ($17) {
    label = 3;
   } else {
    $20 = $1;
    $21 = $1;
    $22 = HEAP32[$21>>2]|0;
    $23 = $1;
    $24 = ((($23)) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (__ZL12copyToOutputP17sonicStreamStructPsi($20,$22,$25)|0);
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $1;
     $29 = ((($28)) + 44|0);
     HEAP32[$29>>2] = 0;
     break;
    }
    $0 = 0;
    $63 = $0;
    STACKTOP = sp;return ($63|0);
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $18 = $1;
  $19 = $speed;
  (__ZL11changeSpeedP17sonicStreamStructf($18,$19)|0);
 }
 $30 = $1;
 $31 = ((($30)) + 24|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $32 != 1.0;
 if ($33) {
  $34 = $1;
  $35 = $originalNumOutputSamples;
  $36 = (__ZL11adjustPitchP17sonicStreamStructi($34,$35)|0);
  $37 = ($36|0)!=(0);
  if (!($37)) {
   $0 = 0;
   $63 = $0;
   STACKTOP = sp;return ($63|0);
  }
 }
 $38 = $1;
 $39 = ((($38)) + 20|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40 != 1.0;
 if ($41) {
  $42 = $1;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $originalNumOutputSamples;
  $46 = $1;
  $47 = ((($46)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = Math_imul($45, $48)|0;
  $50 = (($44) + ($49<<1)|0);
  $51 = $1;
  $52 = ((($51)) + 48|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $originalNumOutputSamples;
  $55 = (($53) - ($54))|0;
  $56 = $1;
  $57 = ((($56)) + 28|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = Math_imul($55, $58)|0;
  $60 = $1;
  $61 = ((($60)) + 20|0);
  $62 = +HEAPF32[$61>>2];
  __ZL12scaleSamplesPsif($50,$59,$62);
 }
 $0 = 1;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function __ZL11changeSpeedP17sonicStreamStructf($stream,$speed) {
 $stream = $stream|0;
 $speed = +$speed;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $maxRequired = 0, $newSamples = 0, $numSamples = 0, $period = 0, $position = 0, $samples = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $speed;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $numSamples = $5;
 $position = 0;
 $6 = $1;
 $7 = ((($6)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $maxRequired = $8;
 $9 = $1;
 $10 = ((($9)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $maxRequired;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $0 = 1;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 while(1) {
  $14 = $1;
  $15 = ((($14)) + 68|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)>(0);
  $18 = $1;
  do {
   if ($17) {
    $19 = $position;
    $20 = (__ZL17copyInputToOutputP17sonicStreamStructi($18,$19)|0);
    $newSamples = $20;
    $21 = $newSamples;
    $22 = $position;
    $23 = (($22) + ($21))|0;
    $position = $23;
   } else {
    $24 = HEAP32[$18>>2]|0;
    $25 = $position;
    $26 = $1;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = Math_imul($25, $28)|0;
    $30 = (($24) + ($29<<1)|0);
    $samples = $30;
    $31 = $1;
    $32 = $samples;
    $33 = (__ZL15findPitchPeriodP17sonicStreamStructPs($31,$32)|0);
    $period = $33;
    $34 = $2;
    $35 = $34;
    $36 = $35 > 1.0;
    $37 = $1;
    $38 = $samples;
    $39 = $2;
    $40 = $period;
    if ($36) {
     $41 = (__ZL15skipPitchPeriodP17sonicStreamStructPsfi($37,$38,$39,$40)|0);
     $newSamples = $41;
     $42 = $period;
     $43 = $newSamples;
     $44 = (($42) + ($43))|0;
     $45 = $position;
     $46 = (($45) + ($44))|0;
     $position = $46;
     break;
    } else {
     $47 = (__ZL17insertPitchPeriodP17sonicStreamStructPsfi($37,$38,$39,$40)|0);
     $newSamples = $47;
     $48 = $newSamples;
     $49 = $position;
     $50 = (($49) + ($48))|0;
     $position = $50;
     break;
    }
   }
  } while(0);
  $51 = $newSamples;
  $52 = ($51|0)==(0);
  if ($52) {
   label = 9;
   break;
  }
  $53 = $position;
  $54 = $maxRequired;
  $55 = (($53) + ($54))|0;
  $56 = $numSamples;
  $57 = ($55|0)<=($56|0);
  if (!($57)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 9) {
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 else if ((label|0) == 11) {
  $58 = $1;
  $59 = $position;
  __ZL18removeInputSamplesP17sonicStreamStructi($58,$59);
  $0 = 1;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 return (0)|0;
}
function __ZL17copyInputToOutputP17sonicStreamStructi($stream,$position) {
 $stream = $stream|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numSamples = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $position;
 $3 = $1;
 $4 = ((($3)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $numSamples = $5;
 $6 = $numSamples;
 $7 = $1;
 $8 = ((($7)) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $numSamples = $13;
 }
 $14 = $1;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = $1;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($17, $20)|0;
 $22 = (($16) + ($21<<1)|0);
 $23 = $numSamples;
 $24 = (__ZL12copyToOutputP17sonicStreamStructPsi($14,$22,$23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $numSamples;
  $27 = $1;
  $28 = ((($27)) + 68|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) - ($26))|0;
  HEAP32[$28>>2] = $30;
  $31 = $numSamples;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZL12copyToOutputP17sonicStreamStructPsi($stream,$samples,$numSamples) {
 $stream = $stream|0;
 $samples = $samples|0;
 $numSamples = $numSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $samples;
 $3 = $numSamples;
 $4 = $1;
 $5 = $3;
 $6 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($4,$5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = ((($11)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = Math_imul($13, $16)|0;
  $18 = (($10) + ($17<<1)|0);
  $19 = $2;
  $20 = $3;
  $21 = $20<<1;
  $22 = $1;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = Math_imul($21, $24)|0;
  _memcpy(($18|0),($19|0),($25|0))|0;
  $26 = $3;
  $27 = $1;
  $28 = ((($27)) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26))|0;
  HEAP32[$28>>2] = $30;
  $31 = $3;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($stream,$numSamples) {
 $stream = $stream|0;
 $numSamples = $numSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $numSamples;
 $3 = $1;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) + ($6))|0;
 $8 = $1;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>($10|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 >> 1;
  $16 = $2;
  $17 = (($15) + ($16))|0;
  $18 = $1;
  $19 = ((($18)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17))|0;
  HEAP32[$19>>2] = $21;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = ((($25)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27<<1;
  $29 = $1;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $33 = (_realloc($24,$32)|0);
  $34 = $1;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
  $36 = $1;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $0 = 0;
   $40 = $0;
   STACKTOP = sp;return ($40|0);
  }
 }
 $0 = 1;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function __ZL15findPitchPeriodP17sonicStreamStructPs($stream,$samples) {
 $stream = $stream|0;
 $samples = $samples|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $maxDiff = 0, $maxPeriod = 0, $minDiff = 0, $minPeriod = 0, $or$cond = 0, $period = 0, $retPeriod = 0, $sampleRate = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $minDiff = sp + 16|0;
 $maxDiff = sp + 12|0;
 $0 = $stream;
 $1 = $samples;
 $2 = $0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $minPeriod = $4;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $maxPeriod = $7;
 $8 = $0;
 $9 = ((($8)) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $sampleRate = $10;
 $skip = 1;
 $11 = $sampleRate;
 $12 = ($11|0)>(4000);
 if ($12) {
  $13 = $sampleRate;
  $14 = (($13|0) / 4000)&-1;
  $skip = $14;
 }
 $15 = $0;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 $19 = $skip;
 $20 = ($19|0)==(1);
 $or$cond = $18 & $20;
 do {
  if ($or$cond) {
   $21 = $1;
   $22 = $minPeriod;
   $23 = $maxPeriod;
   $24 = (__ZL22findPitchPeriodInRangePsiiPiS0_($21,$22,$23,$minDiff,$maxDiff)|0);
   $period = $24;
  } else {
   $25 = $0;
   $26 = $1;
   $27 = $skip;
   __ZL15downSampleInputP17sonicStreamStructPsi($25,$26,$27);
   $28 = $0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $minPeriod;
   $32 = $skip;
   $33 = (($31|0) / ($32|0))&-1;
   $34 = $maxPeriod;
   $35 = $skip;
   $36 = (($34|0) / ($35|0))&-1;
   $37 = (__ZL22findPitchPeriodInRangePsiiPiS0_($30,$33,$36,$minDiff,$maxDiff)|0);
   $period = $37;
   $38 = $skip;
   $39 = ($38|0)!=(1);
   if ($39) {
    $40 = $skip;
    $41 = $period;
    $42 = Math_imul($41, $40)|0;
    $period = $42;
    $43 = $period;
    $44 = $skip;
    $45 = $44 << 2;
    $46 = (($43) - ($45))|0;
    $minPeriod = $46;
    $47 = $period;
    $48 = $skip;
    $49 = $48 << 2;
    $50 = (($47) + ($49))|0;
    $maxPeriod = $50;
    $51 = $minPeriod;
    $52 = $0;
    $53 = ((($52)) + 56|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($51|0)<($54|0);
    if ($55) {
     $56 = $0;
     $57 = ((($56)) + 56|0);
     $58 = HEAP32[$57>>2]|0;
     $minPeriod = $58;
    }
    $59 = $maxPeriod;
    $60 = $0;
    $61 = ((($60)) + 60|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($59|0)>($62|0);
    if ($63) {
     $64 = $0;
     $65 = ((($64)) + 60|0);
     $66 = HEAP32[$65>>2]|0;
     $maxPeriod = $66;
    }
    $67 = $0;
    $68 = ((($67)) + 28|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(1);
    if ($70) {
     $71 = $1;
     $72 = $minPeriod;
     $73 = $maxPeriod;
     $74 = (__ZL22findPitchPeriodInRangePsiiPiS0_($71,$72,$73,$minDiff,$maxDiff)|0);
     $period = $74;
     break;
    } else {
     $75 = $0;
     $76 = $1;
     __ZL15downSampleInputP17sonicStreamStructPsi($75,$76,1);
     $77 = $0;
     $78 = ((($77)) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $minPeriod;
     $81 = $maxPeriod;
     $82 = (__ZL22findPitchPeriodInRangePsiiPiS0_($79,$80,$81,$minDiff,$maxDiff)|0);
     $period = $82;
     break;
    }
   }
  }
 } while(0);
 $83 = $0;
 $84 = $period;
 $85 = HEAP32[$minDiff>>2]|0;
 $86 = HEAP32[$maxDiff>>2]|0;
 $87 = (__ZL16prevPeriodBetterP17sonicStreamStructiii($83,$84,$85,$86)|0);
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $0;
  $90 = ((($89)) + 76|0);
  $91 = HEAP32[$90>>2]|0;
  $retPeriod = $91;
  $93 = HEAP32[$minDiff>>2]|0;
  $94 = $0;
  $95 = ((($94)) + 84|0);
  HEAP32[$95>>2] = $93;
  $96 = HEAP32[$maxDiff>>2]|0;
  $97 = $0;
  $98 = ((($97)) + 80|0);
  HEAP32[$98>>2] = $96;
  $99 = $period;
  $100 = $0;
  $101 = ((($100)) + 76|0);
  HEAP32[$101>>2] = $99;
  $102 = $retPeriod;
  STACKTOP = sp;return ($102|0);
 } else {
  $92 = $period;
  $retPeriod = $92;
  $93 = HEAP32[$minDiff>>2]|0;
  $94 = $0;
  $95 = ((($94)) + 84|0);
  HEAP32[$95>>2] = $93;
  $96 = HEAP32[$maxDiff>>2]|0;
  $97 = $0;
  $98 = ((($97)) + 80|0);
  HEAP32[$98>>2] = $96;
  $99 = $period;
  $100 = $0;
  $101 = ((($100)) + 76|0);
  HEAP32[$101>>2] = $99;
  $102 = $retPeriod;
  STACKTOP = sp;return ($102|0);
 }
 return (0)|0;
}
function __ZL22findPitchPeriodInRangePsiiPiS0_($samples,$minPeriod,$maxPeriod,$retMinDiff,$retMaxDiff) {
 $samples = $samples|0;
 $minPeriod = $minPeriod|0;
 $maxPeriod = $maxPeriod|0;
 $retMinDiff = $retMinDiff|0;
 $retMaxDiff = $retMaxDiff|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $bestPeriod = 0, $diff = 0, $i = 0, $maxDiff = 0, $minDiff = 0, $p = 0, $pVal = 0, $period = 0, $s = 0, $sVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $samples;
 $1 = $minPeriod;
 $2 = $maxPeriod;
 $3 = $retMinDiff;
 $4 = $retMaxDiff;
 $bestPeriod = 0;
 $minDiff = 1;
 $maxDiff = 0;
 $5 = $1;
 $period = $5;
 while(1) {
  $6 = $period;
  $7 = $2;
  $8 = ($6|0)<=($7|0);
  if (!($8)) {
   break;
  }
  $diff = 0;
  $9 = $0;
  $s = $9;
  $10 = $0;
  $11 = $period;
  $12 = (($10) + ($11<<1)|0);
  $p = $12;
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = $period;
   $15 = ($13|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = $s;
   $17 = ((($16)) + 2|0);
   $s = $17;
   $18 = HEAP16[$16>>1]|0;
   $sVal = $18;
   $19 = $p;
   $20 = ((($19)) + 2|0);
   $p = $20;
   $21 = HEAP16[$19>>1]|0;
   $pVal = $21;
   $22 = $sVal;
   $23 = $22 << 16 >> 16;
   $24 = $pVal;
   $25 = $24 << 16 >> 16;
   $26 = ($23|0)>=($25|0);
   if ($26) {
    $27 = $sVal;
    $28 = $27 << 16 >> 16;
    $29 = $pVal;
    $30 = $29 << 16 >> 16;
    $31 = (($28) - ($30))|0;
    $$sink = $31;
   } else {
    $32 = $pVal;
    $33 = $32 << 16 >> 16;
    $34 = $sVal;
    $35 = $34 << 16 >> 16;
    $36 = (($33) - ($35))|0;
    $$sink = $36;
   }
   $37 = $$sink&65535;
   $38 = $37&65535;
   $39 = $diff;
   $40 = (($39) + ($38))|0;
   $diff = $40;
   $41 = $i;
   $42 = (($41) + 1)|0;
   $i = $42;
  }
  $43 = $diff;
  $44 = $bestPeriod;
  $45 = Math_imul($43, $44)|0;
  $46 = $minDiff;
  $47 = $period;
  $48 = Math_imul($46, $47)|0;
  $49 = ($45>>>0)<($48>>>0);
  if ($49) {
   $50 = $diff;
   $minDiff = $50;
   $51 = $period;
   $bestPeriod = $51;
  }
  $52 = $diff;
  $53 = $bestPeriod;
  $54 = Math_imul($52, $53)|0;
  $55 = $maxDiff;
  $56 = $period;
  $57 = Math_imul($55, $56)|0;
  $58 = ($54>>>0)>($57>>>0);
  if ($58) {
   $59 = $diff;
   $maxDiff = $59;
  }
  $60 = $period;
  $61 = (($60) + 1)|0;
  $period = $61;
 }
 $62 = $minDiff;
 $63 = $3;
 HEAP32[$63>>2] = $62;
 $64 = $maxDiff;
 $65 = $4;
 HEAP32[$65>>2] = $64;
 $66 = $bestPeriod;
 STACKTOP = sp;return ($66|0);
}
function __ZL15downSampleInputP17sonicStreamStructPsi($stream,$samples,$skip) {
 $stream = $stream|0;
 $samples = $samples|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $downSamples = 0;
 var $i = 0, $j = 0, $numSamples = 0, $samplesPerValue = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = $samples;
 $2 = $skip;
 $3 = $0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5|0) / ($6|0))&-1;
 $numSamples = $7;
 $8 = $0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = Math_imul($10, $11)|0;
 $samplesPerValue = $12;
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $downSamples = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $numSamples;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $value = 0;
  $j = 0;
  while(1) {
   $19 = $j;
   $20 = $samplesPerValue;
   $21 = ($19|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $1;
   $23 = ((($22)) + 2|0);
   $1 = $23;
   $24 = HEAP16[$22>>1]|0;
   $25 = $24 << 16 >> 16;
   $26 = $value;
   $27 = (($26) + ($25))|0;
   $value = $27;
   $28 = $j;
   $29 = (($28) + 1)|0;
   $j = $29;
  }
  $30 = $samplesPerValue;
  $31 = $value;
  $32 = (($31|0) / ($30|0))&-1;
  $value = $32;
  $33 = $value;
  $34 = $33&65535;
  $35 = $downSamples;
  $36 = ((($35)) + 2|0);
  $downSamples = $36;
  HEAP16[$35>>1] = $34;
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 STACKTOP = sp;return;
}
function __ZL16prevPeriodBetterP17sonicStreamStructiii($stream,$period,$minDiff,$maxDiff) {
 $stream = $stream|0;
 $period = $period|0;
 $minDiff = $minDiff|0;
 $maxDiff = $maxDiff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $period;
 $3 = $minDiff;
 $4 = $maxDiff;
 $5 = $4;
 $6 = ($5*3)|0;
 $7 = (($6|0) / 2)&-1;
 $8 = $1;
 $9 = ((($8)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)<($10|0);
 if ($11) {
  $12 = $4;
  $13 = (+($12|0));
  $14 = $13 * 3.0;
  $15 = $1;
  $16 = ((($15)) + 84|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (+($17|0));
  $19 = $14 * $18;
  $20 = $1;
  $21 = ((($20)) + 80|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (+($22|0));
  $24 = $3;
  $25 = (+($24|0));
  $26 = $23 * $25;
  $27 = $26 * 2.0;
  $28 = $19 < $27;
  if ($28) {
   $0 = 1;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL15skipPitchPeriodP17sonicStreamStructPsfi($stream,$samples,$speed,$period) {
 $stream = $stream|0;
 $samples = $samples|0;
 $speed = +$speed;
 $period = $period|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $newSamples = 0, $numChannels = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $samples;
 $3 = $speed;
 $4 = $period;
 $5 = $4;
 $newSamples = $5;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $numChannels = $8;
 $9 = $3;
 $10 = $9 >= 2.0;
 $11 = $4;
 if ($10) {
  $12 = (+($11|0));
  $13 = $3;
  $14 = $13 - 1.0;
  $15 = $12 / $14;
  $16 = (~~(($15)));
  $newSamples = $16;
 } else {
  $newSamples = $11;
  $17 = $4;
  $18 = (+($17|0));
  $19 = $3;
  $20 = 2.0 - $19;
  $21 = $18 * $20;
  $22 = $3;
  $23 = $22 - 1.0;
  $24 = $21 / $23;
  $25 = (~~(($24)));
  $26 = $1;
  $27 = ((($26)) + 68|0);
  HEAP32[$27>>2] = $25;
 }
 $28 = $1;
 $29 = $newSamples;
 $30 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($28,$29)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $newSamples;
  $33 = $numChannels;
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = ((($37)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $numChannels;
  $41 = Math_imul($39, $40)|0;
  $42 = (($36) + ($41<<1)|0);
  $43 = $2;
  $44 = $2;
  $45 = $4;
  $46 = $numChannels;
  $47 = Math_imul($45, $46)|0;
  $48 = (($44) + ($47<<1)|0);
  __ZL10overlapAddiiPsS_S_($32,$33,$42,$43,$48);
  $49 = $newSamples;
  $50 = $1;
  $51 = ((($50)) + 48|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($49))|0;
  HEAP32[$51>>2] = $53;
  $54 = $newSamples;
  $0 = $54;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 } else {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function __ZL10overlapAddiiPsS_S_($numSamples,$numChannels,$out,$rampDown,$rampUp) {
 $numSamples = $numSamples|0;
 $numChannels = $numChannels|0;
 $out = $out|0;
 $rampDown = $rampDown|0;
 $rampUp = $rampUp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $o = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $numSamples;
 $1 = $numChannels;
 $2 = $out;
 $3 = $rampDown;
 $4 = $rampUp;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $i;
  $10 = (($8) + ($9<<1)|0);
  $o = $10;
  $11 = $4;
  $12 = $i;
  $13 = (($11) + ($12<<1)|0);
  $u = $13;
  $14 = $3;
  $15 = $i;
  $16 = (($14) + ($15<<1)|0);
  $d = $16;
  $t = 0;
  while(1) {
   $17 = $t;
   $18 = $0;
   $19 = ($17|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $d;
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = $0;
   $24 = $t;
   $25 = (($23) - ($24))|0;
   $26 = Math_imul($22, $25)|0;
   $27 = $u;
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 << 16 >> 16;
   $30 = $t;
   $31 = Math_imul($29, $30)|0;
   $32 = (($26) + ($31))|0;
   $33 = $0;
   $34 = (($32|0) / ($33|0))&-1;
   $35 = $34&65535;
   $36 = $o;
   HEAP16[$36>>1] = $35;
   $37 = $1;
   $38 = $o;
   $39 = (($38) + ($37<<1)|0);
   $o = $39;
   $40 = $1;
   $41 = $d;
   $42 = (($41) + ($40<<1)|0);
   $d = $42;
   $43 = $1;
   $44 = $u;
   $45 = (($44) + ($43<<1)|0);
   $u = $45;
   $46 = $t;
   $47 = (($46) + 1)|0;
   $t = $47;
  }
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
 }
 STACKTOP = sp;return;
}
function __ZL17insertPitchPeriodP17sonicStreamStructPsfi($stream,$samples,$speed,$period) {
 $stream = $stream|0;
 $samples = $samples|0;
 $speed = +$speed;
 $period = $period|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $9 = 0;
 var $newSamples = 0, $numChannels = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $samples;
 $3 = $speed;
 $4 = $period;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $numChannels = $7;
 $8 = $3;
 $9 = $8 < 0.5;
 $10 = $4;
 if ($9) {
  $11 = (+($10|0));
  $12 = $3;
  $13 = $11 * $12;
  $14 = $3;
  $15 = 1.0 - $14;
  $16 = $13 / $15;
  $17 = (~~(($16)));
  $newSamples = $17;
 } else {
  $newSamples = $10;
  $18 = $4;
  $19 = (+($18|0));
  $20 = $3;
  $21 = 2.0 * $20;
  $22 = $21 - 1.0;
  $23 = $19 * $22;
  $24 = $3;
  $25 = 1.0 - $24;
  $26 = $23 / $25;
  $27 = (~~(($26)));
  $28 = $1;
  $29 = ((($28)) + 68|0);
  HEAP32[$29>>2] = $27;
 }
 $30 = $1;
 $31 = $4;
 $32 = $newSamples;
 $33 = (($31) + ($32))|0;
 $34 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($30,$33)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $1;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $1;
  $40 = ((($39)) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $numChannels;
  $43 = Math_imul($41, $42)|0;
  $44 = (($38) + ($43<<1)|0);
  $out = $44;
  $45 = $out;
  $46 = $2;
  $47 = $4;
  $48 = $47<<1;
  $49 = $numChannels;
  $50 = Math_imul($48, $49)|0;
  _memcpy(($45|0),($46|0),($50|0))|0;
  $51 = $1;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $1;
  $55 = ((($54)) + 48|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $4;
  $58 = (($56) + ($57))|0;
  $59 = $numChannels;
  $60 = Math_imul($58, $59)|0;
  $61 = (($53) + ($60<<1)|0);
  $out = $61;
  $62 = $newSamples;
  $63 = $numChannels;
  $64 = $out;
  $65 = $2;
  $66 = $4;
  $67 = $numChannels;
  $68 = Math_imul($66, $67)|0;
  $69 = (($65) + ($68<<1)|0);
  $70 = $2;
  __ZL10overlapAddiiPsS_S_($62,$63,$64,$69,$70);
  $71 = $4;
  $72 = $newSamples;
  $73 = (($71) + ($72))|0;
  $74 = $1;
  $75 = ((($74)) + 48|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($73))|0;
  HEAP32[$75>>2] = $77;
  $78 = $newSamples;
  $0 = $78;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 } else {
  $0 = 0;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function __ZL18removeInputSamplesP17sonicStreamStructi($stream,$position) {
 $stream = $stream|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remainingSamples = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = $position;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $remainingSamples = $6;
 $7 = $remainingSamples;
 $8 = ($7|0)>(0);
 if (!($8)) {
  $25 = $remainingSamples;
  $26 = $0;
  $27 = ((($26)) + 44|0);
  HEAP32[$27>>2] = $25;
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 $18 = (($12) + ($17<<1)|0);
 $19 = $remainingSamples;
 $20 = $19<<1;
 $21 = $0;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($20, $23)|0;
 _memmove(($10|0),($18|0),($24|0))|0;
 $25 = $remainingSamples;
 $26 = $0;
 $27 = ((($26)) + 44|0);
 HEAP32[$27>>2] = $25;
 STACKTOP = sp;return;
}
function __ZL11adjustPitchP17sonicStreamStructi($stream,$originalNumOutputSamples) {
 $stream = $stream|0;
 $originalNumOutputSamples = $originalNumOutputSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $newPeriod = 0, $numChannels = 0, $out = 0, $period = 0, $pitch = 0.0, $position = 0, $rampDown = 0, $rampUp = 0, $separation = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $originalNumOutputSamples;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = +HEAPF32[$4>>2];
 $pitch = $5;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $numChannels = $8;
 $position = 0;
 $9 = $1;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ($11|0)==($12|0);
 if ($13) {
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $14 = $1;
 $15 = $2;
 $16 = (__ZL27moveNewSamplesToPitchBufferP17sonicStreamStructi($14,$15)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 while(1) {
  $18 = $1;
  $19 = ((($18)) + 52|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $position;
  $22 = (($20) - ($21))|0;
  $23 = $1;
  $24 = ((($23)) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)>=($25|0);
  $27 = $1;
  if (!($26)) {
   label = 12;
   break;
  }
  $28 = $1;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $position;
  $32 = $numChannels;
  $33 = Math_imul($31, $32)|0;
  $34 = (($30) + ($33<<1)|0);
  $35 = (__ZL15findPitchPeriodP17sonicStreamStructPs($27,$34)|0);
  $period = $35;
  $36 = $period;
  $37 = (+($36|0));
  $38 = $pitch;
  $39 = $37 / $38;
  $40 = (~~(($39)));
  $newPeriod = $40;
  $41 = $1;
  $42 = $newPeriod;
  $43 = (__ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($41,$42)|0);
  $44 = ($43|0)!=(0);
  if (!($44)) {
   label = 7;
   break;
  }
  $45 = $1;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $1;
  $49 = ((($48)) + 48|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $numChannels;
  $52 = Math_imul($50, $51)|0;
  $53 = (($47) + ($52<<1)|0);
  $out = $53;
  $54 = $pitch;
  $55 = $54 >= 1.0;
  $56 = $1;
  $57 = ((($56)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $position;
  $60 = $numChannels;
  $61 = Math_imul($59, $60)|0;
  $62 = (($58) + ($61<<1)|0);
  $rampDown = $62;
  $63 = $1;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $position;
  if ($55) {
   $67 = $period;
   $68 = (($66) + ($67))|0;
   $69 = $newPeriod;
   $70 = (($68) - ($69))|0;
   $71 = $numChannels;
   $72 = Math_imul($70, $71)|0;
   $73 = (($65) + ($72<<1)|0);
   $rampUp = $73;
   $74 = $newPeriod;
   $75 = $numChannels;
   $76 = $out;
   $77 = $rampDown;
   $78 = $rampUp;
   __ZL10overlapAddiiPsS_S_($74,$75,$76,$77,$78);
  } else {
   $79 = $numChannels;
   $80 = Math_imul($66, $79)|0;
   $81 = (($65) + ($80<<1)|0);
   $rampUp = $81;
   $82 = $newPeriod;
   $83 = $period;
   $84 = (($82) - ($83))|0;
   $separation = $84;
   $85 = $period;
   $86 = $numChannels;
   $87 = $separation;
   $88 = $out;
   $89 = $rampDown;
   $90 = $rampUp;
   __ZL24overlapAddWithSeparationiiiPsS_S_($85,$86,$87,$88,$89,$90);
  }
  $91 = $newPeriod;
  $92 = $1;
  $93 = ((($92)) + 48|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + ($91))|0;
  HEAP32[$93>>2] = $95;
  $96 = $period;
  $97 = $position;
  $98 = (($97) + ($96))|0;
  $position = $98;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 else if ((label|0) == 12) {
  $99 = $position;
  __ZL18removePitchSamplesP17sonicStreamStructi($27,$99);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function __ZL27moveNewSamplesToPitchBufferP17sonicStreamStructi($stream,$originalNumOutputSamples) {
 $stream = $stream|0;
 $originalNumOutputSamples = $originalNumOutputSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $numChannels = 0, $numSamples = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $stream;
 $2 = $originalNumOutputSamples;
 $3 = $1;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $numSamples = $7;
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $numChannels = $10;
 $11 = $1;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $numSamples;
 $15 = (($13) + ($14))|0;
 $16 = $1;
 $17 = ((($16)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)>($18|0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >> 1;
  $24 = $numSamples;
  $25 = (($23) + ($24))|0;
  $26 = $1;
  $27 = ((($26)) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25))|0;
  HEAP32[$27>>2] = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35<<1;
  $37 = $numChannels;
  $38 = Math_imul($36, $37)|0;
  $39 = (_realloc($32,$38)|0);
  $40 = $1;
  $41 = ((($40)) + 8|0);
  HEAP32[$41>>2] = $39;
  $42 = $1;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if ($45) {
   $0 = 0;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 }
 $46 = $1;
 $47 = ((($46)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $1;
 $50 = ((($49)) + 52|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $numChannels;
 $53 = Math_imul($51, $52)|0;
 $54 = (($48) + ($53<<1)|0);
 $55 = $1;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $2;
 $59 = $numChannels;
 $60 = Math_imul($58, $59)|0;
 $61 = (($57) + ($60<<1)|0);
 $62 = $numSamples;
 $63 = $62<<1;
 $64 = $numChannels;
 $65 = Math_imul($63, $64)|0;
 _memcpy(($54|0),($61|0),($65|0))|0;
 $66 = $2;
 $67 = $1;
 $68 = ((($67)) + 48|0);
 HEAP32[$68>>2] = $66;
 $69 = $numSamples;
 $70 = $1;
 $71 = ((($70)) + 52|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69))|0;
 HEAP32[$71>>2] = $73;
 $0 = 1;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZL24overlapAddWithSeparationiiiPsS_S_($numSamples,$numChannels,$separation,$out,$rampDown,$rampUp) {
 $numSamples = $numSamples|0;
 $numChannels = $numChannels|0;
 $separation = $separation|0;
 $out = $out|0;
 $rampDown = $rampDown|0;
 $rampUp = $rampUp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $d = 0, $i = 0, $o = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $numSamples;
 $1 = $numChannels;
 $2 = $separation;
 $3 = $out;
 $4 = $rampDown;
 $5 = $rampUp;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = $i;
  $11 = (($9) + ($10<<1)|0);
  $o = $11;
  $12 = $5;
  $13 = $i;
  $14 = (($12) + ($13<<1)|0);
  $u = $14;
  $15 = $4;
  $16 = $i;
  $17 = (($15) + ($16<<1)|0);
  $d = $17;
  $t = 0;
  while(1) {
   $18 = $t;
   $19 = $0;
   $20 = $2;
   $21 = (($19) + ($20))|0;
   $22 = ($18|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $t;
   $24 = $2;
   $25 = ($23|0)<($24|0);
   do {
    if ($25) {
     $26 = $d;
     $27 = HEAP16[$26>>1]|0;
     $28 = $27 << 16 >> 16;
     $29 = $0;
     $30 = $t;
     $31 = (($29) - ($30))|0;
     $32 = Math_imul($28, $31)|0;
     $33 = $0;
     $34 = (($32|0) / ($33|0))&-1;
     $35 = $34&65535;
     $36 = $o;
     HEAP16[$36>>1] = $35;
     $37 = $1;
     $38 = $d;
     $39 = (($38) + ($37<<1)|0);
     $d = $39;
    } else {
     $40 = $t;
     $41 = $0;
     $42 = ($40|0)<($41|0);
     if ($42) {
      $43 = $d;
      $44 = HEAP16[$43>>1]|0;
      $45 = $44 << 16 >> 16;
      $46 = $0;
      $47 = $t;
      $48 = (($46) - ($47))|0;
      $49 = Math_imul($45, $48)|0;
      $50 = $u;
      $51 = HEAP16[$50>>1]|0;
      $52 = $51 << 16 >> 16;
      $53 = $t;
      $54 = $2;
      $55 = (($53) - ($54))|0;
      $56 = Math_imul($52, $55)|0;
      $57 = (($49) + ($56))|0;
      $58 = $0;
      $59 = (($57|0) / ($58|0))&-1;
      $60 = $59&65535;
      $61 = $o;
      HEAP16[$61>>1] = $60;
      $62 = $1;
      $63 = $d;
      $64 = (($63) + ($62<<1)|0);
      $d = $64;
      $65 = $1;
      $66 = $u;
      $67 = (($66) + ($65<<1)|0);
      $u = $67;
      break;
     } else {
      $68 = $u;
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 << 16 >> 16;
      $71 = $t;
      $72 = $2;
      $73 = (($71) - ($72))|0;
      $74 = Math_imul($70, $73)|0;
      $75 = $0;
      $76 = (($74|0) / ($75|0))&-1;
      $77 = $76&65535;
      $78 = $o;
      HEAP16[$78>>1] = $77;
      $79 = $1;
      $80 = $u;
      $81 = (($80) + ($79<<1)|0);
      $u = $81;
      break;
     }
    }
   } while(0);
   $82 = $1;
   $83 = $o;
   $84 = (($83) + ($82<<1)|0);
   $o = $84;
   $85 = $t;
   $86 = (($85) + 1)|0;
   $t = $86;
  }
  $87 = $i;
  $88 = (($87) + 1)|0;
  $i = $88;
 }
 STACKTOP = sp;return;
}
function __ZL18removePitchSamplesP17sonicStreamStructi($stream,$numSamples) {
 $stream = $stream|0;
 $numSamples = $numSamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numChannels = 0, $source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = $numSamples;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $numChannels = $4;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $numChannels;
 $10 = Math_imul($8, $9)|0;
 $11 = (($7) + ($10<<1)|0);
 $source = $11;
 $12 = $1;
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = $0;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)!=($17|0);
 if ($18) {
  $19 = $0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $source;
  $23 = $0;
  $24 = ((($23)) + 52|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = (($25) - ($26))|0;
  $28 = $27<<1;
  $29 = $numChannels;
  $30 = Math_imul($28, $29)|0;
  _memmove(($21|0),($22|0),($30|0))|0;
 }
 $31 = $1;
 $32 = $0;
 $33 = ((($32)) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) - ($31))|0;
 HEAP32[$33>>2] = $35;
 STACKTOP = sp;return;
}
function __ZL12scaleSamplesPsif($samples,$numSamples,$volume) {
 $samples = $samples|0;
 $numSamples = $numSamples|0;
 $volume = +$volume;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fixedPointVolume = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $samples;
 $1 = $numSamples;
 $2 = $volume;
 $3 = $2;
 $4 = $3 * 4096.0;
 $5 = (~~(($4)));
 $fixedPointVolume = $5;
 while(1) {
  $6 = $1;
  $7 = (($6) + -1)|0;
  $1 = $7;
  $8 = ($6|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = $fixedPointVolume;
  $13 = Math_imul($11, $12)|0;
  $14 = $13 >> 12;
  $value = $14;
  $15 = $value;
  $16 = ($15|0)>(32767);
  if ($16) {
   $value = 32767;
  } else {
   $17 = $value;
   $18 = ($17|0)<(-32767);
   if ($18) {
    $value = -32767;
   }
  }
  $19 = $value;
  $20 = $19&65535;
  $21 = $0;
  $22 = ((($21)) + 2|0);
  $0 = $22;
  HEAP16[$21>>1] = $20;
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_name_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _emscripten_bind_espeak_VOICE_set_name_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_languages_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2)|0);
 $7 = HEAP8[$6>>0]|0;
 STACKTOP = sp;return ($7|0);
}
function _emscripten_bind_espeak_VOICE_get_identifier_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_identifier_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_gender_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_gender_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 HEAP8[$4>>0] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_age_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 13|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_age_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 13|0);
 HEAP8[$4>>0] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_variant_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 14|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_variant_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 14|0);
 HEAP8[$4>>0] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_xx1_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 15|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_xx1_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 15|0);
 HEAP8[$4>>0] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_score_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_score_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE_get_spare_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_VOICE_set_spare_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_VOICE___destroy___0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_VoidPtr___destroy___0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_espeak_EVENT_get_type_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _emscripten_bind_espeak_EVENT_get_unique_identifier_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT_get_text_position_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT_get_length_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT_get_audio_position_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT_get_sample_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT_get_user_data_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_espeak_EVENT___destroy___0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_EspeakWorker_0() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(28,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN12EspeakWorkerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 175;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = 50;
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[22119]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = (_espeak_Initialize(2,100,0,32768)|0);
  HEAP32[22119] = $7;
 }
 $8 = HEAP32[22119]|0;
 $9 = ((($1)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = (_espeak_ListVoices(0)|0);
 HEAP32[$1>>2] = $10;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_synth__2($self,$arg0,$arg1) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN12EspeakWorker6synth_EPKcPv($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN12EspeakWorker6synth_EPKcPv($this,$aText,$aCallback) {
 $this = $this|0;
 $aText = $aText|0;
 $aCallback = $aCallback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $aText;
 $2 = $aCallback;
 $3 = $0;
 $4 = $2;
 $cb = $4;
 $5 = $cb;
 _espeak_SetSynthCallback($5);
 $6 = ((($3)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 (_espeak_SetParameter(3,$7,0)|0);
 $8 = ((($3)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 (_espeak_SetParameter(1,$9,0)|0);
 $10 = ((($3)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = ((($3)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  (_espeak_SetVoiceByProperties($14)|0);
  $15 = $1;
  (_espeak_Synth($15,0,0,1,0,0,0,0)|0);
  _espeak_SetSynthCallback(0);
  STACKTOP = sp;return;
 } else {
  (_espeak_SetVoiceByName(27486)|0);
  $15 = $1;
  (_espeak_Synth($15,0,0,1,0,0,0,0)|0);
  _espeak_SetSynthCallback(0);
  STACKTOP = sp;return;
 }
}
function _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = (__ZN12EspeakWorker21getSizeOfEventStruct_Ev($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12EspeakWorker21getSizeOfEventStruct_Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 36;
}
function _emscripten_bind_EspeakWorker_setVoice_2($self,$arg0,$arg1) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($3,$4,$5,0,0,0);
 STACKTOP = sp;return;
}
function __ZN12EspeakWorker8setVoiceEPKcS1_hhh($this,$aName,$aLang,$aGender,$aAge,$aVariant) {
 $this = $this|0;
 $aName = $aName|0;
 $aLang = $aLang|0;
 $aGender = $aGender|0;
 $aAge = $aAge|0;
 $aVariant = $aVariant|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $props = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $props = sp;
 $0 = $this;
 $1 = $aName;
 $2 = $aLang;
 $3 = $aGender;
 $4 = $aAge;
 $5 = $aVariant;
 $6 = $0;
 ;HEAP32[$props>>2]=0|0;HEAP32[$props+4>>2]=0|0;HEAP32[$props+8>>2]=0|0;HEAP32[$props+12>>2]=0|0;HEAP32[$props+16>>2]=0|0;HEAP32[$props+20>>2]=0|0;
 $7 = $1;
 HEAP32[$props>>2] = $7;
 $8 = $2;
 $9 = ((($props)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $3;
 $11 = ((($props)) + 12|0);
 HEAP8[$11>>0] = $10;
 $12 = $4;
 $13 = ((($props)) + 13|0);
 HEAP8[$13>>0] = $12;
 $14 = $5;
 $15 = ((($props)) + 14|0);
 HEAP8[$15>>0] = $14;
 (_espeak_SetVoiceByProperties($props)|0);
 $16 = (_espeak_GetCurrentVoice()|0);
 $17 = ((($6)) + 16|0);
 HEAP32[$17>>2] = $16;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_setVoice_3($self,$arg0,$arg1,$arg2) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $arg2;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($4,$5,$6,$7,0,0);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_setVoice_4($self,$arg0,$arg1,$arg2,$arg3) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 $arg3 = $arg3|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $arg2;
 $4 = $arg3;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($5,$6,$7,$8,$9,0);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_setVoice_5($self,$arg0,$arg1,$arg2,$arg3,$arg4) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 $arg3 = $arg3|0;
 $arg4 = $arg4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $arg2;
 $4 = $arg3;
 $5 = $arg4;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 __ZN12EspeakWorker8setVoiceEPKcS1_hhh($6,$7,$8,$9,$10,$11);
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_get_voices_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _emscripten_bind_EspeakWorker_set_voices_2($self,$arg0,$arg1) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $arg1;
 $3 = $2;
 $4 = $1;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 HEAP32[$7>>2] = $3;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_get_samplerate_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_EspeakWorker_get_rate_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_EspeakWorker_set_rate_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker_get_pitch_0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _emscripten_bind_EspeakWorker_set_pitch_1($self,$arg0) {
 $self = $self|0;
 $arg0 = $arg0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $arg0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _emscripten_bind_EspeakWorker___destroy___0($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $self;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 8;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[22120]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 88524;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[22120]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((29|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[22120]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((30|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_397($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 7;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $fabs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $y;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & -2147483648;
 $5 = $4 | $3;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 return (+$6);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$95 = $84;$97 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $96 = ($95|0)==($86|0);
        $98 = ($97|0)==($87|0);
        $99 = $96 & $98;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $95;$102 = $97;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$95 = $103;$97 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$114 = $103;$116 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$114 = $84;$116 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $115 = ($114|0)==($86|0);
     $117 = ($116|0)==($87|0);
     $118 = $115 & $117;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $119 = $157;$121 = $156;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $120 = ($119>>>0)<(1048576);
    $122 = ($121>>>0)<(0);
    $123 = ($119|0)==(1048576);
    $124 = $123 & $122;
    $125 = $120 | $124;
    if ($125) {
     $127 = $121;$128 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $121;$139 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$152 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$152 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $152;HEAP32[tempDoublePtr+4>>2] = $149;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _lseek($fd,$offset,$whence) {
 $fd = $fd|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $result = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $offset;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $result;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $0 = (___syscall140(140,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)!=(0);
 $3 = HEAP32[$result>>2]|0;
 $4 = $2 ? -1 : $3;
 STACKTOP = sp;return ($4|0);
}
function _write($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall4(4,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall3(3,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pipe($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall42(42,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __exit($status) {
 $status = $status|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Exit(($status|0));
 // unreachable;
}
function _access($filename,$amode) {
 $filename = $filename|0;
 $amode = $amode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $amode;
 $0 = (___syscall33(33,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _dup2($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $old;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $new;
  $0 = (___syscall63(63,($vararg_buffer|0))|0);
  $1 = ($0|0)==(-16);
  if (!($1)) {
   $$lcssa = $0;
   break;
  }
 }
 $2 = (___syscall_ret($$lcssa)|0);
 STACKTOP = sp;return ($2|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base | 16;
   $27 = ($26|0)==(16);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((27495) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((27495) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (27751 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((27495) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((27495) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$154 = 0;$156 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond31 = $153 | $160;
      if ($or$cond31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((27495) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((27495) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((27495) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((27495) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((27495) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((27495) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function ___mkostemps($template,$len,$flags) {
 $template = $template|0;
 $len = $len|0;
 $flags = $flags|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $retries$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_strlen($template)|0);
 $1 = ($0>>>0)<(6);
 $2 = (($0) + -6)|0;
 $3 = ($2>>>0)<($len>>>0);
 $or$cond = $1 | $3;
 L1: do {
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($template) + ($0)|0);
   $5 = (0 - ($len))|0;
   $6 = (($4) + ($5)|0);
   $7 = ((($6)) + -6|0);
   $8 = (_memcmp($7,27760,6)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $flags | 194;
    $retries$0 = 100;
    while(1) {
     (___randname($7)|0);
     HEAP32[$vararg_buffer>>2] = 384;
     $12 = (_open($template,$10,$vararg_buffer)|0);
     $13 = ($12|0)>(-1);
     if ($13) {
      $$1 = $12;
      break L1;
     }
     $14 = (($retries$0) + -1)|0;
     $15 = ($14|0)==(0);
     if ($15) {
      break;
     }
     $16 = (___errno_location()|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(17);
     if ($18) {
      $retries$0 = $14;
     } else {
      break;
     }
    }
    ;HEAP8[$7>>0]=HEAP8[27760>>0]|0;HEAP8[$7+1>>0]=HEAP8[27760+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[27760+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[27760+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[27760+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[27760+5>>0]|0;
    $$1 = -1;
   } else {
    label = 4;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $11 = (___errno_location()|0);
  HEAP32[$11>>2] = 22;
  $$1 = -1;
 }
 STACKTOP = sp;return ($$1|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___randname($template) {
 $template = $template|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $r$02 = 0;
 var $ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ts = sp;
 (___clock_gettime(0,($ts|0))|0);
 $0 = ((($ts)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1*65537)|0;
 $3 = $ts;
 $4 = $3 >>> 4;
 $5 = $template;
 $6 = (($4) + ($5))|0;
 $7 = $2 ^ $6;
 $i$01 = 0;$r$02 = $7;
 while(1) {
  $8 = $r$02 & 15;
  $9 = (($8) + 65)|0;
  $10 = $r$02 << 1;
  $11 = $10 & 32;
  $12 = $9 | $11;
  $13 = $12&255;
  $14 = (($template) + ($i$01)|0);
  HEAP8[$14>>0] = $13;
  $15 = (($i$01) + 1)|0;
  $16 = $r$02 >>> 5;
  $exitcond = ($15|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;$r$02 = $16;
  }
 }
 STACKTOP = sp;return ($template|0);
}
function _mkstemp($template) {
 $template = $template|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___mkostemps($template,0,0)|0);
 return ($0|0);
}
function _stat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall195(195,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _setlocale($category,$locale) {
 $category = $category|0;
 $locale = $locale|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27767|0);
}
function _towlower($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,1)|0);
 return ($0|0);
}
function ___towcase($wc,$lower) {
 $wc = $wc|0;
 $lower = $lower|0;
 var $$2 = 0, $$lcssa = 0, $$lcssa53 = 0, $$neg20 = 0, $$neg20$lcssa = 0, $$neg22 = 0, $$neg23 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$029 = 0, $i$128 = 0, $i$128$lcssa = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lower << 1;
 $1 = (($0) + -1)|0;
 $2 = (($lower) + -1)|0;
 $3 = (_iswalpha($wc)|0);
 $4 = ($3|0)==(0);
 $5 = (($wc) + -1536)|0;
 $6 = ($5>>>0)<(2560);
 $or$cond10 = $6 | $4;
 $7 = (($wc) + -11776)|0;
 $8 = ($7>>>0)<(30784);
 $or$cond12 = $8 | $or$cond10;
 $9 = (($wc) + -43008)|0;
 $10 = ($9>>>0)<(22272);
 $or$cond14 = $10 | $or$cond12;
 L1: do {
  if ($or$cond14) {
   $$2 = $wc;
  } else {
   $11 = ($lower|0)!=(0);
   $12 = (($wc) + -4256)|0;
   $13 = ($12>>>0)<(46);
   $or$cond16 = $11 & $13;
   if ($or$cond16) {
    $14 = ($wc|0)>(4293);
    if ($14) {
     switch ($wc|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$2 = $wc;
      break L1;
     }
     }
    }
    $15 = (($wc) + 7264)|0;
    $$2 = $15;
    break;
   }
   $$not = $11 ^ 1;
   $16 = (($wc) + -11520)|0;
   $17 = ($16>>>0)<(38);
   $or$cond = $17 & $$not;
   if ($or$cond) {
    $18 = ($wc|0)>(11557);
    if ($18) {
     switch ($wc|0) {
     case 11559: case 11565:  {
      break;
     }
     default: {
      $$2 = $wc;
      break L1;
     }
     }
    }
    $19 = (($wc) + -7264)|0;
    $$2 = $19;
    break;
   } else {
    $i$029 = 0;
   }
   while(1) {
    $26 = (((16320 + ($i$029<<2)|0)) + 3|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (16320 + ($i$029<<2)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = (((16320 + ($i$029<<2)|0)) + 2|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = $33 & $2;
    $$neg20 = (($wc) - ($30))|0;
    $35 = (($$neg20) - ($34))|0;
    $36 = $27&255;
    $37 = ($35>>>0)<($36>>>0);
    $20 = (($i$029) + 1)|0;
    if ($37) {
     $$lcssa = $32;$$lcssa53 = $33;$$neg20$lcssa = $$neg20;
     label = 13;
     break;
    }
    $21 = ($20|0)==(61);
    if ($21) {
     break;
    } else {
     $i$029 = $20;
    }
   }
   if ((label|0) == 13) {
    $38 = ($$lcssa<<24>>24)==(1);
    if ($38) {
     $39 = (($lower) + ($wc))|0;
     $40 = $$neg20$lcssa & 1;
     $41 = (($39) - ($40))|0;
     $$2 = $41;
     break;
    } else {
     $42 = Math_imul($$lcssa53, $1)|0;
     $43 = (($42) + ($wc))|0;
     $$2 = $43;
     break;
    }
   }
   $22 = (1 - ($lower))|0;
   $23 = (15828 + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = ($24<<16>>16)==(0);
   L23: do {
    if (!($25)) {
     $45 = $24;$i$128 = 0;
     while(1) {
      $44 = $45&65535;
      $46 = ($44|0)==($wc|0);
      if ($46) {
       $i$128$lcssa = $i$128;
       break;
      }
      $50 = (($i$128) + 1)|0;
      $51 = ((15828 + ($50<<2)|0) + ($22<<1)|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52<<16>>16)==(0);
      if ($53) {
       break L23;
      } else {
       $45 = $52;$i$128 = $50;
      }
     }
     $47 = ((15828 + ($i$128$lcssa<<2)|0) + ($lower<<1)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $$2 = $49;
     break L1;
    }
   } while(0);
   $$neg22 = ($lower*40)|0;
   $$neg23 = (($wc) + -66600)|0;
   $54 = (($$neg23) + ($$neg22))|0;
   $55 = ($54>>>0)<(40);
   if ($55) {
    $56 = (($wc) + -40)|0;
    $57 = ($lower*80)|0;
    $58 = (($56) + ($57))|0;
    $$2 = $58;
   } else {
    $$2 = $wc;
   }
  }
 } while(0);
 return ($$2|0);
}
function _iswalpha($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (27775 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (27775 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
 } else {
  $15 = ($wc>>>0)<(196606);
  $$ = $15&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function _towupper($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,0)|0);
 return ($0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (30751 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 30839;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 30839;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 30839;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _iswalnum($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswdigit($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswalpha($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 1;
 }
 $4 = $5&1;
 return ($4|0);
}
function _iswdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($0|0)!=(0);
 $1 = $isdigit | $not$;
 $2 = $1&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 88528 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (5412 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _iswlower($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towupper($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = ($wc|0)==(223);
 $3 = $2 | $1;
 $4 = $3&1;
 return ($4|0);
}
function _iswspace($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc|0)==(0);
 if ($0) {
  $4 = 0;
 } else {
  $1 = (_wcschr(5616,$wc)|0);
  $2 = ($1|0)!=(0|0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _wcschr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0);
 if ($0) {
  $1 = (_wcslen($s)|0);
  $2 = (($s) + ($1<<2)|0);
  $$0 = $2;
 } else {
  $$01 = $s;
  while(1) {
   $3 = HEAP32[$$01>>2]|0;
   $4 = ($3|0)==(0);
   $5 = ($3|0)==($c|0);
   $or$cond = $4 | $5;
   $6 = ((($$01)) + 4|0);
   if ($or$cond) {
    $$01$lcssa = $$01;$$lcssa = $3;
    break;
   } else {
    $$01 = $6;
   }
  }
  $7 = ($$lcssa|0)!=(0);
  $8 = $7 ? $$01$lcssa : 0;
  $$0 = $8;
 }
 return ($$0|0);
}
function _iswpunct($wc) {
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (32643 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (32643 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _iswupper($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towlower($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = $1&1;
 return ($2|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=5704; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 63]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((35811 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_465($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 36291;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 36291;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 36291;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 36291 : (36293);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (36292);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 36291;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 36291;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 36301;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 36308;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (36309) : (36314);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (36311);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (36275 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(36339,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(36339,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 36327 : 36331;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 36350 : 36335;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 36291;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 36291;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (36275 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 36291;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (36291 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 36291;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg_465($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg_465($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa258 = 0;
 var $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa277 = $9;
     break;
    }
   }
   $12 = ($$lcssa277|0)==(45);
   L13: do {
    switch ($$lcssa277|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa277;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (36341 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (36350 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$693 = $156;$694 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa244;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $695 = $170;$696 = $168;$697 = $170;$698 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $695 = $693;$696 = $694;$697 = $190;$698 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi43$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi43$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$699 = $348;$700 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa275;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$365 = 0;$366 = 0;$701 = $360;$702 = $358;$703 = $699;$704 = $700;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L205: while(1) {
         do {
          if ($701) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $705 = $365;$706 = $366;$707 = $365;$708 = $366;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            $709 = $703;$710 = $704;$711 = $365;$712 = $366;$gotdig$3108$i$lcssa = $gotdig$3108$i;$j$0111$i$lcssa = $j$0111$i;$k$0110$i$lcssa = $k$0110$i;$lnz$0107$i$lcssa = $lnz$0107$i;
            break L205;
           }
          } else {
           $364 = ($k$0110$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3112$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0107$i;
           $370 = ($j$0111$i|0)==(0);
           $371 = (($x$i) + ($k$0110$i<<2)|0);
           if ($370) {
            $storemerge$i = $702;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3112$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0111$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0110$i))|0;
           $$16$i = $377 ? 0 : $376;
           $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3112$i = $$3$be$i;$365 = $707;$366 = $708;$701 = $390;$702 = $388;$703 = $705;$704 = $706;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $705;$394 = $707;$396 = $706;$397 = $708;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3108$i$lcssa|0)!=(0);
        $713 = $711;$714 = $712;$715 = $709;$716 = $710;$717 = $363;$j$077$i = $j$0111$i$lcssa;$k$073$i = $k$0110$i$lcssa;$lnz$067$i = $lnz$0107$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $699;$394 = 0;$396 = $700;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $713 = $394;$714 = $397;$715 = $395;$716 = $398;$717 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $718 = $394;$719 = $397;$720 = $399;$721 = $395;$722 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $718 = $713;$719 = $714;$720 = $717;$721 = $715;$722 = $716;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($717) {
         $426 = $715;$428 = $713;$429 = $716;$431 = $714;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($720) {
        $426 = $721;$428 = $718;$429 = $722;$431 = $719;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($473|0)==(9);
           if ($exitcond151$i) {
            $$lcssa267 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa267;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (5816 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $$neg$i = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $493 = (($$neg40$i) + ($$neg$i))|0;
          $494 = ($493|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $495 = $$pre$i17 >>> $493;
          $496 = ($495|0)==(0);
          $or$cond192$i = $494 | $496;
          if ($or$cond192$i) {
           $497 = (+($sign$0|0));
           $498 = (+($$pre$i17>>>0));
           $499 = $497 * $498;
           $500 = (($426) + -10)|0;
           $501 = (5816 + ($500<<2)|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (+($502|0));
           $504 = $499 * $503;
           $$1$i = $504;
           break;
          }
         }
        }
        $505 = (($426|0) % 9)&-1;
        $506 = ($505|0)==(0);
        if ($506) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $507 = ($426|0)>(-1);
         $508 = (($505) + 9)|0;
         $509 = $507 ? $505 : $508;
         $510 = (8 - ($509))|0;
         $511 = (5816 + ($510<<2)|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = ($k$3$i|0)==(0);
         if ($513) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $426;$z$0$i = 0;
         } else {
          $514 = (1000000000 / ($512|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $515 = (($x$i) + ($k$494$i<<2)|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = (($516>>>0) % ($512>>>0))&-1;
           $518 = (($516>>>0) / ($512>>>0))&-1;
           $519 = (($518) + ($carry$095$i))|0;
           HEAP32[$515>>2] = $519;
           $520 = Math_imul($517, $514)|0;
           $521 = ($k$494$i|0)==($a$093$i|0);
           $522 = ($519|0)==(0);
           $or$cond21$i = $521 & $522;
           $523 = (($k$494$i) + 1)|0;
           $524 = $523 & 127;
           $525 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $525 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $524 : $a$093$i;
           $526 = ($523|0)==($k$3$i|0);
           if ($526) {
            $$lcssa266 = $520;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $520;$k$494$i = $523;$rp$092$i = $rp$1$i18;
           }
          }
          $527 = ($$lcssa266|0)==(0);
          if ($527) {
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $528 = (($k$3$i) + 1)|0;
           $529 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$529>>2] = $$lcssa266;
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $528;
          }
         }
         $530 = (9 - ($509))|0;
         $531 = (($530) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $531;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $532 = ($rp$2$ph44$i|0)<(18);
         $533 = ($rp$2$ph44$i|0)==(18);
         $534 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($532)) {
           if (!($533)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $535 = HEAP32[$534>>2]|0;
           $536 = ($535>>>0)<(9007199);
           if (!($536)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $537 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $537;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $538 = (($x$i) + ($k$5$i<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = (_bitshift64Shl(($539|0),0,29)|0);
           $541 = tempRet0;
           $542 = (_i64Add(($540|0),($541|0),($carry1$0$i|0),0)|0);
           $543 = tempRet0;
           $544 = ($543>>>0)>(0);
           $545 = ($542>>>0)>(1000000000);
           $546 = ($543|0)==(0);
           $547 = $546 & $545;
           $548 = $544 | $547;
           if ($548) {
            $549 = (___udivdi3(($542|0),($543|0),1000000000,0)|0);
            $550 = tempRet0;
            $551 = (___uremdi3(($542|0),($543|0),1000000000,0)|0);
            $552 = tempRet0;
            $$sink$off0$i = $551;$carry1$1$i = $549;
           } else {
            $$sink$off0$i = $542;$carry1$1$i = 0;
           }
           HEAP32[$538>>2] = $$sink$off0$i;
           $553 = (($z$2$i) + 127)|0;
           $554 = $553 & 127;
           $555 = ($k$5$i|0)!=($554|0);
           $556 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $555 | $556;
           $557 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $557 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $558 = (($k$5$i) + -1)|0;
           if ($556) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $558;$z$2$i = $z$3$i;
           }
          }
          $559 = (($e2$0$i19) + -29)|0;
          $560 = ($carry1$1$i$lcssa|0)==(0);
          if ($560) {
           $e2$0$i19 = $559;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa265 = $559;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $561 = (($rp$2$ph44$i) + 9)|0;
         $562 = (($a$2$ph46$i) + 127)|0;
         $563 = $562 & 127;
         $564 = ($563|0)==($z$3$i$lcssa$lcssa|0);
         if ($564) {
          $565 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $566 = $565 & 127;
          $567 = (($x$i) + ($566<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $570 = $569 & 127;
          $571 = (($x$i) + ($570<<2)|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $572 | $568;
          HEAP32[$571>>2] = $573;
          $z$4$i = $566;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $574 = (($x$i) + ($563<<2)|0);
         HEAP32[$574>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $563;$e2$0$ph$i = $$lcssa265;$rp$2$ph44$i = $561;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $605 = (($z$6$ph$i) + 1)|0;
         $602 = $605 & 127;
         $606 = (($z$6$ph$i) + 127)|0;
         $607 = $606 & 127;
         $608 = (($x$i) + ($607<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $609 = ($rp$4$ph$i|0)==(18);
          $610 = ($rp$4$ph$i|0)>(27);
          $$24$i = $610 ? 9 : 1;
          $$not$i = $609 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $575 = $a$4$i & 127;
           $576 = ($575|0)==($z$6$ph$i|0);
           do {
            if ($576) {
             label = 219;
            } else {
             $577 = (($x$i) + ($575<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ($578>>>0)<(9007199);
             if ($579) {
              label = 219;
              break;
             }
             $580 = ($578>>>0)>(9007199);
             if ($580) {
              break;
             }
             $581 = (($a$4$i) + 1)|0;
             $582 = $581 & 127;
             $583 = ($582|0)==($z$6$ph$i|0);
             if ($583) {
              label = 219;
              break;
             }
             $689 = (($x$i) + ($582<<2)|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690>>>0)<(254740991);
             if ($691) {
              label = 219;
              break;
             }
             $692 = ($690>>>0)>(254740991);
             $brmerge$i28 = $692 | $$not$i;
             if (!($brmerge$i28)) {
              $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($609) {
             label = 220;
             break L302;
            }
           }
           $584 = (($e2$1$i) + ($$24$i))|0;
           $585 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($585) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $584;
           } else {
            $$lcssa258 = $584;$a$4$i$lcssa250 = $a$4$i;
            break;
           }
          }
          $586 = 1 << $$24$i;
          $587 = (($586) + -1)|0;
          $588 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa250;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa250;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $589 = (($x$i) + ($k$687$i<<2)|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = $590 & $587;
           $592 = $590 >>> $$24$i;
           $593 = (($592) + ($carry4$089$i))|0;
           HEAP32[$589>>2] = $593;
           $594 = Math_imul($591, $588)|0;
           $595 = ($k$687$i|0)==($a$586$i|0);
           $596 = ($593|0)==(0);
           $or$cond25$i = $595 & $596;
           $597 = (($k$687$i) + 1)|0;
           $598 = $597 & 127;
           $599 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $599 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $598 : $a$586$i;
           $600 = ($598|0)==($z$6$ph$i|0);
           if ($600) {
            $$lcssa259 = $594;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $594;$k$687$i = $598;$rp$585$i = $rp$6$i;
           }
          }
          $601 = ($$lcssa259|0)==(0);
          if ($601) {
           $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $603 = ($602|0)==($a$6$i$lcssa|0);
          if (!($603)) {
           $$lcssa258$lcssa = $$lcssa258;$$lcssa259$lcssa = $$lcssa259;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $611 = HEAP32[$608>>2]|0;
          $612 = $611 | 1;
          HEAP32[$608>>2] = $612;
          $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $604 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$604>>2] = $$lcssa259$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa258$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $602;
        }
        if ((label|0) == 220) {
         if ($576) {
          $613 = (($602) + -1)|0;
          $614 = (($x$i) + ($613<<2)|0);
          HEAP32[$614>>2] = 0;
          $616 = $z$6$ph$i;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $602;
         } else {
          $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $615 = (($x$i) + ($616<<2)|0);
        $617 = HEAP32[$615>>2]|0;
        $618 = (+($617>>>0));
        $619 = (($a$4$i251) + 1)|0;
        $620 = $619 & 127;
        $621 = ($620|0)==($z$10$i|0);
        if ($621) {
         $678 = (($a$4$i251) + 2)|0;
         $679 = $678 & 127;
         $680 = (($679) + -1)|0;
         $681 = (($x$i) + ($680<<2)|0);
         HEAP32[$681>>2] = 0;
         $z$10$1$i = $679;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $682 = $618 * 1.0E+9;
        $683 = (($x$i) + ($620<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (+($684>>>0));
        $686 = $682 + $685;
        $642 = (+($sign$0|0));
        $624 = $642 * $686;
        $662 = (($e2$1$i248) + 53)|0;
        $668 = (($662) - ($emin$0$ph))|0;
        $669 = ($668|0)<($bits$0$ph|0);
        $687 = ($668|0)<(0);
        $$$i = $687 ? 0 : $668;
        $denormal$0$i = $669&1;
        $$012$i = $669 ? $$$i : $bits$0$ph;
        $688 = ($$012$i|0)<(53);
        if ($688) {
         $622 = (105 - ($$012$i))|0;
         $623 = (+_scalbn(1.0,$622));
         $625 = (+_copysignl($623,$624));
         $626 = (53 - ($$012$i))|0;
         $627 = (+_scalbn(1.0,$626));
         $628 = (+_fmodl($624,$627));
         $629 = $624 - $628;
         $630 = $625 + $629;
         $bias$0$i25 = $625;$frac$0$i = $628;$y$1$i24 = $630;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $624;
        }
        $631 = (($a$4$i251) + 2)|0;
        $632 = $631 & 127;
        $633 = ($632|0)==($z$10$1$i|0);
        do {
         if ($633) {
          $frac$3$i = $frac$0$i;
         } else {
          $634 = (($x$i) + ($632<<2)|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ($635>>>0)<(500000000);
          do {
           if ($636) {
            $637 = ($635|0)==(0);
            if ($637) {
             $638 = (($a$4$i251) + 3)|0;
             $639 = $638 & 127;
             $640 = ($639|0)==($z$10$1$i|0);
             if ($640) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $641 = $642 * 0.25;
            $643 = $641 + $frac$0$i;
            $frac$1$i = $643;
           } else {
            $644 = ($635>>>0)>(500000000);
            if ($644) {
             $645 = $642 * 0.75;
             $646 = $645 + $frac$0$i;
             $frac$1$i = $646;
             break;
            }
            $647 = (($a$4$i251) + 3)|0;
            $648 = $647 & 127;
            $649 = ($648|0)==($z$10$1$i|0);
            if ($649) {
             $650 = $642 * 0.5;
             $651 = $650 + $frac$0$i;
             $frac$1$i = $651;
             break;
            } else {
             $652 = $642 * 0.75;
             $653 = $652 + $frac$0$i;
             $frac$1$i = $653;
             break;
            }
           }
          } while(0);
          $654 = (53 - ($$012$i))|0;
          $655 = ($654|0)>(1);
          if (!($655)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $656 = (+_fmodl($frac$1$i,1.0));
          $657 = $656 != 0.0;
          if ($657) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $658 = $frac$1$i + 1.0;
          $frac$3$i = $658;
         }
        } while(0);
        $659 = $y$1$i24 + $frac$3$i;
        $660 = $659 - $bias$0$i25;
        $661 = $662 & 2147483647;
        $663 = (-2 - ($sum$i))|0;
        $664 = ($661|0)>($663|0);
        do {
         if ($664) {
          $665 = (+Math_abs((+$660)));
          $666 = !($665 >= 9007199254740992.0);
          if ($666) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i248;$y$2$i26 = $660;
          } else {
           $667 = ($$012$i|0)==($668|0);
           $or$cond26$i = $669 & $667;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $670 = $660 * 0.5;
           $671 = (($e2$1$i248) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $671;$y$2$i26 = $670;
          }
          $672 = (($e2$3$i) + 50)|0;
          $673 = ($672|0)>($330|0);
          if (!($673)) {
           $674 = ($denormal$2$i|0)!=(0);
           $675 = $frac$3$i != 0.0;
           $or$cond9$i27 = $675 & $674;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $676 = (___errno_location()|0);
          HEAP32[$676>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i248;$y$3$i = $660;
         }
        } while(0);
        $677 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $677;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 3;
  } else {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
  }
 }
 if ((label|0) == 3) {
  $5 = $0 << 24 >> 24;
  $6 = (___strchrnul($s,$5)|0);
  $7 = $6;
  $8 = $s;
  $9 = (($7) - ($8))|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($c)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $$03 = $s;
    while(1) {
     $5 = HEAP8[$$03>>0]|0;
     $6 = ($5<<24>>24)==($0<<24>>24);
     $7 = ((($$03)) + 1|0);
     if ($6) {
      $$03 = $7;
     } else {
      $$03$lcssa = $$03;
      break;
     }
    }
    $8 = $$03$lcssa;
    $9 = $s;
    $10 = (($8) - ($9))|0;
    $$0 = $10;
    break;
   } else {
    $$028 = $c;$14 = $0;
   }
   while(1) {
    $13 = $14 & 31;
    $15 = $13&255;
    $16 = 1 << $15;
    $div4 = ($14&255) >>> 5;
    $17 = $div4&255;
    $18 = (($byteset) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | $16;
    HEAP32[$18>>2] = $20;
    $21 = ((($$028)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     break;
    } else {
     $$028 = $21;$14 = $22;
    }
   }
   $11 = HEAP8[$s>>0]|0;
   $12 = ($11<<24>>24)==(0);
   L10: do {
    if ($12) {
     $$1$lcssa = $s;
    } else {
     $$16 = $s;$24 = $11;
     while(1) {
      $div = ($24&255) >>> 5;
      $25 = $div&255;
      $26 = (($byteset) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24 & 31;
      $29 = $28&255;
      $30 = 1 << $29;
      $31 = $27 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       $$1$lcssa = $$16;
       break L10;
      }
      $33 = ((($$16)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if ($35) {
       $$1$lcssa = $33;
       break;
      } else {
       $$16 = $33;$24 = $34;
      }
     }
    }
   } while(0);
   $36 = $$1$lcssa;
   $37 = $s;
   $38 = (($36) - ($37))|0;
   $$0 = $38;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i12 = 0, $$0$lcssa$i4 = 0, $$01$i = 0, $$02$i = 0, $$02$i8 = 0, $$03$i = 0, $$3$i = 0, $$lcssa$i = 0, $$lcssa$i11 = 0, $$lcssa291 = 0, $$lcssa294 = 0, $$lcssa297 = 0, $$lcssa311 = 0, $$lcssa314 = 0, $$lcssa317 = 0, $$lcssa332 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0;
 var $div$i = 0, $div5$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i7 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa145$i = 0, $ip$0$ph78$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph57$i = 0, $jp$0$ph15$ph72$i = 0, $jp$0$ph1567$i = 0, $jp$0$ph1567$i$lcssa = 0, $jp$0$ph1567$i$lcssa$lcssa = 0, $jp$0$ph79$i = 0, $jp$1$ph11$ph51$i = 0, $jp$1$ph1146$i = 0, $jp$1$ph1146$i$lcssa = 0;
 var $jp$1$ph1146$i$lcssa$lcssa = 0, $jp$1$ph58$i = 0, $k$061$i = 0, $k$141$i = 0, $k$2$i = 0, $k$340$i = 0, $k$340$i$lcssa = 0, $k$4$i = 0, $l$082$i = 0, $l$082$i$lcssa331 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i9 = 0, $or$cond6$i = 0, $p$0$ph$ph$lcssa34$i = 0, $p$0$ph$ph$lcssa34146$i = 0, $p$0$ph$ph73$i = 0, $p$1$p$0$i = 0;
 var $p$1$ph$ph$lcssa25$i = 0, $p$1$ph$ph52$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$233 = $9;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$0$lcssa$i = $$01$i;$31 = $233;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$0$lcssa$i = $26;$31 = 0;
         break;
        } else {
         $$01$i = $26;$233 = $27;$hw$0$in2$i = $29;
        }
       }
       $32 = ($31<<24>>24)!=(0);
       $33 = ((($$0$lcssa$i)) + -1|0);
       $34 = $32 ? $33 : 0;
       $$0 = $34;
       break;
      }
      $35 = ((($3)) + 2|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       $$0 = 0;
      } else {
       $38 = ((($n)) + 3|0);
       $39 = HEAP8[$38>>0]|0;
       $40 = ($39<<24>>24)==(0);
       if ($40) {
        $41 = $0&255;
        $42 = $41 << 24;
        $43 = $6&255;
        $44 = $43 << 16;
        $45 = $44 | $42;
        $46 = $12&255;
        $47 = $46 << 8;
        $48 = $45 | $47;
        $49 = HEAP8[$3>>0]|0;
        $50 = $49&255;
        $51 = $50 << 24;
        $52 = $9&255;
        $53 = $52 << 16;
        $54 = $36&255;
        $55 = $54 << 8;
        $56 = $55 | $53;
        $57 = $56 | $51;
        $58 = ($57|0)==($48|0);
        if ($58) {
         $$0$lcssa$i4 = $35;$$lcssa$i = $36;
        } else {
         $$02$i = $35;$hw$03$i = $57;
         while(1) {
          $59 = ((($$02$i)) + 1|0);
          $60 = HEAP8[$59>>0]|0;
          $61 = $60&255;
          $62 = $61 | $hw$03$i;
          $63 = $62 << 8;
          $64 = ($60<<24>>24)==(0);
          $65 = ($63|0)==($48|0);
          $or$cond$i2 = $64 | $65;
          if ($or$cond$i2) {
           $$0$lcssa$i4 = $59;$$lcssa$i = $60;
           break;
          } else {
           $$02$i = $59;$hw$03$i = $63;
          }
         }
        }
        $66 = ($$lcssa$i<<24>>24)!=(0);
        $67 = ((($$0$lcssa$i4)) + -2|0);
        $68 = $66 ? $67 : 0;
        $$0 = $68;
        break;
       }
       $69 = ((($3)) + 3|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = ($70<<24>>24)==(0);
       if ($71) {
        $$0 = 0;
       } else {
        $72 = ((($n)) + 4|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = ($73<<24>>24)==(0);
        if ($74) {
         $75 = $0&255;
         $76 = $75 << 24;
         $77 = $6&255;
         $78 = $77 << 16;
         $79 = $78 | $76;
         $80 = $12&255;
         $81 = $80 << 8;
         $82 = $79 | $81;
         $83 = $39&255;
         $84 = $82 | $83;
         $85 = HEAP8[$3>>0]|0;
         $86 = $85&255;
         $87 = $86 << 24;
         $88 = $9&255;
         $89 = $88 << 16;
         $90 = $36&255;
         $91 = $90 << 8;
         $92 = $70&255;
         $93 = $91 | $89;
         $94 = $93 | $92;
         $95 = $94 | $87;
         $96 = ($95|0)==($84|0);
         if ($96) {
          $$0$lcssa$i12 = $69;$$lcssa$i11 = $70;
         } else {
          $$02$i8 = $69;$hw$03$i7 = $95;
          while(1) {
           $97 = $hw$03$i7 << 8;
           $98 = ((($$02$i8)) + 1|0);
           $99 = HEAP8[$98>>0]|0;
           $100 = $99&255;
           $101 = $100 | $97;
           $102 = ($99<<24>>24)==(0);
           $103 = ($101|0)==($84|0);
           $or$cond$i9 = $102 | $103;
           if ($or$cond$i9) {
            $$0$lcssa$i12 = $98;$$lcssa$i11 = $99;
            break;
           } else {
            $$02$i8 = $98;$hw$03$i7 = $101;
           }
          }
         }
         $104 = ($$lcssa$i11<<24>>24)!=(0);
         $105 = ((($$0$lcssa$i12)) + -3|0);
         $106 = $104 ? $105 : 0;
         $$0 = $106;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $111 = $0;$l$082$i = 0;
        while(1) {
         $107 = (($3) + ($l$082$i)|0);
         $108 = HEAP8[$107>>0]|0;
         $109 = ($108<<24>>24)==(0);
         if ($109) {
          $$3$i = 0;
          break;
         }
         $110 = $111 & 31;
         $112 = $110&255;
         $113 = 1 << $112;
         $div5$i = ($111&255) >>> 5;
         $114 = $div5$i&255;
         $115 = (($byteset$i) + ($114<<2)|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = $116 | $113;
         HEAP32[$115>>2] = $117;
         $118 = (($l$082$i) + 1)|0;
         $119 = $111&255;
         $120 = (($shift$i) + ($119<<2)|0);
         HEAP32[$120>>2] = $118;
         $121 = (($n) + ($118)|0);
         $122 = HEAP8[$121>>0]|0;
         $123 = ($122<<24>>24)==(0);
         if ($123) {
          $$lcssa332 = $118;$l$082$i$lcssa331 = $l$082$i;
          label = 23;
          break;
         } else {
          $111 = $122;$l$082$i = $118;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $124 = ($$lcssa332>>>0)>(1);
          L34: do {
           if ($124) {
            $234 = 1;$ip$0$ph78$i = -1;$jp$0$ph79$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph15$ph72$i = $jp$0$ph79$i;$p$0$ph$ph73$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1567$i = $jp$0$ph15$ph72$i;
              L39: while(1) {
               $134 = $236;$k$061$i = 1;
               while(1) {
                $130 = (($k$061$i) + ($ip$0$ph78$i))|0;
                $131 = (($n) + ($130)|0);
                $132 = HEAP8[$131>>0]|0;
                $133 = (($n) + ($134)|0);
                $135 = HEAP8[$133>>0]|0;
                $136 = ($132<<24>>24)==($135<<24>>24);
                if (!($136)) {
                 $$lcssa311 = $134;$$lcssa314 = $132;$$lcssa317 = $135;$jp$0$ph1567$i$lcssa = $jp$0$ph1567$i;
                 break L39;
                }
                $137 = ($k$061$i|0)==($p$0$ph$ph73$i|0);
                $128 = (($k$061$i) + 1)|0;
                if ($137) {
                 break;
                }
                $127 = (($128) + ($jp$0$ph1567$i))|0;
                $129 = ($127>>>0)<($$lcssa332>>>0);
                if ($129) {
                 $134 = $127;$k$061$i = $128;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
                 break L35;
                }
               }
               $138 = (($jp$0$ph1567$i) + ($p$0$ph$ph73$i))|0;
               $139 = (($138) + 1)|0;
               $140 = ($139>>>0)<($$lcssa332>>>0);
               if ($140) {
                $236 = $139;$jp$0$ph1567$i = $138;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
                break L35;
               }
              }
              $141 = ($$lcssa314&255)>($$lcssa317&255);
              $142 = (($$lcssa311) - ($ip$0$ph78$i))|0;
              if (!($141)) {
               $jp$0$ph1567$i$lcssa$lcssa = $jp$0$ph1567$i$lcssa;
               break;
              }
              $125 = (($$lcssa311) + 1)|0;
              $126 = ($125>>>0)<($$lcssa332>>>0);
              if ($126) {
               $235 = $125;$jp$0$ph15$ph72$i = $$lcssa311;$p$0$ph$ph73$i = $142;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $142;
               break L35;
              }
             }
             $143 = (($jp$0$ph1567$i$lcssa$lcssa) + 1)|0;
             $144 = (($jp$0$ph1567$i$lcssa$lcssa) + 2)|0;
             $145 = ($144>>>0)<($$lcssa332>>>0);
             if ($145) {
              $234 = $144;$ip$0$ph78$i = $jp$0$ph1567$i$lcssa$lcssa;$jp$0$ph79$i = $143;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1567$i$lcssa$lcssa;$p$0$ph$ph$lcssa34$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph57$i = -1;$jp$1$ph58$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph11$ph51$i = $jp$1$ph58$i;$p$1$ph$ph52$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph1146$i = $jp$1$ph11$ph51$i;
              L54: while(1) {
               $153 = $238;$k$141$i = 1;
               while(1) {
                $149 = (($k$141$i) + ($ip$1$ph57$i))|0;
                $150 = (($n) + ($149)|0);
                $151 = HEAP8[$150>>0]|0;
                $152 = (($n) + ($153)|0);
                $154 = HEAP8[$152>>0]|0;
                $155 = ($151<<24>>24)==($154<<24>>24);
                if (!($155)) {
                 $$lcssa291 = $153;$$lcssa294 = $151;$$lcssa297 = $154;$jp$1$ph1146$i$lcssa = $jp$1$ph1146$i;
                 break L54;
                }
                $156 = ($k$141$i|0)==($p$1$ph$ph52$i|0);
                $147 = (($k$141$i) + 1)|0;
                if ($156) {
                 break;
                }
                $146 = (($147) + ($jp$1$ph1146$i))|0;
                $148 = ($146>>>0)<($$lcssa332>>>0);
                if ($148) {
                 $153 = $146;$k$141$i = $147;
                } else {
                 $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
                 break L34;
                }
               }
               $157 = (($jp$1$ph1146$i) + ($p$1$ph$ph52$i))|0;
               $158 = (($157) + 1)|0;
               $159 = ($158>>>0)<($$lcssa332>>>0);
               if ($159) {
                $238 = $158;$jp$1$ph1146$i = $157;
               } else {
                $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
                break L34;
               }
              }
              $160 = ($$lcssa294&255)<($$lcssa297&255);
              $161 = (($$lcssa291) - ($ip$1$ph57$i))|0;
              if (!($160)) {
               $jp$1$ph1146$i$lcssa$lcssa = $jp$1$ph1146$i$lcssa;
               break;
              }
              $165 = (($$lcssa291) + 1)|0;
              $166 = ($165>>>0)<($$lcssa332>>>0);
              if ($166) {
               $239 = $165;$jp$1$ph11$ph51$i = $$lcssa291;$p$1$ph$ph52$i = $161;
              } else {
               $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $161;
               break L34;
              }
             }
             $162 = (($jp$1$ph1146$i$lcssa$lcssa) + 1)|0;
             $163 = (($jp$1$ph1146$i$lcssa$lcssa) + 2)|0;
             $164 = ($163>>>0)<($$lcssa332>>>0);
             if ($164) {
              $237 = $163;$ip$1$ph57$i = $jp$1$ph1146$i$lcssa$lcssa;$jp$1$ph58$i = $162;
             } else {
              $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph1146$i$lcssa$lcssa;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa145$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa34146$i = 1;$p$1$ph$ph$lcssa25$i = 1;
           }
          } while(0);
          $167 = (($ip$1$ph$lcssa$i) + 1)|0;
          $168 = (($ip$0$ph$lcssa145$i) + 1)|0;
          $169 = ($167>>>0)>($168>>>0);
          $p$1$p$0$i = $169 ? $p$1$ph$ph$lcssa25$i : $p$0$ph$ph$lcssa34146$i;
          $ip$1$ip$0$i = $169 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa145$i;
          $170 = (($n) + ($p$1$p$0$i)|0);
          $171 = (($ip$1$ip$0$i) + 1)|0;
          $172 = (_memcmp($n,$170,$171)|0);
          $173 = ($172|0)==(0);
          if ($173) {
           $178 = (($$lcssa332) - ($p$1$p$0$i))|0;
           $mem0$0$i = $178;$p$3$i = $p$1$p$0$i;
          } else {
           $174 = (($$lcssa332) - ($ip$1$ip$0$i))|0;
           $175 = (($174) + -1)|0;
           $176 = ($ip$1$ip$0$i>>>0)>($175>>>0);
           $ip$1$ip$0$$i = $176 ? $ip$1$ip$0$i : $175;
           $177 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $177;
          }
          $179 = $$lcssa332 | 63;
          $180 = ($mem0$0$i|0)!=(0);
          $181 = (($$lcssa332) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $182 = $z$0$i;
           $183 = $$03$i;
           $184 = (($182) - ($183))|0;
           $185 = ($184>>>0)<($$lcssa332>>>0);
           do {
            if ($185) {
             $186 = (_memchr($z$0$i,0,$179)|0);
             $187 = ($186|0)==(0|0);
             if ($187) {
              $191 = (($z$0$i) + ($179)|0);
              $z$3$i = $191;
              break;
             } else {
              $188 = $186;
              $189 = (($188) - ($183))|0;
              $190 = ($189>>>0)<($$lcssa332>>>0);
              if ($190) {
               $$3$i = 0;
               break L32;
              } else {
               $z$3$i = $186;
               break;
              }
             }
            } else {
             $z$3$i = $z$0$i;
            }
           } while(0);
           $192 = (($$03$i) + ($l$082$i$lcssa331)|0);
           $193 = HEAP8[$192>>0]|0;
           $div$i = ($193&255) >>> 5;
           $194 = $div$i&255;
           $195 = (($byteset$i) + ($194<<2)|0);
           $196 = HEAP32[$195>>2]|0;
           $197 = $193 & 31;
           $198 = $197&255;
           $199 = 1 << $198;
           $200 = $199 & $196;
           $201 = ($200|0)==(0);
           if ($201) {
            $210 = (($$03$i) + ($$lcssa332)|0);
            $$03$i = $210;$mem$0$i = 0;$z$0$i = $z$3$i;
            continue;
           }
           $202 = $193&255;
           $203 = (($shift$i) + ($202<<2)|0);
           $204 = HEAP32[$203>>2]|0;
           $205 = (($$lcssa332) - ($204))|0;
           $206 = ($$lcssa332|0)==($204|0);
           if (!($206)) {
            $207 = ($mem$0$i|0)!=(0);
            $or$cond$i = $180 & $207;
            $208 = ($205>>>0)<($p$3$i>>>0);
            $or$cond6$i = $or$cond$i & $208;
            $k$2$i = $or$cond6$i ? $181 : $205;
            $209 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$3$i;
            continue;
           }
           $211 = ($171>>>0)>($mem$0$i>>>0);
           $212 = $211 ? $171 : $mem$0$i;
           $213 = (($n) + ($212)|0);
           $214 = HEAP8[$213>>0]|0;
           $215 = ($214<<24>>24)==(0);
           L83: do {
            if ($215) {
             $k$4$i = $171;
            } else {
             $$pr$i = $214;$k$340$i = $212;
             while(1) {
              $216 = (($$03$i) + ($k$340$i)|0);
              $217 = HEAP8[$216>>0]|0;
              $218 = ($$pr$i<<24>>24)==($217<<24>>24);
              if (!($218)) {
               $k$340$i$lcssa = $k$340$i;
               break;
              }
              $219 = (($k$340$i) + 1)|0;
              $220 = (($n) + ($219)|0);
              $221 = HEAP8[$220>>0]|0;
              $222 = ($221<<24>>24)==(0);
              if ($222) {
               $k$4$i = $171;
               break L83;
              } else {
               $$pr$i = $221;$k$340$i = $219;
              }
             }
             $223 = (($k$340$i$lcssa) - ($ip$1$ip$0$i))|0;
             $224 = (($$03$i) + ($223)|0);
             $$03$i = $224;$mem$0$i = 0;$z$0$i = $z$3$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $225 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($225)) {
             $$3$i = $$03$i;
             break L32;
            }
            $226 = (($k$4$i) + -1)|0;
            $227 = (($n) + ($226)|0);
            $228 = HEAP8[$227>>0]|0;
            $229 = (($$03$i) + ($226)|0);
            $230 = HEAP8[$229>>0]|0;
            $231 = ($228<<24>>24)==($230<<24>>24);
            if ($231) {
             $k$4$i = $226;
            } else {
             break;
            }
           }
           $232 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $232;$mem$0$i = $mem0$0$i;$z$0$i = $z$3$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa42 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa43 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa44 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa42 = $$031;$$04$lcssa43 = $$0430;$$06$lcssa44 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa42 = $$0$lcssa;$$04$lcssa43 = $$04$lcssa;$$06$lcssa44 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa43>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa44;$$3 = $$0$lcssa42;
   } else {
    $19 = ($$0$lcssa42>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa42;$wd$018 = $$06$lcssa44;$ws$019 = $$04$lcssa43;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa42;$wd$0$lcssa = $$06$lcssa44;$ws$0$lcssa = $$04$lcssa43;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strtok($s,$sep) {
 $s = $s|0;
 $sep = $sep|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[22133]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_strspn($$01,$sep)|0);
   $4 = (($$01) + ($3)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[22133] = 0;
    $$0 = 0;
    break;
   }
   $7 = (_strcspn($4,$sep)|0);
   $8 = (($4) + ($7)|0);
   HEAP32[22133] = $8;
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    HEAP32[22133] = 0;
    $$0 = $4;
    break;
   } else {
    $11 = ((($8)) + 1|0);
    HEAP32[22133] = $11;
    HEAP8[$8>>0] = 0;
    $$0 = $4;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _fcntl($fd,$cmd,$varargs) {
 $fd = $fd|0;
 $cmd = $cmd|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $ex = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 176|0;
 $ex = sp + 168|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = ($cmd|0)==(4);
 $8 = $6 | 32768;
 $$ = $7 ? $8 : $6;
 L1: do {
  switch ($cmd|0) {
  case 14:  {
   $9 = $$;
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   $10 = (___syscall221(221,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$2 = $11;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $fd;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $ex;
   $12 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($12|0) {
   case -22:  {
    $13 = $$;
    HEAP32[$vararg_buffer8>>2] = $fd;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $13;
    $14 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $14;
    break;
   }
   case 0:  {
    $16 = HEAP32[$ex>>2]|0;
    $17 = ($16|0)==(2);
    $18 = ((($ex)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $17 ? $20 : $19;
    $$0 = $21;
    break;
   }
   default: {
    $15 = (___syscall_ret($12)|0);
    $$0 = $15;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $fd;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $22 = (___syscall221(221,($vararg_buffer13|0))|0);
   $23 = ($22|0)==(-22);
   if (!($23)) {
    $24 = ($22|0)>(-1);
    if ($24) {
     HEAP32[$vararg_buffer18>>2] = $22;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $25 = (___syscall_ret($22)|0);
    $$2 = $25;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $fd;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $26 = (___syscall221(221,($vararg_buffer23|0))|0);
   $27 = ($26|0)==(-22);
   if ($27) {
    HEAP32[$vararg_buffer31>>2] = $fd;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $30 = (___syscall221(221,($vararg_buffer31|0))|0);
    $31 = ($30|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer36>>2] = $30;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $32 = (___syscall_ret($30)|0);
    $$2 = $32;
    break L1;
   } else {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer28>>2] = $26;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $29 = (___syscall_ret(-22)|0);
    $$2 = $29;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($cmd) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $33 = $$;
    HEAP32[$vararg_buffer41>>2] = $fd;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $cmd;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $33;
    $34 = (___syscall221(221,($vararg_buffer41|0))|0);
    $35 = (___syscall_ret($34)|0);
    $$2 = $35;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $fd;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $cmd;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $36 = (___syscall221(221,($vararg_buffer46|0))|0);
    $37 = (___syscall_ret($36)|0);
    $$2 = $37;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(36354,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(36354,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 31;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 7;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 8;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 6;
   $34 = HEAP32[(88484)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((88508)|0));
   $37 = HEAP32[(88504)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(88504)>>2] = $4;
   ___unlock(((88508)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((88508)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(88504)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(88504)>>2] = $14;
  }
  ___unlock(((88508)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 31]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[1352]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[1352]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((88508)|0));
   $$012 = HEAP32[(88504)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((88508)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 63]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$047 = 0, $$05 = 0, $$lcssa13 = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0;
 var $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $12 = $3;
 } else {
  $12 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $13 = ($12|0)==(0);
  if (!($13)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 17;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = (_memchr($17,10,$20)|0);
     $22 = ($21|0)==(0|0);
     $23 = $21;
     $24 = (1 - ($19))|0;
     $25 = (($24) + ($23))|0;
     $26 = $22 ? $20 : $25;
     $27 = ($26>>>0)<($$05>>>0);
     $28 = $27 ? $26 : $$05;
     _memcpy(($p$0|0),($17|0),($28|0))|0;
     $29 = HEAP32[$15>>2]|0;
     $30 = (($29) + ($28)|0);
     HEAP32[$15>>2] = $30;
     $31 = (($p$0) + ($28)|0);
     $32 = (($$05) - ($28))|0;
     $or$cond = $22 & $27;
     if (!($or$cond)) {
      $p$1 = $31;
      label = 17;
      break L11;
     }
     $33 = HEAP32[$16>>2]|0;
     $34 = ($30>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($30)) + 1|0);
      HEAP32[$15>>2] = $35;
      $36 = HEAP8[$30>>0]|0;
      $37 = $36&255;
      $46 = $37;
     } else {
      $38 = (___uflow($f)|0);
      $39 = ($38|0)<(0);
      if ($39) {
       $$lcssa13 = $31;
       break;
      } else {
       $46 = $38;
      }
     }
     $44 = (($32) + -1)|0;
     $45 = $46&255;
     $47 = ((($31)) + 1|0);
     HEAP8[$31>>0] = $45;
     $sext$mask = $46 & 255;
     $48 = ($sext$mask|0)!=(10);
     $49 = ($44|0)!=(0);
     $or$cond3 = $49 & $48;
     if ($or$cond3) {
      $$05 = $44;$p$0 = $47;
     } else {
      $p$1 = $47;
      label = 17;
      break L11;
     }
    }
    $40 = ($$lcssa13|0)==($s|0);
    if ($40) {
     $$047 = 0;
    } else {
     $41 = HEAP32[$f>>2]|0;
     $42 = $41 & 16;
     $43 = ($42|0)==(0);
     if ($43) {
      $$047 = 0;
     } else {
      $p$1 = $$lcssa13;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $50 = ($s|0)==(0|0);
   if ($50) {
    $$047 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$047 = $s;
   }
  }
  $51 = ($12|0)==(0);
  if ($51) {
   $$0 = $$047;
  } else {
   ___unlockfile($f);
   $$0 = $$047;
  }
 }
 return ($$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre173 = 0, $$pre175 = 0, $$pre177 = 0, $$pre179 = 0, $$pre180 = 0, $$pre181 = 0, $$pre182 = 0, $$pre183 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0;
 var $c$0102 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor18 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0;
 var $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit8 = 0, $isdigit897 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $isdigittmp796 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0;
 var $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0;
 var $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0106 = 0;
 var $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $326 = $4;
 } else {
  $326 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0107 = 0;$p$0110 = $fmt;$pos$0111 = 0;$s$0105 = 0;$wcs$0106 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0110>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0110)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0110)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0110)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0110)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp796 = (($93) + -48)|0;
        $isdigit897 = ($isdigittmp796>>>0)<(10);
        if ($isdigit897) {
         $97 = $93;$p$398 = $p$2;$width$099 = 0;
         while(1) {
          $94 = ($width$099*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$398)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp7 = (($100) + -48)|0;
          $isdigit8 = ($isdigittmp7>>>0)<(10);
          if ($isdigit8) {
           $97 = $100;$p$398 = $98;$width$099 = $96;
          } else {
           $$lcssa40 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa40 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa40<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre173 = HEAP8[$104>>0]|0;
         $107 = $$pre173;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa40;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0105;$wcs$1 = $wcs$0106;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$11 = $109 ? $110 : $105;
         $$12 = $109 ? -2 : -1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$13 = $112 ? $113 : $105;
         $$14 = $112 ? 3 : 1;
         $p$5 = $$13;$size$0 = $$14;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
         label = 154;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0111;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0111;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0111|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0111&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0111&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0111;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         if ($140) {
          $$pre175 = HEAP32[$7>>2]|0;
          $148 = $$pre175;
         } else {
          $141 = HEAP32[$7>>2]|0;
          $142 = ((($141)) + -1|0);
          HEAP32[$7>>2] = $142;
          $143 = $142;
          $148 = $143;
         }
         $144 = HEAP32[$9>>2]|0;
         $145 = HEAP32[$10>>2]|0;
         $146 = (($144) + ($pos$0111))|0;
         $147 = (($146) + ($148))|0;
         $149 = (($147) - ($145))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
          label = 154;
          break L6;
         }
         $$pre177 = HEAP32[$8>>2]|0;
         $156 = $$pre177;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L68: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ | 16;
          $162 = ($161|0)==(115);
          L70: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $p$6 = $166 ? $167 : $164;
            $168 = $166&1;
            _memset(($scanset|0),($168|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $169 = HEAP8[$p$6>>0]|0;
            switch ($169<<24>>24) {
            case 45:  {
             $170 = ((($p$6)) + 1|0);
             $171 = $invert$0 ^ 1;
             $172 = $171&255;
             HEAP8[$14>>0] = $172;
             $$pre$phi184Z2D = $172;$p$7$ph = $170;
             break;
            }
            case 93:  {
             $173 = ((($p$6)) + 1|0);
             $174 = $invert$0 ^ 1;
             $175 = $174&255;
             HEAP8[$15>>0] = $175;
             $$pre$phi184Z2D = $175;$p$7$ph = $173;
             break;
            }
            default: {
             $$pre182 = $invert$0 ^ 1;
             $$pre183 = $$pre182&255;
             $$pre$phi184Z2D = $$pre183;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $176 = HEAP8[$p$7>>0]|0;
             L81: do {
              switch ($176<<24>>24) {
              case 0:  {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L70;
               break;
              }
              case 45:  {
               $177 = ((($p$7)) + 1|0);
               $178 = HEAP8[$177>>0]|0;
               switch ($178<<24>>24) {
               case 93: case 0:  {
                $189 = 45;$p$8 = $p$7;
                break L81;
                break;
               }
               default: {
               }
               }
               $179 = ((($p$7)) + -1|0);
               $180 = HEAP8[$179>>0]|0;
               $181 = ($180&255)<($178&255);
               if ($181) {
                $182 = $180&255;
                $c$0102 = $182;
                while(1) {
                 $183 = (($c$0102) + 1)|0;
                 $184 = (($scanset) + ($183)|0);
                 HEAP8[$184>>0] = $$pre$phi184Z2D;
                 $185 = HEAP8[$177>>0]|0;
                 $186 = $185&255;
                 $187 = ($183|0)<($186|0);
                 if ($187) {
                  $c$0102 = $183;
                 } else {
                  $189 = $185;$p$8 = $177;
                  break;
                 }
                }
               } else {
                $189 = $178;$p$8 = $177;
               }
               break;
              }
              default: {
               $189 = $176;$p$8 = $p$7;
              }
              }
             } while(0);
             $188 = $189&255;
             $190 = (($188) + 1)|0;
             $191 = (($scanset) + ($190)|0);
             HEAP8[$191>>0] = $$pre$phi184Z2D;
             $192 = ((($p$8)) + 1|0);
             $p$7 = $192;
            }
           }
          } while(0);
          $193 = (($width$1) + 1)|0;
          $194 = $160 ? $193 : 31;
          $195 = ($$size$0|0)==(1);
          $196 = ($alloc$0|0)!=(0);
          L89: do {
           if ($195) {
            if ($196) {
             $197 = $194 << 2;
             $198 = (_malloc($197)|0);
             $199 = ($198|0)==(0|0);
             if ($199) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $198;
              label = 154;
              break L6;
             } else {
              $wcs$2 = $198;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $194;$wcs$3$ph = $wcs$2;
            L95: while(1) {
             $200 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph22 = $i$0$ph;
             while(1) {
              L99: while(1) {
               $201 = HEAP32[$7>>2]|0;
               $202 = HEAP32[$8>>2]|0;
               $203 = ($201>>>0)<($202>>>0);
               if ($203) {
                $204 = ((($201)) + 1|0);
                HEAP32[$7>>2] = $204;
                $205 = HEAP8[$201>>0]|0;
                $206 = $205&255;
                $209 = $206;
               } else {
                $207 = (___shgetc($f)|0);
                $209 = $207;
               }
               $208 = (($209) + 1)|0;
               $210 = (($scanset) + ($208)|0);
               $211 = HEAP8[$210>>0]|0;
               $212 = ($211<<24>>24)==(0);
               if ($212) {
                $i$0$ph22$lcssa = $i$0$ph22;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L95;
               }
               $213 = $209&255;
               HEAP8[$0>>0] = $213;
               $214 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($214|0) {
               case -1:  {
                $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($200) {
               $i$1 = $i$0$ph22;
              } else {
               $215 = HEAP32[$wc>>2]|0;
               $216 = (($i$0$ph22) + 1)|0;
               $217 = (($wcs$3$ph) + ($i$0$ph22<<2)|0);
               HEAP32[$217>>2] = $215;
               $i$1 = $216;
              }
              $218 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $196 & $218;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph22 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $219 = $factor | 1;
             $220 = $219 << 2;
             $221 = (_realloc($wcs$3$ph,$220)|0);
             $222 = ($221|0)==(0|0);
             if ($222) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
              label = 154;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$k$0$ph = $219;$wcs$3$ph = $221;$i$0$ph = $i$0$ph$phi;
             }
            }
            $223 = (_mbsinit($st)|0);
            $224 = ($223|0)==(0);
            if ($224) {
             $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph$lcssa;
             label = 154;
             break L6;
            } else {
             $i$4 = $i$0$ph22$lcssa;$s$4 = 0;$wcs$5 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($196) {
             $225 = (_malloc($194)|0);
             $226 = ($225|0)==(0|0);
             if ($226) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = 0;
              label = 154;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $194;$s$2$ph = $225;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $227 = HEAP32[$7>>2]|0;
               $228 = HEAP32[$8>>2]|0;
               $229 = ($227>>>0)<($228>>>0);
               if ($229) {
                $230 = ((($227)) + 1|0);
                HEAP32[$7>>2] = $230;
                $231 = HEAP8[$227>>0]|0;
                $232 = $231&255;
                $235 = $232;
               } else {
                $233 = (___shgetc($f)|0);
                $235 = $233;
               }
               $234 = (($235) + 1)|0;
               $236 = (($scanset) + ($234)|0);
               $237 = HEAP8[$236>>0]|0;
               $238 = ($237<<24>>24)==(0);
               if ($238) {
                $i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L89;
               }
               $239 = $235&255;
               $240 = (($i$2) + 1)|0;
               $241 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$241>>0] = $239;
               $242 = ($240|0)==($k$1$ph|0);
               if ($242) {
                break;
               } else {
                $i$2 = $240;
               }
              }
              $factor18 = $k$1$ph << 1;
              $243 = $factor18 | 1;
              $244 = (_realloc($s$2$ph,$243)|0);
              $245 = ($244|0)==(0|0);
              if ($245) {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$2$ph;$wcs$8 = 0;
               label = 154;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $243;$s$2$ph = $244;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $246 = ($dest$0|0)==(0|0);
            if ($246) {
             $264 = $156;
             while(1) {
              $262 = HEAP32[$7>>2]|0;
              $263 = ($262>>>0)<($264>>>0);
              if ($263) {
               $265 = ((($262)) + 1|0);
               HEAP32[$7>>2] = $265;
               $266 = HEAP8[$262>>0]|0;
               $267 = $266&255;
               $270 = $267;
              } else {
               $268 = (___shgetc($f)|0);
               $270 = $268;
              }
              $269 = (($270) + 1)|0;
              $271 = (($scanset) + ($269)|0);
              $272 = HEAP8[$271>>0]|0;
              $273 = ($272<<24>>24)==(0);
              if ($273) {
               $i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L89;
              }
              $$pre180 = HEAP32[$8>>2]|0;
              $264 = $$pre180;
             }
            } else {
             $249 = $156;$i$3 = 0;
             while(1) {
              $247 = HEAP32[$7>>2]|0;
              $248 = ($247>>>0)<($249>>>0);
              if ($248) {
               $250 = ((($247)) + 1|0);
               HEAP32[$7>>2] = $250;
               $251 = HEAP8[$247>>0]|0;
               $252 = $251&255;
               $255 = $252;
              } else {
               $253 = (___shgetc($f)|0);
               $255 = $253;
              }
              $254 = (($255) + 1)|0;
              $256 = (($scanset) + ($254)|0);
              $257 = HEAP8[$256>>0]|0;
              $258 = ($257<<24>>24)==(0);
              if ($258) {
               $i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L89;
              }
              $259 = $255&255;
              $260 = (($i$3) + 1)|0;
              $261 = (($dest$0) + ($i$3)|0);
              HEAP8[$261>>0] = $259;
              $$pre179 = HEAP32[$8>>2]|0;
              $249 = $$pre179;$i$3 = $260;
             }
            }
           }
          } while(0);
          $274 = HEAP32[$8>>2]|0;
          $275 = ($274|0)==(0|0);
          if ($275) {
           $$pre181 = HEAP32[$7>>2]|0;
           $282 = $$pre181;
          } else {
           $276 = HEAP32[$7>>2]|0;
           $277 = ((($276)) + -1|0);
           HEAP32[$7>>2] = $277;
           $278 = $277;
           $282 = $278;
          }
          $279 = HEAP32[$9>>2]|0;
          $280 = HEAP32[$10>>2]|0;
          $281 = (($282) - ($280))|0;
          $283 = (($281) + ($279))|0;
          $284 = ($283|0)==(0);
          if ($284) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          $$not = $160 ^ 1;
          $285 = ($283|0)==($width$1|0);
          $or$cond10 = $285 | $$not;
          if (!($or$cond10)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          do {
           if ($196) {
            if ($195) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          } else {
           $286 = ($wcs$5|0)==(0|0);
           if (!($286)) {
            $287 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$287>>2] = 0;
           }
           $288 = ($s$4|0)==(0|0);
           if ($288) {
            $p$10 = $p$9;$s$5 = 0;$wcs$6 = $wcs$5;
            break L68;
           }
           $289 = (($s$4) + ($i$4)|0);
           HEAP8[$289>>0] = 0;
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $307 = (+___floatscan($f,$$size$0,0));
          $308 = HEAP32[$9>>2]|0;
          $309 = HEAP32[$7>>2]|0;
          $310 = HEAP32[$10>>2]|0;
          $311 = (($310) - ($309))|0;
          $312 = ($308|0)==($311|0);
          if ($312) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $313 = ($dest$0|0)==(0|0);
          if ($313) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $314 = $307;
            HEAPF32[$dest$0>>2] = $314;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $290 = (___intscan($f,$base$0,0,-1,-1)|0);
          $291 = tempRet0;
          $292 = HEAP32[$9>>2]|0;
          $293 = HEAP32[$7>>2]|0;
          $294 = HEAP32[$10>>2]|0;
          $295 = (($294) - ($293))|0;
          $296 = ($292|0)==($295|0);
          if ($296) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $297 = ($$|0)==(112);
          $298 = ($dest$0|0)!=(0|0);
          $or$cond3 = $298 & $297;
          if ($or$cond3) {
           $299 = $290;
           HEAP32[$dest$0>>2] = $299;
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
           break;
          }
          $300 = ($dest$0|0)==(0|0);
          if ($300) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $301 = $290&255;
            HEAP8[$dest$0>>0] = $301;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case -1:  {
            $302 = $290&65535;
            HEAP16[$dest$0>>1] = $302;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 3:  {
            $303 = $dest$0;
            $304 = $303;
            HEAP32[$304>>2] = $290;
            $305 = (($303) + 4)|0;
            $306 = $305;
            HEAP32[$306>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
           }
           }
          }
         }
        } while(0);
        $315 = HEAP32[$9>>2]|0;
        $316 = HEAP32[$7>>2]|0;
        $317 = HEAP32[$10>>2]|0;
        $318 = (($315) + ($pos$1))|0;
        $319 = (($318) + ($316))|0;
        $320 = (($319) - ($317))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $321 = $not$&1;
        $matches$0$ = (($321) + ($matches$0107))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $320;$s$6 = $s$5;$wcs$7 = $wcs$6;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0110) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa386 = $61;$matches$0107$lcssa = $matches$0107;$s$0105$lcssa = $s$0105;$wcs$0106$lcssa = $wcs$0106;
       label = 22;
       break L6;
      }
      $69 = (($pos$0111) + 1)|0;
      $matches$1 = $matches$0107;$p$11 = $51;$pos$2 = $69;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     } else {
      $p$1 = $p$0110;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$pre = HEAP32[$7>>2]|0;
       $44 = $$pre;
      } else {
       $37 = HEAP32[$7>>2]|0;
       $38 = ((($37)) + -1|0);
       HEAP32[$7>>2] = $38;
       $39 = $38;
       $44 = $39;
      }
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$10>>2]|0;
      $42 = (($40) + ($pos$0111))|0;
      $43 = (($42) + ($44))|0;
      $45 = (($43) - ($41))|0;
      $matches$1 = $matches$0107;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     }
    } while(0);
    $322 = ((($p$11)) + 1|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = ($323<<24>>24)==(0);
    if ($324) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $323;$matches$0107 = $matches$1;$p$0110 = $322;$pos$0111 = $pos$2;$s$0105 = $s$6;$wcs$0106 = $wcs$7;
    }
   }
   if ((label|0) == 22) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa386|0)>(-1);
    $68 = ($matches$0107$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0107$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$8 = $s$0105$lcssa;$wcs$9 = $wcs$0106$lcssa;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($matches$0107371|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0402;$s$8 = $s$7;$wcs$9 = $wcs$8;
     label = 155;
    } else {
     $alloc$2 = $alloc$0402;$matches$2 = $matches$0107371;$s$9 = $s$7;$wcs$10 = $wcs$8;
    }
   }
   if ((label|0) == 155) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;$wcs$10 = $wcs$9;
   }
   $325 = ($alloc$2|0)==(0);
   if ($325) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($wcs$10);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $327 = ($326|0)==(0);
 if (!($327)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 32;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 63]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _opendir($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_open($name,589824,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_calloc(1,2072)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    HEAP32[$vararg_buffer1>>2] = $0;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$2>>2] = $0;
    $$0 = $2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readdir($dir) {
 $dir = $dir|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($dir)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dir)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 do {
  if ($4) {
   $14 = $1;
   label = 6;
  } else {
   $5 = HEAP32[$dir>>2]|0;
   $6 = ((($dir)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $7 = (___syscall220(220,($vararg_buffer|0))|0);
   $8 = ($7|0)<(1);
   if (!($8)) {
    HEAP32[$2>>2] = $7;
    HEAP32[$0>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   $9 = ($7|0)<(0);
   $10 = ($7|0)!=(-2);
   $or$cond = $9 & $10;
   if ($or$cond) {
    $11 = (0 - ($7))|0;
    $12 = (___errno_location()|0);
    HEAP32[$12>>2] = $11;
    $$1 = 0;
   } else {
    $$1 = 0;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($dir)) + 24|0) + ($14)|0);
  $15 = ((($13)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  HEAP32[$0>>2] = $18;
  $19 = ((($13)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($dir)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$1 = $13;
 }
 STACKTOP = sp;return ($$1|0);
}
function _closedir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dir>>2]|0;
 $1 = (_close($0)|0);
 _free($dir);
 return ($1|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i29 = 0, $$01$i5$i$ph = 0, $$02$i$i = 0, $$02$i3$i = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i4 = 0, $$pre$i7 = 0, $$pre1$i = 0, $$pre1$i11 = 0, $$pre1$i5 = 0, $$pre1$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $9$phi = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$033 = 0, $head$1$be = 0, $head$149 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0;
 var $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond38 = 0, $or$cond3848 = 0, $or$cond47 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$034 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$250 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $6 = (0 - ($width))|0;
  $7 = ((($lp)) + 4|0);
  HEAP32[$7>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $11 = $width;$9 = $width;$i$0 = 2;
  while(1) {
   $8 = (($9) + ($width))|0;
   $10 = (($8) + ($11))|0;
   $12 = (($lp) + ($i$0<<2)|0);
   HEAP32[$12>>2] = $10;
   $13 = ($10>>>0)<($0>>>0);
   $14 = (($i$0) + 1)|0;
   if ($13) {
    $9$phi = $11;$11 = $10;$i$0 = $14;$9 = $9$phi;
   } else {
    break;
   }
  }
  $15 = (($base) + ($0)|0);
  $16 = (($15) + ($6)|0);
  $17 = ($16>>>0)>($base>>>0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($17) {
   $18 = $16;
   $20 = 1;$head$033 = $base;$pshift$034 = 1;
   while(1) {
    $19 = $20 & 3;
    $21 = ($19|0)==(3);
    do {
     if ($21) {
      _sift($head$033,$width,$cmp,$pshift$034,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $22 = $$pre$i >>> 2;
      $23 = $$pre1$i << 30;
      $24 = $23 | $22;
      HEAP32[$p>>2] = $24;
      $25 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $25;
      $26 = (($pshift$034) + 2)|0;
      $49 = $24;$pshift$1 = $26;
     } else {
      $27 = (($pshift$034) + -1)|0;
      $28 = (($lp) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $head$033;
      $31 = (($18) - ($30))|0;
      $32 = ($29>>>0)<($31>>>0);
      if ($32) {
       _sift($head$033,$width,$cmp,$pshift$034,$lp);
      } else {
       _trinkle($head$033,$width,$cmp,$p,$pshift$034,0,$lp);
      }
      $33 = ($pshift$034|0)==(1);
      if ($33) {
       $$pre$i4 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i5 = HEAP32[$p>>2]|0;
       $34 = $$pre$i4 << 1;
       $35 = $$pre1$i5 >>> 31;
       $36 = $35 | $34;
       HEAP32[$$phi$trans$insert$i>>2] = $36;
       $37 = $$pre1$i5 << 1;
       HEAP32[$p>>2] = $37;
       $49 = $37;$pshift$1 = 0;
       break;
      }
      $38 = ($27>>>0)>(31);
      if ($38) {
       $39 = (($pshift$034) + -33)|0;
       $40 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $40;
       HEAP32[$p>>2] = 0;
       $$0$i = $39;$42 = $40;$45 = 0;
      } else {
       $$pre$i10 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i11 = HEAP32[$p>>2]|0;
       $$0$i = $27;$42 = $$pre$i10;$45 = $$pre1$i11;
      }
      $41 = $42 << $$0$i;
      $43 = (32 - ($$0$i))|0;
      $44 = $45 >>> $43;
      $46 = $44 | $41;
      HEAP32[$$phi$trans$insert$i>>2] = $46;
      $47 = $45 << $$0$i;
      HEAP32[$p>>2] = $47;
      $49 = $47;$pshift$1 = 1;
     }
    } while(0);
    $48 = $49 | 1;
    HEAP32[$p>>2] = $48;
    $50 = (($head$033) + ($width)|0);
    $51 = ($50>>>0)<($16>>>0);
    if ($51) {
     $20 = $48;$head$033 = $50;$pshift$034 = $pshift$1;
    } else {
     $head$0$lcssa = $50;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $52 = ((($p)) + 4|0);
  $53 = ($pshift$0$lcssa|0)==(1);
  $54 = HEAP32[$p>>2]|0;
  $55 = ($54|0)==(1);
  $or$cond47 = $53 & $55;
  $56 = HEAP32[$52>>2]|0;
  $57 = ($56|0)==(0);
  $or$cond3848 = $or$cond47 & $57;
  if (!($or$cond3848)) {
   $116 = $57;$60 = $54;$69 = $56;$head$149 = $head$0$lcssa;$pshift$250 = $pshift$0$lcssa;
   while(1) {
    $58 = ($pshift$250|0)<(2);
    if ($58) {
     $59 = (($60) + -1)|0;
     $61 = ($59|0)==(0);
     do {
      if ($61) {
       $79 = 32;
       label = 28;
      } else {
       $62 = $59 & 1;
       $63 = ($62|0)==(0);
       if ($63) {
        $$02$i$i = $59;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $64 = (($nTrailingZeros$03$i$i) + 1)|0;
         $65 = $$02$i$i >>> 1;
         $66 = $65 & 1;
         $67 = ($66|0)==(0);
         if ($67) {
          $$02$i$i = $65;$nTrailingZeros$03$i$i = $64;
         } else {
          $76 = $64;
          break;
         }
        }
       } else {
        if ($116) {
         $$01$i5$i$ph = 32;
        } else {
         $68 = $69 & 1;
         $70 = ($68|0)==(0);
         if ($70) {
          $$02$i3$i = $69;$nTrailingZeros$03$i2$i = 0;
         } else {
          $$0$i29 = 0;$81 = $60;$84 = $69;$88 = 0;
          break;
         }
         while(1) {
          $71 = (($nTrailingZeros$03$i2$i) + 1)|0;
          $72 = $$02$i3$i >>> 1;
          $73 = $72 & 1;
          $74 = ($73|0)==(0);
          if ($74) {
           $$02$i3$i = $72;$nTrailingZeros$03$i2$i = $71;
          } else {
           $$01$i5$i$ph = $71;
           break;
          }
         }
        }
        $75 = (($$01$i5$i$ph) + 32)|0;
        $76 = $75;
       }
       $77 = ($76>>>0)>(31);
       if ($77) {
        $79 = $76;
        label = 28;
       } else {
        $$0$i29 = $76;$81 = $60;$84 = $69;$88 = $76;
       }
      }
     } while(0);
     if ((label|0) == 28) {
      label = 0;
      $78 = (($79) + -32)|0;
      HEAP32[$p>>2] = $69;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i29 = $78;$81 = $69;$84 = 0;$88 = $79;
     }
     $80 = $81 >>> $$0$i29;
     $82 = (32 - ($$0$i29))|0;
     $83 = $84 << $82;
     $85 = $83 | $80;
     HEAP32[$p>>2] = $85;
     $86 = $84 >>> $$0$i29;
     HEAP32[$$phi$trans$insert$i>>2] = $86;
     $87 = (($88) + ($pshift$250))|0;
     $$pre = (($head$149) + ($6)|0);
     $head$1$be = $$pre;$pshift$2$be = $87;
    } else {
     $89 = $69 << 2;
     $90 = $60 >>> 30;
     $91 = $90 | $89;
     $92 = (($pshift$250) + -2)|0;
     $93 = $60 << 1;
     $94 = $93 & 2147483646;
     $95 = $90 << 31;
     $96 = $94 | $95;
     $97 = $96 ^ 3;
     HEAP32[$p>>2] = $97;
     $98 = $91 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $98;
     $99 = (($lp) + ($92<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (0 - ($100))|0;
     $102 = (($head$149) + ($101)|0);
     $103 = (($102) + ($6)|0);
     $104 = (($pshift$250) + -1)|0;
     _trinkle($103,$width,$cmp,$p,$104,1,$lp);
     $$pre$i7 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i8 = HEAP32[$p>>2]|0;
     $105 = $$pre$i7 << 1;
     $106 = $$pre1$i8 >>> 31;
     $107 = $106 | $105;
     HEAP32[$$phi$trans$insert$i>>2] = $107;
     $108 = $$pre1$i8 << 1;
     $109 = $108 | 1;
     HEAP32[$p>>2] = $109;
     $110 = (($head$149) + ($6)|0);
     _trinkle($110,$width,$cmp,$p,$92,1,$lp);
     $head$1$be = $110;$pshift$2$be = $92;
    }
    $111 = ($pshift$2$be|0)==(1);
    $112 = HEAP32[$p>>2]|0;
    $113 = ($112|0)==(1);
    $or$cond = $111 & $113;
    $114 = HEAP32[$52>>2]|0;
    $115 = ($114|0)==(0);
    $or$cond38 = $or$cond & $115;
    if ($or$cond38) {
     break;
    } else {
     $116 = $115;$60 = $112;$69 = $114;$head$149 = $head$1$be;$pshift$250 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$8 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (0 - ($5))|0;
    $7 = (($2) + ($6)|0);
    $9 = (FUNCTION_TABLE_iii[$cmp & 31]($8,$7)|0);
    $10 = ($9|0)>(-1);
    if ($10) {
     $11 = (FUNCTION_TABLE_iii[$cmp & 31]($8,$2)|0);
     $12 = ($11|0)>(-1);
     if ($12) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $13 = (FUNCTION_TABLE_iii[$cmp & 31]($7,$2)|0);
    $14 = ($13|0)>(-1);
    $15 = (($i$04) + 1)|0;
    $16 = (($ar) + ($i$04<<2)|0);
    if ($14) {
     HEAP32[$16>>2] = $7;
     $17 = (($$012) + -1)|0;
     $$0$be = $7;$$01$be = $17;
    } else {
     HEAP32[$16>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $18 = ($$01$be|0)>(1);
    if (!($18)) {
     $i$0$lcssa = $15;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$8 = $$pre;$i$04 = $15;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa32 = 0, $$01$i5$i$ph = 0, $$01245 = 0, $$01245$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa34 = 0, $$021047 = 0, $$03$lcssa = 0, $$03948 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ar = 0, $i$0$lcssa = 0, $i$0$lcssa33 = 0, $i$01146 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $p$sroa$0$0849 = 0, $p$sroa$8$0650 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 31]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01245 = $head;$$021047 = $pshift;$$03948 = $phitmp;$18 = $10;$i$01146 = 1;$p$sroa$0$0849 = $0;$p$sroa$8$0650 = $2;
    while(1) {
     $13 = ($$021047|0)>(1);
     $or$cond = $$03948 & $13;
     if ($or$cond) {
      $14 = (($$01245) + ($3)|0);
      $15 = (($$021047) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 31]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa32 = $$01245;$$02$lcssa34 = $$021047;$i$0$lcssa33 = $i$01146;
       label = 19;
       break L1;
      }
      $21 = (0 - ($17))|0;
      $22 = (($14) + ($21)|0);
      $23 = (FUNCTION_TABLE_iii[$cmp & 31]($22,$18)|0);
      $24 = ($23|0)>(-1);
      if ($24) {
       $$0$lcssa32 = $$01245;$$02$lcssa34 = $$021047;$i$0$lcssa33 = $i$01146;
       label = 19;
       break L1;
      }
     }
     $25 = (($i$01146) + 1)|0;
     $26 = (($ar) + ($i$01146<<2)|0);
     HEAP32[$26>>2] = $18;
     $27 = (($p$sroa$0$0849) + -1)|0;
     $28 = ($27|0)==(0);
     do {
      if ($28) {
       $46 = 32;
       label = 15;
      } else {
       $29 = $27 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $27;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $43 = $31;
          break;
         }
        }
       } else {
        $35 = ($p$sroa$8$0650|0)==(0);
        if ($35) {
         $$01$i5$i$ph = 32;
        } else {
         $36 = $p$sroa$8$0650 & 1;
         $37 = ($36|0)==(0);
         if ($37) {
          $$02$i3$i = $p$sroa$8$0650;$nTrailingZeros$03$i2$i = 0;
         } else {
          $$0$i = 0;$48 = $p$sroa$0$0849;$51 = $p$sroa$8$0650;$55 = 0;
          break;
         }
         while(1) {
          $38 = (($nTrailingZeros$03$i2$i) + 1)|0;
          $39 = $$02$i3$i >>> 1;
          $40 = $39 & 1;
          $41 = ($40|0)==(0);
          if ($41) {
           $$02$i3$i = $39;$nTrailingZeros$03$i2$i = $38;
          } else {
           $$01$i5$i$ph = $38;
           break;
          }
         }
        }
        $42 = (($$01$i5$i$ph) + 32)|0;
        $43 = $42;
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $p$sroa$0$0849;$51 = $p$sroa$8$0650;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $p$sroa$8$0650;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$021047))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa32 = $18;$$02$lcssa34 = $54;$i$0$lcssa33 = $25;
      label = 19;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($18) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 31]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $18;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $25;
      label = 18;
      break;
     } else {
      $$01245$phi = $18;$$021047 = $54;$$03948 = 1;$18 = $62;$i$01146 = $25;$p$sroa$0$0849 = $52;$p$sroa$8$0650 = $53;$$01245 = $$01245$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa32 = $$0$lcssa;$$02$lcssa34 = $$02$lcssa;$i$0$lcssa33 = $i$0$lcssa;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _cycle($width,$ar,$i$0$lcssa33);
  _sift($$0$lcssa32,$width,$cmp,$$02$lcssa34,$lp);
 }
 STACKTOP = sp;return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 63]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(-1);
 do {
  if ($0) {
   $$1 = -1;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if ($3) {
    $4 = (___lockfile($f)|0);
    $16 = $4;
   } else {
    $16 = 0;
   }
   $5 = ((($f)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = (___toread($f)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $10 = ((($f)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($f)) + 44|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + -8|0);
    $15 = ($11>>>0)>($14>>>0);
    if ($15) {
     $18 = $c&255;
     $19 = ((($11)) + -1|0);
     HEAP32[$10>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$f>>2]|0;
     $21 = $20 & -17;
     HEAP32[$f>>2] = $21;
     $22 = ($16|0)==(0);
     if ($22) {
      $$1 = $c;
      break;
     }
     ___unlockfile($f);
     $$1 = $c;
     break;
    }
   }
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = -1;
   } else {
    ___unlockfile($f);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall10(10,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = 0;
 } else {
  $3 = (___errno_location()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(21);
  if ($5) {
   HEAP32[$vararg_buffer1>>2] = $path;
   $6 = (___syscall40(40,($vararg_buffer1|0))|0);
   $7 = (___syscall_ret($6)|0);
   $8 = $7;
  } else {
   $8 = $1;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 63]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $31 = ($30|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($30|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _poll($fds,$n,$timeout) {
 $fds = $fds|0;
 $n = $n|0;
 $timeout = $timeout|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fds;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $n;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $timeout;
 $0 = (___syscall168(168,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _wcstox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf = 0, $f = 0, $t$0 = 0, $t$0$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 112|0;
 $f = sp;
 $0 = ((($f)) + 8|0);
 $1 = ((($f)) + 4|0);
 $2 = ((($buf)) + 4|0);
 $3 = ((($f)) + 44|0);
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = $2;
 $4 = ((($f)) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = ((($f)) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = ((($f)) + 32|0);
 HEAP32[$6>>2] = 33;
 $t$0 = $s;
 while(1) {
  $7 = HEAP32[$t$0>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = ((($t$0)) + 4|0);
  if ($9) {
   $t$0$lcssa = $t$0;
   break;
  } else {
   $t$0 = $10;
  }
 }
 $11 = ((($f)) + 84|0);
 HEAP32[$11>>2] = $t$0$lcssa;
 ___shlim($f,0);
 $12 = (+___floatscan($f,$prec,1));
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ((($f)) + 108|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($16) - ($17))|0;
  $19 = (($18) + ($15))|0;
  $20 = ($19|0)==(0);
  $21 = (($t$0$lcssa) + ($19<<2)|0);
  $22 = $20 ? $s : $21;
  HEAP32[$p>>2] = $22;
 }
 STACKTOP = sp;return (+$12);
}
function _do_read_640($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$cast = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $$ = $3 ? $1 : 5848;
 $4 = ((($f)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre = ((($f)) + 44|0);
 L1: do {
  if ($6) {
   $i$0$lcssa = 0;
  } else {
   $i$03 = 0;
   while(1) {
    $7 = (($$) + ($i$03<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $i$0$lcssa = $i$03;
     break L1;
    }
    $10 = ($8|0)<(128);
    $11 = $8&255;
    $12 = $10 ? $11 : 64;
    $13 = HEAP32[$$pre>>2]|0;
    $14 = (($13) + ($i$03)|0);
    HEAP8[$14>>0] = $12;
    $15 = (($i$03) + 1)|0;
    $16 = HEAP32[$4>>2]|0;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $i$03 = $15;
    } else {
     $i$0$lcssa = $15;
     break;
    }
   }
  }
 } while(0);
 $18 = HEAP32[$$pre>>2]|0;
 $19 = ((($f)) + 4|0);
 HEAP32[$19>>2] = $18;
 $$cast = $18;
 $20 = (($$cast) + ($i$0$lcssa)|0);
 $21 = ((($f)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = (($$) + ($i$0$lcssa<<2)|0);
 HEAP32[$0>>2] = $22;
 $23 = ($i$0$lcssa|0)!=(0);
 $24 = ($len|0)!=(0);
 $or$cond = $24 & $23;
 if ($or$cond) {
  $25 = ((($$cast)) + 1|0);
  HEAP32[$19>>2] = $25;
  $26 = HEAP8[$$cast>>0]|0;
  HEAP8[$buf>>0] = $26;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _wcstod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_wcstox($s,$p,1));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 41312;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 41312;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[22134]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (88576 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[22134] = $22;
     } else {
      $23 = HEAP32[(88552)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(88544)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (88576 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[22134] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(88552)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(88544)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(88556)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (88576 + ($93<<2)|0);
      $95 = HEAP32[22134]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[22134] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(88552)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(88544)>>2] = $82;
     HEAP32[(88556)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(88540)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (88840 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(88552)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (88840 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(88540)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(88540)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(88552)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(88552)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(88552)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(88544)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(88556)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (88576 + ($231<<2)|0);
       $233 = HEAP32[22134]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[22134] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(88552)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(88544)>>2] = $rsize$0$i$lcssa;
      HEAP32[(88556)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(88540)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (88840 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (88840 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(88544)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(88552)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (88840 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(88540)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(88540)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(88552)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(88552)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(88552)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (88576 + ($428<<2)|0);
          $430 = HEAP32[22134]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[22134] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(88552)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (88840 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(88540)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(88540)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(88552)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(88552)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(88544)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(88556)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(88556)>>2] = $514;
   HEAP32[(88544)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(88544)>>2] = 0;
   HEAP32[(88556)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(88548)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(88548)>>2] = $529;
  $530 = HEAP32[(88560)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(88560)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[22252]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(89016)>>2] = $539;
    HEAP32[(89012)>>2] = $539;
    HEAP32[(89020)>>2] = -1;
    HEAP32[(89024)>>2] = -1;
    HEAP32[(89028)>>2] = 0;
    HEAP32[(88980)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[22252] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(89016)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(88976)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(88968)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(88980)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(88560)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (88984);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(88548)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(89012)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(88968)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(88976)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(89016)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(88980)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(88980)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(88968)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(88968)>>2] = $632;
  $633 = HEAP32[(88972)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(88972)>>2] = $632;
  }
  $635 = HEAP32[(88560)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(88552)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(88552)>>2] = $tbase$746$i;
    }
    HEAP32[(88984)>>2] = $tbase$746$i;
    HEAP32[(88988)>>2] = $tsize$745$i;
    HEAP32[(88996)>>2] = 0;
    $640 = HEAP32[22252]|0;
    HEAP32[(88572)>>2] = $640;
    HEAP32[(88568)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (88576 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(88560)>>2] = $654;
    HEAP32[(88548)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(89024)>>2]|0;
    HEAP32[(88564)>>2] = $660;
   } else {
    $sp$068$i = (88984);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(88548)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(88560)>>2] = $684;
       HEAP32[(88548)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(89024)>>2]|0;
       HEAP32[(88564)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(88552)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(88552)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (88984);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (88984);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(88548)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(88548)>>2] = $732;
        HEAP32[(88560)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(88556)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(88544)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(88544)>>2] = $738;
         HEAP32[(88556)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (88576 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[22134]|0;
            $765 = $764 & $763;
            HEAP32[22134] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (88840 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(88540)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(88540)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(88552)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(88552)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(88552)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (88576 + ($842<<2)|0);
         $844 = HEAP32[22134]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[22134] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(88552)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (88840 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(88540)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(88540)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(88552)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(88552)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (88984);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(88560)>>2] = $952;
    HEAP32[(88548)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(89024)>>2]|0;
    HEAP32[(88564)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(88984)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(88984)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(88984)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(88984)+12>>2]|0;
    HEAP32[(88984)>>2] = $tbase$746$i;
    HEAP32[(88988)>>2] = $tsize$745$i;
    HEAP32[(88996)>>2] = 0;
    HEAP32[(88992)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (88576 + ($973<<2)|0);
      $975 = HEAP32[22134]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[22134] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(88552)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (88840 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(88540)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(88540)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(88552)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(88552)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(88548)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(88548)>>2] = $1055;
   $1056 = HEAP32[(88560)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(88560)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(88552)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(88556)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(88544)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (88576 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[22134]|0;
     $37 = $36 & $35;
     HEAP32[22134] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (88840 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(88540)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(88540)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(88552)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(88552)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(88552)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(88560)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(88548)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(88548)>>2] = $122;
   HEAP32[(88560)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(88556)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(88556)>>2] = 0;
   HEAP32[(88544)>>2] = 0;
   return;
  }
  $127 = HEAP32[(88556)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(88544)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(88544)>>2] = $130;
   HEAP32[(88556)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (88576 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(88552)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[22134]|0;
     $154 = $153 & $152;
     HEAP32[22134] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(88552)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(88552)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(88552)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (88840 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(88540)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(88540)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(88552)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(88552)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(88552)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(88556)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(88544)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (88576 + ($235<<2)|0);
  $237 = HEAP32[22134]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[22134] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(88552)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (88840 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(88540)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(88540)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(88552)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(88552)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(88568)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(88568)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (88992);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(88568)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(88552)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(89016)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(88560)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(88548)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(88560)>>2] = $38;
  HEAP32[(88548)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(88556)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(88544)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(88544)>>2] = $storemerge1;
  HEAP32[(88556)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (88576 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[22134]|0;
    $91 = $90 & $89;
    HEAP32[22134] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (88840 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(88540)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(88540)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(88552)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(88552)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(88552)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(88552)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(88556)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(88544)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (88576 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[22134]|0;
     $32 = $31 & $30;
     HEAP32[22134] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (88840 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(88540)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(88540)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(88552)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(88552)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(88552)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(88552)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(88560)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(88548)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(88548)>>2] = $116;
   HEAP32[(88560)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(88556)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(88556)>>2] = 0;
   HEAP32[(88544)>>2] = 0;
   return;
  }
  $121 = HEAP32[(88556)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(88544)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(88544)>>2] = $124;
   HEAP32[(88556)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (88576 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[22134]|0;
     $147 = $146 & $145;
     HEAP32[22134] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (88840 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(88540)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(88540)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(88552)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(88552)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(88552)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(88556)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(88544)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (88576 + ($225<<2)|0);
  $227 = HEAP32[22134]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[22134] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(88552)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (88840 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(88540)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(88540)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(88552)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(88552)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,136,104,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 31]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 31]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 31]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 31]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 31]($45,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 31]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off02) {
          label = 17;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$0$off02) {
        label = 17;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $43 = 3;
     }
     HEAP32[$20>>2] = $43;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 31]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36501|0);
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 7]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (5944);
  ___cxa_throw(($5|0),(160|0),(23|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[22258]|0;HEAP32[22258] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function jsCall_v_0() {
  
  jsCall_v(0);
}



function jsCall_v_1() {
  
  jsCall_v(1);
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}


function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,___stdio_read,_do_read,_do_read_640,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,jsCall_vi_0,b2,jsCall_vi_1,b2,b2,b2,b2,b2,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,b2,b2,__ZN12EspeakWorkerC2Ev
,_cleanup,_cleanup_397,b2];
var FUNCTION_TABLE_ii = [b3,b3,jsCall_ii_0,b3,jsCall_ii_1,b3,___stdio_close,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt9bad_alloc4whatEv,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,b4,jsCall_v_0,b4,jsCall_v_1,b4,b4,b4];
var FUNCTION_TABLE_viiiiii = [b5,b5,jsCall_viiiiii_0,b5,jsCall_viiiiii_1,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b5,b5,b5,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,b6,jsCall_iii_0,b6,jsCall_iii_1,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZL15VoiceNameSorterPKvS0_,__ZL16VoiceScoreSorterPKvS0_,b6
,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,b7,jsCall_viiii_0,b7,jsCall_viiii_1,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b7,b7,b7,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b7,b7,b7,b7,b7,b7
,b7,b7,b7];

  return { _emscripten_bind_espeak_VOICE_get_variant_0: _emscripten_bind_espeak_VOICE_get_variant_0, _emscripten_bind_espeak_VOICE_get_xx1_0: _emscripten_bind_espeak_VOICE_get_xx1_0, _emscripten_bind_espeak_VOICE_set_spare_1: _emscripten_bind_espeak_VOICE_set_spare_1, _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0: _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0, _emscripten_bind_espeak_VOICE_set_identifier_1: _emscripten_bind_espeak_VOICE_set_identifier_1, _bitshift64Lshr: _bitshift64Lshr, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED, _emscripten_bind_espeak_VOICE___destroy___0: _emscripten_bind_espeak_VOICE___destroy___0, _emscripten_bind_espeak_VOICE_set_variant_1: _emscripten_bind_espeak_VOICE_set_variant_1, _emscripten_bind_espeak_VOICE_get_score_0: _emscripten_bind_espeak_VOICE_get_score_0, _emscripten_bind_EspeakWorker_set_pitch_1: _emscripten_bind_EspeakWorker_set_pitch_1, _emscripten_bind_espeak_VOICE_set_gender_1: _emscripten_bind_espeak_VOICE_set_gender_1, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE, _fflush: _fflush, _emscripten_bind_espeak_EVENT_get_user_data_0: _emscripten_bind_espeak_EVENT_get_user_data_0, _emscripten_bind_espeak_VOICE_get_name_0: _emscripten_bind_espeak_VOICE_get_name_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY, ___errno_location: ___errno_location, _emscripten_bind_VoidPtr___destroy___0: _emscripten_bind_VoidPtr___destroy___0, _emscripten_bind_espeak_EVENT_get_unique_identifier_0: _emscripten_bind_espeak_EVENT_get_unique_identifier_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD, _emscripten_bind_EspeakWorker_get_samplerate_0: _emscripten_bind_EspeakWorker_get_samplerate_0, _memcpy: _memcpy, _emscripten_bind_espeak_EVENT___destroy___0: _emscripten_bind_espeak_EVENT___destroy___0, _emscripten_bind_EspeakWorker_synth__2: _emscripten_bind_EspeakWorker_synth__2, _emscripten_bind_espeak_EVENT_get_length_0: _emscripten_bind_espeak_EVENT_get_length_0, _emscripten_bind_EspeakWorker_EspeakWorker_0: _emscripten_bind_EspeakWorker_EspeakWorker_0, _emscripten_bind_espeak_EVENT_get_type_0: _emscripten_bind_espeak_EVENT_get_type_0, _bitshift64Shl: _bitshift64Shl, _i64Subtract: _i64Subtract, _emscripten_bind_espeak_VOICE_set_name_1: _emscripten_bind_espeak_VOICE_set_name_1, _memset: _memset, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE, _i64Add: _i64Add, _emscripten_bind_EspeakWorker_setVoice_5: _emscripten_bind_EspeakWorker_setVoice_5, _emscripten_bind_EspeakWorker_setVoice_3: _emscripten_bind_EspeakWorker_setVoice_3, _emscripten_bind_EspeakWorker_setVoice_2: _emscripten_bind_EspeakWorker_setVoice_2, _emscripten_bind_espeak_VOICE_set_xx1_1: _emscripten_bind_espeak_VOICE_set_xx1_1, _emscripten_bind_espeak_VOICE_get_languages_1: _emscripten_bind_espeak_VOICE_get_languages_1, _emscripten_bind_EspeakWorker_setVoice_4: _emscripten_bind_EspeakWorker_setVoice_4, _emscripten_bind_espeak_VOICE_get_identifier_0: _emscripten_bind_espeak_VOICE_get_identifier_0, _emscripten_bind_espeak_EVENT_get_text_position_0: _emscripten_bind_espeak_EVENT_get_text_position_0, _emscripten_bind_espeak_VOICE_get_age_0: _emscripten_bind_espeak_VOICE_get_age_0, _emscripten_bind_espeak_VOICE_get_spare_0: _emscripten_bind_espeak_VOICE_get_spare_0, _emscripten_bind_EspeakWorker_get_pitch_0: _emscripten_bind_EspeakWorker_get_pitch_0, _emscripten_bind_EspeakWorker_set_rate_1: _emscripten_bind_EspeakWorker_set_rate_1, _emscripten_bind_EspeakWorker_set_voices_2: _emscripten_bind_EspeakWorker_set_voices_2, _emscripten_bind_EspeakWorker___destroy___0: _emscripten_bind_EspeakWorker___destroy___0, _emscripten_bind_espeak_VOICE_get_gender_0: _emscripten_bind_espeak_VOICE_get_gender_0, _free: _free, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END, _emscripten_bind_espeak_VOICE_set_age_1: _emscripten_bind_espeak_VOICE_set_age_1, _memmove: _memmove, _emscripten_bind_EspeakWorker_get_rate_0: _emscripten_bind_EspeakWorker_get_rate_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED, _malloc: _malloc, _emscripten_bind_espeak_EVENT_get_sample_0: _emscripten_bind_espeak_EVENT_get_sample_0, _emscripten_bind_EspeakWorker_get_voices_1: _emscripten_bind_EspeakWorker_get_voices_1, _emscripten_bind_espeak_VOICE_set_score_1: _emscripten_bind_espeak_VOICE_set_score_1, _emscripten_bind_espeak_EVENT_get_audio_position_0: _emscripten_bind_espeak_EVENT_get_audio_position_0, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK, _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME: _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__emscripten_bind_espeak_VOICE_get_xx1_0 = asm["_emscripten_bind_espeak_VOICE_get_xx1_0"]; asm["_emscripten_bind_espeak_VOICE_get_xx1_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_xx1_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_spare_1 = asm["_emscripten_bind_espeak_VOICE_set_spare_1"]; asm["_emscripten_bind_espeak_VOICE_set_spare_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_spare_1.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_getSizeOfEventStruct__0 = asm["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"]; asm["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_getSizeOfEventStruct__0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_unique_identifier_0 = asm["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"]; asm["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_unique_identifier_0.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE___destroy___0 = asm["_emscripten_bind_espeak_VOICE___destroy___0"]; asm["_emscripten_bind_espeak_VOICE___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_variant_1 = asm["_emscripten_bind_espeak_VOICE_set_variant_1"]; asm["_emscripten_bind_espeak_VOICE_set_variant_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_variant_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_score_0 = asm["_emscripten_bind_espeak_VOICE_get_score_0"]; asm["_emscripten_bind_espeak_VOICE_get_score_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_score_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_sample_0 = asm["_emscripten_bind_espeak_EVENT_get_sample_0"]; asm["_emscripten_bind_espeak_EVENT_get_sample_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_sample_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_set_pitch_1 = asm["_emscripten_bind_EspeakWorker_set_pitch_1"]; asm["_emscripten_bind_EspeakWorker_set_pitch_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_set_pitch_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_gender_1 = asm["_emscripten_bind_espeak_VOICE_set_gender_1"]; asm["_emscripten_bind_espeak_VOICE_set_gender_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_gender_1.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_name_0 = asm["_emscripten_bind_espeak_VOICE_get_name_0"]; asm["_emscripten_bind_espeak_VOICE_get_name_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_name_0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker___destroy___0 = asm["_emscripten_bind_EspeakWorker___destroy___0"]; asm["_emscripten_bind_EspeakWorker___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_VoidPtr___destroy___0 = asm["_emscripten_bind_VoidPtr___destroy___0"]; asm["_emscripten_bind_VoidPtr___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_VoidPtr___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_identifier_1 = asm["_emscripten_bind_espeak_VOICE_set_identifier_1"]; asm["_emscripten_bind_espeak_VOICE_set_identifier_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_identifier_1.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_samplerate_0 = asm["_emscripten_bind_EspeakWorker_get_samplerate_0"]; asm["_emscripten_bind_EspeakWorker_get_samplerate_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_samplerate_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT___destroy___0 = asm["_emscripten_bind_espeak_EVENT___destroy___0"]; asm["_emscripten_bind_espeak_EVENT___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_synth__2 = asm["_emscripten_bind_EspeakWorker_synth__2"]; asm["_emscripten_bind_EspeakWorker_synth__2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_synth__2.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_length_0 = asm["_emscripten_bind_espeak_EVENT_get_length_0"]; asm["_emscripten_bind_espeak_EVENT_get_length_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_length_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_EspeakWorker_0 = asm["_emscripten_bind_EspeakWorker_EspeakWorker_0"]; asm["_emscripten_bind_EspeakWorker_EspeakWorker_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_EspeakWorker_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_type_0 = asm["_emscripten_bind_espeak_EVENT_get_type_0"]; asm["_emscripten_bind_espeak_EVENT_get_type_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_type_0.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_variant_0 = asm["_emscripten_bind_espeak_VOICE_get_variant_0"]; asm["_emscripten_bind_espeak_VOICE_get_variant_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_variant_0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_3 = asm["_emscripten_bind_EspeakWorker_setVoice_3"]; asm["_emscripten_bind_EspeakWorker_setVoice_3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_3.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_2 = asm["_emscripten_bind_EspeakWorker_setVoice_2"]; asm["_emscripten_bind_EspeakWorker_setVoice_2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_2.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_5 = asm["_emscripten_bind_EspeakWorker_setVoice_5"]; asm["_emscripten_bind_EspeakWorker_setVoice_5"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_5.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_setVoice_4 = asm["_emscripten_bind_EspeakWorker_setVoice_4"]; asm["_emscripten_bind_EspeakWorker_setVoice_4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_setVoice_4.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_xx1_1 = asm["_emscripten_bind_espeak_VOICE_set_xx1_1"]; asm["_emscripten_bind_espeak_VOICE_set_xx1_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_xx1_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_identifier_0 = asm["_emscripten_bind_espeak_VOICE_get_identifier_0"]; asm["_emscripten_bind_espeak_VOICE_get_identifier_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_identifier_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_name_1 = asm["_emscripten_bind_espeak_VOICE_set_name_1"]; asm["_emscripten_bind_espeak_VOICE_set_name_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_name_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_age_0 = asm["_emscripten_bind_espeak_VOICE_get_age_0"]; asm["_emscripten_bind_espeak_VOICE_get_age_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_age_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_spare_0 = asm["_emscripten_bind_espeak_VOICE_get_spare_0"]; asm["_emscripten_bind_espeak_VOICE_get_spare_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_spare_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_pitch_0 = asm["_emscripten_bind_EspeakWorker_get_pitch_0"]; asm["_emscripten_bind_EspeakWorker_get_pitch_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_pitch_0.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_set_rate_1 = asm["_emscripten_bind_EspeakWorker_set_rate_1"]; asm["_emscripten_bind_EspeakWorker_set_rate_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_set_rate_1.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_set_voices_2 = asm["_emscripten_bind_EspeakWorker_set_voices_2"]; asm["_emscripten_bind_EspeakWorker_set_voices_2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_set_voices_2.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_languages_1 = asm["_emscripten_bind_espeak_VOICE_get_languages_1"]; asm["_emscripten_bind_espeak_VOICE_get_languages_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_languages_1.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_text_position_0 = asm["_emscripten_bind_espeak_EVENT_get_text_position_0"]; asm["_emscripten_bind_espeak_EVENT_get_text_position_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_text_position_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_user_data_0 = asm["_emscripten_bind_espeak_EVENT_get_user_data_0"]; asm["_emscripten_bind_espeak_EVENT_get_user_data_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_user_data_0.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_rate_0 = asm["_emscripten_bind_EspeakWorker_get_rate_0"]; asm["_emscripten_bind_EspeakWorker_get_rate_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_rate_0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_age_1 = asm["_emscripten_bind_espeak_VOICE_set_age_1"]; asm["_emscripten_bind_espeak_VOICE_set_age_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_age_1.apply(null, arguments);
};

var real__emscripten_bind_EspeakWorker_get_voices_1 = asm["_emscripten_bind_EspeakWorker_get_voices_1"]; asm["_emscripten_bind_EspeakWorker_get_voices_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_EspeakWorker_get_voices_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_get_gender_0 = asm["_emscripten_bind_espeak_VOICE_get_gender_0"]; asm["_emscripten_bind_espeak_VOICE_get_gender_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_get_gender_0.apply(null, arguments);
};

var real__emscripten_bind_espeak_VOICE_set_score_1 = asm["_emscripten_bind_espeak_VOICE_set_score_1"]; asm["_emscripten_bind_espeak_VOICE_set_score_1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_VOICE_set_score_1.apply(null, arguments);
};

var real__emscripten_bind_espeak_EVENT_get_audio_position_0 = asm["_emscripten_bind_espeak_EVENT_get_audio_position_0"]; asm["_emscripten_bind_espeak_EVENT_get_audio_position_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_espeak_EVENT_get_audio_position_0.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK.apply(null, arguments);
};

var real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"]; asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME.apply(null, arguments);
};
var _emscripten_bind_espeak_VOICE_get_xx1_0 = Module["_emscripten_bind_espeak_VOICE_get_xx1_0"] = asm["_emscripten_bind_espeak_VOICE_get_xx1_0"];
var _emscripten_bind_espeak_VOICE_set_spare_1 = Module["_emscripten_bind_espeak_VOICE_set_spare_1"] = asm["_emscripten_bind_espeak_VOICE_set_spare_1"];
var _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0 = Module["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"] = asm["_emscripten_bind_EspeakWorker_getSizeOfEventStruct__0"];
var _emscripten_bind_espeak_EVENT_get_unique_identifier_0 = Module["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"] = asm["_emscripten_bind_espeak_EVENT_get_unique_identifier_0"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _emscripten_bind_espeak_VOICE___destroy___0 = Module["_emscripten_bind_espeak_VOICE___destroy___0"] = asm["_emscripten_bind_espeak_VOICE___destroy___0"];
var _emscripten_bind_espeak_VOICE_set_variant_1 = Module["_emscripten_bind_espeak_VOICE_set_variant_1"] = asm["_emscripten_bind_espeak_VOICE_set_variant_1"];
var _emscripten_bind_espeak_VOICE_get_score_0 = Module["_emscripten_bind_espeak_VOICE_get_score_0"] = asm["_emscripten_bind_espeak_VOICE_get_score_0"];
var _emscripten_bind_espeak_EVENT_get_sample_0 = Module["_emscripten_bind_espeak_EVENT_get_sample_0"] = asm["_emscripten_bind_espeak_EVENT_get_sample_0"];
var _emscripten_bind_EspeakWorker_set_pitch_1 = Module["_emscripten_bind_EspeakWorker_set_pitch_1"] = asm["_emscripten_bind_EspeakWorker_set_pitch_1"];
var _emscripten_bind_espeak_VOICE_set_gender_1 = Module["_emscripten_bind_espeak_VOICE_set_gender_1"] = asm["_emscripten_bind_espeak_VOICE_set_gender_1"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _emscripten_bind_espeak_VOICE_get_name_0 = Module["_emscripten_bind_espeak_VOICE_get_name_0"] = asm["_emscripten_bind_espeak_VOICE_get_name_0"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY"];
var _emscripten_bind_EspeakWorker___destroy___0 = Module["_emscripten_bind_EspeakWorker___destroy___0"] = asm["_emscripten_bind_EspeakWorker___destroy___0"];
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = asm["_emscripten_bind_VoidPtr___destroy___0"];
var _emscripten_bind_espeak_VOICE_set_identifier_1 = Module["_emscripten_bind_espeak_VOICE_set_identifier_1"] = asm["_emscripten_bind_espeak_VOICE_set_identifier_1"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD"];
var _emscripten_bind_EspeakWorker_get_samplerate_0 = Module["_emscripten_bind_EspeakWorker_get_samplerate_0"] = asm["_emscripten_bind_EspeakWorker_get_samplerate_0"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_bind_espeak_EVENT___destroy___0 = Module["_emscripten_bind_espeak_EVENT___destroy___0"] = asm["_emscripten_bind_espeak_EVENT___destroy___0"];
var _emscripten_bind_EspeakWorker_synth__2 = Module["_emscripten_bind_EspeakWorker_synth__2"] = asm["_emscripten_bind_EspeakWorker_synth__2"];
var _emscripten_bind_espeak_EVENT_get_length_0 = Module["_emscripten_bind_espeak_EVENT_get_length_0"] = asm["_emscripten_bind_espeak_EVENT_get_length_0"];
var _emscripten_bind_EspeakWorker_EspeakWorker_0 = Module["_emscripten_bind_EspeakWorker_EspeakWorker_0"] = asm["_emscripten_bind_EspeakWorker_EspeakWorker_0"];
var _emscripten_bind_espeak_EVENT_get_type_0 = Module["_emscripten_bind_espeak_EVENT_get_type_0"] = asm["_emscripten_bind_espeak_EVENT_get_type_0"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _emscripten_bind_espeak_VOICE_get_variant_0 = Module["_emscripten_bind_espeak_VOICE_get_variant_0"] = asm["_emscripten_bind_espeak_VOICE_get_variant_0"];
var _memset = Module["_memset"] = asm["_memset"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED"];
var _emscripten_bind_EspeakWorker_setVoice_3 = Module["_emscripten_bind_EspeakWorker_setVoice_3"] = asm["_emscripten_bind_EspeakWorker_setVoice_3"];
var _emscripten_bind_EspeakWorker_setVoice_2 = Module["_emscripten_bind_EspeakWorker_setVoice_2"] = asm["_emscripten_bind_EspeakWorker_setVoice_2"];
var _emscripten_bind_EspeakWorker_setVoice_5 = Module["_emscripten_bind_EspeakWorker_setVoice_5"] = asm["_emscripten_bind_EspeakWorker_setVoice_5"];
var _emscripten_bind_EspeakWorker_setVoice_4 = Module["_emscripten_bind_EspeakWorker_setVoice_4"] = asm["_emscripten_bind_EspeakWorker_setVoice_4"];
var _emscripten_bind_espeak_VOICE_set_xx1_1 = Module["_emscripten_bind_espeak_VOICE_set_xx1_1"] = asm["_emscripten_bind_espeak_VOICE_set_xx1_1"];
var _emscripten_bind_espeak_VOICE_get_identifier_0 = Module["_emscripten_bind_espeak_VOICE_get_identifier_0"] = asm["_emscripten_bind_espeak_VOICE_get_identifier_0"];
var _emscripten_bind_espeak_VOICE_set_name_1 = Module["_emscripten_bind_espeak_VOICE_set_name_1"] = asm["_emscripten_bind_espeak_VOICE_set_name_1"];
var _emscripten_bind_espeak_VOICE_get_age_0 = Module["_emscripten_bind_espeak_VOICE_get_age_0"] = asm["_emscripten_bind_espeak_VOICE_get_age_0"];
var _emscripten_bind_espeak_VOICE_get_spare_0 = Module["_emscripten_bind_espeak_VOICE_get_spare_0"] = asm["_emscripten_bind_espeak_VOICE_get_spare_0"];
var _emscripten_bind_EspeakWorker_get_pitch_0 = Module["_emscripten_bind_EspeakWorker_get_pitch_0"] = asm["_emscripten_bind_EspeakWorker_get_pitch_0"];
var _emscripten_bind_EspeakWorker_set_rate_1 = Module["_emscripten_bind_EspeakWorker_set_rate_1"] = asm["_emscripten_bind_EspeakWorker_set_rate_1"];
var _emscripten_bind_EspeakWorker_set_voices_2 = Module["_emscripten_bind_EspeakWorker_set_voices_2"] = asm["_emscripten_bind_EspeakWorker_set_voices_2"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _emscripten_bind_espeak_VOICE_get_languages_1 = Module["_emscripten_bind_espeak_VOICE_get_languages_1"] = asm["_emscripten_bind_espeak_VOICE_get_languages_1"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_bind_espeak_EVENT_get_text_position_0 = Module["_emscripten_bind_espeak_EVENT_get_text_position_0"] = asm["_emscripten_bind_espeak_EVENT_get_text_position_0"];
var _emscripten_bind_espeak_EVENT_get_user_data_0 = Module["_emscripten_bind_espeak_EVENT_get_user_data_0"] = asm["_emscripten_bind_espeak_EVENT_get_user_data_0"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _emscripten_bind_EspeakWorker_get_rate_0 = Module["_emscripten_bind_EspeakWorker_get_rate_0"] = asm["_emscripten_bind_EspeakWorker_get_rate_0"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_bind_espeak_VOICE_set_age_1 = Module["_emscripten_bind_espeak_VOICE_set_age_1"] = asm["_emscripten_bind_espeak_VOICE_set_age_1"];
var _emscripten_bind_EspeakWorker_get_voices_1 = Module["_emscripten_bind_EspeakWorker_get_voices_1"] = asm["_emscripten_bind_EspeakWorker_get_voices_1"];
var _emscripten_bind_espeak_VOICE_get_gender_0 = Module["_emscripten_bind_espeak_VOICE_get_gender_0"] = asm["_emscripten_bind_espeak_VOICE_get_gender_0"];
var _emscripten_bind_espeak_VOICE_set_score_1 = Module["_emscripten_bind_espeak_VOICE_set_score_1"] = asm["_emscripten_bind_espeak_VOICE_set_score_1"];
var _emscripten_bind_espeak_EVENT_get_audio_position_0 = Module["_emscripten_bind_espeak_EVENT_get_audio_position_0"] = asm["_emscripten_bind_espeak_EVENT_get_audio_position_0"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK"];
var _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME = Module["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"] = asm["_emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




// Bindings utilities

function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts big (string or array) values into a C-style storage, in temporary space

var ensureCache = {
  buffer: 0,  // the main buffer of temporary storage
  size: 0,   // the size of buffer
  pos: 0,    // the next free offset in buffer
  temps: [], // extra allocations
  needed: 0, // the total size we need next time

  prepare: function() {
    if (this.needed) {
      // clear the temps
      for (var i = 0; i < this.temps.length; i++) {
        Module['_free'](this.temps[i]);
      }
      this.temps.length = 0;
      // prepare to allocate a bigger buffer
      Module['_free'](this.buffer);
      this.buffer = 0;
      this.size += this.needed;
      // clean up
      this.needed = 0;
    }
    if (!this.buffer) { // happens first time, or when we need to grow
      this.size += 128; // heuristic, avoid many small grow events
      this.buffer = Module['_malloc'](this.size);
      assert(this.buffer);
    }
    this.pos = 0;
  },
  alloc: function(array, view) {
    assert(this.buffer);
    var bytes = view.BYTES_PER_ELEMENT;
    var len = array.length * bytes;
    len = (len + 7) & -8; // keep things aligned to 8 byte boundaries
    var ret;
    if (this.pos + len >= this.size) {
      // we failed to allocate in the buffer, this time around :(
      assert(len > 0); // null terminator, at least
      this.needed += len;
      ret = Module['_malloc'](len);
      this.temps.push(ret);
    } else {
      // we can allocate in the buffer
      ret = this.buffer + this.pos;
      this.pos += len;
    }
    var retShifted = ret;
    switch (bytes) {
      case 2: retShifted >>= 1; break;
      case 4: retShifted >>= 2; break;
      case 8: retShifted >>= 3; break;
    }
    for (var i = 0; i < array.length; i++) {
      view[retShifted + i] = array[i];
    }
    return ret;
  },
};

function ensureString(value) {
  if (typeof value === 'string') return ensureCache.alloc(intArrayFromString(value), HEAP8);
  return value;
}
function ensureInt8(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAP8);
  return value;
}
function ensureInt16(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAP16);
  return value;
}
function ensureInt32(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAP32);
  return value;
}
function ensureFloat32(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAPF32);
  return value;
}
function ensureFloat64(value) {
  if (typeof value === 'object') return ensureCache.alloc(value, HEAPF64);
  return value;
}


// espeak_VOICE
function espeak_VOICE() { throw "cannot construct a espeak_VOICE, no constructor in IDL" }
espeak_VOICE.prototype = Object.create(WrapperObject.prototype);
espeak_VOICE.prototype.constructor = espeak_VOICE;
espeak_VOICE.prototype.__class__ = espeak_VOICE;
espeak_VOICE.__cache__ = {};
Module['espeak_VOICE'] = espeak_VOICE;

  espeak_VOICE.prototype['get_name'] = espeak_VOICE.prototype.get_name = function() {
  var self = this.ptr;
  return Pointer_stringify(_emscripten_bind_espeak_VOICE_get_name_0(self));
};
    espeak_VOICE.prototype['set_name'] = espeak_VOICE.prototype.set_name = function(arg0) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_espeak_VOICE_set_name_1(self, arg0);
};
  espeak_VOICE.prototype['get_languages'] = espeak_VOICE.prototype.get_languages = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  return _emscripten_bind_espeak_VOICE_get_languages_1(self, arg0);
};
  espeak_VOICE.prototype['get_identifier'] = espeak_VOICE.prototype.get_identifier = function() {
  var self = this.ptr;
  return Pointer_stringify(_emscripten_bind_espeak_VOICE_get_identifier_0(self));
};
    espeak_VOICE.prototype['set_identifier'] = espeak_VOICE.prototype.set_identifier = function(arg0) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_espeak_VOICE_set_identifier_1(self, arg0);
};
  espeak_VOICE.prototype['get_gender'] = espeak_VOICE.prototype.get_gender = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_gender_0(self);
};
    espeak_VOICE.prototype['set_gender'] = espeak_VOICE.prototype.set_gender = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_gender_1(self, arg0);
};
  espeak_VOICE.prototype['get_age'] = espeak_VOICE.prototype.get_age = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_age_0(self);
};
    espeak_VOICE.prototype['set_age'] = espeak_VOICE.prototype.set_age = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_age_1(self, arg0);
};
  espeak_VOICE.prototype['get_variant'] = espeak_VOICE.prototype.get_variant = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_variant_0(self);
};
    espeak_VOICE.prototype['set_variant'] = espeak_VOICE.prototype.set_variant = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_variant_1(self, arg0);
};
  espeak_VOICE.prototype['get_xx1'] = espeak_VOICE.prototype.get_xx1 = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_xx1_0(self);
};
    espeak_VOICE.prototype['set_xx1'] = espeak_VOICE.prototype.set_xx1 = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_xx1_1(self, arg0);
};
  espeak_VOICE.prototype['get_score'] = espeak_VOICE.prototype.get_score = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_score_0(self);
};
    espeak_VOICE.prototype['set_score'] = espeak_VOICE.prototype.set_score = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_score_1(self, arg0);
};
  espeak_VOICE.prototype['get_spare'] = espeak_VOICE.prototype.get_spare = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_VOICE_get_spare_0(self);
};
    espeak_VOICE.prototype['set_spare'] = espeak_VOICE.prototype.set_spare = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_espeak_VOICE_set_spare_1(self, arg0);
};
  espeak_VOICE.prototype['__destroy__'] = espeak_VOICE.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_espeak_VOICE___destroy___0(self);
};
// VoidPtr
function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
};
// espeak_EVENT
function espeak_EVENT() { throw "cannot construct a espeak_EVENT, no constructor in IDL" }
espeak_EVENT.prototype = Object.create(WrapperObject.prototype);
espeak_EVENT.prototype.constructor = espeak_EVENT;
espeak_EVENT.prototype.__class__ = espeak_EVENT;
espeak_EVENT.__cache__ = {};
Module['espeak_EVENT'] = espeak_EVENT;

  espeak_EVENT.prototype['get_type'] = espeak_EVENT.prototype.get_type = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_type_0(self);
};
  espeak_EVENT.prototype['get_unique_identifier'] = espeak_EVENT.prototype.get_unique_identifier = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_unique_identifier_0(self);
};
  espeak_EVENT.prototype['get_text_position'] = espeak_EVENT.prototype.get_text_position = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_text_position_0(self);
};
  espeak_EVENT.prototype['get_length'] = espeak_EVENT.prototype.get_length = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_length_0(self);
};
  espeak_EVENT.prototype['get_audio_position'] = espeak_EVENT.prototype.get_audio_position = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_audio_position_0(self);
};
  espeak_EVENT.prototype['get_sample'] = espeak_EVENT.prototype.get_sample = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_sample_0(self);
};
  espeak_EVENT.prototype['get_user_data'] = espeak_EVENT.prototype.get_user_data = function() {
  var self = this.ptr;
  return _emscripten_bind_espeak_EVENT_get_user_data_0(self);
};
  espeak_EVENT.prototype['__destroy__'] = espeak_EVENT.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_espeak_EVENT___destroy___0(self);
};
// EspeakWorker
function EspeakWorker() {
  this.ptr = _emscripten_bind_EspeakWorker_EspeakWorker_0();
  getCache(EspeakWorker)[this.ptr] = this;
};;
EspeakWorker.prototype = Object.create(WrapperObject.prototype);
EspeakWorker.prototype.constructor = EspeakWorker;
EspeakWorker.prototype.__class__ = EspeakWorker;
EspeakWorker.__cache__ = {};
Module['EspeakWorker'] = EspeakWorker;

EspeakWorker.prototype['synth_'] = EspeakWorker.prototype.synth_ = function(arg0, arg1) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  _emscripten_bind_EspeakWorker_synth__2(self, arg0, arg1);
};;

EspeakWorker.prototype['getSizeOfEventStruct_'] = EspeakWorker.prototype.getSizeOfEventStruct_ = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_getSizeOfEventStruct__0(self);
};;

EspeakWorker.prototype['setVoice'] = EspeakWorker.prototype.setVoice = function(arg0, arg1, arg2, arg3, arg4) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  if (arg4 && typeof arg4 === 'object') arg4 = arg4.ptr;
  if (arg2 === undefined) { _emscripten_bind_EspeakWorker_setVoice_2(self, arg0, arg1);  return }
  if (arg3 === undefined) { _emscripten_bind_EspeakWorker_setVoice_3(self, arg0, arg1, arg2);  return }
  if (arg4 === undefined) { _emscripten_bind_EspeakWorker_setVoice_4(self, arg0, arg1, arg2, arg3);  return }
  _emscripten_bind_EspeakWorker_setVoice_5(self, arg0, arg1, arg2, arg3, arg4);
};;

  EspeakWorker.prototype['get_voices'] = EspeakWorker.prototype.get_voices = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  return wrapPointer(_emscripten_bind_EspeakWorker_get_voices_1(self, arg0), espeak_VOICE);
};
    EspeakWorker.prototype['set_voices'] = EspeakWorker.prototype.set_voices = function(arg0, arg1) {
  var self = this.ptr;
  ensureCache.prepare();
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  _emscripten_bind_EspeakWorker_set_voices_2(self, arg0, arg1);
};
  EspeakWorker.prototype['get_samplerate'] = EspeakWorker.prototype.get_samplerate = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_get_samplerate_0(self);
};
  EspeakWorker.prototype['get_rate'] = EspeakWorker.prototype.get_rate = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_get_rate_0(self);
};
    EspeakWorker.prototype['set_rate'] = EspeakWorker.prototype.set_rate = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_EspeakWorker_set_rate_1(self, arg0);
};
  EspeakWorker.prototype['get_pitch'] = EspeakWorker.prototype.get_pitch = function() {
  var self = this.ptr;
  return _emscripten_bind_EspeakWorker_get_pitch_0(self);
};
    EspeakWorker.prototype['set_pitch'] = EspeakWorker.prototype.set_pitch = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _emscripten_bind_EspeakWorker_set_pitch_1(self, arg0);
};
  EspeakWorker.prototype['__destroy__'] = EspeakWorker.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_EspeakWorker___destroy___0(self);
};
(function() {
  function setupEnums() {
    

    // espeak_EVENT_TYPE

    Module['espeakEVENT_LIST_TERMINATED'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED();

    Module['espeakEVENT_WORD'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD();

    Module['espeakEVENT_SENTENCE'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE();

    Module['espeakEVENT_MARK'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK();

    Module['espeakEVENT_PLAY'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY();

    Module['espeakEVENT_END'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END();

    Module['espeakEVENT_MSG_TERMINATED'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED();

    Module['espeakEVENT_PHONEME'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME();

    Module['espeakEVENT_SAMPLERATE'] = _emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE();

  }
  if (Module['calledRun']) setupEnums();
  else addOnPreMain(setupEnums);
})();

EspeakWorker.prototype.listVoices = function() {
  var voices = [];
  var i;
  for (var voice = this.get_voices(i = 0); voice.ptr != 0; voice = this.get_voices(++i)) {
    var v = {
      name: voice.get_name(),
      identifier: voice.get_identifier(),
      languages: [],
    }

    var ii = 0;
    var byte = voice.get_languages(ii);

    function nullTerminatedString(offset) {
      var str = '';
      var index = offset;
      var b = voice.get_languages(index++);
      while (b != 0) {
        str += String.fromCharCode(b);
        b = voice.get_languages(index++);
      }

      return str;
    }

    while (byte != 0) {
      var lang = { priority: byte, name: nullTerminatedString(++ii) }
      v.languages.push(lang);
      ii += lang.name.length + 1;
      byte = voice.get_languages(ii);
    }

    voices.push(v);

  }
  return voices;
};

var eventTypes = [
  "list_terminated",
  "word",
  "sentence",
  "mark",
  "play",
  "end",
  "msg_terminated",
  "phoneme",
  "samplerate"
]

EspeakWorker.prototype.synth = function (aText, aCallback) {
  var eventStructSize = this.getSizeOfEventStruct_();
  function cb(ptr, length, events_pointer) {
    var data = new Float32Array(length*2);
    for (var i = 0; i < length; i++) {
      data[i*2] = Math.max(-1, Math.min(1, getValue(ptr + i*2, 'i16') / 32768));
      data[i*2+1] = data[i*2];
    }
    var events = [];
    var ptr = events_pointer;
    for (ev = wrapPointer(ptr, espeak_EVENT);
         ev.get_type() != Module.espeakEVENT_LIST_TERMINATED;
         ev = wrapPointer((ptr += eventStructSize), espeak_EVENT)) {
      events.push({
        type: eventTypes[ev.get_type()],
        text_position: ev.get_text_position(),
        word_length: ev.get_length(),
        audio_position: ev.get_audio_position()
      });
    }
    return aCallback(data, events) ? 1 : 0;
  }

  var fp = Runtime.addFunction(cb);
  this.synth_(aText, fp);
  Runtime.removeFunction(fp);
};

// Make this a worker

if (typeof WorkerGlobalScope !== 'undefined') {
  var espeak;

  Module.postRun.push(function () {
    espeak = new EspeakWorker();
    postMessage('ready');
  });

  onmessage = function(e) {
    if (!espeak) {
      throw "espeak not initialized";
    }
    var args = e.data.args;
    var message = { callback: e.data.callback, done: true };
    if (e.data.method == 'synth') {
      args.push(function(samples, events) {
        postMessage(
          { callback: e.data.callback,
            result: [samples.buffer, events] }, [samples.buffer]);
      });
    }
    message.result = [espeak[e.data.method].apply(espeak, args)];
    if (e.data.callback)
      postMessage(message);
  }
}

